
project_SPI_test.elf:     file format elf32-littlenios2
project_SPI_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001980c memsz 0x0001980c flags r-x
    LOAD off    0x0001a82c vaddr 0x0201982c paddr 0x0201b3a4 align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001cf1c vaddr 0x0201cf1c paddr 0x0201cf1c align 2**12
         filesz 0x00000000 memsz 0x000073f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019178  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  020193a8  020193a8  0001a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  0201982c  0201b3a4  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073f4  0201cf1c  0201cf1c  0001cf1c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_Nios_PI  00000000  00200000  00200000  0001c3a4  2**0
                  CONTENTS
  7 .sdram_controller 00000000  02024310  02024310  0001c3a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001c3a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010d0  00000000  00000000  0001c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e8bc  00000000  00000000  0001d498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b17e  00000000  00000000  0004bd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e5a1  00000000  00000000  00056ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003314  00000000  00000000  00065474  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004f09  00000000  00000000  00068788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017df0  00000000  00000000  0006d691  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00085484  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001910  00000000  00000000  00085498  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008b9ba  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0008b9c0  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008b9c3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008b9c4  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008b9c5  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008b9c9  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008b9cd  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008b9d1  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008b9da  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008b9e3  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0008b9ec  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0008b9f5  2**0
                  CONTENTS, READONLY
 30 .jdi          0000380b  00000000  00000000  0008ba34  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005203d  00000000  00000000  0008f23f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
020193a8 l    d  .rodata	00000000 .rodata
0201982c l    d  .rwdata	00000000 .rwdata
0201cf1c l    d  .bss	00000000 .bss
00200000 l    d  .mem_Nios_PI	00000000 .mem_Nios_PI
02024310 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../project_SPI_test_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0201982c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0201955a l     O .rodata	00000010 zeroes.4404
02005f48 l     F .text	000000bc __sbprintf
0201956a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02006158 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02007cb0 l     F .text	00000008 __fp_unlock
02007cc4 l     F .text	0000019c __sinit.part.1
02007e60 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
02019c70 l     O .rwdata	00000020 lc_ctype_charset
02019c50 l     O .rwdata	00000020 lc_message_charset
02019c90 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02019598 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200b2c0 l     F .text	000000fc __sprint_r.part.0
020196bc l     O .rodata	00000010 zeroes.4349
0200c8fc l     F .text	000000bc __sbprintf
020196cc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0200dff4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200e108 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200e134 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200e228 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200e310 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200e3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0200e5d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201b318 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0200e844 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201b31c l     O .rwdata	00000004 lockid
0201cf54 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0201b320 l     O .rwdata	00000004 lockid
0201cf5c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0201027c l     F .text	00000048 OS_InitMisc
020102c4 l     F .text	0000006c OS_InitRdyList
02010430 l     F .text	000000e4 OS_InitTCBList
0201019c l     F .text	000000e0 OS_InitEventList
02010330 l     F .text	00000080 OS_InitTaskIdle
020103b0 l     F .text	00000080 OS_InitTaskStat
020106a0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
020123b0 l     F .text	000000f4 OS_FlagTaskRdy
02012170 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02016f50 l     F .text	00000034 alt_dev_reg
0201a278 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020172c8 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0201756c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02017d48 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02017f88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
020183e8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02018548 l     F .text	0000003c alt_get_errno
02018584 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0201cfc0 g     O .bss	00000004 alt_instruction_exception_handler
0200a978 g     F .text	00000074 _mprec_log10
0201b36e g     O .rwdata	00000002 OSTaskNameSize
0200aa64 g     F .text	0000008c __any_on
0200ceb0 g     F .text	00000054 _isatty_r
020195a4 g     O .rodata	00000028 __mprec_tinytens
0200e514 g     F .text	000000bc alt_main
02003ae4 g     F .text	000000c0 _puts_r
02024210 g     O .bss	00000100 alt_irq
0200cf04 g     F .text	00000060 _lseek_r
02013698 g     F .text	000000d8 OS_MemInit
02000ce4 g     F .text	00000130 sqrt
0201b3a4 g       *ABS*	00000000 __flash_rwdata_start
02016ef0 g     F .text	00000060 OSTimeSet
0200dec4 g     F .text	00000088 .hidden __eqdf2
0200eef0 g     F .text	00000610 OSEventPendMulti
02024310 g       *ABS*	00000000 __alt_heap_start
02018bc0 g     F .text	00000024 OSTaskCreateHook
0201cfec g     O .bss	00002000 task1_stk
02003aa8 g     F .text	0000003c printf
0201b346 g     O .rwdata	00000002 OSMboxEn
0200f558 g     F .text	0000004c OSIntEnter
0200d11c g     F .text	0000009c _wcrtomb_r
0200b180 g     F .text	0000005c __sseek
02008010 g     F .text	00000010 __sinit
0200cfc4 g     F .text	00000140 __swbuf_r
0201b356 g     O .rwdata	00000002 OSQEn
02008ae4 g     F .text	0000007c _setlocale_r
02007e68 g     F .text	00000078 __sfmoreglue
0200ebc4 g     F .text	000000cc __malloc_unlock
02018c28 g     F .text	00000020 OSTaskStatHook
0201cf64 g     O .bss	00000001 OSLockNesting
0201b394 g     O .rwdata	00000002 OSDataSize
0201cf65 g     O .bss	00000001 OSRunning
020097b4 g     F .text	0000015c memmove
02018c68 g     F .text	00000020 OSInitHookBegin
0201b38c g     O .rwdata	00000002 OSTmrSize
02007ff8 g     F .text	00000018 _cleanup
02009a38 g     F .text	000000a8 _Balloc
0201cf68 g     O .bss	00000004 OSIdleCtr
020023bc g     F .text	000000dc .hidden __gtdf2
02018970 g     F .text	00000024 altera_nios2_gen2_irq_init
02018a40 g       .text	00000000 OSStartTsk
02003a68 g     F .text	00000010 __errno
020109d0 g     F .text	000002d4 OS_TCBInit
02000000 g     F .entry	0000000c __reset
00200000 g       *ABS*	00000000 __alt_mem_mem_Nios_PI
0201b392 g     O .rwdata	00000002 OSTmrWheelTblSize
02000020 g       *ABS*	00000000 __flash_exceptions_start
0201b332 g     O .rwdata	00000002 OSEventSize
0201cf6c g     O .bss	00000001 OSPrioHighRdy
0200ce54 g     F .text	0000005c _fstat_r
02018be4 g     F .text	00000024 OSTaskDelHook
0201cf40 g     O .bss	00000004 errno
0200b0fc g     F .text	00000008 __seofread
02018a20 g       .text	00000000 OSStartHighRdy
02015970 g     F .text	000001e4 OSTaskCreateExt
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller
02011cb8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0201b372 g     O .rwdata	00000002 OSTaskStatStkSize
02010e34 g     F .text	00000308 OSFlagAccept
02013cdc g     F .text	000000b8 OSQFlush
02013770 g     F .text	00000140 OSQAccept
0201cf4c g     O .bss	00000004 alt_argv
020232e4 g       *ABS*	00000000 _gp
020157c4 g     F .text	000001ac OSTaskCreate
020152d4 g     F .text	000004f0 OSTaskChangePrio
0201cf60 g     O .bss	00000004 alt_heapsem
02010ca4 g     F .text	00000190 OSDebugInit
02015b54 g     F .text	00000344 OSTaskDel
0201a0f8 g     O .rwdata	00000180 alt_fd_list
02020fec g     O .bss	00000370 OSFlagTbl
0200ff7c g     F .text	000000b8 OS_EventTaskRemove
02018cec g     F .text	00000090 alt_find_dev
0200966c g     F .text	00000148 memcpy
0201b35c g     O .rwdata	00000002 OSRdyTblSize
0201cf1c g     O .bss	00000004 MailBox3
02007cb8 g     F .text	0000000c _cleanup_r
02003774 g     F .text	000000dc .hidden __floatsidf
020184cc g     F .text	0000007c alt_io_redirect
02002498 g     F .text	000000f4 .hidden __ltdf2
020193a8 g       *ABS*	00000000 __DTOR_END__
02003ba4 g     F .text	00000014 puts
02018f78 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0200ec90 g     F .text	00000120 OSEventNameGet
0201b340 g     O .rwdata	00000002 OSFlagMax
0200109c g     F .text	00000074 __fpclassifyd
0200a8d4 g     F .text	000000a4 __ratio
0200f5a4 g     F .text	000000f8 OSIntExit
0200c8e0 g     F .text	0000001c __vfiprintf_internal
0201b37a g     O .rwdata	00000002 OSTCBSize
0201cf6d g     O .bss	00000001 OSPrioCur
020177c8 g     F .text	000002bc altera_avalon_jtag_uart_read
02003a78 g     F .text	00000030 _printf_r
020039ac g     F .text	00000064 .hidden __udivsi3
0200e264 g     F .text	000000ac isatty
0201b360 g     O .rwdata	00000002 OSStkWidth
020195f4 g     O .rodata	000000c8 __mprec_tens
0201b354 g     O .rwdata	00000002 OSPtrSize
02008b60 g     F .text	0000000c __locale_charset
0201b334 g     O .rwdata	00000002 OSEventTblSize
02018994 g       .text	00000000 OSCtxSw
0201cf3c g     O .bss	00000004 __malloc_top_pad
0201cf70 g     O .bss	00000004 OSTCBList
0201cf44 g     O .bss	00000004 alt_fd_list_lock
0201b2f0 g     O .rwdata	00000004 __mb_cur_max
02008b90 g     F .text	0000000c _localeconv_r
02009e6c g     F .text	0000003c __i2b
02008494 g     F .text	000004c8 __sfvwrite_r
0202135c g     O .bss	00000c30 OSMemTbl
0201cf74 g     O .bss	00000001 OSTickStepState
0200b054 g     F .text	00000054 _sbrk_r
0201b358 g     O .rwdata	00000002 OSQMax
02021f8c g     O .bss	00000800 OSTaskStatStk
020132d4 g     F .text	000000f0 OSMemNameGet
0201b338 g     O .rwdata	00000002 OSFlagEn
0200cf64 g     F .text	00000060 _read_r
0201b37e g     O .rwdata	00000002 OSTimeTickHookEn
0201418c g     F .text	00000168 OSQPost
020124a4 g     F .text	000000a4 OS_FlagUnlink
0201b310 g     O .rwdata	00000004 alt_max_fd
02010568 g     F .text	00000068 OS_MemCopy
020105d0 g     F .text	000000d0 OS_Sched
0200cb48 g     F .text	000000f0 _fclose_r
020131e4 g     F .text	000000f0 OSMemGet
02012f00 g     F .text	00000110 OSMboxQuery
02016180 g     F .text	000001b4 OSTaskNameSet
02007c80 g     F .text	00000030 fflush
0201cf38 g     O .bss	00000004 __malloc_max_sbrked_mem
0201cf78 g     O .bss	00000004 OSCtxSwCtr
02018c48 g     F .text	00000020 OSTimeTickHook
0201b342 g     O .rwdata	00000002 OSFlagNameSize
02010034 g     F .text	00000100 OS_EventTaskRemoveMulti
02001140 g     F .text	000008ac .hidden __adddf3
0200fe2c g     F .text	00000150 OS_EventTaskWaitMulti
0200a67c g     F .text	0000010c __b2d
0201b35a g     O .rwdata	00000002 OSQSize
0200d900 g     F .text	000005c4 .hidden __umoddi3
0200e438 g     F .text	000000dc lseek
02014c3c g     F .text	0000020c OSSemPend
0201b2e4 g     O .rwdata	00000004 __fdlib_version
0201b2e8 g     O .rwdata	00000004 _global_impure_ptr
0200aaf0 g     F .text	00000564 _realloc_r
0201b344 g     O .rwdata	00000002 OSLowestPrio
02024310 g       *ABS*	00000000 __bss_end
020182f8 g     F .text	000000f0 alt_iic_isr_register
02018cc8 g     F .text	00000024 OSTCBInitHook
0201b38a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
02018868 g     F .text	00000108 alt_tick
02012c94 g     F .text	00000110 OSMboxPost
0200d304 g     F .text	000005fc .hidden __udivdi3
0200cdb0 g     F .text	00000024 _fputwc_r
0201b32c g     O .rwdata	00000002 OSEventEn
020195cc g     O .rodata	00000028 __mprec_bigtens
02009c50 g     F .text	00000104 __s2b
0201b386 g     O .rwdata	00000002 OSTmrCfgNameSize
0200df4c g     F .text	000000a8 .hidden __floatunsidf
0200a3bc g     F .text	00000060 __mcmp
02008030 g     F .text	00000018 __fp_lock_all
020182ac g     F .text	0000004c alt_ic_irq_enabled
020122d0 g     F .text	000000e0 OS_FlagInit
020187cc g     F .text	0000009c alt_alarm_stop
0201b368 g     O .rwdata	00000002 OSTaskIdleStkSize
0201cfb4 g     O .bss	00000004 alt_irq_active
02014874 g     F .text	000000b0 OSSemAccept
020134d8 g     F .text	000000d8 OSMemPut
02013010 g     F .text	000001d4 OSMemCreate
0201cf7c g     O .bss	00000004 OSIdleCtrMax
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201a0d0 g     O .rwdata	00000028 alt_dev_null
0201b37c g     O .rwdata	00000002 OSTicksPerSec
02018994 g       .text	00000000 OSIntCtxSw
02017f68 g     F .text	00000020 alt_dcache_flush_all
02009d54 g     F .text	00000068 __hi0bits
020036f4 g     F .text	00000080 .hidden __fixdfsi
0201cf80 g     O .bss	00000004 OSTCBFreeList
0201b3a4 g       *ABS*	00000000 __ram_rwdata_end
02014e48 g     F .text	0000016c OSSemPendAbort
0201b308 g     O .rwdata	00000008 alt_dev_list
0200e880 g     F .text	00000100 write
0201b380 g     O .rwdata	00000002 OSVersionNbr
0201982c g       *ABS*	00000000 __ram_rodata_end
0200e170 g     F .text	000000b8 fstat
02002498 g     F .text	000000f4 .hidden __ledf2
0201b328 g     O .rwdata	00000004 OSEndiannessTest
0200a134 g     F .text	00000140 __pow5mult
0200b3d4 g     F .text	0000150c ___vfiprintf_internal_r
0201cf30 g     O .bss	00000004 __nlocale_changed
02003a10 g     F .text	00000058 .hidden __umodsi3
0201b33a g     O .rwdata	00000002 OSFlagGrpSize
02024310 g       *ABS*	00000000 end
02017180 g     F .text	00000148 altera_avalon_jtag_uart_init
02010838 g     F .text	000000cc OS_TaskStat
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
020193a8 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02017dc0 g     F .text	0000007c alt_avalon_timer_sc_init
02003850 g     F .text	00000064 .hidden __clzsi2
02017a84 g     F .text	000002c4 altera_avalon_jtag_uart_write
02008020 g     F .text	00000004 __sfp_lock_acquire
02009588 g     F .text	000000e4 memchr
02010514 g     F .text	00000054 OS_MemClr
02003c50 g     F .text	000022dc ___vfprintf_internal_r
02018a64 g     F .text	0000015c OSTaskStkInit
0200026c g     F .text	00000318 task1
02008184 g     F .text	00000310 _free_r
02008b6c g     F .text	00000010 __locale_mb_cur_max
0200fb84 g     F .text	00000198 OS_EventTaskRdy
020191f4 g     F .text	00000180 __call_exitprocs
0201cf84 g     O .bss	00000001 OSCPUUsage
0201cf2c g     O .bss	00000004 __mlocale_changed
0201b2f4 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
02000584 g     F .text	0000068c task2
0201cfb8 g     O .bss	00000004 _alt_tick_rate
02013d94 g     F .text	0000028c OSQPend
02016a40 g     F .text	00000104 OSTimeDly
0200a274 g     F .text	00000148 __lshift
0201cfbc g     O .bss	00000004 _alt_nticks
0200e60c g     F .text	00000104 read
02016fbc g     F .text	00000060 alt_sys_init
020190dc g     F .text	00000118 __register_exitproc
0201cf85 g     O .bss	00000001 OSTaskCtr
0201cf20 g     O .bss	00000004 MailBox2
02016b44 g     F .text	0000017c OSTimeDlyHMSM
02009ea8 g     F .text	0000028c __multiply
02017670 g     F .text	00000068 altera_avalon_jtag_uart_close
02001118 g     F .text	00000028 .hidden __mulsi3
0201982c g       *ABS*	00000000 __ram_rwdata_start
020193a8 g       *ABS*	00000000 __ram_rodata_start
0201cfc4 g     O .bss	00000028 __malloc_current_mallinfo
0201b32e g     O .rwdata	00000002 OSEventMax
0200a788 g     F .text	0000014c __d2b
02014fb4 g     F .text	00000110 OSSemPost
0200f728 g     F .text	000000dc OSSchedUnlock
0201701c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02018e84 g     F .text	000000f4 alt_get_fd
0201cf88 g     O .bss	00000004 OSMemFreeList
0200f874 g     F .text	000000b0 OSStatInit
020120ac g     F .text	000000c4 OSFlagQuery
0201b364 g     O .rwdata	00000002 OSTaskCreateExtEn
0200ca18 g     F .text	00000054 _close_r
02019060 g     F .text	0000007c memcmp
0200fb64 g     F .text	00000020 OS_Dummy
020170dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02024310 g       *ABS*	00000000 __alt_stack_base
0201712c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02006004 g     F .text	00000154 __swsetup_r
0202278c g     O .bss	000001e0 OSQTbl
020019ec g     F .text	000009d0 .hidden __divdf3
02007ee0 g     F .text	00000118 __sfp
0200a9ec g     F .text	00000078 __copybits
02019cc8 g     O .rwdata	00000408 __malloc_av_
0200802c g     F .text	00000004 __sinit_lock_release
0201cf8c g     O .bss	00000004 OSTCBHighRdy
0200258c g     F .text	0000086c .hidden __muldf3
0200b0a8 g     F .text	00000054 __sread
0201cf90 g     O .bss	00000004 OSQFreeList
02018d7c g     F .text	00000108 alt_find_file
02017fc4 g     F .text	000000a4 alt_dev_llist_insert
0200eaa4 g     F .text	00000120 __malloc_lock
0200e794 g     F .text	000000b0 sbrk
0200edb0 g     F .text	00000140 OSEventNameSet
02007c24 g     F .text	0000005c _fflush_r
0200ca6c g     F .text	000000dc _calloc_r
0201cf94 g     O .bss	00000001 OSRdyGrp
0201cf1c g       *ABS*	00000000 __bss_start
02009910 g     F .text	00000128 memset
02000c10 g     F .text	000000d4 main
0201cf50 g     O .bss	00000004 alt_envp
0201cf34 g     O .bss	00000004 __malloc_max_total_mem
0201707c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200d104 g     F .text	00000018 __swbuf
020196f8 g     O .rodata	00000100 OSUnMapTbl
0201b35e g     O .rwdata	00000002 OSSemEn
02011d18 g     F .text	00000394 OSFlagPost
0200b1dc g     F .text	00000008 __sclose
02001110 g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
0200cc38 g     F .text	00000014 fclose
0200fd1c g     F .text	00000110 OS_EventTaskWait
0201efec g     O .bss	00002000 task2_stk
02010904 g     F .text	000000cc OS_TaskStatStkChk
02015e98 g     F .text	00000150 OSTaskDelReq
02006380 g     F .text	00001688 _dtoa_r
02008d7c g     F .text	0000080c _malloc_r
0200d278 g     F .text	00000030 __ascii_wctomb
0201b314 g     O .rwdata	00000004 alt_errno
0200f804 g     F .text	00000070 OSStart
0200ea44 g     F .text	00000060 __env_unlock
0200895c g     F .text	000000c4 _fwalk
02016334 g     F .text	000001d4 OSTaskResume
020135b0 g     F .text	000000e8 OSMemQuery
0201b370 g     O .rwdata	00000002 OSTaskStatEn
0201b34a g     O .rwdata	00000002 OSMemMax
020142f4 g     F .text	00000170 OSQPostFront
020038b4 g     F .text	00000084 .hidden __divsi3
0201cf95 g     O .bss	00000003 OSRdyTbl
0201b324 g     O .rwdata	00000002 OSDebugEn
02008060 g     F .text	00000124 _malloc_trim_r
020193a8 g       *ABS*	00000000 __CTOR_END__
0201b33c g     O .rwdata	00000002 OSFlagNodeSize
0201b384 g     O .rwdata	00000002 OSTmrCfgMax
0200b1e4 g     F .text	000000dc strcmp
020138b0 g     F .text	000001ac OSQCreate
02015fe8 g     F .text	00000198 OSTaskNameGet
020193a8 g       *ABS*	00000000 __flash_rodata_start
02014464 g     F .text	0000020c OSQPostOpt
0200f924 g     F .text	00000220 OSTimeTick
0201b36c g     O .rwdata	00000002 OSTaskMax
020193a8 g       *ABS*	00000000 __DTOR_LIST__
02014924 g     F .text	000000d8 OSSemCreate
0201b390 g     O .rwdata	00000002 OSTmrWheelSize
0200dec4 g     F .text	00000088 .hidden __nedf2
0201b366 g     O .rwdata	00000002 OSTaskDelEn
020150c4 g     F .text	00000110 OSSemQuery
02013a5c g     F .text	00000280 OSQDel
02014020 g     F .text	0000016c OSQPendAbort
02016f84 g     F .text	00000038 alt_irq_init
0200e710 g     F .text	00000084 alt_release_fd
0201940d g     O .rodata	00000100 .hidden __clz_tab
0201cf28 g     O .bss	00000004 _PathLocale
02019014 g     F .text	00000014 atexit
0200c9b8 g     F .text	00000060 _write_r
0200f69c g     F .text	0000008c OSSchedLock
02008b9c g     F .text	00000018 setlocale
0201113c g     F .text	00000108 OSFlagCreate
0201b2ec g     O .rwdata	00000004 _impure_ptr
0201cf48 g     O .bss	00000004 alt_argc
02007a08 g     F .text	0000021c __sflush_r
020180c8 g     F .text	00000060 _do_dtors
02008b88 g     F .text	00000008 __locale_cjk_lang
0201b336 g     O .rwdata	00000002 OSEventMultiEn
02011244 g     F .text	00000248 OSFlagDel
0201cf98 g     O .bss	00000004 OSEventFreeList
02000020 g       .exceptions	00000000 alt_irq_entry
02012b28 g     F .text	0000016c OSMboxPendAbort
0200a618 g     F .text	00000064 __ulp
02011700 g     F .text	000005b8 OSFlagPend
0201b382 g     O .rwdata	00000002 OSTmrEn
02008048 g     F .text	00000018 __fp_unlock_all
0201b300 g     O .rwdata	00000008 alt_fs_list
02010714 g     F .text	00000074 OS_StrCopy
0201b34c g     O .rwdata	00000002 OSMemNameSize
02018c88 g     F .text	00000020 OSInitHookEnd
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201b378 g     O .rwdata	00000002 OSTCBPrioTblMax
02008bb4 g     F .text	0000000c localeconv
02000e14 g     F .text	00000288 __ieee754_sqrt
0201b374 g     O .rwdata	00000002 OSTaskStatStkChkEn
020125e0 g     F .text	000000d4 OSMboxCreate
02018148 g     F .text	00000050 alt_ic_isr_register
0201b348 g     O .rwdata	00000002 OSMemEn
0201b352 g     O .rwdata	00000002 OSMutexEn
0201b3a4 g       *ABS*	00000000 _edata
02024310 g       *ABS*	00000000 _end
0201cf9c g     O .bss	00000001 OSIntNesting
0200cc4c g     F .text	00000164 __fputwc
02000230 g       *ABS*	00000000 __ram_exceptions_end
020176d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02016cc0 g     F .text	000001d4 OSTimeDlyResume
020115b4 g     F .text	0000014c OSFlagNameSet
020128f4 g     F .text	00000234 OSMboxPend
02016508 g     F .text	000001c0 OSTaskStkChk
02018220 g     F .text	0000008c alt_ic_irq_disable
0201b34e g     O .rwdata	00000002 OSMemSize
0200b104 g     F .text	0000007c __swrite
0201b2f8 g     O .rwdata	00000004 __malloc_trim_threshold
02008b7c g     F .text	0000000c __locale_msgcharset
0201cfa0 g     O .bss	00000004 OSTCBCur
02019028 g     F .text	00000038 exit
0201b350 g     O .rwdata	00000002 OSMemTblSize
02008a20 g     F .text	000000c4 _fwalk_reent
0201cf24 g     O .bss	00000004 MailBox1
0200a41c g     F .text	000001fc __mdiff
02003938 g     F .text	00000074 .hidden __modsi3
02012548 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02008024 g     F .text	00000004 __sfp_lock_release
0200f500 g     F .text	00000058 OSInit
020168ac g     F .text	00000124 OSTaskQuery
020147cc g     F .text	000000a8 OS_QInit
02010788 g     F .text	00000054 OS_StrLen
020133c4 g     F .text	00000114 OSMemNameSet
0201b36a g     O .rwdata	00000002 OSTaskProfileEn
0201cfa4 g     O .bss	00000004 OSTime
0202296c g     O .bss	00000800 OSTaskIdleStk
02019374 g     F .text	00000034 _exit
02012da4 g     F .text	0000015c OSMboxPostOpt
02017e3c g     F .text	0000012c alt_alarm_start
0201148c g     F .text	00000128 OSFlagNameGet
02016e94 g     F .text	0000005c OSTimeGet
02008bc0 g     F .text	000001bc __smakebuf_r
02003bb8 g     F .text	00000098 strlen
02018c08 g     F .text	00000020 OSTaskSwHook
02018670 g     F .text	0000015c open
0202316c g     O .bss	00000b40 OSEventTbl
020023bc g     F .text	000000dc .hidden __gedf2
02023cac g     O .bss	00000510 OSTCBTbl
020151d4 g     F .text	00000100 OSSemSet
0201b2fc g     O .rwdata	00000004 __wctomb
0200b3bc g     F .text	00000018 __sprint_r
02018128 g     F .text	00000020 alt_icache_flush_all
0201b398 g     O .rwdata	00000004 alt_priority_mask
020149fc g     F .text	00000240 OSSemDel
0201cfa8 g     O .bss	00000004 OSFlagFreeList
02018198 g     F .text	00000088 alt_ic_irq_enable
0201b330 g     O .rwdata	00000002 OSEventNameSize
020126b4 g     F .text	00000240 OSMboxDel
02005f2c g     F .text	0000001c __vfprintf_internal
0201cfac g     O .bss	00000001 OSStatRdy
020241bc g     O .bss	00000054 OSTCBPrioTbl
0200d2a8 g     F .text	0000005c _wctomb_r
0200e980 g     F .text	000000c4 __env_lock
0201b376 g     O .rwdata	00000002 OSTaskSwHookEn
02002df8 g     F .text	000008fc .hidden __subdf3
02009dbc g     F .text	000000b0 __lo0bits
0201b39c g     O .rwdata	00000008 alt_alarm_list
0201b33e g     O .rwdata	00000002 OSFlagWidth
02018068 g     F .text	00000060 _do_ctors
0200d1b8 g     F .text	000000c0 wcrtomb
0200e030 g     F .text	000000d8 close
0201cf58 g     O .bss	00000004 alt_envsem
0201cfb0 g     O .bss	00000004 OSIdleCtrRun
0200fb44 g     F .text	00000020 OSVersion
0201b388 g     O .rwdata	00000002 OSTmrCfgWheelSize
0200e378 g     F .text	00000084 alt_load
020169d0 g     F .text	00000070 OS_TaskStkClr
0201b362 g     O .rwdata	00000002 OSTaskCreateEn
02010134 g     F .text	00000068 OS_EventWaitListInit
0200cdd4 g     F .text	00000080 fputwc
02018ca8 g     F .text	00000020 OSTaskIdleHook
02008028 g     F .text	00000004 __sinit_lock_acquire
02009b08 g     F .text	00000148 __multadd
020166c8 g     F .text	000001e4 OSTaskSuspend
02009ae0 g     F .text	00000028 _Bfree
020107dc g     F .text	0000005c OS_TaskIdle
0201b38e g     O .rwdata	00000002 OSTmrTblSize
02014670 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	200f5580 	call	200f558 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080b4 	movhi	r2,514
 2000140:	10908404 	addi	r2,r2,16912
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080b4 	movhi	r2,514
 2000158:	10908404 	addi	r2,r2,16912
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	200f5a40 	call	200f5a4 <OSIntExit>
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a73717 	ldw	r2,-25380(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a73717 	ldw	r2,-25380(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 200023c:	d68cb914 	ori	gp,gp,13028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10b3c714 	ori	r2,r2,53020

    movhi r3, %hi(__bss_end)
 2000248:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 200024c:	18d0c414 	ori	r3,r3,17168

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	200e3780 	call	200e378 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	200e5140 	call	200e514 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <alt_after_alt_main>

0200026c <task1>:
OS_EVENT *MailBox2;
OS_EVENT *MailBox3;

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 200026c:	deffe304 	addi	sp,sp,-116
 2000270:	dfc01c15 	stw	ra,112(sp)
 2000274:	df001b15 	stw	fp,108(sp)
 2000278:	dc001a15 	stw	r16,104(sp)
 200027c:	df001b04 	addi	fp,sp,108
 2000280:	e13ffe15 	stw	r4,-8(fp)
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 2000284:	008000b4 	movhi	r2,2
 2000288:	e0bfee15 	stw	r2,-72(fp)
	int count_old = 0;
 200028c:	e03fef15 	stw	zero,-68(fp)
	int count = 0;
 2000290:	e03fe615 	stw	zero,-104(fp)

	int x1_gesture_start, x1_gesture_stop, x2_gesture_start, x2_gesture_stop ;
	int y1_gesture_start, y1_gesture_stop, y2_gesture_start, y2_gesture_stop;

	int gesture_detected = 0;
 2000294:	e03fed15 	stw	zero,-76(fp)

	while (1){
			count_old = count;
 2000298:	e0bfe617 	ldw	r2,-104(fp)
 200029c:	e0bfef15 	stw	r2,-68(fp)
			count = *(MTL_controller + 10); // récupère le nombre de doigts présent sur l'écran
 20002a0:	e0bfee17 	ldw	r2,-72(fp)
 20002a4:	10800a17 	ldw	r2,40(r2)
 20002a8:	e0bfe615 	stw	r2,-104(fp)
			//printf("count : %d\n", count);
			//OSTimeDlyHMSM(0,0,0,75);
			int pos1 = *(MTL_controller + 11);
 20002ac:	e0bfee17 	ldw	r2,-72(fp)
 20002b0:	10800b17 	ldw	r2,44(r2)
 20002b4:	e0bff015 	stw	r2,-64(fp)
			//printf("pos1 : (%d, %d)\n", pos1 & 0x0003FF, pos1 >> 10);
			//OSTimeDlyHMSM(0,0,0,100);
			int pos2 = *(MTL_controller + 12);
 20002b8:	e0bfee17 	ldw	r2,-72(fp)
 20002bc:	10800c17 	ldw	r2,48(r2)
 20002c0:	e0bff115 	stw	r2,-60(fp)
			if(count_old == 1 && count == 2) // si on passe de 1 à deux doigts
 20002c4:	e0bfef17 	ldw	r2,-68(fp)
 20002c8:	10800058 	cmpnei	r2,r2,1
 20002cc:	1000121e 	bne	r2,zero,2000318 <task1+0xac>
 20002d0:	e0bfe617 	ldw	r2,-104(fp)
 20002d4:	10800098 	cmpnei	r2,r2,2
 20002d8:	10000f1e 	bne	r2,zero,2000318 <task1+0xac>
			{
				printf("start gesture\n");
 20002dc:	010080b4 	movhi	r4,514
 20002e0:	2124ea04 	addi	r4,r4,-27736
 20002e4:	2003ba40 	call	2003ba4 <puts>
				x1_gesture_start = pos1 & 0x0003FF;
 20002e8:	e0bff017 	ldw	r2,-64(fp)
 20002ec:	1080ffcc 	andi	r2,r2,1023
 20002f0:	e0bfe715 	stw	r2,-100(fp)
				y1_gesture_start = pos1 >> 10;
 20002f4:	e0bff017 	ldw	r2,-64(fp)
 20002f8:	1005d2ba 	srai	r2,r2,10
 20002fc:	e0bfea15 	stw	r2,-88(fp)

				x2_gesture_start = pos2 & 0x0003FF;
 2000300:	e0bff117 	ldw	r2,-60(fp)
 2000304:	1080ffcc 	andi	r2,r2,1023
 2000308:	e0bfe815 	stw	r2,-96(fp)
				y2_gesture_start = pos2 >> 10;
 200030c:	e0bff117 	ldw	r2,-60(fp)
 2000310:	1005d2ba 	srai	r2,r2,10
 2000314:	e0bfeb15 	stw	r2,-84(fp)
			}
			if(count_old == 2 && count == 1) // si on pass de 2 à 1 doigt
 2000318:	e0bfef17 	ldw	r2,-68(fp)
 200031c:	10800098 	cmpnei	r2,r2,2
 2000320:	1000261e 	bne	r2,zero,20003bc <task1+0x150>
 2000324:	e0bfe617 	ldw	r2,-104(fp)
 2000328:	10800058 	cmpnei	r2,r2,1
 200032c:	1000231e 	bne	r2,zero,20003bc <task1+0x150>
			{
				printf("stop gesture\n");
 2000330:	010080b4 	movhi	r4,514
 2000334:	2124ee04 	addi	r4,r4,-27720
 2000338:	2003ba40 	call	2003ba4 <puts>
				x1_gesture_stop = pos1 & 0x0003FF;
 200033c:	e0bff017 	ldw	r2,-64(fp)
 2000340:	1080ffcc 	andi	r2,r2,1023
 2000344:	e0bff215 	stw	r2,-56(fp)
				y1_gesture_stop = pos1 >> 10;
 2000348:	e0bff017 	ldw	r2,-64(fp)
 200034c:	1005d2ba 	srai	r2,r2,10
 2000350:	e0bff315 	stw	r2,-52(fp)

				x2_gesture_stop = pos2 & 0x0003FF;
 2000354:	e0bff117 	ldw	r2,-60(fp)
 2000358:	1080ffcc 	andi	r2,r2,1023
 200035c:	e0bfe915 	stw	r2,-92(fp)
				y2_gesture_stop = pos2 >> 10;
 2000360:	e0bff117 	ldw	r2,-60(fp)
 2000364:	1005d2ba 	srai	r2,r2,10
 2000368:	e0bfec15 	stw	r2,-80(fp)
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 200036c:	e0bfe717 	ldw	r2,-100(fp)
 2000370:	10bff884 	addi	r2,r2,-30
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 2000374:	e0fff217 	ldw	r3,-56(fp)
 2000378:	18800e16 	blt	r3,r2,20003b4 <task1+0x148>
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 200037c:	e0bfe717 	ldw	r2,-100(fp)
 2000380:	10c00784 	addi	r3,r2,30
 2000384:	e0bff217 	ldw	r2,-56(fp)
 2000388:	18800a16 	blt	r3,r2,20003b4 <task1+0x148>
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
 200038c:	e0bfea17 	ldw	r2,-88(fp)
 2000390:	10bff884 	addi	r2,r2,-30
 2000394:	e0fff317 	ldw	r3,-52(fp)
 2000398:	18800616 	blt	r3,r2,20003b4 <task1+0x148>
 200039c:	e0bfea17 	ldw	r2,-88(fp)
 20003a0:	10c00784 	addi	r3,r2,30
 20003a4:	e0bff317 	ldw	r2,-52(fp)
 20003a8:	18800216 	blt	r3,r2,20003b4 <task1+0x148>
 20003ac:	00800044 	movi	r2,1
 20003b0:	00000106 	br	20003b8 <task1+0x14c>
 20003b4:	0005883a 	mov	r2,zero
				x1_gesture_stop = pos1 & 0x0003FF;
				y1_gesture_stop = pos1 >> 10;

				x2_gesture_stop = pos2 & 0x0003FF;
				y2_gesture_stop = pos2 >> 10;
				gesture_detected =     (x1_gesture_start -30 <= x1_gesture_stop && x1_gesture_stop <= x1_gesture_start + 30)
 20003b8:	e0bfed15 	stw	r2,-76(fp)
									&& (y1_gesture_start -30 <= y1_gesture_stop && y1_gesture_stop <= y1_gesture_start + 30);
			}

			//m =(y2_gesture_stop-y1_geture_start)/(x2_gesture_stop-x1_gesture_start);
	        //p = (y1_geture_start-(m*x1_gesture_start));
			*(MTL_controller + 1) = (y1_gesture_start << 10) + x1_gesture_start;
 20003bc:	e0bfee17 	ldw	r2,-72(fp)
 20003c0:	10800104 	addi	r2,r2,4
 20003c4:	e0ffea17 	ldw	r3,-88(fp)
 20003c8:	180892ba 	slli	r4,r3,10
 20003cc:	e0ffe717 	ldw	r3,-100(fp)
 20003d0:	20c7883a 	add	r3,r4,r3
 20003d4:	10c00015 	stw	r3,0(r2)
			*(MTL_controller + 2) = (y2_gesture_start << 10) + x2_gesture_start;
 20003d8:	e0bfee17 	ldw	r2,-72(fp)
 20003dc:	10800204 	addi	r2,r2,8
 20003e0:	e0ffeb17 	ldw	r3,-84(fp)
 20003e4:	180892ba 	slli	r4,r3,10
 20003e8:	e0ffe817 	ldw	r3,-96(fp)
 20003ec:	20c7883a 	add	r3,r4,r3
 20003f0:	10c00015 	stw	r3,0(r2)
			*(MTL_controller + 3) = (y2_gesture_stop << 10) + x2_gesture_stop;
 20003f4:	e0bfee17 	ldw	r2,-72(fp)
 20003f8:	10800304 	addi	r2,r2,12
 20003fc:	e0ffec17 	ldw	r3,-80(fp)
 2000400:	180892ba 	slli	r4,r3,10
 2000404:	e0ffe917 	ldw	r3,-92(fp)
 2000408:	20c7883a 	add	r3,r4,r3
 200040c:	10c00015 	stw	r3,0(r2)

			if(gesture_detected){
 2000410:	e0bfed17 	ldw	r2,-76(fp)
 2000414:	10005526 	beq	r2,zero,200056c <task1+0x300>
				int x_dir = (x2_gesture_stop - x1_gesture_start);
 2000418:	e0ffe917 	ldw	r3,-92(fp)
 200041c:	e0bfe717 	ldw	r2,-100(fp)
 2000420:	1885c83a 	sub	r2,r3,r2
 2000424:	e0bff415 	stw	r2,-48(fp)
				int y_dir = (y2_gesture_stop - y1_gesture_start);
 2000428:	e0ffec17 	ldw	r3,-80(fp)
 200042c:	e0bfea17 	ldw	r2,-88(fp)
 2000430:	1885c83a 	sub	r2,r3,r2
 2000434:	e0bff515 	stw	r2,-44(fp)

				double l = sqrt(x_dir*x_dir + y_dir*y_dir);
 2000438:	e17ff417 	ldw	r5,-48(fp)
 200043c:	e13ff417 	ldw	r4,-48(fp)
 2000440:	20011180 	call	2001118 <__mulsi3>
 2000444:	1021883a 	mov	r16,r2
 2000448:	e17ff517 	ldw	r5,-44(fp)
 200044c:	e13ff517 	ldw	r4,-44(fp)
 2000450:	20011180 	call	2001118 <__mulsi3>
 2000454:	8085883a 	add	r2,r16,r2
 2000458:	1009883a 	mov	r4,r2
 200045c:	20037740 	call	2003774 <__floatsidf>
 2000460:	100b883a 	mov	r5,r2
 2000464:	180d883a 	mov	r6,r3
 2000468:	2809883a 	mov	r4,r5
 200046c:	300b883a 	mov	r5,r6
 2000470:	2000ce40 	call	2000ce4 <sqrt>
 2000474:	e0bff615 	stw	r2,-40(fp)
 2000478:	e0fff715 	stw	r3,-36(fp)

				double vector_x = x_dir/l;
 200047c:	e13ff417 	ldw	r4,-48(fp)
 2000480:	20037740 	call	2003774 <__floatsidf>
 2000484:	1011883a 	mov	r8,r2
 2000488:	1813883a 	mov	r9,r3
 200048c:	e1bff617 	ldw	r6,-40(fp)
 2000490:	e1fff717 	ldw	r7,-36(fp)
 2000494:	4009883a 	mov	r4,r8
 2000498:	480b883a 	mov	r5,r9
 200049c:	20019ec0 	call	20019ec <__divdf3>
 20004a0:	1009883a 	mov	r4,r2
 20004a4:	180b883a 	mov	r5,r3
 20004a8:	2005883a 	mov	r2,r4
 20004ac:	2807883a 	mov	r3,r5
 20004b0:	e0bff815 	stw	r2,-32(fp)
 20004b4:	e0fff915 	stw	r3,-28(fp)
				double vector_y = y_dir/l;
 20004b8:	e13ff517 	ldw	r4,-44(fp)
 20004bc:	20037740 	call	2003774 <__floatsidf>
 20004c0:	1011883a 	mov	r8,r2
 20004c4:	1813883a 	mov	r9,r3
 20004c8:	e1bff617 	ldw	r6,-40(fp)
 20004cc:	e1fff717 	ldw	r7,-36(fp)
 20004d0:	4009883a 	mov	r4,r8
 20004d4:	480b883a 	mov	r5,r9
 20004d8:	20019ec0 	call	20019ec <__divdf3>
 20004dc:	1009883a 	mov	r4,r2
 20004e0:	180b883a 	mov	r5,r3
 20004e4:	2005883a 	mov	r2,r4
 20004e8:	2807883a 	mov	r3,r5
 20004ec:	e0bffa15 	stw	r2,-24(fp)
 20004f0:	e0fffb15 	stw	r3,-20(fp)

				double speed = 200;
 20004f4:	e03ffc15 	stw	zero,-16(fp)
 20004f8:	00901a74 	movhi	r2,16489
 20004fc:	e0bffd15 	stw	r2,-12(fp)

				printf("tir : (%.2f, %.2f)\n", vector_x, vector_y);
 2000500:	e23ff817 	ldw	r8,-32(fp)
 2000504:	e27ff917 	ldw	r9,-28(fp)
 2000508:	e0bffa17 	ldw	r2,-24(fp)
 200050c:	e0fffb17 	ldw	r3,-20(fp)
 2000510:	d8c00015 	stw	r3,0(sp)
 2000514:	100f883a 	mov	r7,r2
 2000518:	400b883a 	mov	r5,r8
 200051c:	480d883a 	mov	r6,r9
 2000520:	010080b4 	movhi	r4,514
 2000524:	2124f204 	addi	r4,r4,-27704
 2000528:	2003aa80 	call	2003aa8 <printf>

				OSMboxPost(MailBox1, &vector_x);
 200052c:	d0a71017 	ldw	r2,-25536(gp)
 2000530:	e0fff804 	addi	r3,fp,-32
 2000534:	180b883a 	mov	r5,r3
 2000538:	1009883a 	mov	r4,r2
 200053c:	2012c940 	call	2012c94 <OSMboxPost>
				OSMboxPost(MailBox2, &vector_y);
 2000540:	d0a70f17 	ldw	r2,-25540(gp)
 2000544:	e0fffa04 	addi	r3,fp,-24
 2000548:	180b883a 	mov	r5,r3
 200054c:	1009883a 	mov	r4,r2
 2000550:	2012c940 	call	2012c94 <OSMboxPost>
				OSMboxPost(MailBox3, &speed);
 2000554:	d0a70e17 	ldw	r2,-25544(gp)
 2000558:	e0fffc04 	addi	r3,fp,-16
 200055c:	180b883a 	mov	r5,r3
 2000560:	1009883a 	mov	r4,r2
 2000564:	2012c940 	call	2012c94 <OSMboxPost>
				gesture_detected = 0;
 2000568:	e03fed15 	stw	zero,-76(fp)
			}

		OSTimeDlyHMSM(0,0,0,10);
 200056c:	01c00284 	movi	r7,10
 2000570:	000d883a 	mov	r6,zero
 2000574:	000b883a 	mov	r5,zero
 2000578:	0009883a 	mov	r4,zero
 200057c:	2016b440 	call	2016b44 <OSTimeDlyHMSM>
	}
 2000580:	003f4506 	br	2000298 <task1+0x2c>

02000584 <task2>:
}

void task2 (void *pdata)
{
 2000584:	deffcc04 	addi	sp,sp,-208
 2000588:	dfc03315 	stw	ra,204(sp)
 200058c:	df003215 	stw	fp,200(sp)
 2000590:	dd403115 	stw	r21,196(sp)
 2000594:	dd003015 	stw	r20,192(sp)
 2000598:	dcc02f15 	stw	r19,188(sp)
 200059c:	dc802e15 	stw	r18,184(sp)
 20005a0:	dc402d15 	stw	r17,180(sp)
 20005a4:	dc002c15 	stw	r16,176(sp)
 20005a8:	df003204 	addi	fp,sp,200
 20005ac:	e13ff915 	stw	r4,-28(fp)
	volatile int * MTL_controller = (int *) MTL_IP_BASE;
 20005b0:	008000b4 	movhi	r2,2
 20005b4:	e0bfd915 	stw	r2,-156(fp)
	volatile int * mem = (int *) MEM_NIOS_PI_BASE+6;
 20005b8:	00800834 	movhi	r2,32
 20005bc:	10800604 	addi	r2,r2,24
 20005c0:	e0bfda15 	stw	r2,-152(fp)
	*mem=19	;
 20005c4:	e0bfda17 	ldw	r2,-152(fp)
 20005c8:	00c004c4 	movi	r3,19
 20005cc:	10c00015 	stw	r3,0(r2)


	int x4 = 64;
 20005d0:	00801004 	movi	r2,64
 20005d4:	e0bfdb15 	stw	r2,-148(fp)
	int y4 = 64;
 20005d8:	00801004 	movi	r2,64
 20005dc:	e0bfdc15 	stw	r2,-144(fp)
	int x5 = 0;//128;
 20005e0:	e03fdd15 	stw	zero,-140(fp)
	int y5 = 0;//64;
 20005e4:	e03fde15 	stw	zero,-136(fp)
	int x6 = 0;//196;
 20005e8:	e03fdf15 	stw	zero,-132(fp)
	int y6 = 0;//64;
 20005ec:	e03fe015 	stw	zero,-128(fp)
	int x7 = 0;//256;
 20005f0:	e03fe115 	stw	zero,-124(fp)
	int y7 = 0;//64;
 20005f4:	e03fe215 	stw	zero,-120(fp)
	int x8 = 0;//320;
 20005f8:	e03fe315 	stw	zero,-116(fp)
	int y8 = 0;//64;
 20005fc:	e03fe415 	stw	zero,-112(fp)
	int x9 = 0;//384;
 2000600:	e03fe515 	stw	zero,-108(fp)
	int y9 = 0;//64;
 2000604:	e03fe615 	stw	zero,-104(fp)
	int x10 = 0;//64;
 2000608:	e03fe715 	stw	zero,-100(fp)
	int y10 = 0;//128;
 200060c:	e03fe815 	stw	zero,-96(fp)

	*(MTL_controller + 4) = (y4 << 10) + x4;
 2000610:	e0bfd917 	ldw	r2,-156(fp)
 2000614:	10800404 	addi	r2,r2,16
 2000618:	e0ffdc17 	ldw	r3,-144(fp)
 200061c:	180892ba 	slli	r4,r3,10
 2000620:	e0ffdb17 	ldw	r3,-148(fp)
 2000624:	20c7883a 	add	r3,r4,r3
 2000628:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 5) = (y5 << 10) + x5;
 200062c:	e0bfd917 	ldw	r2,-156(fp)
 2000630:	10800504 	addi	r2,r2,20
 2000634:	e0ffde17 	ldw	r3,-136(fp)
 2000638:	180892ba 	slli	r4,r3,10
 200063c:	e0ffdd17 	ldw	r3,-140(fp)
 2000640:	20c7883a 	add	r3,r4,r3
 2000644:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 6) = (y6 << 10) + x6;
 2000648:	e0bfd917 	ldw	r2,-156(fp)
 200064c:	10800604 	addi	r2,r2,24
 2000650:	e0ffe017 	ldw	r3,-128(fp)
 2000654:	180892ba 	slli	r4,r3,10
 2000658:	e0ffdf17 	ldw	r3,-132(fp)
 200065c:	20c7883a 	add	r3,r4,r3
 2000660:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 7) = (y7 << 10) + x7;
 2000664:	e0bfd917 	ldw	r2,-156(fp)
 2000668:	10800704 	addi	r2,r2,28
 200066c:	e0ffe217 	ldw	r3,-120(fp)
 2000670:	180892ba 	slli	r4,r3,10
 2000674:	e0ffe117 	ldw	r3,-124(fp)
 2000678:	20c7883a 	add	r3,r4,r3
 200067c:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 8) = (y8 << 10) + x8;
 2000680:	e0bfd917 	ldw	r2,-156(fp)
 2000684:	10800804 	addi	r2,r2,32
 2000688:	e0ffe417 	ldw	r3,-112(fp)
 200068c:	180892ba 	slli	r4,r3,10
 2000690:	e0ffe317 	ldw	r3,-116(fp)
 2000694:	20c7883a 	add	r3,r4,r3
 2000698:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 9) = (y9 << 10) + x9;
 200069c:	e0bfd917 	ldw	r2,-156(fp)
 20006a0:	10800904 	addi	r2,r2,36
 20006a4:	e0ffe617 	ldw	r3,-104(fp)
 20006a8:	180892ba 	slli	r4,r3,10
 20006ac:	e0ffe517 	ldw	r3,-108(fp)
 20006b0:	20c7883a 	add	r3,r4,r3
 20006b4:	10c00015 	stw	r3,0(r2)
	*(MTL_controller + 10) = (y10 << 10) + x10;
 20006b8:	e0bfd917 	ldw	r2,-156(fp)
 20006bc:	10800a04 	addi	r2,r2,40
 20006c0:	e0ffe817 	ldw	r3,-96(fp)
 20006c4:	180892ba 	slli	r4,r3,10
 20006c8:	e0ffe717 	ldw	r3,-100(fp)
 20006cc:	20c7883a 	add	r3,r4,r3
 20006d0:	10c00015 	stw	r3,0(r2)

	INT8U err;

	int hBorder = 0;
 20006d4:	e03fe915 	stw	zero,-92(fp)
	int vBorder = 0;
 20006d8:	e03fea15 	stw	zero,-88(fp)

	int backX = 0;
 20006dc:	e03feb15 	stw	zero,-84(fp)
	int backY = 0;
 20006e0:	e03fec15 	stw	zero,-80(fp)

	int maxX = 800;
 20006e4:	0080c804 	movi	r2,800
 20006e8:	e0bfed15 	stw	r2,-76(fp)
	int maxY = 480;
 20006ec:	00807804 	movi	r2,480
 20006f0:	e0bfee15 	stw	r2,-72(fp)

	int size = 32;
 20006f4:	00800804 	movi	r2,32
 20006f8:	e0bfef15 	stw	r2,-68(fp)
	int border = 0;
 20006fc:	e03ff015 	stw	zero,-64(fp)

	double vector [2];
	double speed;

	double ball_x = 64, ball_y = 64;
 2000700:	e03fd315 	stw	zero,-180(fp)
 2000704:	00901434 	movhi	r2,16464
 2000708:	e0bfd415 	stw	r2,-176(fp)
 200070c:	e03fd515 	stw	zero,-172(fp)
 2000710:	00901434 	movhi	r2,16464
 2000714:	e0bfd615 	stw	r2,-168(fp)

	while(1){

		double *vector_x = OSMboxPend(MailBox1,0,&err);
 2000718:	d0a71017 	ldw	r2,-25536(gp)
 200071c:	e0fff404 	addi	r3,fp,-48
 2000720:	180d883a 	mov	r6,r3
 2000724:	000b883a 	mov	r5,zero
 2000728:	1009883a 	mov	r4,r2
 200072c:	20128f40 	call	20128f4 <OSMboxPend>
 2000730:	e0bff115 	stw	r2,-60(fp)
		double *vector_y = OSMboxPend(MailBox2,0,&err);
 2000734:	d0a70f17 	ldw	r2,-25540(gp)
 2000738:	e0fff404 	addi	r3,fp,-48
 200073c:	180d883a 	mov	r6,r3
 2000740:	000b883a 	mov	r5,zero
 2000744:	1009883a 	mov	r4,r2
 2000748:	20128f40 	call	20128f4 <OSMboxPend>
 200074c:	e0bff215 	stw	r2,-56(fp)
		double *speed_msg = OSMboxPend(MailBox3,0,&err);
 2000750:	d0a70e17 	ldw	r2,-25544(gp)
 2000754:	e0fff404 	addi	r3,fp,-48
 2000758:	180d883a 	mov	r6,r3
 200075c:	000b883a 	mov	r5,zero
 2000760:	1009883a 	mov	r4,r2
 2000764:	20128f40 	call	20128f4 <OSMboxPend>
 2000768:	e0bff315 	stw	r2,-52(fp)
		vector[0] = *vector_x;
 200076c:	e13ff117 	ldw	r4,-60(fp)
 2000770:	20800017 	ldw	r2,0(r4)
 2000774:	20c00117 	ldw	r3,4(r4)
 2000778:	e0bff515 	stw	r2,-44(fp)
 200077c:	e0fff615 	stw	r3,-40(fp)
		vector[1] = *vector_y;
 2000780:	e13ff217 	ldw	r4,-56(fp)
 2000784:	20800017 	ldw	r2,0(r4)
 2000788:	20c00117 	ldw	r3,4(r4)
 200078c:	e0bff715 	stw	r2,-36(fp)
 2000790:	e0fff815 	stw	r3,-32(fp)
		speed = *speed_msg;
 2000794:	e0bff317 	ldw	r2,-52(fp)
 2000798:	10c00017 	ldw	r3,0(r2)
 200079c:	e0ffd115 	stw	r3,-188(fp)
 20007a0:	10800117 	ldw	r2,4(r2)
 20007a4:	e0bfd215 	stw	r2,-184(fp)
		int backX = vector[0] <0;
 20007a8:	e0bff517 	ldw	r2,-44(fp)
 20007ac:	e0fff617 	ldw	r3,-40(fp)
 20007b0:	05000044 	movi	r20,1
 20007b4:	000d883a 	mov	r6,zero
 20007b8:	000f883a 	mov	r7,zero
 20007bc:	1009883a 	mov	r4,r2
 20007c0:	180b883a 	mov	r5,r3
 20007c4:	20024980 	call	2002498 <__ledf2>
 20007c8:	10000116 	blt	r2,zero,20007d0 <task2+0x24c>
 20007cc:	0029883a 	mov	r20,zero
 20007d0:	a0803fcc 	andi	r2,r20,255
 20007d4:	e0bfd715 	stw	r2,-164(fp)
		int backY = vector[1] <0;
 20007d8:	e0bff717 	ldw	r2,-36(fp)
 20007dc:	e0fff817 	ldw	r3,-32(fp)
 20007e0:	05000044 	movi	r20,1
 20007e4:	000d883a 	mov	r6,zero
 20007e8:	000f883a 	mov	r7,zero
 20007ec:	1009883a 	mov	r4,r2
 20007f0:	180b883a 	mov	r5,r3
 20007f4:	20024980 	call	2002498 <__ledf2>
 20007f8:	10000116 	blt	r2,zero,2000800 <task2+0x27c>
 20007fc:	0029883a 	mov	r20,zero
 2000800:	a0803fcc 	andi	r2,r20,255
 2000804:	e0bfd815 	stw	r2,-160(fp)

		vector[0] = fabs(vector[0]);
 2000808:	e0bff517 	ldw	r2,-44(fp)
 200080c:	e0fff617 	ldw	r3,-40(fp)
 2000810:	1021883a 	mov	r16,r2
 2000814:	01200034 	movhi	r4,32768
 2000818:	213fffc4 	addi	r4,r4,-1
 200081c:	1922703a 	and	r17,r3,r4
 2000820:	e43ff515 	stw	r16,-44(fp)
 2000824:	e47ff615 	stw	r17,-40(fp)
		vector[1] = fabs(vector[1]);
 2000828:	e0bff717 	ldw	r2,-36(fp)
 200082c:	e0fff817 	ldw	r3,-32(fp)
 2000830:	1025883a 	mov	r18,r2
 2000834:	01200034 	movhi	r4,32768
 2000838:	213fffc4 	addi	r4,r4,-1
 200083c:	1926703a 	and	r19,r3,r4
 2000840:	e4bff715 	stw	r18,-36(fp)
 2000844:	e4fff815 	stw	r19,-32(fp)

		printf("task 3 -> shoot ball 4 (%.2f, %.2f) %.2f\n", vector[0], vector[1], speed);
 2000848:	e23ff517 	ldw	r8,-44(fp)
 200084c:	e27ff617 	ldw	r9,-40(fp)
 2000850:	e0bff717 	ldw	r2,-36(fp)
 2000854:	e0fff817 	ldw	r3,-32(fp)
 2000858:	e13fd117 	ldw	r4,-188(fp)
 200085c:	d9000115 	stw	r4,4(sp)
 2000860:	e13fd217 	ldw	r4,-184(fp)
 2000864:	d9000215 	stw	r4,8(sp)
 2000868:	d8c00015 	stw	r3,0(sp)
 200086c:	100f883a 	mov	r7,r2
 2000870:	400b883a 	mov	r5,r8
 2000874:	480d883a 	mov	r6,r9
 2000878:	010080b4 	movhi	r4,514
 200087c:	2124f704 	addi	r4,r4,-27684
 2000880:	2003aa80 	call	2003aa8 <printf>

		while (speed >= 0){
 2000884:	0000db06 	br	2000bf4 <task2+0x670>
			//printf("task 3 -> shoot ball 4 (%.2f, %.2f) %.2f\n", vector[0], vector[1], speed);

			if(ball_x < border+size+hBorder + 1)
 2000888:	e0fff017 	ldw	r3,-64(fp)
 200088c:	e0bfef17 	ldw	r2,-68(fp)
 2000890:	1887883a 	add	r3,r3,r2
 2000894:	e0bfe917 	ldw	r2,-92(fp)
 2000898:	1885883a 	add	r2,r3,r2
 200089c:	10800044 	addi	r2,r2,1
 20008a0:	1009883a 	mov	r4,r2
 20008a4:	20037740 	call	2003774 <__floatsidf>
 20008a8:	1011883a 	mov	r8,r2
 20008ac:	1813883a 	mov	r9,r3
 20008b0:	e1bfd317 	ldw	r6,-180(fp)
 20008b4:	e1ffd417 	ldw	r7,-176(fp)
 20008b8:	4009883a 	mov	r4,r8
 20008bc:	480b883a 	mov	r5,r9
 20008c0:	20023bc0 	call	20023bc <__gedf2>
 20008c4:	0080010e 	bge	zero,r2,20008cc <task2+0x348>
				backX = 0; // avance
 20008c8:	e03fd715 	stw	zero,-164(fp)
			if(ball_x > (maxX+hBorder)-(border+size))
 20008cc:	e0ffed17 	ldw	r3,-76(fp)
 20008d0:	e0bfe917 	ldw	r2,-92(fp)
 20008d4:	1887883a 	add	r3,r3,r2
 20008d8:	e13ff017 	ldw	r4,-64(fp)
 20008dc:	e0bfef17 	ldw	r2,-68(fp)
 20008e0:	2085883a 	add	r2,r4,r2
 20008e4:	1885c83a 	sub	r2,r3,r2
 20008e8:	1009883a 	mov	r4,r2
 20008ec:	20037740 	call	2003774 <__floatsidf>
 20008f0:	1011883a 	mov	r8,r2
 20008f4:	1813883a 	mov	r9,r3
 20008f8:	e1bfd317 	ldw	r6,-180(fp)
 20008fc:	e1ffd417 	ldw	r7,-176(fp)
 2000900:	4009883a 	mov	r4,r8
 2000904:	480b883a 	mov	r5,r9
 2000908:	20024980 	call	2002498 <__ledf2>
 200090c:	1000020e 	bge	r2,zero,2000918 <task2+0x394>
				backX = 1; // recule
 2000910:	00800044 	movi	r2,1
 2000914:	e0bfd715 	stw	r2,-164(fp)
			if(ball_y < border + size+vBorder+1)
 2000918:	e0fff017 	ldw	r3,-64(fp)
 200091c:	e0bfef17 	ldw	r2,-68(fp)
 2000920:	1887883a 	add	r3,r3,r2
 2000924:	e0bfea17 	ldw	r2,-88(fp)
 2000928:	1885883a 	add	r2,r3,r2
 200092c:	10800044 	addi	r2,r2,1
 2000930:	1009883a 	mov	r4,r2
 2000934:	20037740 	call	2003774 <__floatsidf>
 2000938:	1011883a 	mov	r8,r2
 200093c:	1813883a 	mov	r9,r3
 2000940:	e1bfd517 	ldw	r6,-172(fp)
 2000944:	e1ffd617 	ldw	r7,-168(fp)
 2000948:	4009883a 	mov	r4,r8
 200094c:	480b883a 	mov	r5,r9
 2000950:	20023bc0 	call	20023bc <__gedf2>
 2000954:	0080010e 	bge	zero,r2,200095c <task2+0x3d8>
				backY = 0;
 2000958:	e03fd815 	stw	zero,-160(fp)
			if(ball_y>(maxY+vBorder)-(border+size))
 200095c:	e0ffee17 	ldw	r3,-72(fp)
 2000960:	e0bfea17 	ldw	r2,-88(fp)
 2000964:	1887883a 	add	r3,r3,r2
 2000968:	e13ff017 	ldw	r4,-64(fp)
 200096c:	e0bfef17 	ldw	r2,-68(fp)
 2000970:	2085883a 	add	r2,r4,r2
 2000974:	1885c83a 	sub	r2,r3,r2
 2000978:	1009883a 	mov	r4,r2
 200097c:	20037740 	call	2003774 <__floatsidf>
 2000980:	1011883a 	mov	r8,r2
 2000984:	1813883a 	mov	r9,r3
 2000988:	e1bfd517 	ldw	r6,-172(fp)
 200098c:	e1ffd617 	ldw	r7,-168(fp)
 2000990:	4009883a 	mov	r4,r8
 2000994:	480b883a 	mov	r5,r9
 2000998:	20024980 	call	2002498 <__ledf2>
 200099c:	1000020e 	bge	r2,zero,20009a8 <task2+0x424>
				backY = 1;
 20009a0:	00800044 	movi	r2,1
 20009a4:	e0bfd815 	stw	r2,-160(fp)

			OSTimeDlyHMSM(0,0,0,40);
 20009a8:	01c00a04 	movi	r7,40
 20009ac:	000d883a 	mov	r6,zero
 20009b0:	000b883a 	mov	r5,zero
 20009b4:	0009883a 	mov	r4,zero
 20009b8:	2016b440 	call	2016b44 <OSTimeDlyHMSM>

			if(!backX) ball_x+=vector[0]*(speed/10.0);
 20009bc:	e0bfd717 	ldw	r2,-164(fp)
 20009c0:	10001e1e 	bne	r2,zero,2000a3c <task2+0x4b8>
 20009c4:	e53ff517 	ldw	r20,-44(fp)
 20009c8:	e57ff617 	ldw	r21,-40(fp)
 20009cc:	000d883a 	mov	r6,zero
 20009d0:	01d00934 	movhi	r7,16420
 20009d4:	e13fd117 	ldw	r4,-188(fp)
 20009d8:	e17fd217 	ldw	r5,-184(fp)
 20009dc:	20019ec0 	call	20019ec <__divdf3>
 20009e0:	1009883a 	mov	r4,r2
 20009e4:	180b883a 	mov	r5,r3
 20009e8:	2005883a 	mov	r2,r4
 20009ec:	2807883a 	mov	r3,r5
 20009f0:	100d883a 	mov	r6,r2
 20009f4:	180f883a 	mov	r7,r3
 20009f8:	a009883a 	mov	r4,r20
 20009fc:	a80b883a 	mov	r5,r21
 2000a00:	200258c0 	call	200258c <__muldf3>
 2000a04:	1009883a 	mov	r4,r2
 2000a08:	180b883a 	mov	r5,r3
 2000a0c:	2005883a 	mov	r2,r4
 2000a10:	2807883a 	mov	r3,r5
 2000a14:	100d883a 	mov	r6,r2
 2000a18:	180f883a 	mov	r7,r3
 2000a1c:	e13fd317 	ldw	r4,-180(fp)
 2000a20:	e17fd417 	ldw	r5,-176(fp)
 2000a24:	20011400 	call	2001140 <__adddf3>
 2000a28:	1009883a 	mov	r4,r2
 2000a2c:	180b883a 	mov	r5,r3
 2000a30:	e13fd315 	stw	r4,-180(fp)
 2000a34:	e17fd415 	stw	r5,-176(fp)
 2000a38:	00001d06 	br	2000ab0 <task2+0x52c>
			else ball_x-=vector[0]*(speed/10.0);
 2000a3c:	e53ff517 	ldw	r20,-44(fp)
 2000a40:	e57ff617 	ldw	r21,-40(fp)
 2000a44:	000d883a 	mov	r6,zero
 2000a48:	01d00934 	movhi	r7,16420
 2000a4c:	e13fd117 	ldw	r4,-188(fp)
 2000a50:	e17fd217 	ldw	r5,-184(fp)
 2000a54:	20019ec0 	call	20019ec <__divdf3>
 2000a58:	1009883a 	mov	r4,r2
 2000a5c:	180b883a 	mov	r5,r3
 2000a60:	2005883a 	mov	r2,r4
 2000a64:	2807883a 	mov	r3,r5
 2000a68:	100d883a 	mov	r6,r2
 2000a6c:	180f883a 	mov	r7,r3
 2000a70:	a009883a 	mov	r4,r20
 2000a74:	a80b883a 	mov	r5,r21
 2000a78:	200258c0 	call	200258c <__muldf3>
 2000a7c:	1009883a 	mov	r4,r2
 2000a80:	180b883a 	mov	r5,r3
 2000a84:	2005883a 	mov	r2,r4
 2000a88:	2807883a 	mov	r3,r5
 2000a8c:	100d883a 	mov	r6,r2
 2000a90:	180f883a 	mov	r7,r3
 2000a94:	e13fd317 	ldw	r4,-180(fp)
 2000a98:	e17fd417 	ldw	r5,-176(fp)
 2000a9c:	2002df80 	call	2002df8 <__subdf3>
 2000aa0:	1009883a 	mov	r4,r2
 2000aa4:	180b883a 	mov	r5,r3
 2000aa8:	e13fd315 	stw	r4,-180(fp)
 2000aac:	e17fd415 	stw	r5,-176(fp)

			if(!backY) ball_y+=vector[1]*(speed/10.0);
 2000ab0:	e0bfd817 	ldw	r2,-160(fp)
 2000ab4:	10001e1e 	bne	r2,zero,2000b30 <task2+0x5ac>
 2000ab8:	e53ff717 	ldw	r20,-36(fp)
 2000abc:	e57ff817 	ldw	r21,-32(fp)
 2000ac0:	000d883a 	mov	r6,zero
 2000ac4:	01d00934 	movhi	r7,16420
 2000ac8:	e13fd117 	ldw	r4,-188(fp)
 2000acc:	e17fd217 	ldw	r5,-184(fp)
 2000ad0:	20019ec0 	call	20019ec <__divdf3>
 2000ad4:	1009883a 	mov	r4,r2
 2000ad8:	180b883a 	mov	r5,r3
 2000adc:	2005883a 	mov	r2,r4
 2000ae0:	2807883a 	mov	r3,r5
 2000ae4:	100d883a 	mov	r6,r2
 2000ae8:	180f883a 	mov	r7,r3
 2000aec:	a009883a 	mov	r4,r20
 2000af0:	a80b883a 	mov	r5,r21
 2000af4:	200258c0 	call	200258c <__muldf3>
 2000af8:	1009883a 	mov	r4,r2
 2000afc:	180b883a 	mov	r5,r3
 2000b00:	2005883a 	mov	r2,r4
 2000b04:	2807883a 	mov	r3,r5
 2000b08:	100d883a 	mov	r6,r2
 2000b0c:	180f883a 	mov	r7,r3
 2000b10:	e13fd517 	ldw	r4,-172(fp)
 2000b14:	e17fd617 	ldw	r5,-168(fp)
 2000b18:	20011400 	call	2001140 <__adddf3>
 2000b1c:	1009883a 	mov	r4,r2
 2000b20:	180b883a 	mov	r5,r3
 2000b24:	e13fd515 	stw	r4,-172(fp)
 2000b28:	e17fd615 	stw	r5,-168(fp)
 2000b2c:	00001d06 	br	2000ba4 <task2+0x620>
			else ball_y-=vector[1]*(speed/10.0);
 2000b30:	e53ff717 	ldw	r20,-36(fp)
 2000b34:	e57ff817 	ldw	r21,-32(fp)
 2000b38:	000d883a 	mov	r6,zero
 2000b3c:	01d00934 	movhi	r7,16420
 2000b40:	e13fd117 	ldw	r4,-188(fp)
 2000b44:	e17fd217 	ldw	r5,-184(fp)
 2000b48:	20019ec0 	call	20019ec <__divdf3>
 2000b4c:	1009883a 	mov	r4,r2
 2000b50:	180b883a 	mov	r5,r3
 2000b54:	2005883a 	mov	r2,r4
 2000b58:	2807883a 	mov	r3,r5
 2000b5c:	100d883a 	mov	r6,r2
 2000b60:	180f883a 	mov	r7,r3
 2000b64:	a009883a 	mov	r4,r20
 2000b68:	a80b883a 	mov	r5,r21
 2000b6c:	200258c0 	call	200258c <__muldf3>
 2000b70:	1009883a 	mov	r4,r2
 2000b74:	180b883a 	mov	r5,r3
 2000b78:	2005883a 	mov	r2,r4
 2000b7c:	2807883a 	mov	r3,r5
 2000b80:	100d883a 	mov	r6,r2
 2000b84:	180f883a 	mov	r7,r3
 2000b88:	e13fd517 	ldw	r4,-172(fp)
 2000b8c:	e17fd617 	ldw	r5,-168(fp)
 2000b90:	2002df80 	call	2002df8 <__subdf3>
 2000b94:	1009883a 	mov	r4,r2
 2000b98:	180b883a 	mov	r5,r3
 2000b9c:	e13fd515 	stw	r4,-172(fp)
 2000ba0:	e17fd615 	stw	r5,-168(fp)

			//ball_x += vector[0] * (speed/10.0);
			//ball_y += vector[1] * (speed/10.0);

			*(MTL_controller + 4) = ((int)(ball_y) << 10) + (int)(ball_x);
 2000ba4:	e0bfd917 	ldw	r2,-156(fp)
 2000ba8:	15000404 	addi	r20,r2,16
 2000bac:	e13fd517 	ldw	r4,-172(fp)
 2000bb0:	e17fd617 	ldw	r5,-168(fp)
 2000bb4:	20036f40 	call	20036f4 <__fixdfsi>
 2000bb8:	102a92ba 	slli	r21,r2,10
 2000bbc:	e13fd317 	ldw	r4,-180(fp)
 2000bc0:	e17fd417 	ldw	r5,-176(fp)
 2000bc4:	20036f40 	call	20036f4 <__fixdfsi>
 2000bc8:	a885883a 	add	r2,r21,r2
 2000bcc:	a0800015 	stw	r2,0(r20)

			speed = speed - 1;
 2000bd0:	000d883a 	mov	r6,zero
 2000bd4:	01cffc34 	movhi	r7,16368
 2000bd8:	e13fd117 	ldw	r4,-188(fp)
 2000bdc:	e17fd217 	ldw	r5,-184(fp)
 2000be0:	2002df80 	call	2002df8 <__subdf3>
 2000be4:	1009883a 	mov	r4,r2
 2000be8:	180b883a 	mov	r5,r3
 2000bec:	e13fd115 	stw	r4,-188(fp)
 2000bf0:	e17fd215 	stw	r5,-184(fp)
		vector[0] = fabs(vector[0]);
		vector[1] = fabs(vector[1]);

		printf("task 3 -> shoot ball 4 (%.2f, %.2f) %.2f\n", vector[0], vector[1], speed);

		while (speed >= 0){
 2000bf4:	000d883a 	mov	r6,zero
 2000bf8:	000f883a 	mov	r7,zero
 2000bfc:	e13fd117 	ldw	r4,-188(fp)
 2000c00:	e17fd217 	ldw	r5,-184(fp)
 2000c04:	20023bc0 	call	20023bc <__gedf2>
 2000c08:	103f1f0e 	bge	r2,zero,2000888 <task2+0x304>
			*(MTL_controller + 4) = ((int)(ball_y) << 10) + (int)(ball_x);

			speed = speed - 1;

		}
	}
 2000c0c:	003ec206 	br	2000718 <task2+0x194>

02000c10 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
 2000c10:	defff904 	addi	sp,sp,-28
 2000c14:	dfc00615 	stw	ra,24(sp)
 2000c18:	df000515 	stw	fp,20(sp)
 2000c1c:	df000504 	addi	fp,sp,20
  OSInit();
 2000c20:	200f5000 	call	200f500 <OSInit>


	MailBox1 = OSMboxCreate(NULL);
 2000c24:	0009883a 	mov	r4,zero
 2000c28:	20125e00 	call	20125e0 <OSMboxCreate>
 2000c2c:	d0a71015 	stw	r2,-25536(gp)
	MailBox2 = OSMboxCreate(NULL);
 2000c30:	0009883a 	mov	r4,zero
 2000c34:	20125e00 	call	20125e0 <OSMboxCreate>
 2000c38:	d0a70f15 	stw	r2,-25540(gp)
	MailBox3 = OSMboxCreate(NULL);
 2000c3c:	0009883a 	mov	r4,zero
 2000c40:	20125e00 	call	20125e0 <OSMboxCreate>
 2000c44:	d0a70e15 	stw	r2,-25544(gp)

  OSTaskCreateExt(task1,
 2000c48:	d8000415 	stw	zero,16(sp)
 2000c4c:	d8000315 	stw	zero,12(sp)
 2000c50:	00820004 	movi	r2,2048
 2000c54:	d8800215 	stw	r2,8(sp)
 2000c58:	008080b4 	movhi	r2,514
 2000c5c:	10b3fb04 	addi	r2,r2,-12308
 2000c60:	d8800115 	stw	r2,4(sp)
 2000c64:	00800044 	movi	r2,1
 2000c68:	d8800015 	stw	r2,0(sp)
 2000c6c:	01c00044 	movi	r7,1
 2000c70:	018080b4 	movhi	r6,514
 2000c74:	31bbfa04 	addi	r6,r6,-4120
 2000c78:	000b883a 	mov	r5,zero
 2000c7c:	01008034 	movhi	r4,512
 2000c80:	21009b04 	addi	r4,r4,620
 2000c84:	20159700 	call	2015970 <OSTaskCreateExt>
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(task2,
 2000c88:	d8000415 	stw	zero,16(sp)
 2000c8c:	d8000315 	stw	zero,12(sp)
 2000c90:	00820004 	movi	r2,2048
 2000c94:	d8800215 	stw	r2,8(sp)
 2000c98:	008080b4 	movhi	r2,514
 2000c9c:	10bbfb04 	addi	r2,r2,-4116
 2000ca0:	d8800115 	stw	r2,4(sp)
 2000ca4:	00800084 	movi	r2,2
 2000ca8:	d8800015 	stw	r2,0(sp)
 2000cac:	01c00084 	movi	r7,2
 2000cb0:	018080b4 	movhi	r6,514
 2000cb4:	3183fa04 	addi	r6,r6,4072
 2000cb8:	000b883a 	mov	r5,zero
 2000cbc:	01008034 	movhi	r4,512
 2000cc0:	21016104 	addi	r4,r4,1412
 2000cc4:	20159700 	call	2015970 <OSTaskCreateExt>
                    task2_stk,
                    TASK_STACKSIZE,
                    NULL,
                    0);

	OSStart();
 2000cc8:	200f8040 	call	200f804 <OSStart>
  return 0;
 2000ccc:	0005883a 	mov	r2,zero
}
 2000cd0:	e037883a 	mov	sp,fp
 2000cd4:	dfc00117 	ldw	ra,4(sp)
 2000cd8:	df000017 	ldw	fp,0(sp)
 2000cdc:	dec00204 	addi	sp,sp,8
 2000ce0:	f800283a 	ret

02000ce4 <sqrt>:
 2000ce4:	defff104 	addi	sp,sp,-60
 2000ce8:	dd000d15 	stw	r20,52(sp)
 2000cec:	050080b4 	movhi	r20,514
 2000cf0:	dcc00c15 	stw	r19,48(sp)
 2000cf4:	dc800b15 	stw	r18,44(sp)
 2000cf8:	dc400a15 	stw	r17,40(sp)
 2000cfc:	dc000915 	stw	r16,36(sp)
 2000d00:	dfc00e15 	stw	ra,56(sp)
 2000d04:	a52cb904 	addi	r20,r20,-19740
 2000d08:	2027883a 	mov	r19,r4
 2000d0c:	2825883a 	mov	r18,r5
 2000d10:	2000e140 	call	2000e14 <__ieee754_sqrt>
 2000d14:	1821883a 	mov	r16,r3
 2000d18:	a0c00017 	ldw	r3,0(r20)
 2000d1c:	1023883a 	mov	r17,r2
 2000d20:	00bfffc4 	movi	r2,-1
 2000d24:	18800a26 	beq	r3,r2,2000d50 <sqrt+0x6c>
 2000d28:	9809883a 	mov	r4,r19
 2000d2c:	900b883a 	mov	r5,r18
 2000d30:	200109c0 	call	200109c <__fpclassifyd>
 2000d34:	10000626 	beq	r2,zero,2000d50 <sqrt+0x6c>
 2000d38:	000d883a 	mov	r6,zero
 2000d3c:	000f883a 	mov	r7,zero
 2000d40:	9809883a 	mov	r4,r19
 2000d44:	900b883a 	mov	r5,r18
 2000d48:	20024980 	call	2002498 <__ledf2>
 2000d4c:	10000a16 	blt	r2,zero,2000d78 <sqrt+0x94>
 2000d50:	8805883a 	mov	r2,r17
 2000d54:	8007883a 	mov	r3,r16
 2000d58:	dfc00e17 	ldw	ra,56(sp)
 2000d5c:	dd000d17 	ldw	r20,52(sp)
 2000d60:	dcc00c17 	ldw	r19,48(sp)
 2000d64:	dc800b17 	ldw	r18,44(sp)
 2000d68:	dc400a17 	ldw	r17,40(sp)
 2000d6c:	dc000917 	ldw	r16,36(sp)
 2000d70:	dec00f04 	addi	sp,sp,60
 2000d74:	f800283a 	ret
 2000d78:	00800044 	movi	r2,1
 2000d7c:	d8800015 	stw	r2,0(sp)
 2000d80:	a4000017 	ldw	r16,0(r20)
 2000d84:	008080b4 	movhi	r2,514
 2000d88:	10a50204 	addi	r2,r2,-27640
 2000d8c:	d8800115 	stw	r2,4(sp)
 2000d90:	d8000815 	stw	zero,32(sp)
 2000d94:	dcc00415 	stw	r19,16(sp)
 2000d98:	dc800515 	stw	r18,20(sp)
 2000d9c:	dcc00215 	stw	r19,8(sp)
 2000da0:	dc800315 	stw	r18,12(sp)
 2000da4:	80000a1e 	bne	r16,zero,2000dd0 <sqrt+0xec>
 2000da8:	d8000615 	stw	zero,24(sp)
 2000dac:	d8000715 	stw	zero,28(sp)
 2000db0:	d809883a 	mov	r4,sp
 2000db4:	20011100 	call	2001110 <matherr>
 2000db8:	10000e26 	beq	r2,zero,2000df4 <sqrt+0x110>
 2000dbc:	d8800817 	ldw	r2,32(sp)
 2000dc0:	1000101e 	bne	r2,zero,2000e04 <sqrt+0x120>
 2000dc4:	d8800617 	ldw	r2,24(sp)
 2000dc8:	d8c00717 	ldw	r3,28(sp)
 2000dcc:	003fe206 	br	2000d58 <sqrt+0x74>
 2000dd0:	000d883a 	mov	r6,zero
 2000dd4:	000f883a 	mov	r7,zero
 2000dd8:	0009883a 	mov	r4,zero
 2000ddc:	000b883a 	mov	r5,zero
 2000de0:	20019ec0 	call	20019ec <__divdf3>
 2000de4:	d8800615 	stw	r2,24(sp)
 2000de8:	d8c00715 	stw	r3,28(sp)
 2000dec:	00800084 	movi	r2,2
 2000df0:	80bfef1e 	bne	r16,r2,2000db0 <sqrt+0xcc>
 2000df4:	2003a680 	call	2003a68 <__errno>
 2000df8:	00c00844 	movi	r3,33
 2000dfc:	10c00015 	stw	r3,0(r2)
 2000e00:	003fee06 	br	2000dbc <sqrt+0xd8>
 2000e04:	2003a680 	call	2003a68 <__errno>
 2000e08:	d8c00817 	ldw	r3,32(sp)
 2000e0c:	10c00015 	stw	r3,0(r2)
 2000e10:	003fec06 	br	2000dc4 <sqrt+0xe0>

02000e14 <__ieee754_sqrt>:
 2000e14:	defffd04 	addi	sp,sp,-12
 2000e18:	dc400115 	stw	r17,4(sp)
 2000e1c:	dc000015 	stw	r16,0(sp)
 2000e20:	dfc00215 	stw	ra,8(sp)
 2000e24:	28dffc2c 	andhi	r3,r5,32752
 2000e28:	009ffc34 	movhi	r2,32752
 2000e2c:	2821883a 	mov	r16,r5
 2000e30:	2023883a 	mov	r17,r4
 2000e34:	200d883a 	mov	r6,r4
 2000e38:	18807b26 	beq	r3,r2,2001028 <__ieee754_sqrt+0x214>
 2000e3c:	01405f0e 	bge	zero,r5,2000fbc <__ieee754_sqrt+0x1a8>
 2000e40:	2815d53a 	srai	r10,r5,20
 2000e44:	50006a26 	beq	r10,zero,2000ff0 <__ieee754_sqrt+0x1dc>
 2000e48:	00c00434 	movhi	r3,16
 2000e4c:	52bf0044 	addi	r10,r10,-1023
 2000e50:	18ffffc4 	addi	r3,r3,-1
 2000e54:	80c6703a 	and	r3,r16,r3
 2000e58:	5080004c 	andi	r2,r10,1
 2000e5c:	18c00434 	orhi	r3,r3,16
 2000e60:	1000511e 	bne	r2,zero,2000fa8 <__ieee754_sqrt+0x194>
 2000e64:	3004d7fa 	srli	r2,r6,31
 2000e68:	5015d07a 	srai	r10,r10,1
 2000e6c:	18c7883a 	add	r3,r3,r3
 2000e70:	10c5883a 	add	r2,r2,r3
 2000e74:	01400584 	movi	r5,22
 2000e78:	3187883a 	add	r3,r6,r6
 2000e7c:	0013883a 	mov	r9,zero
 2000e80:	000f883a 	mov	r7,zero
 2000e84:	01000834 	movhi	r4,32
 2000e88:	390d883a 	add	r6,r7,r4
 2000e8c:	1810d7fa 	srli	r8,r3,31
 2000e90:	297fffc4 	addi	r5,r5,-1
 2000e94:	11800316 	blt	r2,r6,2000ea4 <__ieee754_sqrt+0x90>
 2000e98:	1185c83a 	sub	r2,r2,r6
 2000e9c:	310f883a 	add	r7,r6,r4
 2000ea0:	4913883a 	add	r9,r9,r4
 2000ea4:	1085883a 	add	r2,r2,r2
 2000ea8:	4085883a 	add	r2,r8,r2
 2000eac:	18c7883a 	add	r3,r3,r3
 2000eb0:	2008d07a 	srli	r4,r4,1
 2000eb4:	283ff41e 	bne	r5,zero,2000e88 <__ieee754_sqrt+0x74>
 2000eb8:	01200034 	movhi	r4,32768
 2000ebc:	01800804 	movi	r6,32
 2000ec0:	0011883a 	mov	r8,zero
 2000ec4:	0019883a 	mov	r12,zero
 2000ec8:	201b883a 	mov	r13,r4
 2000ecc:	00000806 	br	2000ef0 <__ieee754_sqrt+0xdc>
 2000ed0:	38801726 	beq	r7,r2,2000f30 <__ieee754_sqrt+0x11c>
 2000ed4:	180ad7fa 	srli	r5,r3,31
 2000ed8:	1085883a 	add	r2,r2,r2
 2000edc:	31bfffc4 	addi	r6,r6,-1
 2000ee0:	2885883a 	add	r2,r5,r2
 2000ee4:	18c7883a 	add	r3,r3,r3
 2000ee8:	2008d07a 	srli	r4,r4,1
 2000eec:	30001726 	beq	r6,zero,2000f4c <__ieee754_sqrt+0x138>
 2000ef0:	230b883a 	add	r5,r4,r12
 2000ef4:	38bff60e 	bge	r7,r2,2000ed0 <__ieee754_sqrt+0xbc>
 2000ef8:	2ae0002c 	andhi	r11,r5,32768
 2000efc:	2919883a 	add	r12,r5,r4
 2000f00:	5b400826 	beq	r11,r13,2000f24 <__ieee754_sqrt+0x110>
 2000f04:	3817883a 	mov	r11,r7
 2000f08:	11c5c83a 	sub	r2,r2,r7
 2000f0c:	1940012e 	bgeu	r3,r5,2000f14 <__ieee754_sqrt+0x100>
 2000f10:	10bfffc4 	addi	r2,r2,-1
 2000f14:	1947c83a 	sub	r3,r3,r5
 2000f18:	4111883a 	add	r8,r8,r4
 2000f1c:	580f883a 	mov	r7,r11
 2000f20:	003fec06 	br	2000ed4 <__ieee754_sqrt+0xc0>
 2000f24:	603ff716 	blt	r12,zero,2000f04 <__ieee754_sqrt+0xf0>
 2000f28:	3ac00044 	addi	r11,r7,1
 2000f2c:	003ff606 	br	2000f08 <__ieee754_sqrt+0xf4>
 2000f30:	19401936 	bltu	r3,r5,2000f98 <__ieee754_sqrt+0x184>
 2000f34:	2ae0002c 	andhi	r11,r5,32768
 2000f38:	2919883a 	add	r12,r5,r4
 2000f3c:	5b404526 	beq	r11,r13,2001054 <__ieee754_sqrt+0x240>
 2000f40:	1017883a 	mov	r11,r2
 2000f44:	0005883a 	mov	r2,zero
 2000f48:	003ff206 	br	2000f14 <__ieee754_sqrt+0x100>
 2000f4c:	10c4b03a 	or	r2,r2,r3
 2000f50:	10000426 	beq	r2,zero,2000f64 <__ieee754_sqrt+0x150>
 2000f54:	00bfffc4 	movi	r2,-1
 2000f58:	40804026 	beq	r8,r2,200105c <__ieee754_sqrt+0x248>
 2000f5c:	4080004c 	andi	r2,r8,1
 2000f60:	4091883a 	add	r8,r8,r2
 2000f64:	4004d07a 	srli	r2,r8,1
 2000f68:	4807d07a 	srai	r3,r9,1
 2000f6c:	010ff834 	movhi	r4,16352
 2000f70:	4a40004c 	andi	r9,r9,1
 2000f74:	1909883a 	add	r4,r3,r4
 2000f78:	4800091e 	bne	r9,zero,2000fa0 <__ieee754_sqrt+0x18c>
 2000f7c:	5006953a 	slli	r3,r10,20
 2000f80:	1907883a 	add	r3,r3,r4
 2000f84:	dfc00217 	ldw	ra,8(sp)
 2000f88:	dc400117 	ldw	r17,4(sp)
 2000f8c:	dc000017 	ldw	r16,0(sp)
 2000f90:	dec00304 	addi	sp,sp,12
 2000f94:	f800283a 	ret
 2000f98:	3805883a 	mov	r2,r7
 2000f9c:	003fcd06 	br	2000ed4 <__ieee754_sqrt+0xc0>
 2000fa0:	10a00034 	orhi	r2,r2,32768
 2000fa4:	003ff506 	br	2000f7c <__ieee754_sqrt+0x168>
 2000fa8:	3004d7fa 	srli	r2,r6,31
 2000fac:	18c7883a 	add	r3,r3,r3
 2000fb0:	318d883a 	add	r6,r6,r6
 2000fb4:	10c7883a 	add	r3,r2,r3
 2000fb8:	003faa06 	br	2000e64 <__ieee754_sqrt+0x50>
 2000fbc:	00a00034 	movhi	r2,32768
 2000fc0:	10bfffc4 	addi	r2,r2,-1
 2000fc4:	2884703a 	and	r2,r5,r2
 2000fc8:	1104b03a 	or	r2,r2,r4
 2000fcc:	10001e26 	beq	r2,zero,2001048 <__ieee754_sqrt+0x234>
 2000fd0:	2800291e 	bne	r5,zero,2001078 <__ieee754_sqrt+0x264>
 2000fd4:	0015883a 	mov	r10,zero
 2000fd8:	3020d2fa 	srli	r16,r6,11
 2000fdc:	52bffac4 	addi	r10,r10,-21
 2000fe0:	300c957a 	slli	r6,r6,21
 2000fe4:	803ffc26 	beq	r16,zero,2000fd8 <__ieee754_sqrt+0x1c4>
 2000fe8:	8080042c 	andhi	r2,r16,16
 2000fec:	10001e1e 	bne	r2,zero,2001068 <__ieee754_sqrt+0x254>
 2000ff0:	0005883a 	mov	r2,zero
 2000ff4:	00000106 	br	2000ffc <__ieee754_sqrt+0x1e8>
 2000ff8:	1805883a 	mov	r2,r3
 2000ffc:	8421883a 	add	r16,r16,r16
 2001000:	8100042c 	andhi	r4,r16,16
 2001004:	10c00044 	addi	r3,r2,1
 2001008:	203ffb26 	beq	r4,zero,2000ff8 <__ieee754_sqrt+0x1e4>
 200100c:	01000804 	movi	r4,32
 2001010:	20c9c83a 	sub	r4,r4,r3
 2001014:	3108d83a 	srl	r4,r6,r4
 2001018:	5095c83a 	sub	r10,r10,r2
 200101c:	30cc983a 	sll	r6,r6,r3
 2001020:	2420b03a 	or	r16,r4,r16
 2001024:	003f8806 	br	2000e48 <__ieee754_sqrt+0x34>
 2001028:	280f883a 	mov	r7,r5
 200102c:	200258c0 	call	200258c <__muldf3>
 2001030:	880d883a 	mov	r6,r17
 2001034:	800f883a 	mov	r7,r16
 2001038:	1009883a 	mov	r4,r2
 200103c:	180b883a 	mov	r5,r3
 2001040:	20011400 	call	2001140 <__adddf3>
 2001044:	003fcf06 	br	2000f84 <__ieee754_sqrt+0x170>
 2001048:	2005883a 	mov	r2,r4
 200104c:	2807883a 	mov	r3,r5
 2001050:	003fcc06 	br	2000f84 <__ieee754_sqrt+0x170>
 2001054:	603fba16 	blt	r12,zero,2000f40 <__ieee754_sqrt+0x12c>
 2001058:	003fb306 	br	2000f28 <__ieee754_sqrt+0x114>
 200105c:	4a400044 	addi	r9,r9,1
 2001060:	0005883a 	mov	r2,zero
 2001064:	003fc006 	br	2000f68 <__ieee754_sqrt+0x154>
 2001068:	01000804 	movi	r4,32
 200106c:	00bfffc4 	movi	r2,-1
 2001070:	0007883a 	mov	r3,zero
 2001074:	003fe706 	br	2001014 <__ieee754_sqrt+0x200>
 2001078:	200d883a 	mov	r6,r4
 200107c:	280f883a 	mov	r7,r5
 2001080:	2002df80 	call	2002df8 <__subdf3>
 2001084:	100d883a 	mov	r6,r2
 2001088:	180f883a 	mov	r7,r3
 200108c:	1009883a 	mov	r4,r2
 2001090:	180b883a 	mov	r5,r3
 2001094:	20019ec0 	call	20019ec <__divdf3>
 2001098:	003fba06 	br	2000f84 <__ieee754_sqrt+0x170>

0200109c <__fpclassifyd>:
 200109c:	00a00034 	movhi	r2,32768
 20010a0:	10bfffc4 	addi	r2,r2,-1
 20010a4:	2884703a 	and	r2,r5,r2
 20010a8:	10000726 	beq	r2,zero,20010c8 <__fpclassifyd+0x2c>
 20010ac:	00fffc34 	movhi	r3,65520
 20010b0:	019ff834 	movhi	r6,32736
 20010b4:	28c7883a 	add	r3,r5,r3
 20010b8:	31bfffc4 	addi	r6,r6,-1
 20010bc:	30c00536 	bltu	r6,r3,20010d4 <__fpclassifyd+0x38>
 20010c0:	00800104 	movi	r2,4
 20010c4:	f800283a 	ret
 20010c8:	2000021e 	bne	r4,zero,20010d4 <__fpclassifyd+0x38>
 20010cc:	00800084 	movi	r2,2
 20010d0:	f800283a 	ret
 20010d4:	00dffc34 	movhi	r3,32752
 20010d8:	019ff834 	movhi	r6,32736
 20010dc:	28cb883a 	add	r5,r5,r3
 20010e0:	31bfffc4 	addi	r6,r6,-1
 20010e4:	317ff62e 	bgeu	r6,r5,20010c0 <__fpclassifyd+0x24>
 20010e8:	01400434 	movhi	r5,16
 20010ec:	297fffc4 	addi	r5,r5,-1
 20010f0:	28800236 	bltu	r5,r2,20010fc <__fpclassifyd+0x60>
 20010f4:	008000c4 	movi	r2,3
 20010f8:	f800283a 	ret
 20010fc:	10c00226 	beq	r2,r3,2001108 <__fpclassifyd+0x6c>
 2001100:	0005883a 	mov	r2,zero
 2001104:	f800283a 	ret
 2001108:	2005003a 	cmpeq	r2,r4,zero
 200110c:	f800283a 	ret

02001110 <matherr>:
 2001110:	0005883a 	mov	r2,zero
 2001114:	f800283a 	ret

02001118 <__mulsi3>:
 2001118:	0005883a 	mov	r2,zero
 200111c:	20000726 	beq	r4,zero,200113c <__mulsi3+0x24>
 2001120:	20c0004c 	andi	r3,r4,1
 2001124:	2008d07a 	srli	r4,r4,1
 2001128:	18000126 	beq	r3,zero,2001130 <__mulsi3+0x18>
 200112c:	1145883a 	add	r2,r2,r5
 2001130:	294b883a 	add	r5,r5,r5
 2001134:	203ffa1e 	bne	r4,zero,2001120 <__mulsi3+0x8>
 2001138:	f800283a 	ret
 200113c:	f800283a 	ret

02001140 <__adddf3>:
 2001140:	02c00434 	movhi	r11,16
 2001144:	5affffc4 	addi	r11,r11,-1
 2001148:	2806d7fa 	srli	r3,r5,31
 200114c:	2ad4703a 	and	r10,r5,r11
 2001150:	3ad2703a 	and	r9,r7,r11
 2001154:	3804d53a 	srli	r2,r7,20
 2001158:	3018d77a 	srli	r12,r6,29
 200115c:	280ad53a 	srli	r5,r5,20
 2001160:	501490fa 	slli	r10,r10,3
 2001164:	2010d77a 	srli	r8,r4,29
 2001168:	481290fa 	slli	r9,r9,3
 200116c:	380ed7fa 	srli	r7,r7,31
 2001170:	defffb04 	addi	sp,sp,-20
 2001174:	dc800215 	stw	r18,8(sp)
 2001178:	dc400115 	stw	r17,4(sp)
 200117c:	dc000015 	stw	r16,0(sp)
 2001180:	dfc00415 	stw	ra,16(sp)
 2001184:	dcc00315 	stw	r19,12(sp)
 2001188:	1c803fcc 	andi	r18,r3,255
 200118c:	2c01ffcc 	andi	r16,r5,2047
 2001190:	5210b03a 	or	r8,r10,r8
 2001194:	202290fa 	slli	r17,r4,3
 2001198:	1081ffcc 	andi	r2,r2,2047
 200119c:	4b12b03a 	or	r9,r9,r12
 20011a0:	300c90fa 	slli	r6,r6,3
 20011a4:	91c07526 	beq	r18,r7,200137c <__adddf3+0x23c>
 20011a8:	8087c83a 	sub	r3,r16,r2
 20011ac:	00c0ab0e 	bge	zero,r3,200145c <__adddf3+0x31c>
 20011b0:	10002a1e 	bne	r2,zero,200125c <__adddf3+0x11c>
 20011b4:	4984b03a 	or	r2,r9,r6
 20011b8:	1000961e 	bne	r2,zero,2001414 <__adddf3+0x2d4>
 20011bc:	888001cc 	andi	r2,r17,7
 20011c0:	10000726 	beq	r2,zero,20011e0 <__adddf3+0xa0>
 20011c4:	888003cc 	andi	r2,r17,15
 20011c8:	00c00104 	movi	r3,4
 20011cc:	10c00426 	beq	r2,r3,20011e0 <__adddf3+0xa0>
 20011d0:	88c7883a 	add	r3,r17,r3
 20011d4:	1c63803a 	cmpltu	r17,r3,r17
 20011d8:	4451883a 	add	r8,r8,r17
 20011dc:	1823883a 	mov	r17,r3
 20011e0:	4080202c 	andhi	r2,r8,128
 20011e4:	10005926 	beq	r2,zero,200134c <__adddf3+0x20c>
 20011e8:	84000044 	addi	r16,r16,1
 20011ec:	0081ffc4 	movi	r2,2047
 20011f0:	8080ba26 	beq	r16,r2,20014dc <__adddf3+0x39c>
 20011f4:	00bfe034 	movhi	r2,65408
 20011f8:	10bfffc4 	addi	r2,r2,-1
 20011fc:	4090703a 	and	r8,r8,r2
 2001200:	4004977a 	slli	r2,r8,29
 2001204:	4010927a 	slli	r8,r8,9
 2001208:	8822d0fa 	srli	r17,r17,3
 200120c:	8401ffcc 	andi	r16,r16,2047
 2001210:	4010d33a 	srli	r8,r8,12
 2001214:	9007883a 	mov	r3,r18
 2001218:	1444b03a 	or	r2,r2,r17
 200121c:	8401ffcc 	andi	r16,r16,2047
 2001220:	8020953a 	slli	r16,r16,20
 2001224:	18c03fcc 	andi	r3,r3,255
 2001228:	01000434 	movhi	r4,16
 200122c:	213fffc4 	addi	r4,r4,-1
 2001230:	180697fa 	slli	r3,r3,31
 2001234:	4110703a 	and	r8,r8,r4
 2001238:	4410b03a 	or	r8,r8,r16
 200123c:	40c6b03a 	or	r3,r8,r3
 2001240:	dfc00417 	ldw	ra,16(sp)
 2001244:	dcc00317 	ldw	r19,12(sp)
 2001248:	dc800217 	ldw	r18,8(sp)
 200124c:	dc400117 	ldw	r17,4(sp)
 2001250:	dc000017 	ldw	r16,0(sp)
 2001254:	dec00504 	addi	sp,sp,20
 2001258:	f800283a 	ret
 200125c:	0081ffc4 	movi	r2,2047
 2001260:	80bfd626 	beq	r16,r2,20011bc <__adddf3+0x7c>
 2001264:	4a402034 	orhi	r9,r9,128
 2001268:	00800e04 	movi	r2,56
 200126c:	10c09f16 	blt	r2,r3,20014ec <__adddf3+0x3ac>
 2001270:	008007c4 	movi	r2,31
 2001274:	10c0c216 	blt	r2,r3,2001580 <__adddf3+0x440>
 2001278:	00800804 	movi	r2,32
 200127c:	10c5c83a 	sub	r2,r2,r3
 2001280:	488a983a 	sll	r5,r9,r2
 2001284:	30c8d83a 	srl	r4,r6,r3
 2001288:	3084983a 	sll	r2,r6,r2
 200128c:	48c6d83a 	srl	r3,r9,r3
 2001290:	290cb03a 	or	r6,r5,r4
 2001294:	1004c03a 	cmpne	r2,r2,zero
 2001298:	308cb03a 	or	r6,r6,r2
 200129c:	898dc83a 	sub	r6,r17,r6
 20012a0:	89a3803a 	cmpltu	r17,r17,r6
 20012a4:	40d1c83a 	sub	r8,r8,r3
 20012a8:	4451c83a 	sub	r8,r8,r17
 20012ac:	3023883a 	mov	r17,r6
 20012b0:	4080202c 	andhi	r2,r8,128
 20012b4:	10002326 	beq	r2,zero,2001344 <__adddf3+0x204>
 20012b8:	04c02034 	movhi	r19,128
 20012bc:	9cffffc4 	addi	r19,r19,-1
 20012c0:	44e6703a 	and	r19,r8,r19
 20012c4:	98007626 	beq	r19,zero,20014a0 <__adddf3+0x360>
 20012c8:	9809883a 	mov	r4,r19
 20012cc:	20038500 	call	2003850 <__clzsi2>
 20012d0:	10fffe04 	addi	r3,r2,-8
 20012d4:	010007c4 	movi	r4,31
 20012d8:	20c07716 	blt	r4,r3,20014b8 <__adddf3+0x378>
 20012dc:	00800804 	movi	r2,32
 20012e0:	10c5c83a 	sub	r2,r2,r3
 20012e4:	8884d83a 	srl	r2,r17,r2
 20012e8:	98d0983a 	sll	r8,r19,r3
 20012ec:	88e2983a 	sll	r17,r17,r3
 20012f0:	1204b03a 	or	r2,r2,r8
 20012f4:	1c007416 	blt	r3,r16,20014c8 <__adddf3+0x388>
 20012f8:	1c21c83a 	sub	r16,r3,r16
 20012fc:	82000044 	addi	r8,r16,1
 2001300:	00c007c4 	movi	r3,31
 2001304:	1a009116 	blt	r3,r8,200154c <__adddf3+0x40c>
 2001308:	00c00804 	movi	r3,32
 200130c:	1a07c83a 	sub	r3,r3,r8
 2001310:	8a08d83a 	srl	r4,r17,r8
 2001314:	88e2983a 	sll	r17,r17,r3
 2001318:	10c6983a 	sll	r3,r2,r3
 200131c:	1210d83a 	srl	r8,r2,r8
 2001320:	8804c03a 	cmpne	r2,r17,zero
 2001324:	1906b03a 	or	r3,r3,r4
 2001328:	18a2b03a 	or	r17,r3,r2
 200132c:	0021883a 	mov	r16,zero
 2001330:	003fa206 	br	20011bc <__adddf3+0x7c>
 2001334:	1890b03a 	or	r8,r3,r2
 2001338:	40017d26 	beq	r8,zero,2001930 <__adddf3+0x7f0>
 200133c:	1011883a 	mov	r8,r2
 2001340:	1823883a 	mov	r17,r3
 2001344:	888001cc 	andi	r2,r17,7
 2001348:	103f9e1e 	bne	r2,zero,20011c4 <__adddf3+0x84>
 200134c:	4004977a 	slli	r2,r8,29
 2001350:	8822d0fa 	srli	r17,r17,3
 2001354:	4010d0fa 	srli	r8,r8,3
 2001358:	9007883a 	mov	r3,r18
 200135c:	1444b03a 	or	r2,r2,r17
 2001360:	0101ffc4 	movi	r4,2047
 2001364:	81002426 	beq	r16,r4,20013f8 <__adddf3+0x2b8>
 2001368:	8120703a 	and	r16,r16,r4
 200136c:	01000434 	movhi	r4,16
 2001370:	213fffc4 	addi	r4,r4,-1
 2001374:	4110703a 	and	r8,r8,r4
 2001378:	003fa806 	br	200121c <__adddf3+0xdc>
 200137c:	8089c83a 	sub	r4,r16,r2
 2001380:	01005e0e 	bge	zero,r4,20014fc <__adddf3+0x3bc>
 2001384:	10002b26 	beq	r2,zero,2001434 <__adddf3+0x2f4>
 2001388:	0081ffc4 	movi	r2,2047
 200138c:	80bf8b26 	beq	r16,r2,20011bc <__adddf3+0x7c>
 2001390:	4a402034 	orhi	r9,r9,128
 2001394:	00800e04 	movi	r2,56
 2001398:	1100a40e 	bge	r2,r4,200162c <__adddf3+0x4ec>
 200139c:	498cb03a 	or	r6,r9,r6
 20013a0:	300ac03a 	cmpne	r5,r6,zero
 20013a4:	0013883a 	mov	r9,zero
 20013a8:	2c4b883a 	add	r5,r5,r17
 20013ac:	2c63803a 	cmpltu	r17,r5,r17
 20013b0:	4a11883a 	add	r8,r9,r8
 20013b4:	8a11883a 	add	r8,r17,r8
 20013b8:	2823883a 	mov	r17,r5
 20013bc:	4080202c 	andhi	r2,r8,128
 20013c0:	103fe026 	beq	r2,zero,2001344 <__adddf3+0x204>
 20013c4:	84000044 	addi	r16,r16,1
 20013c8:	0081ffc4 	movi	r2,2047
 20013cc:	8080d226 	beq	r16,r2,2001718 <__adddf3+0x5d8>
 20013d0:	00bfe034 	movhi	r2,65408
 20013d4:	10bfffc4 	addi	r2,r2,-1
 20013d8:	4090703a 	and	r8,r8,r2
 20013dc:	880ad07a 	srli	r5,r17,1
 20013e0:	400897fa 	slli	r4,r8,31
 20013e4:	88c0004c 	andi	r3,r17,1
 20013e8:	28e2b03a 	or	r17,r5,r3
 20013ec:	4010d07a 	srli	r8,r8,1
 20013f0:	2462b03a 	or	r17,r4,r17
 20013f4:	003f7106 	br	20011bc <__adddf3+0x7c>
 20013f8:	4088b03a 	or	r4,r8,r2
 20013fc:	20014526 	beq	r4,zero,2001914 <__adddf3+0x7d4>
 2001400:	01000434 	movhi	r4,16
 2001404:	42000234 	orhi	r8,r8,8
 2001408:	213fffc4 	addi	r4,r4,-1
 200140c:	4110703a 	and	r8,r8,r4
 2001410:	003f8206 	br	200121c <__adddf3+0xdc>
 2001414:	18ffffc4 	addi	r3,r3,-1
 2001418:	1800491e 	bne	r3,zero,2001540 <__adddf3+0x400>
 200141c:	898bc83a 	sub	r5,r17,r6
 2001420:	8963803a 	cmpltu	r17,r17,r5
 2001424:	4251c83a 	sub	r8,r8,r9
 2001428:	4451c83a 	sub	r8,r8,r17
 200142c:	2823883a 	mov	r17,r5
 2001430:	003f9f06 	br	20012b0 <__adddf3+0x170>
 2001434:	4984b03a 	or	r2,r9,r6
 2001438:	103f6026 	beq	r2,zero,20011bc <__adddf3+0x7c>
 200143c:	213fffc4 	addi	r4,r4,-1
 2001440:	2000931e 	bne	r4,zero,2001690 <__adddf3+0x550>
 2001444:	898d883a 	add	r6,r17,r6
 2001448:	3463803a 	cmpltu	r17,r6,r17
 200144c:	4251883a 	add	r8,r8,r9
 2001450:	8a11883a 	add	r8,r17,r8
 2001454:	3023883a 	mov	r17,r6
 2001458:	003fd806 	br	20013bc <__adddf3+0x27c>
 200145c:	1800541e 	bne	r3,zero,20015b0 <__adddf3+0x470>
 2001460:	80800044 	addi	r2,r16,1
 2001464:	1081ffcc 	andi	r2,r2,2047
 2001468:	00c00044 	movi	r3,1
 200146c:	1880a00e 	bge	r3,r2,20016f0 <__adddf3+0x5b0>
 2001470:	8989c83a 	sub	r4,r17,r6
 2001474:	8905803a 	cmpltu	r2,r17,r4
 2001478:	4267c83a 	sub	r19,r8,r9
 200147c:	98a7c83a 	sub	r19,r19,r2
 2001480:	9880202c 	andhi	r2,r19,128
 2001484:	10006326 	beq	r2,zero,2001614 <__adddf3+0x4d4>
 2001488:	3463c83a 	sub	r17,r6,r17
 200148c:	4a07c83a 	sub	r3,r9,r8
 2001490:	344d803a 	cmpltu	r6,r6,r17
 2001494:	19a7c83a 	sub	r19,r3,r6
 2001498:	3825883a 	mov	r18,r7
 200149c:	983f8a1e 	bne	r19,zero,20012c8 <__adddf3+0x188>
 20014a0:	8809883a 	mov	r4,r17
 20014a4:	20038500 	call	2003850 <__clzsi2>
 20014a8:	10800804 	addi	r2,r2,32
 20014ac:	10fffe04 	addi	r3,r2,-8
 20014b0:	010007c4 	movi	r4,31
 20014b4:	20ff890e 	bge	r4,r3,20012dc <__adddf3+0x19c>
 20014b8:	10bff604 	addi	r2,r2,-40
 20014bc:	8884983a 	sll	r2,r17,r2
 20014c0:	0023883a 	mov	r17,zero
 20014c4:	1c3f8c0e 	bge	r3,r16,20012f8 <__adddf3+0x1b8>
 20014c8:	023fe034 	movhi	r8,65408
 20014cc:	423fffc4 	addi	r8,r8,-1
 20014d0:	80e1c83a 	sub	r16,r16,r3
 20014d4:	1210703a 	and	r8,r2,r8
 20014d8:	003f3806 	br	20011bc <__adddf3+0x7c>
 20014dc:	9007883a 	mov	r3,r18
 20014e0:	0011883a 	mov	r8,zero
 20014e4:	0005883a 	mov	r2,zero
 20014e8:	003f4c06 	br	200121c <__adddf3+0xdc>
 20014ec:	498cb03a 	or	r6,r9,r6
 20014f0:	300cc03a 	cmpne	r6,r6,zero
 20014f4:	0007883a 	mov	r3,zero
 20014f8:	003f6806 	br	200129c <__adddf3+0x15c>
 20014fc:	20009c1e 	bne	r4,zero,2001770 <__adddf3+0x630>
 2001500:	80800044 	addi	r2,r16,1
 2001504:	1141ffcc 	andi	r5,r2,2047
 2001508:	01000044 	movi	r4,1
 200150c:	2140670e 	bge	r4,r5,20016ac <__adddf3+0x56c>
 2001510:	0101ffc4 	movi	r4,2047
 2001514:	11007f26 	beq	r2,r4,2001714 <__adddf3+0x5d4>
 2001518:	898d883a 	add	r6,r17,r6
 200151c:	4247883a 	add	r3,r8,r9
 2001520:	3451803a 	cmpltu	r8,r6,r17
 2001524:	40d1883a 	add	r8,r8,r3
 2001528:	402297fa 	slli	r17,r8,31
 200152c:	300cd07a 	srli	r6,r6,1
 2001530:	4010d07a 	srli	r8,r8,1
 2001534:	1021883a 	mov	r16,r2
 2001538:	89a2b03a 	or	r17,r17,r6
 200153c:	003f1f06 	br	20011bc <__adddf3+0x7c>
 2001540:	0081ffc4 	movi	r2,2047
 2001544:	80bf481e 	bne	r16,r2,2001268 <__adddf3+0x128>
 2001548:	003f1c06 	br	20011bc <__adddf3+0x7c>
 200154c:	843ff844 	addi	r16,r16,-31
 2001550:	01000804 	movi	r4,32
 2001554:	1406d83a 	srl	r3,r2,r16
 2001558:	41005026 	beq	r8,r4,200169c <__adddf3+0x55c>
 200155c:	01001004 	movi	r4,64
 2001560:	2211c83a 	sub	r8,r4,r8
 2001564:	1204983a 	sll	r2,r2,r8
 2001568:	88a2b03a 	or	r17,r17,r2
 200156c:	8822c03a 	cmpne	r17,r17,zero
 2001570:	1c62b03a 	or	r17,r3,r17
 2001574:	0011883a 	mov	r8,zero
 2001578:	0021883a 	mov	r16,zero
 200157c:	003f7106 	br	2001344 <__adddf3+0x204>
 2001580:	193ff804 	addi	r4,r3,-32
 2001584:	00800804 	movi	r2,32
 2001588:	4908d83a 	srl	r4,r9,r4
 200158c:	18804526 	beq	r3,r2,20016a4 <__adddf3+0x564>
 2001590:	00801004 	movi	r2,64
 2001594:	10c5c83a 	sub	r2,r2,r3
 2001598:	4886983a 	sll	r3,r9,r2
 200159c:	198cb03a 	or	r6,r3,r6
 20015a0:	300cc03a 	cmpne	r6,r6,zero
 20015a4:	218cb03a 	or	r6,r4,r6
 20015a8:	0007883a 	mov	r3,zero
 20015ac:	003f3b06 	br	200129c <__adddf3+0x15c>
 20015b0:	80002a26 	beq	r16,zero,200165c <__adddf3+0x51c>
 20015b4:	0101ffc4 	movi	r4,2047
 20015b8:	11006826 	beq	r2,r4,200175c <__adddf3+0x61c>
 20015bc:	00c7c83a 	sub	r3,zero,r3
 20015c0:	42002034 	orhi	r8,r8,128
 20015c4:	01000e04 	movi	r4,56
 20015c8:	20c07c16 	blt	r4,r3,20017bc <__adddf3+0x67c>
 20015cc:	010007c4 	movi	r4,31
 20015d0:	20c0da16 	blt	r4,r3,200193c <__adddf3+0x7fc>
 20015d4:	01000804 	movi	r4,32
 20015d8:	20c9c83a 	sub	r4,r4,r3
 20015dc:	4114983a 	sll	r10,r8,r4
 20015e0:	88cad83a 	srl	r5,r17,r3
 20015e4:	8908983a 	sll	r4,r17,r4
 20015e8:	40c6d83a 	srl	r3,r8,r3
 20015ec:	5162b03a 	or	r17,r10,r5
 20015f0:	2008c03a 	cmpne	r4,r4,zero
 20015f4:	8922b03a 	or	r17,r17,r4
 20015f8:	3463c83a 	sub	r17,r6,r17
 20015fc:	48c7c83a 	sub	r3,r9,r3
 2001600:	344d803a 	cmpltu	r6,r6,r17
 2001604:	1991c83a 	sub	r8,r3,r6
 2001608:	1021883a 	mov	r16,r2
 200160c:	3825883a 	mov	r18,r7
 2001610:	003f2706 	br	20012b0 <__adddf3+0x170>
 2001614:	24d0b03a 	or	r8,r4,r19
 2001618:	40001b1e 	bne	r8,zero,2001688 <__adddf3+0x548>
 200161c:	0005883a 	mov	r2,zero
 2001620:	0007883a 	mov	r3,zero
 2001624:	0021883a 	mov	r16,zero
 2001628:	003f4d06 	br	2001360 <__adddf3+0x220>
 200162c:	008007c4 	movi	r2,31
 2001630:	11003c16 	blt	r2,r4,2001724 <__adddf3+0x5e4>
 2001634:	00800804 	movi	r2,32
 2001638:	1105c83a 	sub	r2,r2,r4
 200163c:	488e983a 	sll	r7,r9,r2
 2001640:	310ad83a 	srl	r5,r6,r4
 2001644:	3084983a 	sll	r2,r6,r2
 2001648:	4912d83a 	srl	r9,r9,r4
 200164c:	394ab03a 	or	r5,r7,r5
 2001650:	1004c03a 	cmpne	r2,r2,zero
 2001654:	288ab03a 	or	r5,r5,r2
 2001658:	003f5306 	br	20013a8 <__adddf3+0x268>
 200165c:	4448b03a 	or	r4,r8,r17
 2001660:	20003e26 	beq	r4,zero,200175c <__adddf3+0x61c>
 2001664:	00c6303a 	nor	r3,zero,r3
 2001668:	18003a1e 	bne	r3,zero,2001754 <__adddf3+0x614>
 200166c:	3463c83a 	sub	r17,r6,r17
 2001670:	4a07c83a 	sub	r3,r9,r8
 2001674:	344d803a 	cmpltu	r6,r6,r17
 2001678:	1991c83a 	sub	r8,r3,r6
 200167c:	1021883a 	mov	r16,r2
 2001680:	3825883a 	mov	r18,r7
 2001684:	003f0a06 	br	20012b0 <__adddf3+0x170>
 2001688:	2023883a 	mov	r17,r4
 200168c:	003f0d06 	br	20012c4 <__adddf3+0x184>
 2001690:	0081ffc4 	movi	r2,2047
 2001694:	80bf3f1e 	bne	r16,r2,2001394 <__adddf3+0x254>
 2001698:	003ec806 	br	20011bc <__adddf3+0x7c>
 200169c:	0005883a 	mov	r2,zero
 20016a0:	003fb106 	br	2001568 <__adddf3+0x428>
 20016a4:	0007883a 	mov	r3,zero
 20016a8:	003fbc06 	br	200159c <__adddf3+0x45c>
 20016ac:	4444b03a 	or	r2,r8,r17
 20016b0:	8000871e 	bne	r16,zero,20018d0 <__adddf3+0x790>
 20016b4:	1000ba26 	beq	r2,zero,20019a0 <__adddf3+0x860>
 20016b8:	4984b03a 	or	r2,r9,r6
 20016bc:	103ebf26 	beq	r2,zero,20011bc <__adddf3+0x7c>
 20016c0:	8985883a 	add	r2,r17,r6
 20016c4:	4247883a 	add	r3,r8,r9
 20016c8:	1451803a 	cmpltu	r8,r2,r17
 20016cc:	40d1883a 	add	r8,r8,r3
 20016d0:	40c0202c 	andhi	r3,r8,128
 20016d4:	1023883a 	mov	r17,r2
 20016d8:	183f1a26 	beq	r3,zero,2001344 <__adddf3+0x204>
 20016dc:	00bfe034 	movhi	r2,65408
 20016e0:	10bfffc4 	addi	r2,r2,-1
 20016e4:	2021883a 	mov	r16,r4
 20016e8:	4090703a 	and	r8,r8,r2
 20016ec:	003eb306 	br	20011bc <__adddf3+0x7c>
 20016f0:	4444b03a 	or	r2,r8,r17
 20016f4:	8000291e 	bne	r16,zero,200179c <__adddf3+0x65c>
 20016f8:	10004b1e 	bne	r2,zero,2001828 <__adddf3+0x6e8>
 20016fc:	4990b03a 	or	r8,r9,r6
 2001700:	40008b26 	beq	r8,zero,2001930 <__adddf3+0x7f0>
 2001704:	4811883a 	mov	r8,r9
 2001708:	3023883a 	mov	r17,r6
 200170c:	3825883a 	mov	r18,r7
 2001710:	003eaa06 	br	20011bc <__adddf3+0x7c>
 2001714:	1021883a 	mov	r16,r2
 2001718:	0011883a 	mov	r8,zero
 200171c:	0005883a 	mov	r2,zero
 2001720:	003f0f06 	br	2001360 <__adddf3+0x220>
 2001724:	217ff804 	addi	r5,r4,-32
 2001728:	00800804 	movi	r2,32
 200172c:	494ad83a 	srl	r5,r9,r5
 2001730:	20807d26 	beq	r4,r2,2001928 <__adddf3+0x7e8>
 2001734:	00801004 	movi	r2,64
 2001738:	1109c83a 	sub	r4,r2,r4
 200173c:	4912983a 	sll	r9,r9,r4
 2001740:	498cb03a 	or	r6,r9,r6
 2001744:	300cc03a 	cmpne	r6,r6,zero
 2001748:	298ab03a 	or	r5,r5,r6
 200174c:	0013883a 	mov	r9,zero
 2001750:	003f1506 	br	20013a8 <__adddf3+0x268>
 2001754:	0101ffc4 	movi	r4,2047
 2001758:	113f9a1e 	bne	r2,r4,20015c4 <__adddf3+0x484>
 200175c:	4811883a 	mov	r8,r9
 2001760:	3023883a 	mov	r17,r6
 2001764:	1021883a 	mov	r16,r2
 2001768:	3825883a 	mov	r18,r7
 200176c:	003e9306 	br	20011bc <__adddf3+0x7c>
 2001770:	8000161e 	bne	r16,zero,20017cc <__adddf3+0x68c>
 2001774:	444ab03a 	or	r5,r8,r17
 2001778:	28005126 	beq	r5,zero,20018c0 <__adddf3+0x780>
 200177c:	0108303a 	nor	r4,zero,r4
 2001780:	20004d1e 	bne	r4,zero,20018b8 <__adddf3+0x778>
 2001784:	89a3883a 	add	r17,r17,r6
 2001788:	4253883a 	add	r9,r8,r9
 200178c:	898d803a 	cmpltu	r6,r17,r6
 2001790:	3251883a 	add	r8,r6,r9
 2001794:	1021883a 	mov	r16,r2
 2001798:	003f0806 	br	20013bc <__adddf3+0x27c>
 200179c:	1000301e 	bne	r2,zero,2001860 <__adddf3+0x720>
 20017a0:	4984b03a 	or	r2,r9,r6
 20017a4:	10007126 	beq	r2,zero,200196c <__adddf3+0x82c>
 20017a8:	4811883a 	mov	r8,r9
 20017ac:	3023883a 	mov	r17,r6
 20017b0:	3825883a 	mov	r18,r7
 20017b4:	0401ffc4 	movi	r16,2047
 20017b8:	003e8006 	br	20011bc <__adddf3+0x7c>
 20017bc:	4462b03a 	or	r17,r8,r17
 20017c0:	8822c03a 	cmpne	r17,r17,zero
 20017c4:	0007883a 	mov	r3,zero
 20017c8:	003f8b06 	br	20015f8 <__adddf3+0x4b8>
 20017cc:	0141ffc4 	movi	r5,2047
 20017d0:	11403b26 	beq	r2,r5,20018c0 <__adddf3+0x780>
 20017d4:	0109c83a 	sub	r4,zero,r4
 20017d8:	42002034 	orhi	r8,r8,128
 20017dc:	01400e04 	movi	r5,56
 20017e0:	29006716 	blt	r5,r4,2001980 <__adddf3+0x840>
 20017e4:	014007c4 	movi	r5,31
 20017e8:	29007016 	blt	r5,r4,20019ac <__adddf3+0x86c>
 20017ec:	01400804 	movi	r5,32
 20017f0:	290bc83a 	sub	r5,r5,r4
 20017f4:	4154983a 	sll	r10,r8,r5
 20017f8:	890ed83a 	srl	r7,r17,r4
 20017fc:	894a983a 	sll	r5,r17,r5
 2001800:	4108d83a 	srl	r4,r8,r4
 2001804:	51e2b03a 	or	r17,r10,r7
 2001808:	280ac03a 	cmpne	r5,r5,zero
 200180c:	8962b03a 	or	r17,r17,r5
 2001810:	89a3883a 	add	r17,r17,r6
 2001814:	2253883a 	add	r9,r4,r9
 2001818:	898d803a 	cmpltu	r6,r17,r6
 200181c:	3251883a 	add	r8,r6,r9
 2001820:	1021883a 	mov	r16,r2
 2001824:	003ee506 	br	20013bc <__adddf3+0x27c>
 2001828:	4984b03a 	or	r2,r9,r6
 200182c:	103e6326 	beq	r2,zero,20011bc <__adddf3+0x7c>
 2001830:	8987c83a 	sub	r3,r17,r6
 2001834:	88c9803a 	cmpltu	r4,r17,r3
 2001838:	4245c83a 	sub	r2,r8,r9
 200183c:	1105c83a 	sub	r2,r2,r4
 2001840:	1100202c 	andhi	r4,r2,128
 2001844:	203ebb26 	beq	r4,zero,2001334 <__adddf3+0x1f4>
 2001848:	3463c83a 	sub	r17,r6,r17
 200184c:	4a07c83a 	sub	r3,r9,r8
 2001850:	344d803a 	cmpltu	r6,r6,r17
 2001854:	1991c83a 	sub	r8,r3,r6
 2001858:	3825883a 	mov	r18,r7
 200185c:	003e5706 	br	20011bc <__adddf3+0x7c>
 2001860:	4984b03a 	or	r2,r9,r6
 2001864:	10002e26 	beq	r2,zero,2001920 <__adddf3+0x7e0>
 2001868:	4004d0fa 	srli	r2,r8,3
 200186c:	8822d0fa 	srli	r17,r17,3
 2001870:	4010977a 	slli	r8,r8,29
 2001874:	10c0022c 	andhi	r3,r2,8
 2001878:	4462b03a 	or	r17,r8,r17
 200187c:	18000826 	beq	r3,zero,20018a0 <__adddf3+0x760>
 2001880:	4808d0fa 	srli	r4,r9,3
 2001884:	20c0022c 	andhi	r3,r4,8
 2001888:	1800051e 	bne	r3,zero,20018a0 <__adddf3+0x760>
 200188c:	300cd0fa 	srli	r6,r6,3
 2001890:	4806977a 	slli	r3,r9,29
 2001894:	2005883a 	mov	r2,r4
 2001898:	3825883a 	mov	r18,r7
 200189c:	19a2b03a 	or	r17,r3,r6
 20018a0:	8810d77a 	srli	r8,r17,29
 20018a4:	100490fa 	slli	r2,r2,3
 20018a8:	882290fa 	slli	r17,r17,3
 20018ac:	0401ffc4 	movi	r16,2047
 20018b0:	4090b03a 	or	r8,r8,r2
 20018b4:	003e4106 	br	20011bc <__adddf3+0x7c>
 20018b8:	0141ffc4 	movi	r5,2047
 20018bc:	117fc71e 	bne	r2,r5,20017dc <__adddf3+0x69c>
 20018c0:	4811883a 	mov	r8,r9
 20018c4:	3023883a 	mov	r17,r6
 20018c8:	1021883a 	mov	r16,r2
 20018cc:	003e3b06 	br	20011bc <__adddf3+0x7c>
 20018d0:	10002f26 	beq	r2,zero,2001990 <__adddf3+0x850>
 20018d4:	4984b03a 	or	r2,r9,r6
 20018d8:	10001126 	beq	r2,zero,2001920 <__adddf3+0x7e0>
 20018dc:	4004d0fa 	srli	r2,r8,3
 20018e0:	8822d0fa 	srli	r17,r17,3
 20018e4:	4010977a 	slli	r8,r8,29
 20018e8:	10c0022c 	andhi	r3,r2,8
 20018ec:	4462b03a 	or	r17,r8,r17
 20018f0:	183feb26 	beq	r3,zero,20018a0 <__adddf3+0x760>
 20018f4:	4808d0fa 	srli	r4,r9,3
 20018f8:	20c0022c 	andhi	r3,r4,8
 20018fc:	183fe81e 	bne	r3,zero,20018a0 <__adddf3+0x760>
 2001900:	300cd0fa 	srli	r6,r6,3
 2001904:	4806977a 	slli	r3,r9,29
 2001908:	2005883a 	mov	r2,r4
 200190c:	19a2b03a 	or	r17,r3,r6
 2001910:	003fe306 	br	20018a0 <__adddf3+0x760>
 2001914:	0011883a 	mov	r8,zero
 2001918:	0005883a 	mov	r2,zero
 200191c:	003e3f06 	br	200121c <__adddf3+0xdc>
 2001920:	0401ffc4 	movi	r16,2047
 2001924:	003e2506 	br	20011bc <__adddf3+0x7c>
 2001928:	0013883a 	mov	r9,zero
 200192c:	003f8406 	br	2001740 <__adddf3+0x600>
 2001930:	0005883a 	mov	r2,zero
 2001934:	0007883a 	mov	r3,zero
 2001938:	003e8906 	br	2001360 <__adddf3+0x220>
 200193c:	197ff804 	addi	r5,r3,-32
 2001940:	01000804 	movi	r4,32
 2001944:	414ad83a 	srl	r5,r8,r5
 2001948:	19002426 	beq	r3,r4,20019dc <__adddf3+0x89c>
 200194c:	01001004 	movi	r4,64
 2001950:	20c7c83a 	sub	r3,r4,r3
 2001954:	40c6983a 	sll	r3,r8,r3
 2001958:	1c46b03a 	or	r3,r3,r17
 200195c:	1806c03a 	cmpne	r3,r3,zero
 2001960:	28e2b03a 	or	r17,r5,r3
 2001964:	0007883a 	mov	r3,zero
 2001968:	003f2306 	br	20015f8 <__adddf3+0x4b8>
 200196c:	0007883a 	mov	r3,zero
 2001970:	5811883a 	mov	r8,r11
 2001974:	00bfffc4 	movi	r2,-1
 2001978:	0401ffc4 	movi	r16,2047
 200197c:	003e7806 	br	2001360 <__adddf3+0x220>
 2001980:	4462b03a 	or	r17,r8,r17
 2001984:	8822c03a 	cmpne	r17,r17,zero
 2001988:	0009883a 	mov	r4,zero
 200198c:	003fa006 	br	2001810 <__adddf3+0x6d0>
 2001990:	4811883a 	mov	r8,r9
 2001994:	3023883a 	mov	r17,r6
 2001998:	0401ffc4 	movi	r16,2047
 200199c:	003e0706 	br	20011bc <__adddf3+0x7c>
 20019a0:	4811883a 	mov	r8,r9
 20019a4:	3023883a 	mov	r17,r6
 20019a8:	003e0406 	br	20011bc <__adddf3+0x7c>
 20019ac:	21fff804 	addi	r7,r4,-32
 20019b0:	01400804 	movi	r5,32
 20019b4:	41ced83a 	srl	r7,r8,r7
 20019b8:	21400a26 	beq	r4,r5,20019e4 <__adddf3+0x8a4>
 20019bc:	01401004 	movi	r5,64
 20019c0:	2909c83a 	sub	r4,r5,r4
 20019c4:	4108983a 	sll	r4,r8,r4
 20019c8:	2448b03a 	or	r4,r4,r17
 20019cc:	2008c03a 	cmpne	r4,r4,zero
 20019d0:	3922b03a 	or	r17,r7,r4
 20019d4:	0009883a 	mov	r4,zero
 20019d8:	003f8d06 	br	2001810 <__adddf3+0x6d0>
 20019dc:	0007883a 	mov	r3,zero
 20019e0:	003fdd06 	br	2001958 <__adddf3+0x818>
 20019e4:	0009883a 	mov	r4,zero
 20019e8:	003ff706 	br	20019c8 <__adddf3+0x888>

020019ec <__divdf3>:
 20019ec:	defff004 	addi	sp,sp,-64
 20019f0:	dc800815 	stw	r18,32(sp)
 20019f4:	2824d53a 	srli	r18,r5,20
 20019f8:	dd800c15 	stw	r22,48(sp)
 20019fc:	282cd7fa 	srli	r22,r5,31
 2001a00:	dc000615 	stw	r16,24(sp)
 2001a04:	04000434 	movhi	r16,16
 2001a08:	843fffc4 	addi	r16,r16,-1
 2001a0c:	dfc00f15 	stw	ra,60(sp)
 2001a10:	df000e15 	stw	fp,56(sp)
 2001a14:	ddc00d15 	stw	r23,52(sp)
 2001a18:	dd400b15 	stw	r21,44(sp)
 2001a1c:	dd000a15 	stw	r20,40(sp)
 2001a20:	dcc00915 	stw	r19,36(sp)
 2001a24:	dc400715 	stw	r17,28(sp)
 2001a28:	9481ffcc 	andi	r18,r18,2047
 2001a2c:	2c20703a 	and	r16,r5,r16
 2001a30:	b2003fcc 	andi	r8,r22,255
 2001a34:	90006126 	beq	r18,zero,2001bbc <__divdf3+0x1d0>
 2001a38:	0081ffc4 	movi	r2,2047
 2001a3c:	202b883a 	mov	r21,r4
 2001a40:	90803726 	beq	r18,r2,2001b20 <__divdf3+0x134>
 2001a44:	80800434 	orhi	r2,r16,16
 2001a48:	100490fa 	slli	r2,r2,3
 2001a4c:	2020d77a 	srli	r16,r4,29
 2001a50:	202a90fa 	slli	r21,r4,3
 2001a54:	94bf0044 	addi	r18,r18,-1023
 2001a58:	80a0b03a 	or	r16,r16,r2
 2001a5c:	0013883a 	mov	r9,zero
 2001a60:	000b883a 	mov	r5,zero
 2001a64:	3806d53a 	srli	r3,r7,20
 2001a68:	382ed7fa 	srli	r23,r7,31
 2001a6c:	04400434 	movhi	r17,16
 2001a70:	8c7fffc4 	addi	r17,r17,-1
 2001a74:	18c1ffcc 	andi	r3,r3,2047
 2001a78:	3029883a 	mov	r20,r6
 2001a7c:	3c62703a 	and	r17,r7,r17
 2001a80:	bf003fcc 	andi	fp,r23,255
 2001a84:	18006e26 	beq	r3,zero,2001c40 <__divdf3+0x254>
 2001a88:	0081ffc4 	movi	r2,2047
 2001a8c:	18806626 	beq	r3,r2,2001c28 <__divdf3+0x23c>
 2001a90:	88800434 	orhi	r2,r17,16
 2001a94:	100490fa 	slli	r2,r2,3
 2001a98:	3022d77a 	srli	r17,r6,29
 2001a9c:	302890fa 	slli	r20,r6,3
 2001aa0:	18ff0044 	addi	r3,r3,-1023
 2001aa4:	88a2b03a 	or	r17,r17,r2
 2001aa8:	000f883a 	mov	r7,zero
 2001aac:	b5e6f03a 	xor	r19,r22,r23
 2001ab0:	3a4cb03a 	or	r6,r7,r9
 2001ab4:	008003c4 	movi	r2,15
 2001ab8:	9809883a 	mov	r4,r19
 2001abc:	90c7c83a 	sub	r3,r18,r3
 2001ac0:	9cc03fcc 	andi	r19,r19,255
 2001ac4:	11809636 	bltu	r2,r6,2001d20 <__divdf3+0x334>
 2001ac8:	300c90ba 	slli	r6,r6,2
 2001acc:	00808034 	movhi	r2,512
 2001ad0:	1086b804 	addi	r2,r2,6880
 2001ad4:	308d883a 	add	r6,r6,r2
 2001ad8:	30800017 	ldw	r2,0(r6)
 2001adc:	1000683a 	jmp	r2
 2001ae0:	02001d20 	cmpeqi	r8,zero,116
 2001ae4:	02001b58 	cmpnei	r8,zero,109
 2001ae8:	02001d10 	cmplti	r8,zero,116
 2001aec:	02001b4c 	andi	r8,zero,109
 2001af0:	02001d10 	cmplti	r8,zero,116
 2001af4:	02001ce4 	muli	r8,zero,115
 2001af8:	02001d10 	cmplti	r8,zero,116
 2001afc:	02001b4c 	andi	r8,zero,109
 2001b00:	02001b58 	cmpnei	r8,zero,109
 2001b04:	02001b58 	cmpnei	r8,zero,109
 2001b08:	02001ce4 	muli	r8,zero,115
 2001b0c:	02001b4c 	andi	r8,zero,109
 2001b10:	02001b3c 	xorhi	r8,zero,108
 2001b14:	02001b3c 	xorhi	r8,zero,108
 2001b18:	02001b3c 	xorhi	r8,zero,108
 2001b1c:	020020a8 	cmpgeui	r8,zero,130
 2001b20:	2404b03a 	or	r2,r4,r16
 2001b24:	10006c1e 	bne	r2,zero,2001cd8 <__divdf3+0x2ec>
 2001b28:	02400204 	movi	r9,8
 2001b2c:	0021883a 	mov	r16,zero
 2001b30:	002b883a 	mov	r21,zero
 2001b34:	01400084 	movi	r5,2
 2001b38:	003fca06 	br	2001a64 <__divdf3+0x78>
 2001b3c:	8023883a 	mov	r17,r16
 2001b40:	a829883a 	mov	r20,r21
 2001b44:	4039883a 	mov	fp,r8
 2001b48:	280f883a 	mov	r7,r5
 2001b4c:	00800084 	movi	r2,2
 2001b50:	3881601e 	bne	r7,r2,20020d4 <__divdf3+0x6e8>
 2001b54:	e027883a 	mov	r19,fp
 2001b58:	9900004c 	andi	r4,r19,1
 2001b5c:	0081ffc4 	movi	r2,2047
 2001b60:	0021883a 	mov	r16,zero
 2001b64:	002b883a 	mov	r21,zero
 2001b68:	1004953a 	slli	r2,r2,20
 2001b6c:	20c03fcc 	andi	r3,r4,255
 2001b70:	01400434 	movhi	r5,16
 2001b74:	297fffc4 	addi	r5,r5,-1
 2001b78:	180697fa 	slli	r3,r3,31
 2001b7c:	8160703a 	and	r16,r16,r5
 2001b80:	80a0b03a 	or	r16,r16,r2
 2001b84:	80c6b03a 	or	r3,r16,r3
 2001b88:	a805883a 	mov	r2,r21
 2001b8c:	dfc00f17 	ldw	ra,60(sp)
 2001b90:	df000e17 	ldw	fp,56(sp)
 2001b94:	ddc00d17 	ldw	r23,52(sp)
 2001b98:	dd800c17 	ldw	r22,48(sp)
 2001b9c:	dd400b17 	ldw	r21,44(sp)
 2001ba0:	dd000a17 	ldw	r20,40(sp)
 2001ba4:	dcc00917 	ldw	r19,36(sp)
 2001ba8:	dc800817 	ldw	r18,32(sp)
 2001bac:	dc400717 	ldw	r17,28(sp)
 2001bb0:	dc000617 	ldw	r16,24(sp)
 2001bb4:	dec01004 	addi	sp,sp,64
 2001bb8:	f800283a 	ret
 2001bbc:	2404b03a 	or	r2,r4,r16
 2001bc0:	2023883a 	mov	r17,r4
 2001bc4:	10003f26 	beq	r2,zero,2001cc4 <__divdf3+0x2d8>
 2001bc8:	80015e26 	beq	r16,zero,2002144 <__divdf3+0x758>
 2001bcc:	8009883a 	mov	r4,r16
 2001bd0:	d9800215 	stw	r6,8(sp)
 2001bd4:	d9c00515 	stw	r7,20(sp)
 2001bd8:	da000415 	stw	r8,16(sp)
 2001bdc:	20038500 	call	2003850 <__clzsi2>
 2001be0:	d9800217 	ldw	r6,8(sp)
 2001be4:	d9c00517 	ldw	r7,20(sp)
 2001be8:	da000417 	ldw	r8,16(sp)
 2001bec:	113ffd44 	addi	r4,r2,-11
 2001bf0:	00c00704 	movi	r3,28
 2001bf4:	19014f16 	blt	r3,r4,2002134 <__divdf3+0x748>
 2001bf8:	00c00744 	movi	r3,29
 2001bfc:	157ffe04 	addi	r21,r2,-8
 2001c00:	1907c83a 	sub	r3,r3,r4
 2001c04:	8560983a 	sll	r16,r16,r21
 2001c08:	88c6d83a 	srl	r3,r17,r3
 2001c0c:	8d6a983a 	sll	r21,r17,r21
 2001c10:	1c20b03a 	or	r16,r3,r16
 2001c14:	1080fcc4 	addi	r2,r2,1011
 2001c18:	00a5c83a 	sub	r18,zero,r2
 2001c1c:	0013883a 	mov	r9,zero
 2001c20:	000b883a 	mov	r5,zero
 2001c24:	003f8f06 	br	2001a64 <__divdf3+0x78>
 2001c28:	3444b03a 	or	r2,r6,r17
 2001c2c:	1000231e 	bne	r2,zero,2001cbc <__divdf3+0x2d0>
 2001c30:	0023883a 	mov	r17,zero
 2001c34:	0029883a 	mov	r20,zero
 2001c38:	01c00084 	movi	r7,2
 2001c3c:	003f9b06 	br	2001aac <__divdf3+0xc0>
 2001c40:	3444b03a 	or	r2,r6,r17
 2001c44:	10001926 	beq	r2,zero,2001cac <__divdf3+0x2c0>
 2001c48:	88014b26 	beq	r17,zero,2002178 <__divdf3+0x78c>
 2001c4c:	8809883a 	mov	r4,r17
 2001c50:	d9400115 	stw	r5,4(sp)
 2001c54:	d9800215 	stw	r6,8(sp)
 2001c58:	da000415 	stw	r8,16(sp)
 2001c5c:	da400315 	stw	r9,12(sp)
 2001c60:	20038500 	call	2003850 <__clzsi2>
 2001c64:	d9400117 	ldw	r5,4(sp)
 2001c68:	d9800217 	ldw	r6,8(sp)
 2001c6c:	da000417 	ldw	r8,16(sp)
 2001c70:	da400317 	ldw	r9,12(sp)
 2001c74:	113ffd44 	addi	r4,r2,-11
 2001c78:	00c00704 	movi	r3,28
 2001c7c:	19013a16 	blt	r3,r4,2002168 <__divdf3+0x77c>
 2001c80:	00c00744 	movi	r3,29
 2001c84:	153ffe04 	addi	r20,r2,-8
 2001c88:	1907c83a 	sub	r3,r3,r4
 2001c8c:	8d22983a 	sll	r17,r17,r20
 2001c90:	30c6d83a 	srl	r3,r6,r3
 2001c94:	3528983a 	sll	r20,r6,r20
 2001c98:	1c62b03a 	or	r17,r3,r17
 2001c9c:	1080fcc4 	addi	r2,r2,1011
 2001ca0:	0087c83a 	sub	r3,zero,r2
 2001ca4:	000f883a 	mov	r7,zero
 2001ca8:	003f8006 	br	2001aac <__divdf3+0xc0>
 2001cac:	0023883a 	mov	r17,zero
 2001cb0:	0029883a 	mov	r20,zero
 2001cb4:	01c00044 	movi	r7,1
 2001cb8:	003f7c06 	br	2001aac <__divdf3+0xc0>
 2001cbc:	01c000c4 	movi	r7,3
 2001cc0:	003f7a06 	br	2001aac <__divdf3+0xc0>
 2001cc4:	02400104 	movi	r9,4
 2001cc8:	0021883a 	mov	r16,zero
 2001ccc:	002b883a 	mov	r21,zero
 2001cd0:	01400044 	movi	r5,1
 2001cd4:	003f6306 	br	2001a64 <__divdf3+0x78>
 2001cd8:	02400304 	movi	r9,12
 2001cdc:	014000c4 	movi	r5,3
 2001ce0:	003f6006 	br	2001a64 <__divdf3+0x78>
 2001ce4:	04000434 	movhi	r16,16
 2001ce8:	0009883a 	mov	r4,zero
 2001cec:	843fffc4 	addi	r16,r16,-1
 2001cf0:	057fffc4 	movi	r21,-1
 2001cf4:	0081ffc4 	movi	r2,2047
 2001cf8:	003f9b06 	br	2001b68 <__divdf3+0x17c>
 2001cfc:	00c00044 	movi	r3,1
 2001d00:	1887c83a 	sub	r3,r3,r2
 2001d04:	01000e04 	movi	r4,56
 2001d08:	20c1530e 	bge	r4,r3,2002258 <__divdf3+0x86c>
 2001d0c:	9900004c 	andi	r4,r19,1
 2001d10:	0005883a 	mov	r2,zero
 2001d14:	0021883a 	mov	r16,zero
 2001d18:	002b883a 	mov	r21,zero
 2001d1c:	003f9206 	br	2001b68 <__divdf3+0x17c>
 2001d20:	8c012e36 	bltu	r17,r16,20021dc <__divdf3+0x7f0>
 2001d24:	84412c26 	beq	r16,r17,20021d8 <__divdf3+0x7ec>
 2001d28:	a82f883a 	mov	r23,r21
 2001d2c:	18ffffc4 	addi	r3,r3,-1
 2001d30:	002b883a 	mov	r21,zero
 2001d34:	a004d63a 	srli	r2,r20,24
 2001d38:	8822923a 	slli	r17,r17,8
 2001d3c:	a028923a 	slli	r20,r20,8
 2001d40:	8009883a 	mov	r4,r16
 2001d44:	88acb03a 	or	r22,r17,r2
 2001d48:	dd000015 	stw	r20,0(sp)
 2001d4c:	b028d43a 	srli	r20,r22,16
 2001d50:	d8c00215 	stw	r3,8(sp)
 2001d54:	b4bfffcc 	andi	r18,r22,65535
 2001d58:	a00b883a 	mov	r5,r20
 2001d5c:	20039ac0 	call	20039ac <__udivsi3>
 2001d60:	100b883a 	mov	r5,r2
 2001d64:	9009883a 	mov	r4,r18
 2001d68:	1023883a 	mov	r17,r2
 2001d6c:	20011180 	call	2001118 <__mulsi3>
 2001d70:	8009883a 	mov	r4,r16
 2001d74:	a00b883a 	mov	r5,r20
 2001d78:	1039883a 	mov	fp,r2
 2001d7c:	2003a100 	call	2003a10 <__umodsi3>
 2001d80:	1004943a 	slli	r2,r2,16
 2001d84:	b808d43a 	srli	r4,r23,16
 2001d88:	d8c00217 	ldw	r3,8(sp)
 2001d8c:	2084b03a 	or	r2,r4,r2
 2001d90:	1700062e 	bgeu	r2,fp,2001dac <__divdf3+0x3c0>
 2001d94:	1585883a 	add	r2,r2,r22
 2001d98:	893fffc4 	addi	r4,r17,-1
 2001d9c:	15811d36 	bltu	r2,r22,2002214 <__divdf3+0x828>
 2001da0:	17011c2e 	bgeu	r2,fp,2002214 <__divdf3+0x828>
 2001da4:	8c7fff84 	addi	r17,r17,-2
 2001da8:	1585883a 	add	r2,r2,r22
 2001dac:	1739c83a 	sub	fp,r2,fp
 2001db0:	a00b883a 	mov	r5,r20
 2001db4:	e009883a 	mov	r4,fp
 2001db8:	d8c00215 	stw	r3,8(sp)
 2001dbc:	20039ac0 	call	20039ac <__udivsi3>
 2001dc0:	100b883a 	mov	r5,r2
 2001dc4:	9009883a 	mov	r4,r18
 2001dc8:	1021883a 	mov	r16,r2
 2001dcc:	20011180 	call	2001118 <__mulsi3>
 2001dd0:	a00b883a 	mov	r5,r20
 2001dd4:	e009883a 	mov	r4,fp
 2001dd8:	d8800415 	stw	r2,16(sp)
 2001ddc:	2003a100 	call	2003a10 <__umodsi3>
 2001de0:	1004943a 	slli	r2,r2,16
 2001de4:	da000417 	ldw	r8,16(sp)
 2001de8:	bdffffcc 	andi	r23,r23,65535
 2001dec:	b884b03a 	or	r2,r23,r2
 2001df0:	d8c00217 	ldw	r3,8(sp)
 2001df4:	1200062e 	bgeu	r2,r8,2001e10 <__divdf3+0x424>
 2001df8:	1585883a 	add	r2,r2,r22
 2001dfc:	813fffc4 	addi	r4,r16,-1
 2001e00:	15810236 	bltu	r2,r22,200220c <__divdf3+0x820>
 2001e04:	1201012e 	bgeu	r2,r8,200220c <__divdf3+0x820>
 2001e08:	843fff84 	addi	r16,r16,-2
 2001e0c:	1585883a 	add	r2,r2,r22
 2001e10:	8822943a 	slli	r17,r17,16
 2001e14:	d9800017 	ldw	r6,0(sp)
 2001e18:	1211c83a 	sub	r8,r2,r8
 2001e1c:	8c22b03a 	or	r17,r17,r16
 2001e20:	373fffcc 	andi	fp,r6,65535
 2001e24:	8abfffcc 	andi	r10,r17,65535
 2001e28:	8820d43a 	srli	r16,r17,16
 2001e2c:	5009883a 	mov	r4,r10
 2001e30:	e00b883a 	mov	r5,fp
 2001e34:	302ed43a 	srli	r23,r6,16
 2001e38:	d8c00215 	stw	r3,8(sp)
 2001e3c:	da000415 	stw	r8,16(sp)
 2001e40:	da800115 	stw	r10,4(sp)
 2001e44:	20011180 	call	2001118 <__mulsi3>
 2001e48:	800b883a 	mov	r5,r16
 2001e4c:	e009883a 	mov	r4,fp
 2001e50:	d8800515 	stw	r2,20(sp)
 2001e54:	20011180 	call	2001118 <__mulsi3>
 2001e58:	8009883a 	mov	r4,r16
 2001e5c:	b80b883a 	mov	r5,r23
 2001e60:	d8800315 	stw	r2,12(sp)
 2001e64:	20011180 	call	2001118 <__mulsi3>
 2001e68:	da800117 	ldw	r10,4(sp)
 2001e6c:	b80b883a 	mov	r5,r23
 2001e70:	1021883a 	mov	r16,r2
 2001e74:	5009883a 	mov	r4,r10
 2001e78:	20011180 	call	2001118 <__mulsi3>
 2001e7c:	d9c00517 	ldw	r7,20(sp)
 2001e80:	da400317 	ldw	r9,12(sp)
 2001e84:	d8c00217 	ldw	r3,8(sp)
 2001e88:	3808d43a 	srli	r4,r7,16
 2001e8c:	1245883a 	add	r2,r2,r9
 2001e90:	da000417 	ldw	r8,16(sp)
 2001e94:	2085883a 	add	r2,r4,r2
 2001e98:	1240022e 	bgeu	r2,r9,2001ea4 <__divdf3+0x4b8>
 2001e9c:	01000074 	movhi	r4,1
 2001ea0:	8121883a 	add	r16,r16,r4
 2001ea4:	1008d43a 	srli	r4,r2,16
 2001ea8:	1004943a 	slli	r2,r2,16
 2001eac:	39ffffcc 	andi	r7,r7,65535
 2001eb0:	2409883a 	add	r4,r4,r16
 2001eb4:	11c5883a 	add	r2,r2,r7
 2001eb8:	4100bb36 	bltu	r8,r4,20021a8 <__divdf3+0x7bc>
 2001ebc:	4100d726 	beq	r8,r4,200221c <__divdf3+0x830>
 2001ec0:	4109c83a 	sub	r4,r8,r4
 2001ec4:	a8a1c83a 	sub	r16,r21,r2
 2001ec8:	ac2b803a 	cmpltu	r21,r21,r16
 2001ecc:	256bc83a 	sub	r21,r4,r21
 2001ed0:	b540d926 	beq	r22,r21,2002238 <__divdf3+0x84c>
 2001ed4:	a00b883a 	mov	r5,r20
 2001ed8:	a809883a 	mov	r4,r21
 2001edc:	d8c00215 	stw	r3,8(sp)
 2001ee0:	20039ac0 	call	20039ac <__udivsi3>
 2001ee4:	100b883a 	mov	r5,r2
 2001ee8:	9009883a 	mov	r4,r18
 2001eec:	d8800515 	stw	r2,20(sp)
 2001ef0:	20011180 	call	2001118 <__mulsi3>
 2001ef4:	a809883a 	mov	r4,r21
 2001ef8:	a00b883a 	mov	r5,r20
 2001efc:	d8800415 	stw	r2,16(sp)
 2001f00:	2003a100 	call	2003a10 <__umodsi3>
 2001f04:	1004943a 	slli	r2,r2,16
 2001f08:	8008d43a 	srli	r4,r16,16
 2001f0c:	da000417 	ldw	r8,16(sp)
 2001f10:	d8c00217 	ldw	r3,8(sp)
 2001f14:	2084b03a 	or	r2,r4,r2
 2001f18:	d9c00517 	ldw	r7,20(sp)
 2001f1c:	1200062e 	bgeu	r2,r8,2001f38 <__divdf3+0x54c>
 2001f20:	1585883a 	add	r2,r2,r22
 2001f24:	393fffc4 	addi	r4,r7,-1
 2001f28:	1580c536 	bltu	r2,r22,2002240 <__divdf3+0x854>
 2001f2c:	1200c42e 	bgeu	r2,r8,2002240 <__divdf3+0x854>
 2001f30:	39ffff84 	addi	r7,r7,-2
 2001f34:	1585883a 	add	r2,r2,r22
 2001f38:	122bc83a 	sub	r21,r2,r8
 2001f3c:	a00b883a 	mov	r5,r20
 2001f40:	a809883a 	mov	r4,r21
 2001f44:	d8c00215 	stw	r3,8(sp)
 2001f48:	d9c00515 	stw	r7,20(sp)
 2001f4c:	20039ac0 	call	20039ac <__udivsi3>
 2001f50:	9009883a 	mov	r4,r18
 2001f54:	100b883a 	mov	r5,r2
 2001f58:	d8800415 	stw	r2,16(sp)
 2001f5c:	20011180 	call	2001118 <__mulsi3>
 2001f60:	a809883a 	mov	r4,r21
 2001f64:	a00b883a 	mov	r5,r20
 2001f68:	1025883a 	mov	r18,r2
 2001f6c:	2003a100 	call	2003a10 <__umodsi3>
 2001f70:	1004943a 	slli	r2,r2,16
 2001f74:	813fffcc 	andi	r4,r16,65535
 2001f78:	d8c00217 	ldw	r3,8(sp)
 2001f7c:	20a0b03a 	or	r16,r4,r2
 2001f80:	d9c00517 	ldw	r7,20(sp)
 2001f84:	da000417 	ldw	r8,16(sp)
 2001f88:	8480062e 	bgeu	r16,r18,2001fa4 <__divdf3+0x5b8>
 2001f8c:	85a1883a 	add	r16,r16,r22
 2001f90:	40bfffc4 	addi	r2,r8,-1
 2001f94:	8580ac36 	bltu	r16,r22,2002248 <__divdf3+0x85c>
 2001f98:	8480ab2e 	bgeu	r16,r18,2002248 <__divdf3+0x85c>
 2001f9c:	423fff84 	addi	r8,r8,-2
 2001fa0:	85a1883a 	add	r16,r16,r22
 2001fa4:	3804943a 	slli	r2,r7,16
 2001fa8:	84a1c83a 	sub	r16,r16,r18
 2001fac:	e009883a 	mov	r4,fp
 2001fb0:	1228b03a 	or	r20,r2,r8
 2001fb4:	a1ffffcc 	andi	r7,r20,65535
 2001fb8:	a024d43a 	srli	r18,r20,16
 2001fbc:	380b883a 	mov	r5,r7
 2001fc0:	d8c00215 	stw	r3,8(sp)
 2001fc4:	d9c00515 	stw	r7,20(sp)
 2001fc8:	20011180 	call	2001118 <__mulsi3>
 2001fcc:	900b883a 	mov	r5,r18
 2001fd0:	e009883a 	mov	r4,fp
 2001fd4:	102b883a 	mov	r21,r2
 2001fd8:	20011180 	call	2001118 <__mulsi3>
 2001fdc:	900b883a 	mov	r5,r18
 2001fe0:	b809883a 	mov	r4,r23
 2001fe4:	1039883a 	mov	fp,r2
 2001fe8:	20011180 	call	2001118 <__mulsi3>
 2001fec:	d9c00517 	ldw	r7,20(sp)
 2001ff0:	b80b883a 	mov	r5,r23
 2001ff4:	1025883a 	mov	r18,r2
 2001ff8:	3809883a 	mov	r4,r7
 2001ffc:	20011180 	call	2001118 <__mulsi3>
 2002000:	a808d43a 	srli	r4,r21,16
 2002004:	1705883a 	add	r2,r2,fp
 2002008:	d8c00217 	ldw	r3,8(sp)
 200200c:	2085883a 	add	r2,r4,r2
 2002010:	1700022e 	bgeu	r2,fp,200201c <__divdf3+0x630>
 2002014:	01000074 	movhi	r4,1
 2002018:	9125883a 	add	r18,r18,r4
 200201c:	1008d43a 	srli	r4,r2,16
 2002020:	1004943a 	slli	r2,r2,16
 2002024:	ad7fffcc 	andi	r21,r21,65535
 2002028:	2489883a 	add	r4,r4,r18
 200202c:	1545883a 	add	r2,r2,r21
 2002030:	81003836 	bltu	r16,r4,2002114 <__divdf3+0x728>
 2002034:	81003626 	beq	r16,r4,2002110 <__divdf3+0x724>
 2002038:	a5000054 	ori	r20,r20,1
 200203c:	1880ffc4 	addi	r2,r3,1023
 2002040:	00bf2e0e 	bge	zero,r2,2001cfc <__divdf3+0x310>
 2002044:	a10001cc 	andi	r4,r20,7
 2002048:	20000726 	beq	r4,zero,2002068 <__divdf3+0x67c>
 200204c:	a10003cc 	andi	r4,r20,15
 2002050:	01400104 	movi	r5,4
 2002054:	21400426 	beq	r4,r5,2002068 <__divdf3+0x67c>
 2002058:	a149883a 	add	r4,r20,r5
 200205c:	2529803a 	cmpltu	r20,r4,r20
 2002060:	8d23883a 	add	r17,r17,r20
 2002064:	2029883a 	mov	r20,r4
 2002068:	8900402c 	andhi	r4,r17,256
 200206c:	20000426 	beq	r4,zero,2002080 <__divdf3+0x694>
 2002070:	18810004 	addi	r2,r3,1024
 2002074:	00ffc034 	movhi	r3,65280
 2002078:	18ffffc4 	addi	r3,r3,-1
 200207c:	88e2703a 	and	r17,r17,r3
 2002080:	00c1ff84 	movi	r3,2046
 2002084:	18beb416 	blt	r3,r2,2001b58 <__divdf3+0x16c>
 2002088:	a028d0fa 	srli	r20,r20,3
 200208c:	882a977a 	slli	r21,r17,29
 2002090:	8820927a 	slli	r16,r17,9
 2002094:	1081ffcc 	andi	r2,r2,2047
 2002098:	ad2ab03a 	or	r21,r21,r20
 200209c:	8020d33a 	srli	r16,r16,12
 20020a0:	9900004c 	andi	r4,r19,1
 20020a4:	003eb006 	br	2001b68 <__divdf3+0x17c>
 20020a8:	8080022c 	andhi	r2,r16,8
 20020ac:	10001226 	beq	r2,zero,20020f8 <__divdf3+0x70c>
 20020b0:	8880022c 	andhi	r2,r17,8
 20020b4:	1000101e 	bne	r2,zero,20020f8 <__divdf3+0x70c>
 20020b8:	00800434 	movhi	r2,16
 20020bc:	8c000234 	orhi	r16,r17,8
 20020c0:	10bfffc4 	addi	r2,r2,-1
 20020c4:	b809883a 	mov	r4,r23
 20020c8:	80a0703a 	and	r16,r16,r2
 20020cc:	a02b883a 	mov	r21,r20
 20020d0:	003f0806 	br	2001cf4 <__divdf3+0x308>
 20020d4:	008000c4 	movi	r2,3
 20020d8:	3880b126 	beq	r7,r2,20023a0 <__divdf3+0x9b4>
 20020dc:	00800044 	movi	r2,1
 20020e0:	38805b1e 	bne	r7,r2,2002250 <__divdf3+0x864>
 20020e4:	e009883a 	mov	r4,fp
 20020e8:	0005883a 	mov	r2,zero
 20020ec:	0021883a 	mov	r16,zero
 20020f0:	002b883a 	mov	r21,zero
 20020f4:	003e9c06 	br	2001b68 <__divdf3+0x17c>
 20020f8:	00800434 	movhi	r2,16
 20020fc:	84000234 	orhi	r16,r16,8
 2002100:	10bfffc4 	addi	r2,r2,-1
 2002104:	b009883a 	mov	r4,r22
 2002108:	80a0703a 	and	r16,r16,r2
 200210c:	003ef906 	br	2001cf4 <__divdf3+0x308>
 2002110:	103fca26 	beq	r2,zero,200203c <__divdf3+0x650>
 2002114:	b421883a 	add	r16,r22,r16
 2002118:	a17fffc4 	addi	r5,r20,-1
 200211c:	8580422e 	bgeu	r16,r22,2002228 <__divdf3+0x83c>
 2002120:	2829883a 	mov	r20,r5
 2002124:	813fc41e 	bne	r16,r4,2002038 <__divdf3+0x64c>
 2002128:	d9800017 	ldw	r6,0(sp)
 200212c:	30bfc21e 	bne	r6,r2,2002038 <__divdf3+0x64c>
 2002130:	003fc206 	br	200203c <__divdf3+0x650>
 2002134:	143ff604 	addi	r16,r2,-40
 2002138:	8c20983a 	sll	r16,r17,r16
 200213c:	002b883a 	mov	r21,zero
 2002140:	003eb406 	br	2001c14 <__divdf3+0x228>
 2002144:	d9800215 	stw	r6,8(sp)
 2002148:	d9c00515 	stw	r7,20(sp)
 200214c:	da000415 	stw	r8,16(sp)
 2002150:	20038500 	call	2003850 <__clzsi2>
 2002154:	10800804 	addi	r2,r2,32
 2002158:	da000417 	ldw	r8,16(sp)
 200215c:	d9c00517 	ldw	r7,20(sp)
 2002160:	d9800217 	ldw	r6,8(sp)
 2002164:	003ea106 	br	2001bec <__divdf3+0x200>
 2002168:	147ff604 	addi	r17,r2,-40
 200216c:	3462983a 	sll	r17,r6,r17
 2002170:	0029883a 	mov	r20,zero
 2002174:	003ec906 	br	2001c9c <__divdf3+0x2b0>
 2002178:	3009883a 	mov	r4,r6
 200217c:	d9400115 	stw	r5,4(sp)
 2002180:	d9800215 	stw	r6,8(sp)
 2002184:	da000415 	stw	r8,16(sp)
 2002188:	da400315 	stw	r9,12(sp)
 200218c:	20038500 	call	2003850 <__clzsi2>
 2002190:	10800804 	addi	r2,r2,32
 2002194:	da400317 	ldw	r9,12(sp)
 2002198:	da000417 	ldw	r8,16(sp)
 200219c:	d9800217 	ldw	r6,8(sp)
 20021a0:	d9400117 	ldw	r5,4(sp)
 20021a4:	003eb306 	br	2001c74 <__divdf3+0x288>
 20021a8:	d9800017 	ldw	r6,0(sp)
 20021ac:	a9ab883a 	add	r21,r21,r6
 20021b0:	a98b803a 	cmpltu	r5,r21,r6
 20021b4:	2d8b883a 	add	r5,r5,r22
 20021b8:	2a11883a 	add	r8,r5,r8
 20021bc:	897fffc4 	addi	r5,r17,-1
 20021c0:	b2000c2e 	bgeu	r22,r8,20021f4 <__divdf3+0x808>
 20021c4:	41003f36 	bltu	r8,r4,20022c4 <__divdf3+0x8d8>
 20021c8:	22006c26 	beq	r4,r8,200237c <__divdf3+0x990>
 20021cc:	4109c83a 	sub	r4,r8,r4
 20021d0:	2823883a 	mov	r17,r5
 20021d4:	003f3b06 	br	2001ec4 <__divdf3+0x4d8>
 20021d8:	ad3ed336 	bltu	r21,r20,2001d28 <__divdf3+0x33c>
 20021dc:	a804d07a 	srli	r2,r21,1
 20021e0:	802e97fa 	slli	r23,r16,31
 20021e4:	a82a97fa 	slli	r21,r21,31
 20021e8:	8020d07a 	srli	r16,r16,1
 20021ec:	b8aeb03a 	or	r23,r23,r2
 20021f0:	003ed006 	br	2001d34 <__divdf3+0x348>
 20021f4:	b23ff51e 	bne	r22,r8,20021cc <__divdf3+0x7e0>
 20021f8:	d9800017 	ldw	r6,0(sp)
 20021fc:	a9bff12e 	bgeu	r21,r6,20021c4 <__divdf3+0x7d8>
 2002200:	b109c83a 	sub	r4,r22,r4
 2002204:	2823883a 	mov	r17,r5
 2002208:	003f2e06 	br	2001ec4 <__divdf3+0x4d8>
 200220c:	2021883a 	mov	r16,r4
 2002210:	003eff06 	br	2001e10 <__divdf3+0x424>
 2002214:	2023883a 	mov	r17,r4
 2002218:	003ee406 	br	2001dac <__divdf3+0x3c0>
 200221c:	a8bfe236 	bltu	r21,r2,20021a8 <__divdf3+0x7bc>
 2002220:	0009883a 	mov	r4,zero
 2002224:	003f2706 	br	2001ec4 <__divdf3+0x4d8>
 2002228:	81002d36 	bltu	r16,r4,20022e0 <__divdf3+0x8f4>
 200222c:	24005626 	beq	r4,r16,2002388 <__divdf3+0x99c>
 2002230:	2829883a 	mov	r20,r5
 2002234:	003f8006 	br	2002038 <__divdf3+0x64c>
 2002238:	053fffc4 	movi	r20,-1
 200223c:	003f7f06 	br	200203c <__divdf3+0x650>
 2002240:	200f883a 	mov	r7,r4
 2002244:	003f3c06 	br	2001f38 <__divdf3+0x54c>
 2002248:	1011883a 	mov	r8,r2
 200224c:	003f5506 	br	2001fa4 <__divdf3+0x5b8>
 2002250:	e027883a 	mov	r19,fp
 2002254:	003f7906 	br	200203c <__divdf3+0x650>
 2002258:	010007c4 	movi	r4,31
 200225c:	20c02816 	blt	r4,r3,2002300 <__divdf3+0x914>
 2002260:	00800804 	movi	r2,32
 2002264:	10c5c83a 	sub	r2,r2,r3
 2002268:	888a983a 	sll	r5,r17,r2
 200226c:	a0c8d83a 	srl	r4,r20,r3
 2002270:	a084983a 	sll	r2,r20,r2
 2002274:	88e2d83a 	srl	r17,r17,r3
 2002278:	2906b03a 	or	r3,r5,r4
 200227c:	1004c03a 	cmpne	r2,r2,zero
 2002280:	1886b03a 	or	r3,r3,r2
 2002284:	188001cc 	andi	r2,r3,7
 2002288:	10000726 	beq	r2,zero,20022a8 <__divdf3+0x8bc>
 200228c:	188003cc 	andi	r2,r3,15
 2002290:	01000104 	movi	r4,4
 2002294:	11000426 	beq	r2,r4,20022a8 <__divdf3+0x8bc>
 2002298:	1805883a 	mov	r2,r3
 200229c:	10c00104 	addi	r3,r2,4
 20022a0:	1885803a 	cmpltu	r2,r3,r2
 20022a4:	88a3883a 	add	r17,r17,r2
 20022a8:	8880202c 	andhi	r2,r17,128
 20022ac:	10002926 	beq	r2,zero,2002354 <__divdf3+0x968>
 20022b0:	9900004c 	andi	r4,r19,1
 20022b4:	00800044 	movi	r2,1
 20022b8:	0021883a 	mov	r16,zero
 20022bc:	002b883a 	mov	r21,zero
 20022c0:	003e2906 	br	2001b68 <__divdf3+0x17c>
 20022c4:	d9800017 	ldw	r6,0(sp)
 20022c8:	8c7fff84 	addi	r17,r17,-2
 20022cc:	a9ab883a 	add	r21,r21,r6
 20022d0:	a98b803a 	cmpltu	r5,r21,r6
 20022d4:	2d8b883a 	add	r5,r5,r22
 20022d8:	2a11883a 	add	r8,r5,r8
 20022dc:	003ef806 	br	2001ec0 <__divdf3+0x4d4>
 20022e0:	d9800017 	ldw	r6,0(sp)
 20022e4:	318f883a 	add	r7,r6,r6
 20022e8:	398b803a 	cmpltu	r5,r7,r6
 20022ec:	2d8d883a 	add	r6,r5,r22
 20022f0:	81a1883a 	add	r16,r16,r6
 20022f4:	a17fff84 	addi	r5,r20,-2
 20022f8:	d9c00015 	stw	r7,0(sp)
 20022fc:	003f8806 	br	2002120 <__divdf3+0x734>
 2002300:	013ff844 	movi	r4,-31
 2002304:	2085c83a 	sub	r2,r4,r2
 2002308:	8888d83a 	srl	r4,r17,r2
 200230c:	00800804 	movi	r2,32
 2002310:	18802126 	beq	r3,r2,2002398 <__divdf3+0x9ac>
 2002314:	04001004 	movi	r16,64
 2002318:	80c7c83a 	sub	r3,r16,r3
 200231c:	88e0983a 	sll	r16,r17,r3
 2002320:	8504b03a 	or	r2,r16,r20
 2002324:	1004c03a 	cmpne	r2,r2,zero
 2002328:	2084b03a 	or	r2,r4,r2
 200232c:	144001cc 	andi	r17,r2,7
 2002330:	88000d1e 	bne	r17,zero,2002368 <__divdf3+0x97c>
 2002334:	0021883a 	mov	r16,zero
 2002338:	102ad0fa 	srli	r21,r2,3
 200233c:	9900004c 	andi	r4,r19,1
 2002340:	0005883a 	mov	r2,zero
 2002344:	ac6ab03a 	or	r21,r21,r17
 2002348:	003e0706 	br	2001b68 <__divdf3+0x17c>
 200234c:	1007883a 	mov	r3,r2
 2002350:	0023883a 	mov	r17,zero
 2002354:	8820927a 	slli	r16,r17,9
 2002358:	1805883a 	mov	r2,r3
 200235c:	8822977a 	slli	r17,r17,29
 2002360:	8020d33a 	srli	r16,r16,12
 2002364:	003ff406 	br	2002338 <__divdf3+0x94c>
 2002368:	10c003cc 	andi	r3,r2,15
 200236c:	01000104 	movi	r4,4
 2002370:	193ff626 	beq	r3,r4,200234c <__divdf3+0x960>
 2002374:	0023883a 	mov	r17,zero
 2002378:	003fc806 	br	200229c <__divdf3+0x8b0>
 200237c:	a8bfd136 	bltu	r21,r2,20022c4 <__divdf3+0x8d8>
 2002380:	2823883a 	mov	r17,r5
 2002384:	003fa606 	br	2002220 <__divdf3+0x834>
 2002388:	d9800017 	ldw	r6,0(sp)
 200238c:	30bfd436 	bltu	r6,r2,20022e0 <__divdf3+0x8f4>
 2002390:	2829883a 	mov	r20,r5
 2002394:	003f6406 	br	2002128 <__divdf3+0x73c>
 2002398:	0021883a 	mov	r16,zero
 200239c:	003fe006 	br	2002320 <__divdf3+0x934>
 20023a0:	00800434 	movhi	r2,16
 20023a4:	8c000234 	orhi	r16,r17,8
 20023a8:	10bfffc4 	addi	r2,r2,-1
 20023ac:	e009883a 	mov	r4,fp
 20023b0:	80a0703a 	and	r16,r16,r2
 20023b4:	a02b883a 	mov	r21,r20
 20023b8:	003e4e06 	br	2001cf4 <__divdf3+0x308>

020023bc <__gedf2>:
 20023bc:	2804d53a 	srli	r2,r5,20
 20023c0:	3806d53a 	srli	r3,r7,20
 20023c4:	02000434 	movhi	r8,16
 20023c8:	423fffc4 	addi	r8,r8,-1
 20023cc:	1081ffcc 	andi	r2,r2,2047
 20023d0:	0241ffc4 	movi	r9,2047
 20023d4:	2a14703a 	and	r10,r5,r8
 20023d8:	18c1ffcc 	andi	r3,r3,2047
 20023dc:	3a10703a 	and	r8,r7,r8
 20023e0:	280ad7fa 	srli	r5,r5,31
 20023e4:	380ed7fa 	srli	r7,r7,31
 20023e8:	12401d26 	beq	r2,r9,2002460 <__gedf2+0xa4>
 20023ec:	0241ffc4 	movi	r9,2047
 20023f0:	1a401226 	beq	r3,r9,200243c <__gedf2+0x80>
 20023f4:	1000081e 	bne	r2,zero,2002418 <__gedf2+0x5c>
 20023f8:	2296b03a 	or	r11,r4,r10
 20023fc:	5813003a 	cmpeq	r9,r11,zero
 2002400:	1800091e 	bne	r3,zero,2002428 <__gedf2+0x6c>
 2002404:	3218b03a 	or	r12,r6,r8
 2002408:	6000071e 	bne	r12,zero,2002428 <__gedf2+0x6c>
 200240c:	0005883a 	mov	r2,zero
 2002410:	5800101e 	bne	r11,zero,2002454 <__gedf2+0x98>
 2002414:	f800283a 	ret
 2002418:	18000c1e 	bne	r3,zero,200244c <__gedf2+0x90>
 200241c:	3212b03a 	or	r9,r6,r8
 2002420:	48000c26 	beq	r9,zero,2002454 <__gedf2+0x98>
 2002424:	0013883a 	mov	r9,zero
 2002428:	39c03fcc 	andi	r7,r7,255
 200242c:	48000826 	beq	r9,zero,2002450 <__gedf2+0x94>
 2002430:	38000926 	beq	r7,zero,2002458 <__gedf2+0x9c>
 2002434:	00800044 	movi	r2,1
 2002438:	f800283a 	ret
 200243c:	3212b03a 	or	r9,r6,r8
 2002440:	483fec26 	beq	r9,zero,20023f4 <__gedf2+0x38>
 2002444:	00bfff84 	movi	r2,-2
 2002448:	f800283a 	ret
 200244c:	39c03fcc 	andi	r7,r7,255
 2002450:	29c00626 	beq	r5,r7,200246c <__gedf2+0xb0>
 2002454:	283ff726 	beq	r5,zero,2002434 <__gedf2+0x78>
 2002458:	00bfffc4 	movi	r2,-1
 200245c:	f800283a 	ret
 2002460:	2292b03a 	or	r9,r4,r10
 2002464:	483fe126 	beq	r9,zero,20023ec <__gedf2+0x30>
 2002468:	003ff606 	br	2002444 <__gedf2+0x88>
 200246c:	18bff916 	blt	r3,r2,2002454 <__gedf2+0x98>
 2002470:	10c00316 	blt	r2,r3,2002480 <__gedf2+0xc4>
 2002474:	42bff736 	bltu	r8,r10,2002454 <__gedf2+0x98>
 2002478:	52000326 	beq	r10,r8,2002488 <__gedf2+0xcc>
 200247c:	5200042e 	bgeu	r10,r8,2002490 <__gedf2+0xd4>
 2002480:	283fec1e 	bne	r5,zero,2002434 <__gedf2+0x78>
 2002484:	003ff406 	br	2002458 <__gedf2+0x9c>
 2002488:	313ff236 	bltu	r6,r4,2002454 <__gedf2+0x98>
 200248c:	21bffc36 	bltu	r4,r6,2002480 <__gedf2+0xc4>
 2002490:	0005883a 	mov	r2,zero
 2002494:	f800283a 	ret

02002498 <__ledf2>:
 2002498:	2804d53a 	srli	r2,r5,20
 200249c:	3810d53a 	srli	r8,r7,20
 20024a0:	00c00434 	movhi	r3,16
 20024a4:	18ffffc4 	addi	r3,r3,-1
 20024a8:	1081ffcc 	andi	r2,r2,2047
 20024ac:	0241ffc4 	movi	r9,2047
 20024b0:	28d4703a 	and	r10,r5,r3
 20024b4:	4201ffcc 	andi	r8,r8,2047
 20024b8:	38c6703a 	and	r3,r7,r3
 20024bc:	280ad7fa 	srli	r5,r5,31
 20024c0:	380ed7fa 	srli	r7,r7,31
 20024c4:	12401f26 	beq	r2,r9,2002544 <__ledf2+0xac>
 20024c8:	0241ffc4 	movi	r9,2047
 20024cc:	42401426 	beq	r8,r9,2002520 <__ledf2+0x88>
 20024d0:	1000091e 	bne	r2,zero,20024f8 <__ledf2+0x60>
 20024d4:	2296b03a 	or	r11,r4,r10
 20024d8:	5813003a 	cmpeq	r9,r11,zero
 20024dc:	29403fcc 	andi	r5,r5,255
 20024e0:	40000a1e 	bne	r8,zero,200250c <__ledf2+0x74>
 20024e4:	30d8b03a 	or	r12,r6,r3
 20024e8:	6000081e 	bne	r12,zero,200250c <__ledf2+0x74>
 20024ec:	0005883a 	mov	r2,zero
 20024f0:	5800111e 	bne	r11,zero,2002538 <__ledf2+0xa0>
 20024f4:	f800283a 	ret
 20024f8:	29403fcc 	andi	r5,r5,255
 20024fc:	40000c1e 	bne	r8,zero,2002530 <__ledf2+0x98>
 2002500:	30d2b03a 	or	r9,r6,r3
 2002504:	48000c26 	beq	r9,zero,2002538 <__ledf2+0xa0>
 2002508:	0013883a 	mov	r9,zero
 200250c:	39c03fcc 	andi	r7,r7,255
 2002510:	48000826 	beq	r9,zero,2002534 <__ledf2+0x9c>
 2002514:	38001126 	beq	r7,zero,200255c <__ledf2+0xc4>
 2002518:	00800044 	movi	r2,1
 200251c:	f800283a 	ret
 2002520:	30d2b03a 	or	r9,r6,r3
 2002524:	483fea26 	beq	r9,zero,20024d0 <__ledf2+0x38>
 2002528:	00800084 	movi	r2,2
 200252c:	f800283a 	ret
 2002530:	39c03fcc 	andi	r7,r7,255
 2002534:	39400726 	beq	r7,r5,2002554 <__ledf2+0xbc>
 2002538:	2800081e 	bne	r5,zero,200255c <__ledf2+0xc4>
 200253c:	00800044 	movi	r2,1
 2002540:	f800283a 	ret
 2002544:	2292b03a 	or	r9,r4,r10
 2002548:	483fdf26 	beq	r9,zero,20024c8 <__ledf2+0x30>
 200254c:	00800084 	movi	r2,2
 2002550:	f800283a 	ret
 2002554:	4080030e 	bge	r8,r2,2002564 <__ledf2+0xcc>
 2002558:	383fef26 	beq	r7,zero,2002518 <__ledf2+0x80>
 200255c:	00bfffc4 	movi	r2,-1
 2002560:	f800283a 	ret
 2002564:	123feb16 	blt	r2,r8,2002514 <__ledf2+0x7c>
 2002568:	1abff336 	bltu	r3,r10,2002538 <__ledf2+0xa0>
 200256c:	50c00326 	beq	r10,r3,200257c <__ledf2+0xe4>
 2002570:	50c0042e 	bgeu	r10,r3,2002584 <__ledf2+0xec>
 2002574:	283fe81e 	bne	r5,zero,2002518 <__ledf2+0x80>
 2002578:	003ff806 	br	200255c <__ledf2+0xc4>
 200257c:	313fee36 	bltu	r6,r4,2002538 <__ledf2+0xa0>
 2002580:	21bffc36 	bltu	r4,r6,2002574 <__ledf2+0xdc>
 2002584:	0005883a 	mov	r2,zero
 2002588:	f800283a 	ret

0200258c <__muldf3>:
 200258c:	deffee04 	addi	sp,sp,-72
 2002590:	dd000c15 	stw	r20,48(sp)
 2002594:	2828d53a 	srli	r20,r5,20
 2002598:	ddc00f15 	stw	r23,60(sp)
 200259c:	282ed7fa 	srli	r23,r5,31
 20025a0:	dc000815 	stw	r16,32(sp)
 20025a4:	04000434 	movhi	r16,16
 20025a8:	dcc00b15 	stw	r19,44(sp)
 20025ac:	843fffc4 	addi	r16,r16,-1
 20025b0:	dfc01115 	stw	ra,68(sp)
 20025b4:	df001015 	stw	fp,64(sp)
 20025b8:	dd800e15 	stw	r22,56(sp)
 20025bc:	dd400d15 	stw	r21,52(sp)
 20025c0:	dc800a15 	stw	r18,40(sp)
 20025c4:	dc400915 	stw	r17,36(sp)
 20025c8:	a501ffcc 	andi	r20,r20,2047
 20025cc:	2c20703a 	and	r16,r5,r16
 20025d0:	b827883a 	mov	r19,r23
 20025d4:	ba403fcc 	andi	r9,r23,255
 20025d8:	a0006026 	beq	r20,zero,200275c <__muldf3+0x1d0>
 20025dc:	0081ffc4 	movi	r2,2047
 20025e0:	202d883a 	mov	r22,r4
 20025e4:	a0803626 	beq	r20,r2,20026c0 <__muldf3+0x134>
 20025e8:	84000434 	orhi	r16,r16,16
 20025ec:	200ad77a 	srli	r5,r4,29
 20025f0:	800490fa 	slli	r2,r16,3
 20025f4:	202c90fa 	slli	r22,r4,3
 20025f8:	a53f0044 	addi	r20,r20,-1023
 20025fc:	28a0b03a 	or	r16,r5,r2
 2002600:	002b883a 	mov	r21,zero
 2002604:	000b883a 	mov	r5,zero
 2002608:	3804d53a 	srli	r2,r7,20
 200260c:	3838d7fa 	srli	fp,r7,31
 2002610:	04400434 	movhi	r17,16
 2002614:	8c7fffc4 	addi	r17,r17,-1
 2002618:	1081ffcc 	andi	r2,r2,2047
 200261c:	3025883a 	mov	r18,r6
 2002620:	3c62703a 	and	r17,r7,r17
 2002624:	e2803fcc 	andi	r10,fp,255
 2002628:	10006d26 	beq	r2,zero,20027e0 <__muldf3+0x254>
 200262c:	00c1ffc4 	movi	r3,2047
 2002630:	10c06526 	beq	r2,r3,20027c8 <__muldf3+0x23c>
 2002634:	8c400434 	orhi	r17,r17,16
 2002638:	300ed77a 	srli	r7,r6,29
 200263c:	880690fa 	slli	r3,r17,3
 2002640:	302490fa 	slli	r18,r6,3
 2002644:	10bf0044 	addi	r2,r2,-1023
 2002648:	38e2b03a 	or	r17,r7,r3
 200264c:	000f883a 	mov	r7,zero
 2002650:	a087883a 	add	r3,r20,r2
 2002654:	010003c4 	movi	r4,15
 2002658:	3d44b03a 	or	r2,r7,r21
 200265c:	e5ccf03a 	xor	r6,fp,r23
 2002660:	1a000044 	addi	r8,r3,1
 2002664:	20809b36 	bltu	r4,r2,20028d4 <__muldf3+0x348>
 2002668:	100490ba 	slli	r2,r2,2
 200266c:	01008034 	movhi	r4,512
 2002670:	2109a004 	addi	r4,r4,9856
 2002674:	1105883a 	add	r2,r2,r4
 2002678:	10800017 	ldw	r2,0(r2)
 200267c:	1000683a 	jmp	r2
 2002680:	020028d4 	movui	r8,163
 2002684:	020026e0 	cmpeqi	r8,zero,155
 2002688:	020026e0 	cmpeqi	r8,zero,155
 200268c:	020026dc 	xori	r8,zero,155
 2002690:	020028b0 	cmpltui	r8,zero,162
 2002694:	020028b0 	cmpltui	r8,zero,162
 2002698:	02002898 	cmpnei	r8,zero,162
 200269c:	020026dc 	xori	r8,zero,155
 20026a0:	020028b0 	cmpltui	r8,zero,162
 20026a4:	02002898 	cmpnei	r8,zero,162
 20026a8:	020028b0 	cmpltui	r8,zero,162
 20026ac:	020026dc 	xori	r8,zero,155
 20026b0:	020028c0 	call	20028c <__alt_mem_mem_Nios_PI+0x28c>
 20026b4:	020028c0 	call	20028c <__alt_mem_mem_Nios_PI+0x28c>
 20026b8:	020028c0 	call	20028c <__alt_mem_mem_Nios_PI+0x28c>
 20026bc:	02002c20 	cmpeqi	r8,zero,176
 20026c0:	2404b03a 	or	r2,r4,r16
 20026c4:	1000711e 	bne	r2,zero,200288c <__muldf3+0x300>
 20026c8:	05400204 	movi	r21,8
 20026cc:	0021883a 	mov	r16,zero
 20026d0:	002d883a 	mov	r22,zero
 20026d4:	01400084 	movi	r5,2
 20026d8:	003fcb06 	br	2002608 <__muldf3+0x7c>
 20026dc:	500d883a 	mov	r6,r10
 20026e0:	00800084 	movi	r2,2
 20026e4:	38805926 	beq	r7,r2,200284c <__muldf3+0x2c0>
 20026e8:	008000c4 	movi	r2,3
 20026ec:	3881bb26 	beq	r7,r2,2002ddc <__muldf3+0x850>
 20026f0:	00800044 	movi	r2,1
 20026f4:	3881961e 	bne	r7,r2,2002d50 <__muldf3+0x7c4>
 20026f8:	3027883a 	mov	r19,r6
 20026fc:	0005883a 	mov	r2,zero
 2002700:	0021883a 	mov	r16,zero
 2002704:	002d883a 	mov	r22,zero
 2002708:	1004953a 	slli	r2,r2,20
 200270c:	98c03fcc 	andi	r3,r19,255
 2002710:	04400434 	movhi	r17,16
 2002714:	8c7fffc4 	addi	r17,r17,-1
 2002718:	180697fa 	slli	r3,r3,31
 200271c:	8460703a 	and	r16,r16,r17
 2002720:	80a0b03a 	or	r16,r16,r2
 2002724:	80c6b03a 	or	r3,r16,r3
 2002728:	b005883a 	mov	r2,r22
 200272c:	dfc01117 	ldw	ra,68(sp)
 2002730:	df001017 	ldw	fp,64(sp)
 2002734:	ddc00f17 	ldw	r23,60(sp)
 2002738:	dd800e17 	ldw	r22,56(sp)
 200273c:	dd400d17 	ldw	r21,52(sp)
 2002740:	dd000c17 	ldw	r20,48(sp)
 2002744:	dcc00b17 	ldw	r19,44(sp)
 2002748:	dc800a17 	ldw	r18,40(sp)
 200274c:	dc400917 	ldw	r17,36(sp)
 2002750:	dc000817 	ldw	r16,32(sp)
 2002754:	dec01204 	addi	sp,sp,72
 2002758:	f800283a 	ret
 200275c:	2404b03a 	or	r2,r4,r16
 2002760:	202b883a 	mov	r21,r4
 2002764:	10004426 	beq	r2,zero,2002878 <__muldf3+0x2ec>
 2002768:	80015126 	beq	r16,zero,2002cb0 <__muldf3+0x724>
 200276c:	8009883a 	mov	r4,r16
 2002770:	d9800715 	stw	r6,28(sp)
 2002774:	d9c00215 	stw	r7,8(sp)
 2002778:	da400415 	stw	r9,16(sp)
 200277c:	20038500 	call	2003850 <__clzsi2>
 2002780:	d9800717 	ldw	r6,28(sp)
 2002784:	d9c00217 	ldw	r7,8(sp)
 2002788:	da400417 	ldw	r9,16(sp)
 200278c:	113ffd44 	addi	r4,r2,-11
 2002790:	00c00704 	movi	r3,28
 2002794:	19014216 	blt	r3,r4,2002ca0 <__muldf3+0x714>
 2002798:	00c00744 	movi	r3,29
 200279c:	15bffe04 	addi	r22,r2,-8
 20027a0:	1907c83a 	sub	r3,r3,r4
 20027a4:	85a0983a 	sll	r16,r16,r22
 20027a8:	a8c6d83a 	srl	r3,r21,r3
 20027ac:	adac983a 	sll	r22,r21,r22
 20027b0:	1c20b03a 	or	r16,r3,r16
 20027b4:	1080fcc4 	addi	r2,r2,1011
 20027b8:	00a9c83a 	sub	r20,zero,r2
 20027bc:	002b883a 	mov	r21,zero
 20027c0:	000b883a 	mov	r5,zero
 20027c4:	003f9006 	br	2002608 <__muldf3+0x7c>
 20027c8:	3446b03a 	or	r3,r6,r17
 20027cc:	1800281e 	bne	r3,zero,2002870 <__muldf3+0x2e4>
 20027d0:	0023883a 	mov	r17,zero
 20027d4:	0025883a 	mov	r18,zero
 20027d8:	01c00084 	movi	r7,2
 20027dc:	003f9c06 	br	2002650 <__muldf3+0xc4>
 20027e0:	3446b03a 	or	r3,r6,r17
 20027e4:	18001e26 	beq	r3,zero,2002860 <__muldf3+0x2d4>
 20027e8:	88012126 	beq	r17,zero,2002c70 <__muldf3+0x6e4>
 20027ec:	8809883a 	mov	r4,r17
 20027f0:	d9400215 	stw	r5,8(sp)
 20027f4:	d9800715 	stw	r6,28(sp)
 20027f8:	da400415 	stw	r9,16(sp)
 20027fc:	da800315 	stw	r10,12(sp)
 2002800:	20038500 	call	2003850 <__clzsi2>
 2002804:	d9400217 	ldw	r5,8(sp)
 2002808:	d9800717 	ldw	r6,28(sp)
 200280c:	da400417 	ldw	r9,16(sp)
 2002810:	da800317 	ldw	r10,12(sp)
 2002814:	113ffd44 	addi	r4,r2,-11
 2002818:	00c00704 	movi	r3,28
 200281c:	19011016 	blt	r3,r4,2002c60 <__muldf3+0x6d4>
 2002820:	00c00744 	movi	r3,29
 2002824:	14bffe04 	addi	r18,r2,-8
 2002828:	1907c83a 	sub	r3,r3,r4
 200282c:	8ca2983a 	sll	r17,r17,r18
 2002830:	30c6d83a 	srl	r3,r6,r3
 2002834:	34a4983a 	sll	r18,r6,r18
 2002838:	1c62b03a 	or	r17,r3,r17
 200283c:	1080fcc4 	addi	r2,r2,1011
 2002840:	0085c83a 	sub	r2,zero,r2
 2002844:	000f883a 	mov	r7,zero
 2002848:	003f8106 	br	2002650 <__muldf3+0xc4>
 200284c:	3027883a 	mov	r19,r6
 2002850:	0081ffc4 	movi	r2,2047
 2002854:	0021883a 	mov	r16,zero
 2002858:	002d883a 	mov	r22,zero
 200285c:	003faa06 	br	2002708 <__muldf3+0x17c>
 2002860:	0023883a 	mov	r17,zero
 2002864:	0025883a 	mov	r18,zero
 2002868:	01c00044 	movi	r7,1
 200286c:	003f7806 	br	2002650 <__muldf3+0xc4>
 2002870:	01c000c4 	movi	r7,3
 2002874:	003f7606 	br	2002650 <__muldf3+0xc4>
 2002878:	05400104 	movi	r21,4
 200287c:	0021883a 	mov	r16,zero
 2002880:	002d883a 	mov	r22,zero
 2002884:	01400044 	movi	r5,1
 2002888:	003f5f06 	br	2002608 <__muldf3+0x7c>
 200288c:	05400304 	movi	r21,12
 2002890:	014000c4 	movi	r5,3
 2002894:	003f5c06 	br	2002608 <__muldf3+0x7c>
 2002898:	04000434 	movhi	r16,16
 200289c:	0027883a 	mov	r19,zero
 20028a0:	843fffc4 	addi	r16,r16,-1
 20028a4:	05bfffc4 	movi	r22,-1
 20028a8:	0081ffc4 	movi	r2,2047
 20028ac:	003f9606 	br	2002708 <__muldf3+0x17c>
 20028b0:	8023883a 	mov	r17,r16
 20028b4:	b025883a 	mov	r18,r22
 20028b8:	280f883a 	mov	r7,r5
 20028bc:	003f8806 	br	20026e0 <__muldf3+0x154>
 20028c0:	8023883a 	mov	r17,r16
 20028c4:	b025883a 	mov	r18,r22
 20028c8:	480d883a 	mov	r6,r9
 20028cc:	280f883a 	mov	r7,r5
 20028d0:	003f8306 	br	20026e0 <__muldf3+0x154>
 20028d4:	b026d43a 	srli	r19,r22,16
 20028d8:	902ed43a 	srli	r23,r18,16
 20028dc:	b5bfffcc 	andi	r22,r22,65535
 20028e0:	94bfffcc 	andi	r18,r18,65535
 20028e4:	b00b883a 	mov	r5,r22
 20028e8:	9009883a 	mov	r4,r18
 20028ec:	d8c00515 	stw	r3,20(sp)
 20028f0:	d9800715 	stw	r6,28(sp)
 20028f4:	da000615 	stw	r8,24(sp)
 20028f8:	20011180 	call	2001118 <__mulsi3>
 20028fc:	980b883a 	mov	r5,r19
 2002900:	9009883a 	mov	r4,r18
 2002904:	1029883a 	mov	r20,r2
 2002908:	20011180 	call	2001118 <__mulsi3>
 200290c:	b80b883a 	mov	r5,r23
 2002910:	9809883a 	mov	r4,r19
 2002914:	102b883a 	mov	r21,r2
 2002918:	20011180 	call	2001118 <__mulsi3>
 200291c:	b809883a 	mov	r4,r23
 2002920:	b00b883a 	mov	r5,r22
 2002924:	1039883a 	mov	fp,r2
 2002928:	20011180 	call	2001118 <__mulsi3>
 200292c:	a008d43a 	srli	r4,r20,16
 2002930:	1545883a 	add	r2,r2,r21
 2002934:	d8c00517 	ldw	r3,20(sp)
 2002938:	2085883a 	add	r2,r4,r2
 200293c:	d9800717 	ldw	r6,28(sp)
 2002940:	da000617 	ldw	r8,24(sp)
 2002944:	1540022e 	bgeu	r2,r21,2002950 <__muldf3+0x3c4>
 2002948:	01000074 	movhi	r4,1
 200294c:	e139883a 	add	fp,fp,r4
 2002950:	100e943a 	slli	r7,r2,16
 2002954:	1004d43a 	srli	r2,r2,16
 2002958:	882ad43a 	srli	r21,r17,16
 200295c:	a53fffcc 	andi	r20,r20,65535
 2002960:	8c7fffcc 	andi	r17,r17,65535
 2002964:	3d29883a 	add	r20,r7,r20
 2002968:	b00b883a 	mov	r5,r22
 200296c:	8809883a 	mov	r4,r17
 2002970:	d8c00515 	stw	r3,20(sp)
 2002974:	d9800715 	stw	r6,28(sp)
 2002978:	da000615 	stw	r8,24(sp)
 200297c:	dd000115 	stw	r20,4(sp)
 2002980:	d8800015 	stw	r2,0(sp)
 2002984:	20011180 	call	2001118 <__mulsi3>
 2002988:	980b883a 	mov	r5,r19
 200298c:	8809883a 	mov	r4,r17
 2002990:	d8800215 	stw	r2,8(sp)
 2002994:	20011180 	call	2001118 <__mulsi3>
 2002998:	9809883a 	mov	r4,r19
 200299c:	a80b883a 	mov	r5,r21
 20029a0:	1029883a 	mov	r20,r2
 20029a4:	20011180 	call	2001118 <__mulsi3>
 20029a8:	b00b883a 	mov	r5,r22
 20029ac:	a809883a 	mov	r4,r21
 20029b0:	d8800415 	stw	r2,16(sp)
 20029b4:	20011180 	call	2001118 <__mulsi3>
 20029b8:	d9c00217 	ldw	r7,8(sp)
 20029bc:	1505883a 	add	r2,r2,r20
 20029c0:	d8c00517 	ldw	r3,20(sp)
 20029c4:	3826d43a 	srli	r19,r7,16
 20029c8:	d9800717 	ldw	r6,28(sp)
 20029cc:	da000617 	ldw	r8,24(sp)
 20029d0:	9885883a 	add	r2,r19,r2
 20029d4:	da400417 	ldw	r9,16(sp)
 20029d8:	1500022e 	bgeu	r2,r20,20029e4 <__muldf3+0x458>
 20029dc:	01000074 	movhi	r4,1
 20029e0:	4913883a 	add	r9,r9,r4
 20029e4:	1028d43a 	srli	r20,r2,16
 20029e8:	1004943a 	slli	r2,r2,16
 20029ec:	802cd43a 	srli	r22,r16,16
 20029f0:	843fffcc 	andi	r16,r16,65535
 20029f4:	3cffffcc 	andi	r19,r7,65535
 20029f8:	9009883a 	mov	r4,r18
 20029fc:	800b883a 	mov	r5,r16
 2002a00:	a269883a 	add	r20,r20,r9
 2002a04:	d8c00515 	stw	r3,20(sp)
 2002a08:	d9800715 	stw	r6,28(sp)
 2002a0c:	da000615 	stw	r8,24(sp)
 2002a10:	14e7883a 	add	r19,r2,r19
 2002a14:	20011180 	call	2001118 <__mulsi3>
 2002a18:	9009883a 	mov	r4,r18
 2002a1c:	b00b883a 	mov	r5,r22
 2002a20:	d8800315 	stw	r2,12(sp)
 2002a24:	20011180 	call	2001118 <__mulsi3>
 2002a28:	b809883a 	mov	r4,r23
 2002a2c:	b00b883a 	mov	r5,r22
 2002a30:	d8800215 	stw	r2,8(sp)
 2002a34:	20011180 	call	2001118 <__mulsi3>
 2002a38:	b80b883a 	mov	r5,r23
 2002a3c:	8009883a 	mov	r4,r16
 2002a40:	d8800415 	stw	r2,16(sp)
 2002a44:	20011180 	call	2001118 <__mulsi3>
 2002a48:	da800317 	ldw	r10,12(sp)
 2002a4c:	d9c00217 	ldw	r7,8(sp)
 2002a50:	d9000017 	ldw	r4,0(sp)
 2002a54:	502ed43a 	srli	r23,r10,16
 2002a58:	11c5883a 	add	r2,r2,r7
 2002a5c:	24e5883a 	add	r18,r4,r19
 2002a60:	b885883a 	add	r2,r23,r2
 2002a64:	d8c00517 	ldw	r3,20(sp)
 2002a68:	d9800717 	ldw	r6,28(sp)
 2002a6c:	da000617 	ldw	r8,24(sp)
 2002a70:	da400417 	ldw	r9,16(sp)
 2002a74:	11c0022e 	bgeu	r2,r7,2002a80 <__muldf3+0x4f4>
 2002a78:	01000074 	movhi	r4,1
 2002a7c:	4913883a 	add	r9,r9,r4
 2002a80:	100ed43a 	srli	r7,r2,16
 2002a84:	1004943a 	slli	r2,r2,16
 2002a88:	55ffffcc 	andi	r23,r10,65535
 2002a8c:	3a53883a 	add	r9,r7,r9
 2002a90:	8809883a 	mov	r4,r17
 2002a94:	800b883a 	mov	r5,r16
 2002a98:	d8c00515 	stw	r3,20(sp)
 2002a9c:	d9800715 	stw	r6,28(sp)
 2002aa0:	da000615 	stw	r8,24(sp)
 2002aa4:	da400415 	stw	r9,16(sp)
 2002aa8:	15ef883a 	add	r23,r2,r23
 2002aac:	20011180 	call	2001118 <__mulsi3>
 2002ab0:	8809883a 	mov	r4,r17
 2002ab4:	b00b883a 	mov	r5,r22
 2002ab8:	d8800215 	stw	r2,8(sp)
 2002abc:	20011180 	call	2001118 <__mulsi3>
 2002ac0:	b00b883a 	mov	r5,r22
 2002ac4:	a809883a 	mov	r4,r21
 2002ac8:	d8800315 	stw	r2,12(sp)
 2002acc:	20011180 	call	2001118 <__mulsi3>
 2002ad0:	8009883a 	mov	r4,r16
 2002ad4:	a80b883a 	mov	r5,r21
 2002ad8:	1023883a 	mov	r17,r2
 2002adc:	20011180 	call	2001118 <__mulsi3>
 2002ae0:	d9c00217 	ldw	r7,8(sp)
 2002ae4:	da800317 	ldw	r10,12(sp)
 2002ae8:	d8c00517 	ldw	r3,20(sp)
 2002aec:	3808d43a 	srli	r4,r7,16
 2002af0:	1285883a 	add	r2,r2,r10
 2002af4:	d9800717 	ldw	r6,28(sp)
 2002af8:	2085883a 	add	r2,r4,r2
 2002afc:	da000617 	ldw	r8,24(sp)
 2002b00:	da400417 	ldw	r9,16(sp)
 2002b04:	1280022e 	bgeu	r2,r10,2002b10 <__muldf3+0x584>
 2002b08:	01000074 	movhi	r4,1
 2002b0c:	8923883a 	add	r17,r17,r4
 2002b10:	1008943a 	slli	r4,r2,16
 2002b14:	39ffffcc 	andi	r7,r7,65535
 2002b18:	e4b9883a 	add	fp,fp,r18
 2002b1c:	21cf883a 	add	r7,r4,r7
 2002b20:	e4e7803a 	cmpltu	r19,fp,r19
 2002b24:	3d0f883a 	add	r7,r7,r20
 2002b28:	bf39883a 	add	fp,r23,fp
 2002b2c:	99c9883a 	add	r4,r19,r7
 2002b30:	e5ef803a 	cmpltu	r23,fp,r23
 2002b34:	490b883a 	add	r5,r9,r4
 2002b38:	1004d43a 	srli	r2,r2,16
 2002b3c:	b965883a 	add	r18,r23,r5
 2002b40:	24c9803a 	cmpltu	r4,r4,r19
 2002b44:	3d29803a 	cmpltu	r20,r7,r20
 2002b48:	a128b03a 	or	r20,r20,r4
 2002b4c:	95ef803a 	cmpltu	r23,r18,r23
 2002b50:	2a53803a 	cmpltu	r9,r5,r9
 2002b54:	a0a9883a 	add	r20,r20,r2
 2002b58:	4deeb03a 	or	r23,r9,r23
 2002b5c:	a5ef883a 	add	r23,r20,r23
 2002b60:	bc63883a 	add	r17,r23,r17
 2002b64:	e004927a 	slli	r2,fp,9
 2002b68:	d9000117 	ldw	r4,4(sp)
 2002b6c:	882e927a 	slli	r23,r17,9
 2002b70:	9022d5fa 	srli	r17,r18,23
 2002b74:	e038d5fa 	srli	fp,fp,23
 2002b78:	1104b03a 	or	r2,r2,r4
 2002b7c:	9024927a 	slli	r18,r18,9
 2002b80:	1004c03a 	cmpne	r2,r2,zero
 2002b84:	bc62b03a 	or	r17,r23,r17
 2002b88:	1738b03a 	or	fp,r2,fp
 2002b8c:	8880402c 	andhi	r2,r17,256
 2002b90:	e4a4b03a 	or	r18,fp,r18
 2002b94:	10000726 	beq	r2,zero,2002bb4 <__muldf3+0x628>
 2002b98:	9006d07a 	srli	r3,r18,1
 2002b9c:	880497fa 	slli	r2,r17,31
 2002ba0:	9480004c 	andi	r18,r18,1
 2002ba4:	8822d07a 	srli	r17,r17,1
 2002ba8:	1ca4b03a 	or	r18,r3,r18
 2002bac:	14a4b03a 	or	r18,r2,r18
 2002bb0:	4007883a 	mov	r3,r8
 2002bb4:	1880ffc4 	addi	r2,r3,1023
 2002bb8:	0080460e 	bge	zero,r2,2002cd4 <__muldf3+0x748>
 2002bbc:	910001cc 	andi	r4,r18,7
 2002bc0:	20000726 	beq	r4,zero,2002be0 <__muldf3+0x654>
 2002bc4:	910003cc 	andi	r4,r18,15
 2002bc8:	01400104 	movi	r5,4
 2002bcc:	21400426 	beq	r4,r5,2002be0 <__muldf3+0x654>
 2002bd0:	9149883a 	add	r4,r18,r5
 2002bd4:	24a5803a 	cmpltu	r18,r4,r18
 2002bd8:	8ca3883a 	add	r17,r17,r18
 2002bdc:	2025883a 	mov	r18,r4
 2002be0:	8900402c 	andhi	r4,r17,256
 2002be4:	20000426 	beq	r4,zero,2002bf8 <__muldf3+0x66c>
 2002be8:	18810004 	addi	r2,r3,1024
 2002bec:	00ffc034 	movhi	r3,65280
 2002bf0:	18ffffc4 	addi	r3,r3,-1
 2002bf4:	88e2703a 	and	r17,r17,r3
 2002bf8:	00c1ff84 	movi	r3,2046
 2002bfc:	18bf1316 	blt	r3,r2,200284c <__muldf3+0x2c0>
 2002c00:	882c977a 	slli	r22,r17,29
 2002c04:	9024d0fa 	srli	r18,r18,3
 2002c08:	8822927a 	slli	r17,r17,9
 2002c0c:	1081ffcc 	andi	r2,r2,2047
 2002c10:	b4acb03a 	or	r22,r22,r18
 2002c14:	8820d33a 	srli	r16,r17,12
 2002c18:	3027883a 	mov	r19,r6
 2002c1c:	003eba06 	br	2002708 <__muldf3+0x17c>
 2002c20:	8080022c 	andhi	r2,r16,8
 2002c24:	10000926 	beq	r2,zero,2002c4c <__muldf3+0x6c0>
 2002c28:	8880022c 	andhi	r2,r17,8
 2002c2c:	1000071e 	bne	r2,zero,2002c4c <__muldf3+0x6c0>
 2002c30:	00800434 	movhi	r2,16
 2002c34:	8c000234 	orhi	r16,r17,8
 2002c38:	10bfffc4 	addi	r2,r2,-1
 2002c3c:	e027883a 	mov	r19,fp
 2002c40:	80a0703a 	and	r16,r16,r2
 2002c44:	902d883a 	mov	r22,r18
 2002c48:	003f1706 	br	20028a8 <__muldf3+0x31c>
 2002c4c:	00800434 	movhi	r2,16
 2002c50:	84000234 	orhi	r16,r16,8
 2002c54:	10bfffc4 	addi	r2,r2,-1
 2002c58:	80a0703a 	and	r16,r16,r2
 2002c5c:	003f1206 	br	20028a8 <__muldf3+0x31c>
 2002c60:	147ff604 	addi	r17,r2,-40
 2002c64:	3462983a 	sll	r17,r6,r17
 2002c68:	0025883a 	mov	r18,zero
 2002c6c:	003ef306 	br	200283c <__muldf3+0x2b0>
 2002c70:	3009883a 	mov	r4,r6
 2002c74:	d9400215 	stw	r5,8(sp)
 2002c78:	d9800715 	stw	r6,28(sp)
 2002c7c:	da400415 	stw	r9,16(sp)
 2002c80:	da800315 	stw	r10,12(sp)
 2002c84:	20038500 	call	2003850 <__clzsi2>
 2002c88:	10800804 	addi	r2,r2,32
 2002c8c:	da800317 	ldw	r10,12(sp)
 2002c90:	da400417 	ldw	r9,16(sp)
 2002c94:	d9800717 	ldw	r6,28(sp)
 2002c98:	d9400217 	ldw	r5,8(sp)
 2002c9c:	003edd06 	br	2002814 <__muldf3+0x288>
 2002ca0:	143ff604 	addi	r16,r2,-40
 2002ca4:	ac20983a 	sll	r16,r21,r16
 2002ca8:	002d883a 	mov	r22,zero
 2002cac:	003ec106 	br	20027b4 <__muldf3+0x228>
 2002cb0:	d9800715 	stw	r6,28(sp)
 2002cb4:	d9c00215 	stw	r7,8(sp)
 2002cb8:	da400415 	stw	r9,16(sp)
 2002cbc:	20038500 	call	2003850 <__clzsi2>
 2002cc0:	10800804 	addi	r2,r2,32
 2002cc4:	da400417 	ldw	r9,16(sp)
 2002cc8:	d9c00217 	ldw	r7,8(sp)
 2002ccc:	d9800717 	ldw	r6,28(sp)
 2002cd0:	003eae06 	br	200278c <__muldf3+0x200>
 2002cd4:	00c00044 	movi	r3,1
 2002cd8:	1887c83a 	sub	r3,r3,r2
 2002cdc:	01000e04 	movi	r4,56
 2002ce0:	20fe8516 	blt	r4,r3,20026f8 <__muldf3+0x16c>
 2002ce4:	010007c4 	movi	r4,31
 2002ce8:	20c01b16 	blt	r4,r3,2002d58 <__muldf3+0x7cc>
 2002cec:	00800804 	movi	r2,32
 2002cf0:	10c5c83a 	sub	r2,r2,r3
 2002cf4:	888a983a 	sll	r5,r17,r2
 2002cf8:	90c8d83a 	srl	r4,r18,r3
 2002cfc:	9084983a 	sll	r2,r18,r2
 2002d00:	88e2d83a 	srl	r17,r17,r3
 2002d04:	2906b03a 	or	r3,r5,r4
 2002d08:	1004c03a 	cmpne	r2,r2,zero
 2002d0c:	1886b03a 	or	r3,r3,r2
 2002d10:	188001cc 	andi	r2,r3,7
 2002d14:	10000726 	beq	r2,zero,2002d34 <__muldf3+0x7a8>
 2002d18:	188003cc 	andi	r2,r3,15
 2002d1c:	01000104 	movi	r4,4
 2002d20:	11000426 	beq	r2,r4,2002d34 <__muldf3+0x7a8>
 2002d24:	1805883a 	mov	r2,r3
 2002d28:	10c00104 	addi	r3,r2,4
 2002d2c:	1885803a 	cmpltu	r2,r3,r2
 2002d30:	88a3883a 	add	r17,r17,r2
 2002d34:	8880202c 	andhi	r2,r17,128
 2002d38:	10001c26 	beq	r2,zero,2002dac <__muldf3+0x820>
 2002d3c:	3027883a 	mov	r19,r6
 2002d40:	00800044 	movi	r2,1
 2002d44:	0021883a 	mov	r16,zero
 2002d48:	002d883a 	mov	r22,zero
 2002d4c:	003e6e06 	br	2002708 <__muldf3+0x17c>
 2002d50:	4007883a 	mov	r3,r8
 2002d54:	003f9706 	br	2002bb4 <__muldf3+0x628>
 2002d58:	017ff844 	movi	r5,-31
 2002d5c:	2885c83a 	sub	r2,r5,r2
 2002d60:	888ad83a 	srl	r5,r17,r2
 2002d64:	00800804 	movi	r2,32
 2002d68:	18801a26 	beq	r3,r2,2002dd4 <__muldf3+0x848>
 2002d6c:	01001004 	movi	r4,64
 2002d70:	20c7c83a 	sub	r3,r4,r3
 2002d74:	88e2983a 	sll	r17,r17,r3
 2002d78:	8ca4b03a 	or	r18,r17,r18
 2002d7c:	9004c03a 	cmpne	r2,r18,zero
 2002d80:	2884b03a 	or	r2,r5,r2
 2002d84:	144001cc 	andi	r17,r2,7
 2002d88:	88000d1e 	bne	r17,zero,2002dc0 <__muldf3+0x834>
 2002d8c:	0021883a 	mov	r16,zero
 2002d90:	102cd0fa 	srli	r22,r2,3
 2002d94:	3027883a 	mov	r19,r6
 2002d98:	0005883a 	mov	r2,zero
 2002d9c:	b46cb03a 	or	r22,r22,r17
 2002da0:	003e5906 	br	2002708 <__muldf3+0x17c>
 2002da4:	1007883a 	mov	r3,r2
 2002da8:	0023883a 	mov	r17,zero
 2002dac:	8820927a 	slli	r16,r17,9
 2002db0:	1805883a 	mov	r2,r3
 2002db4:	8822977a 	slli	r17,r17,29
 2002db8:	8020d33a 	srli	r16,r16,12
 2002dbc:	003ff406 	br	2002d90 <__muldf3+0x804>
 2002dc0:	10c003cc 	andi	r3,r2,15
 2002dc4:	01000104 	movi	r4,4
 2002dc8:	193ff626 	beq	r3,r4,2002da4 <__muldf3+0x818>
 2002dcc:	0023883a 	mov	r17,zero
 2002dd0:	003fd506 	br	2002d28 <__muldf3+0x79c>
 2002dd4:	0023883a 	mov	r17,zero
 2002dd8:	003fe706 	br	2002d78 <__muldf3+0x7ec>
 2002ddc:	00800434 	movhi	r2,16
 2002de0:	8c000234 	orhi	r16,r17,8
 2002de4:	10bfffc4 	addi	r2,r2,-1
 2002de8:	3027883a 	mov	r19,r6
 2002dec:	80a0703a 	and	r16,r16,r2
 2002df0:	902d883a 	mov	r22,r18
 2002df4:	003eac06 	br	20028a8 <__muldf3+0x31c>

02002df8 <__subdf3>:
 2002df8:	02000434 	movhi	r8,16
 2002dfc:	423fffc4 	addi	r8,r8,-1
 2002e00:	defffb04 	addi	sp,sp,-20
 2002e04:	2a14703a 	and	r10,r5,r8
 2002e08:	3812d53a 	srli	r9,r7,20
 2002e0c:	3a10703a 	and	r8,r7,r8
 2002e10:	2006d77a 	srli	r3,r4,29
 2002e14:	3004d77a 	srli	r2,r6,29
 2002e18:	dc000015 	stw	r16,0(sp)
 2002e1c:	501490fa 	slli	r10,r10,3
 2002e20:	2820d53a 	srli	r16,r5,20
 2002e24:	401090fa 	slli	r8,r8,3
 2002e28:	dc800215 	stw	r18,8(sp)
 2002e2c:	dc400115 	stw	r17,4(sp)
 2002e30:	dfc00415 	stw	ra,16(sp)
 2002e34:	202290fa 	slli	r17,r4,3
 2002e38:	dcc00315 	stw	r19,12(sp)
 2002e3c:	4a41ffcc 	andi	r9,r9,2047
 2002e40:	0101ffc4 	movi	r4,2047
 2002e44:	2824d7fa 	srli	r18,r5,31
 2002e48:	8401ffcc 	andi	r16,r16,2047
 2002e4c:	50c6b03a 	or	r3,r10,r3
 2002e50:	380ed7fa 	srli	r7,r7,31
 2002e54:	408ab03a 	or	r5,r8,r2
 2002e58:	300c90fa 	slli	r6,r6,3
 2002e5c:	49009626 	beq	r9,r4,20030b8 <__subdf3+0x2c0>
 2002e60:	39c0005c 	xori	r7,r7,1
 2002e64:	8245c83a 	sub	r2,r16,r9
 2002e68:	3c807426 	beq	r7,r18,200303c <__subdf3+0x244>
 2002e6c:	0080af0e 	bge	zero,r2,200312c <__subdf3+0x334>
 2002e70:	48002a1e 	bne	r9,zero,2002f1c <__subdf3+0x124>
 2002e74:	2988b03a 	or	r4,r5,r6
 2002e78:	20009a1e 	bne	r4,zero,20030e4 <__subdf3+0x2ec>
 2002e7c:	888001cc 	andi	r2,r17,7
 2002e80:	10000726 	beq	r2,zero,2002ea0 <__subdf3+0xa8>
 2002e84:	888003cc 	andi	r2,r17,15
 2002e88:	01000104 	movi	r4,4
 2002e8c:	11000426 	beq	r2,r4,2002ea0 <__subdf3+0xa8>
 2002e90:	890b883a 	add	r5,r17,r4
 2002e94:	2c63803a 	cmpltu	r17,r5,r17
 2002e98:	1c47883a 	add	r3,r3,r17
 2002e9c:	2823883a 	mov	r17,r5
 2002ea0:	1880202c 	andhi	r2,r3,128
 2002ea4:	10005926 	beq	r2,zero,200300c <__subdf3+0x214>
 2002ea8:	84000044 	addi	r16,r16,1
 2002eac:	0081ffc4 	movi	r2,2047
 2002eb0:	8080be26 	beq	r16,r2,20031ac <__subdf3+0x3b4>
 2002eb4:	017fe034 	movhi	r5,65408
 2002eb8:	297fffc4 	addi	r5,r5,-1
 2002ebc:	1946703a 	and	r3,r3,r5
 2002ec0:	1804977a 	slli	r2,r3,29
 2002ec4:	1806927a 	slli	r3,r3,9
 2002ec8:	8822d0fa 	srli	r17,r17,3
 2002ecc:	8401ffcc 	andi	r16,r16,2047
 2002ed0:	180ad33a 	srli	r5,r3,12
 2002ed4:	9100004c 	andi	r4,r18,1
 2002ed8:	1444b03a 	or	r2,r2,r17
 2002edc:	80c1ffcc 	andi	r3,r16,2047
 2002ee0:	1820953a 	slli	r16,r3,20
 2002ee4:	20c03fcc 	andi	r3,r4,255
 2002ee8:	180897fa 	slli	r4,r3,31
 2002eec:	00c00434 	movhi	r3,16
 2002ef0:	18ffffc4 	addi	r3,r3,-1
 2002ef4:	28c6703a 	and	r3,r5,r3
 2002ef8:	1c06b03a 	or	r3,r3,r16
 2002efc:	1906b03a 	or	r3,r3,r4
 2002f00:	dfc00417 	ldw	ra,16(sp)
 2002f04:	dcc00317 	ldw	r19,12(sp)
 2002f08:	dc800217 	ldw	r18,8(sp)
 2002f0c:	dc400117 	ldw	r17,4(sp)
 2002f10:	dc000017 	ldw	r16,0(sp)
 2002f14:	dec00504 	addi	sp,sp,20
 2002f18:	f800283a 	ret
 2002f1c:	0101ffc4 	movi	r4,2047
 2002f20:	813fd626 	beq	r16,r4,2002e7c <__subdf3+0x84>
 2002f24:	29402034 	orhi	r5,r5,128
 2002f28:	01000e04 	movi	r4,56
 2002f2c:	2080a316 	blt	r4,r2,20031bc <__subdf3+0x3c4>
 2002f30:	010007c4 	movi	r4,31
 2002f34:	2080c616 	blt	r4,r2,2003250 <__subdf3+0x458>
 2002f38:	01000804 	movi	r4,32
 2002f3c:	2089c83a 	sub	r4,r4,r2
 2002f40:	2910983a 	sll	r8,r5,r4
 2002f44:	308ed83a 	srl	r7,r6,r2
 2002f48:	3108983a 	sll	r4,r6,r4
 2002f4c:	2884d83a 	srl	r2,r5,r2
 2002f50:	41ccb03a 	or	r6,r8,r7
 2002f54:	2008c03a 	cmpne	r4,r4,zero
 2002f58:	310cb03a 	or	r6,r6,r4
 2002f5c:	898dc83a 	sub	r6,r17,r6
 2002f60:	89a3803a 	cmpltu	r17,r17,r6
 2002f64:	1887c83a 	sub	r3,r3,r2
 2002f68:	1c47c83a 	sub	r3,r3,r17
 2002f6c:	3023883a 	mov	r17,r6
 2002f70:	1880202c 	andhi	r2,r3,128
 2002f74:	10002326 	beq	r2,zero,2003004 <__subdf3+0x20c>
 2002f78:	04c02034 	movhi	r19,128
 2002f7c:	9cffffc4 	addi	r19,r19,-1
 2002f80:	1ce6703a 	and	r19,r3,r19
 2002f84:	98007a26 	beq	r19,zero,2003170 <__subdf3+0x378>
 2002f88:	9809883a 	mov	r4,r19
 2002f8c:	20038500 	call	2003850 <__clzsi2>
 2002f90:	113ffe04 	addi	r4,r2,-8
 2002f94:	00c007c4 	movi	r3,31
 2002f98:	19007b16 	blt	r3,r4,2003188 <__subdf3+0x390>
 2002f9c:	00800804 	movi	r2,32
 2002fa0:	1105c83a 	sub	r2,r2,r4
 2002fa4:	8884d83a 	srl	r2,r17,r2
 2002fa8:	9906983a 	sll	r3,r19,r4
 2002fac:	8922983a 	sll	r17,r17,r4
 2002fb0:	10c4b03a 	or	r2,r2,r3
 2002fb4:	24007816 	blt	r4,r16,2003198 <__subdf3+0x3a0>
 2002fb8:	2421c83a 	sub	r16,r4,r16
 2002fbc:	80c00044 	addi	r3,r16,1
 2002fc0:	010007c4 	movi	r4,31
 2002fc4:	20c09516 	blt	r4,r3,200321c <__subdf3+0x424>
 2002fc8:	01400804 	movi	r5,32
 2002fcc:	28cbc83a 	sub	r5,r5,r3
 2002fd0:	88c8d83a 	srl	r4,r17,r3
 2002fd4:	8962983a 	sll	r17,r17,r5
 2002fd8:	114a983a 	sll	r5,r2,r5
 2002fdc:	10c6d83a 	srl	r3,r2,r3
 2002fe0:	8804c03a 	cmpne	r2,r17,zero
 2002fe4:	290ab03a 	or	r5,r5,r4
 2002fe8:	28a2b03a 	or	r17,r5,r2
 2002fec:	0021883a 	mov	r16,zero
 2002ff0:	003fa206 	br	2002e7c <__subdf3+0x84>
 2002ff4:	2090b03a 	or	r8,r4,r2
 2002ff8:	40018e26 	beq	r8,zero,2003634 <__subdf3+0x83c>
 2002ffc:	1007883a 	mov	r3,r2
 2003000:	2023883a 	mov	r17,r4
 2003004:	888001cc 	andi	r2,r17,7
 2003008:	103f9e1e 	bne	r2,zero,2002e84 <__subdf3+0x8c>
 200300c:	1804977a 	slli	r2,r3,29
 2003010:	8822d0fa 	srli	r17,r17,3
 2003014:	1810d0fa 	srli	r8,r3,3
 2003018:	9100004c 	andi	r4,r18,1
 200301c:	1444b03a 	or	r2,r2,r17
 2003020:	00c1ffc4 	movi	r3,2047
 2003024:	80c02826 	beq	r16,r3,20030c8 <__subdf3+0x2d0>
 2003028:	01400434 	movhi	r5,16
 200302c:	297fffc4 	addi	r5,r5,-1
 2003030:	80e0703a 	and	r16,r16,r3
 2003034:	414a703a 	and	r5,r8,r5
 2003038:	003fa806 	br	2002edc <__subdf3+0xe4>
 200303c:	0080630e 	bge	zero,r2,20031cc <__subdf3+0x3d4>
 2003040:	48003026 	beq	r9,zero,2003104 <__subdf3+0x30c>
 2003044:	0101ffc4 	movi	r4,2047
 2003048:	813f8c26 	beq	r16,r4,2002e7c <__subdf3+0x84>
 200304c:	29402034 	orhi	r5,r5,128
 2003050:	01000e04 	movi	r4,56
 2003054:	2080a90e 	bge	r4,r2,20032fc <__subdf3+0x504>
 2003058:	298cb03a 	or	r6,r5,r6
 200305c:	3012c03a 	cmpne	r9,r6,zero
 2003060:	0005883a 	mov	r2,zero
 2003064:	4c53883a 	add	r9,r9,r17
 2003068:	4c63803a 	cmpltu	r17,r9,r17
 200306c:	10c7883a 	add	r3,r2,r3
 2003070:	88c7883a 	add	r3,r17,r3
 2003074:	4823883a 	mov	r17,r9
 2003078:	1880202c 	andhi	r2,r3,128
 200307c:	1000d026 	beq	r2,zero,20033c0 <__subdf3+0x5c8>
 2003080:	84000044 	addi	r16,r16,1
 2003084:	0081ffc4 	movi	r2,2047
 2003088:	8080fe26 	beq	r16,r2,2003484 <__subdf3+0x68c>
 200308c:	00bfe034 	movhi	r2,65408
 2003090:	10bfffc4 	addi	r2,r2,-1
 2003094:	1886703a 	and	r3,r3,r2
 2003098:	880ad07a 	srli	r5,r17,1
 200309c:	180497fa 	slli	r2,r3,31
 20030a0:	8900004c 	andi	r4,r17,1
 20030a4:	2922b03a 	or	r17,r5,r4
 20030a8:	1806d07a 	srli	r3,r3,1
 20030ac:	1462b03a 	or	r17,r2,r17
 20030b0:	3825883a 	mov	r18,r7
 20030b4:	003f7106 	br	2002e7c <__subdf3+0x84>
 20030b8:	2984b03a 	or	r2,r5,r6
 20030bc:	103f6826 	beq	r2,zero,2002e60 <__subdf3+0x68>
 20030c0:	39c03fcc 	andi	r7,r7,255
 20030c4:	003f6706 	br	2002e64 <__subdf3+0x6c>
 20030c8:	4086b03a 	or	r3,r8,r2
 20030cc:	18015226 	beq	r3,zero,2003618 <__subdf3+0x820>
 20030d0:	00c00434 	movhi	r3,16
 20030d4:	41400234 	orhi	r5,r8,8
 20030d8:	18ffffc4 	addi	r3,r3,-1
 20030dc:	28ca703a 	and	r5,r5,r3
 20030e0:	003f7e06 	br	2002edc <__subdf3+0xe4>
 20030e4:	10bfffc4 	addi	r2,r2,-1
 20030e8:	1000491e 	bne	r2,zero,2003210 <__subdf3+0x418>
 20030ec:	898fc83a 	sub	r7,r17,r6
 20030f0:	89e3803a 	cmpltu	r17,r17,r7
 20030f4:	1947c83a 	sub	r3,r3,r5
 20030f8:	1c47c83a 	sub	r3,r3,r17
 20030fc:	3823883a 	mov	r17,r7
 2003100:	003f9b06 	br	2002f70 <__subdf3+0x178>
 2003104:	2988b03a 	or	r4,r5,r6
 2003108:	203f5c26 	beq	r4,zero,2002e7c <__subdf3+0x84>
 200310c:	10bfffc4 	addi	r2,r2,-1
 2003110:	1000931e 	bne	r2,zero,2003360 <__subdf3+0x568>
 2003114:	898d883a 	add	r6,r17,r6
 2003118:	3463803a 	cmpltu	r17,r6,r17
 200311c:	1947883a 	add	r3,r3,r5
 2003120:	88c7883a 	add	r3,r17,r3
 2003124:	3023883a 	mov	r17,r6
 2003128:	003fd306 	br	2003078 <__subdf3+0x280>
 200312c:	1000541e 	bne	r2,zero,2003280 <__subdf3+0x488>
 2003130:	80800044 	addi	r2,r16,1
 2003134:	1081ffcc 	andi	r2,r2,2047
 2003138:	01000044 	movi	r4,1
 200313c:	2080a20e 	bge	r4,r2,20033c8 <__subdf3+0x5d0>
 2003140:	8989c83a 	sub	r4,r17,r6
 2003144:	8905803a 	cmpltu	r2,r17,r4
 2003148:	1967c83a 	sub	r19,r3,r5
 200314c:	98a7c83a 	sub	r19,r19,r2
 2003150:	9880202c 	andhi	r2,r19,128
 2003154:	10006326 	beq	r2,zero,20032e4 <__subdf3+0x4ec>
 2003158:	3463c83a 	sub	r17,r6,r17
 200315c:	28c7c83a 	sub	r3,r5,r3
 2003160:	344d803a 	cmpltu	r6,r6,r17
 2003164:	19a7c83a 	sub	r19,r3,r6
 2003168:	3825883a 	mov	r18,r7
 200316c:	983f861e 	bne	r19,zero,2002f88 <__subdf3+0x190>
 2003170:	8809883a 	mov	r4,r17
 2003174:	20038500 	call	2003850 <__clzsi2>
 2003178:	10800804 	addi	r2,r2,32
 200317c:	113ffe04 	addi	r4,r2,-8
 2003180:	00c007c4 	movi	r3,31
 2003184:	193f850e 	bge	r3,r4,2002f9c <__subdf3+0x1a4>
 2003188:	10bff604 	addi	r2,r2,-40
 200318c:	8884983a 	sll	r2,r17,r2
 2003190:	0023883a 	mov	r17,zero
 2003194:	243f880e 	bge	r4,r16,2002fb8 <__subdf3+0x1c0>
 2003198:	00ffe034 	movhi	r3,65408
 200319c:	18ffffc4 	addi	r3,r3,-1
 20031a0:	8121c83a 	sub	r16,r16,r4
 20031a4:	10c6703a 	and	r3,r2,r3
 20031a8:	003f3406 	br	2002e7c <__subdf3+0x84>
 20031ac:	9100004c 	andi	r4,r18,1
 20031b0:	000b883a 	mov	r5,zero
 20031b4:	0005883a 	mov	r2,zero
 20031b8:	003f4806 	br	2002edc <__subdf3+0xe4>
 20031bc:	298cb03a 	or	r6,r5,r6
 20031c0:	300cc03a 	cmpne	r6,r6,zero
 20031c4:	0005883a 	mov	r2,zero
 20031c8:	003f6406 	br	2002f5c <__subdf3+0x164>
 20031cc:	10009a1e 	bne	r2,zero,2003438 <__subdf3+0x640>
 20031d0:	82400044 	addi	r9,r16,1
 20031d4:	4881ffcc 	andi	r2,r9,2047
 20031d8:	02800044 	movi	r10,1
 20031dc:	5080670e 	bge	r10,r2,200337c <__subdf3+0x584>
 20031e0:	0081ffc4 	movi	r2,2047
 20031e4:	4880af26 	beq	r9,r2,20034a4 <__subdf3+0x6ac>
 20031e8:	898d883a 	add	r6,r17,r6
 20031ec:	1945883a 	add	r2,r3,r5
 20031f0:	3447803a 	cmpltu	r3,r6,r17
 20031f4:	1887883a 	add	r3,r3,r2
 20031f8:	182297fa 	slli	r17,r3,31
 20031fc:	300cd07a 	srli	r6,r6,1
 2003200:	1806d07a 	srli	r3,r3,1
 2003204:	4821883a 	mov	r16,r9
 2003208:	89a2b03a 	or	r17,r17,r6
 200320c:	003f1b06 	br	2002e7c <__subdf3+0x84>
 2003210:	0101ffc4 	movi	r4,2047
 2003214:	813f441e 	bne	r16,r4,2002f28 <__subdf3+0x130>
 2003218:	003f1806 	br	2002e7c <__subdf3+0x84>
 200321c:	843ff844 	addi	r16,r16,-31
 2003220:	01400804 	movi	r5,32
 2003224:	1408d83a 	srl	r4,r2,r16
 2003228:	19405026 	beq	r3,r5,200336c <__subdf3+0x574>
 200322c:	01401004 	movi	r5,64
 2003230:	28c7c83a 	sub	r3,r5,r3
 2003234:	10c4983a 	sll	r2,r2,r3
 2003238:	88a2b03a 	or	r17,r17,r2
 200323c:	8822c03a 	cmpne	r17,r17,zero
 2003240:	2462b03a 	or	r17,r4,r17
 2003244:	0007883a 	mov	r3,zero
 2003248:	0021883a 	mov	r16,zero
 200324c:	003f6d06 	br	2003004 <__subdf3+0x20c>
 2003250:	11fff804 	addi	r7,r2,-32
 2003254:	01000804 	movi	r4,32
 2003258:	29ced83a 	srl	r7,r5,r7
 200325c:	11004526 	beq	r2,r4,2003374 <__subdf3+0x57c>
 2003260:	01001004 	movi	r4,64
 2003264:	2089c83a 	sub	r4,r4,r2
 2003268:	2904983a 	sll	r2,r5,r4
 200326c:	118cb03a 	or	r6,r2,r6
 2003270:	300cc03a 	cmpne	r6,r6,zero
 2003274:	398cb03a 	or	r6,r7,r6
 2003278:	0005883a 	mov	r2,zero
 200327c:	003f3706 	br	2002f5c <__subdf3+0x164>
 2003280:	80002a26 	beq	r16,zero,200332c <__subdf3+0x534>
 2003284:	0101ffc4 	movi	r4,2047
 2003288:	49006626 	beq	r9,r4,2003424 <__subdf3+0x62c>
 200328c:	0085c83a 	sub	r2,zero,r2
 2003290:	18c02034 	orhi	r3,r3,128
 2003294:	01000e04 	movi	r4,56
 2003298:	20807e16 	blt	r4,r2,2003494 <__subdf3+0x69c>
 200329c:	010007c4 	movi	r4,31
 20032a0:	2080e716 	blt	r4,r2,2003640 <__subdf3+0x848>
 20032a4:	01000804 	movi	r4,32
 20032a8:	2089c83a 	sub	r4,r4,r2
 20032ac:	1914983a 	sll	r10,r3,r4
 20032b0:	8890d83a 	srl	r8,r17,r2
 20032b4:	8908983a 	sll	r4,r17,r4
 20032b8:	1884d83a 	srl	r2,r3,r2
 20032bc:	5222b03a 	or	r17,r10,r8
 20032c0:	2006c03a 	cmpne	r3,r4,zero
 20032c4:	88e2b03a 	or	r17,r17,r3
 20032c8:	3463c83a 	sub	r17,r6,r17
 20032cc:	2885c83a 	sub	r2,r5,r2
 20032d0:	344d803a 	cmpltu	r6,r6,r17
 20032d4:	1187c83a 	sub	r3,r2,r6
 20032d8:	4821883a 	mov	r16,r9
 20032dc:	3825883a 	mov	r18,r7
 20032e0:	003f2306 	br	2002f70 <__subdf3+0x178>
 20032e4:	24d0b03a 	or	r8,r4,r19
 20032e8:	40001b1e 	bne	r8,zero,2003358 <__subdf3+0x560>
 20032ec:	0005883a 	mov	r2,zero
 20032f0:	0009883a 	mov	r4,zero
 20032f4:	0021883a 	mov	r16,zero
 20032f8:	003f4906 	br	2003020 <__subdf3+0x228>
 20032fc:	010007c4 	movi	r4,31
 2003300:	20803a16 	blt	r4,r2,20033ec <__subdf3+0x5f4>
 2003304:	01000804 	movi	r4,32
 2003308:	2089c83a 	sub	r4,r4,r2
 200330c:	2912983a 	sll	r9,r5,r4
 2003310:	3090d83a 	srl	r8,r6,r2
 2003314:	3108983a 	sll	r4,r6,r4
 2003318:	2884d83a 	srl	r2,r5,r2
 200331c:	4a12b03a 	or	r9,r9,r8
 2003320:	2008c03a 	cmpne	r4,r4,zero
 2003324:	4912b03a 	or	r9,r9,r4
 2003328:	003f4e06 	br	2003064 <__subdf3+0x26c>
 200332c:	1c48b03a 	or	r4,r3,r17
 2003330:	20003c26 	beq	r4,zero,2003424 <__subdf3+0x62c>
 2003334:	0084303a 	nor	r2,zero,r2
 2003338:	1000381e 	bne	r2,zero,200341c <__subdf3+0x624>
 200333c:	3463c83a 	sub	r17,r6,r17
 2003340:	28c5c83a 	sub	r2,r5,r3
 2003344:	344d803a 	cmpltu	r6,r6,r17
 2003348:	1187c83a 	sub	r3,r2,r6
 200334c:	4821883a 	mov	r16,r9
 2003350:	3825883a 	mov	r18,r7
 2003354:	003f0606 	br	2002f70 <__subdf3+0x178>
 2003358:	2023883a 	mov	r17,r4
 200335c:	003f0906 	br	2002f84 <__subdf3+0x18c>
 2003360:	0101ffc4 	movi	r4,2047
 2003364:	813f3a1e 	bne	r16,r4,2003050 <__subdf3+0x258>
 2003368:	003ec406 	br	2002e7c <__subdf3+0x84>
 200336c:	0005883a 	mov	r2,zero
 2003370:	003fb106 	br	2003238 <__subdf3+0x440>
 2003374:	0005883a 	mov	r2,zero
 2003378:	003fbc06 	br	200326c <__subdf3+0x474>
 200337c:	1c44b03a 	or	r2,r3,r17
 2003380:	80008e1e 	bne	r16,zero,20035bc <__subdf3+0x7c4>
 2003384:	1000c826 	beq	r2,zero,20036a8 <__subdf3+0x8b0>
 2003388:	2984b03a 	or	r2,r5,r6
 200338c:	103ebb26 	beq	r2,zero,2002e7c <__subdf3+0x84>
 2003390:	8989883a 	add	r4,r17,r6
 2003394:	1945883a 	add	r2,r3,r5
 2003398:	2447803a 	cmpltu	r3,r4,r17
 200339c:	1887883a 	add	r3,r3,r2
 20033a0:	1880202c 	andhi	r2,r3,128
 20033a4:	2023883a 	mov	r17,r4
 20033a8:	103f1626 	beq	r2,zero,2003004 <__subdf3+0x20c>
 20033ac:	00bfe034 	movhi	r2,65408
 20033b0:	10bfffc4 	addi	r2,r2,-1
 20033b4:	5021883a 	mov	r16,r10
 20033b8:	1886703a 	and	r3,r3,r2
 20033bc:	003eaf06 	br	2002e7c <__subdf3+0x84>
 20033c0:	3825883a 	mov	r18,r7
 20033c4:	003f0f06 	br	2003004 <__subdf3+0x20c>
 20033c8:	1c44b03a 	or	r2,r3,r17
 20033cc:	8000251e 	bne	r16,zero,2003464 <__subdf3+0x66c>
 20033d0:	1000661e 	bne	r2,zero,200356c <__subdf3+0x774>
 20033d4:	2990b03a 	or	r8,r5,r6
 20033d8:	40009626 	beq	r8,zero,2003634 <__subdf3+0x83c>
 20033dc:	2807883a 	mov	r3,r5
 20033e0:	3023883a 	mov	r17,r6
 20033e4:	3825883a 	mov	r18,r7
 20033e8:	003ea406 	br	2002e7c <__subdf3+0x84>
 20033ec:	127ff804 	addi	r9,r2,-32
 20033f0:	01000804 	movi	r4,32
 20033f4:	2a52d83a 	srl	r9,r5,r9
 20033f8:	11008c26 	beq	r2,r4,200362c <__subdf3+0x834>
 20033fc:	01001004 	movi	r4,64
 2003400:	2085c83a 	sub	r2,r4,r2
 2003404:	2884983a 	sll	r2,r5,r2
 2003408:	118cb03a 	or	r6,r2,r6
 200340c:	300cc03a 	cmpne	r6,r6,zero
 2003410:	4992b03a 	or	r9,r9,r6
 2003414:	0005883a 	mov	r2,zero
 2003418:	003f1206 	br	2003064 <__subdf3+0x26c>
 200341c:	0101ffc4 	movi	r4,2047
 2003420:	493f9c1e 	bne	r9,r4,2003294 <__subdf3+0x49c>
 2003424:	2807883a 	mov	r3,r5
 2003428:	3023883a 	mov	r17,r6
 200342c:	4821883a 	mov	r16,r9
 2003430:	3825883a 	mov	r18,r7
 2003434:	003e9106 	br	2002e7c <__subdf3+0x84>
 2003438:	80001f1e 	bne	r16,zero,20034b8 <__subdf3+0x6c0>
 200343c:	1c48b03a 	or	r4,r3,r17
 2003440:	20005a26 	beq	r4,zero,20035ac <__subdf3+0x7b4>
 2003444:	0084303a 	nor	r2,zero,r2
 2003448:	1000561e 	bne	r2,zero,20035a4 <__subdf3+0x7ac>
 200344c:	89a3883a 	add	r17,r17,r6
 2003450:	1945883a 	add	r2,r3,r5
 2003454:	898d803a 	cmpltu	r6,r17,r6
 2003458:	3087883a 	add	r3,r6,r2
 200345c:	4821883a 	mov	r16,r9
 2003460:	003f0506 	br	2003078 <__subdf3+0x280>
 2003464:	10002b1e 	bne	r2,zero,2003514 <__subdf3+0x71c>
 2003468:	2984b03a 	or	r2,r5,r6
 200346c:	10008026 	beq	r2,zero,2003670 <__subdf3+0x878>
 2003470:	2807883a 	mov	r3,r5
 2003474:	3023883a 	mov	r17,r6
 2003478:	3825883a 	mov	r18,r7
 200347c:	0401ffc4 	movi	r16,2047
 2003480:	003e7e06 	br	2002e7c <__subdf3+0x84>
 2003484:	3809883a 	mov	r4,r7
 2003488:	0011883a 	mov	r8,zero
 200348c:	0005883a 	mov	r2,zero
 2003490:	003ee306 	br	2003020 <__subdf3+0x228>
 2003494:	1c62b03a 	or	r17,r3,r17
 2003498:	8822c03a 	cmpne	r17,r17,zero
 200349c:	0005883a 	mov	r2,zero
 20034a0:	003f8906 	br	20032c8 <__subdf3+0x4d0>
 20034a4:	3809883a 	mov	r4,r7
 20034a8:	4821883a 	mov	r16,r9
 20034ac:	0011883a 	mov	r8,zero
 20034b0:	0005883a 	mov	r2,zero
 20034b4:	003eda06 	br	2003020 <__subdf3+0x228>
 20034b8:	0101ffc4 	movi	r4,2047
 20034bc:	49003b26 	beq	r9,r4,20035ac <__subdf3+0x7b4>
 20034c0:	0085c83a 	sub	r2,zero,r2
 20034c4:	18c02034 	orhi	r3,r3,128
 20034c8:	01000e04 	movi	r4,56
 20034cc:	20806e16 	blt	r4,r2,2003688 <__subdf3+0x890>
 20034d0:	010007c4 	movi	r4,31
 20034d4:	20807716 	blt	r4,r2,20036b4 <__subdf3+0x8bc>
 20034d8:	01000804 	movi	r4,32
 20034dc:	2089c83a 	sub	r4,r4,r2
 20034e0:	1914983a 	sll	r10,r3,r4
 20034e4:	8890d83a 	srl	r8,r17,r2
 20034e8:	8908983a 	sll	r4,r17,r4
 20034ec:	1884d83a 	srl	r2,r3,r2
 20034f0:	5222b03a 	or	r17,r10,r8
 20034f4:	2006c03a 	cmpne	r3,r4,zero
 20034f8:	88e2b03a 	or	r17,r17,r3
 20034fc:	89a3883a 	add	r17,r17,r6
 2003500:	1145883a 	add	r2,r2,r5
 2003504:	898d803a 	cmpltu	r6,r17,r6
 2003508:	3087883a 	add	r3,r6,r2
 200350c:	4821883a 	mov	r16,r9
 2003510:	003ed906 	br	2003078 <__subdf3+0x280>
 2003514:	2984b03a 	or	r2,r5,r6
 2003518:	10004226 	beq	r2,zero,2003624 <__subdf3+0x82c>
 200351c:	1808d0fa 	srli	r4,r3,3
 2003520:	8822d0fa 	srli	r17,r17,3
 2003524:	1806977a 	slli	r3,r3,29
 2003528:	2080022c 	andhi	r2,r4,8
 200352c:	1c62b03a 	or	r17,r3,r17
 2003530:	10000826 	beq	r2,zero,2003554 <__subdf3+0x75c>
 2003534:	2812d0fa 	srli	r9,r5,3
 2003538:	4880022c 	andhi	r2,r9,8
 200353c:	1000051e 	bne	r2,zero,2003554 <__subdf3+0x75c>
 2003540:	300cd0fa 	srli	r6,r6,3
 2003544:	2804977a 	slli	r2,r5,29
 2003548:	4809883a 	mov	r4,r9
 200354c:	3825883a 	mov	r18,r7
 2003550:	11a2b03a 	or	r17,r2,r6
 2003554:	8806d77a 	srli	r3,r17,29
 2003558:	200890fa 	slli	r4,r4,3
 200355c:	882290fa 	slli	r17,r17,3
 2003560:	0401ffc4 	movi	r16,2047
 2003564:	1906b03a 	or	r3,r3,r4
 2003568:	003e4406 	br	2002e7c <__subdf3+0x84>
 200356c:	2984b03a 	or	r2,r5,r6
 2003570:	103e4226 	beq	r2,zero,2002e7c <__subdf3+0x84>
 2003574:	8989c83a 	sub	r4,r17,r6
 2003578:	8911803a 	cmpltu	r8,r17,r4
 200357c:	1945c83a 	sub	r2,r3,r5
 2003580:	1205c83a 	sub	r2,r2,r8
 2003584:	1200202c 	andhi	r8,r2,128
 2003588:	403e9a26 	beq	r8,zero,2002ff4 <__subdf3+0x1fc>
 200358c:	3463c83a 	sub	r17,r6,r17
 2003590:	28c5c83a 	sub	r2,r5,r3
 2003594:	344d803a 	cmpltu	r6,r6,r17
 2003598:	1187c83a 	sub	r3,r2,r6
 200359c:	3825883a 	mov	r18,r7
 20035a0:	003e3606 	br	2002e7c <__subdf3+0x84>
 20035a4:	0101ffc4 	movi	r4,2047
 20035a8:	493fc71e 	bne	r9,r4,20034c8 <__subdf3+0x6d0>
 20035ac:	2807883a 	mov	r3,r5
 20035b0:	3023883a 	mov	r17,r6
 20035b4:	4821883a 	mov	r16,r9
 20035b8:	003e3006 	br	2002e7c <__subdf3+0x84>
 20035bc:	10003626 	beq	r2,zero,2003698 <__subdf3+0x8a0>
 20035c0:	2984b03a 	or	r2,r5,r6
 20035c4:	10001726 	beq	r2,zero,2003624 <__subdf3+0x82c>
 20035c8:	1808d0fa 	srli	r4,r3,3
 20035cc:	8822d0fa 	srli	r17,r17,3
 20035d0:	1806977a 	slli	r3,r3,29
 20035d4:	2080022c 	andhi	r2,r4,8
 20035d8:	1c62b03a 	or	r17,r3,r17
 20035dc:	10000726 	beq	r2,zero,20035fc <__subdf3+0x804>
 20035e0:	2812d0fa 	srli	r9,r5,3
 20035e4:	4880022c 	andhi	r2,r9,8
 20035e8:	1000041e 	bne	r2,zero,20035fc <__subdf3+0x804>
 20035ec:	300cd0fa 	srli	r6,r6,3
 20035f0:	2804977a 	slli	r2,r5,29
 20035f4:	4809883a 	mov	r4,r9
 20035f8:	11a2b03a 	or	r17,r2,r6
 20035fc:	8806d77a 	srli	r3,r17,29
 2003600:	200890fa 	slli	r4,r4,3
 2003604:	882290fa 	slli	r17,r17,3
 2003608:	3825883a 	mov	r18,r7
 200360c:	1906b03a 	or	r3,r3,r4
 2003610:	0401ffc4 	movi	r16,2047
 2003614:	003e1906 	br	2002e7c <__subdf3+0x84>
 2003618:	000b883a 	mov	r5,zero
 200361c:	0005883a 	mov	r2,zero
 2003620:	003e2e06 	br	2002edc <__subdf3+0xe4>
 2003624:	0401ffc4 	movi	r16,2047
 2003628:	003e1406 	br	2002e7c <__subdf3+0x84>
 200362c:	0005883a 	mov	r2,zero
 2003630:	003f7506 	br	2003408 <__subdf3+0x610>
 2003634:	0005883a 	mov	r2,zero
 2003638:	0009883a 	mov	r4,zero
 200363c:	003e7806 	br	2003020 <__subdf3+0x228>
 2003640:	123ff804 	addi	r8,r2,-32
 2003644:	01000804 	movi	r4,32
 2003648:	1a10d83a 	srl	r8,r3,r8
 200364c:	11002526 	beq	r2,r4,20036e4 <__subdf3+0x8ec>
 2003650:	01001004 	movi	r4,64
 2003654:	2085c83a 	sub	r2,r4,r2
 2003658:	1884983a 	sll	r2,r3,r2
 200365c:	1444b03a 	or	r2,r2,r17
 2003660:	1004c03a 	cmpne	r2,r2,zero
 2003664:	40a2b03a 	or	r17,r8,r2
 2003668:	0005883a 	mov	r2,zero
 200366c:	003f1606 	br	20032c8 <__subdf3+0x4d0>
 2003670:	02000434 	movhi	r8,16
 2003674:	0009883a 	mov	r4,zero
 2003678:	423fffc4 	addi	r8,r8,-1
 200367c:	00bfffc4 	movi	r2,-1
 2003680:	0401ffc4 	movi	r16,2047
 2003684:	003e6606 	br	2003020 <__subdf3+0x228>
 2003688:	1c62b03a 	or	r17,r3,r17
 200368c:	8822c03a 	cmpne	r17,r17,zero
 2003690:	0005883a 	mov	r2,zero
 2003694:	003f9906 	br	20034fc <__subdf3+0x704>
 2003698:	2807883a 	mov	r3,r5
 200369c:	3023883a 	mov	r17,r6
 20036a0:	0401ffc4 	movi	r16,2047
 20036a4:	003df506 	br	2002e7c <__subdf3+0x84>
 20036a8:	2807883a 	mov	r3,r5
 20036ac:	3023883a 	mov	r17,r6
 20036b0:	003df206 	br	2002e7c <__subdf3+0x84>
 20036b4:	123ff804 	addi	r8,r2,-32
 20036b8:	01000804 	movi	r4,32
 20036bc:	1a10d83a 	srl	r8,r3,r8
 20036c0:	11000a26 	beq	r2,r4,20036ec <__subdf3+0x8f4>
 20036c4:	01001004 	movi	r4,64
 20036c8:	2085c83a 	sub	r2,r4,r2
 20036cc:	1884983a 	sll	r2,r3,r2
 20036d0:	1444b03a 	or	r2,r2,r17
 20036d4:	1004c03a 	cmpne	r2,r2,zero
 20036d8:	40a2b03a 	or	r17,r8,r2
 20036dc:	0005883a 	mov	r2,zero
 20036e0:	003f8606 	br	20034fc <__subdf3+0x704>
 20036e4:	0005883a 	mov	r2,zero
 20036e8:	003fdc06 	br	200365c <__subdf3+0x864>
 20036ec:	0005883a 	mov	r2,zero
 20036f0:	003ff706 	br	20036d0 <__subdf3+0x8d8>

020036f4 <__fixdfsi>:
 20036f4:	280cd53a 	srli	r6,r5,20
 20036f8:	00c00434 	movhi	r3,16
 20036fc:	18ffffc4 	addi	r3,r3,-1
 2003700:	3181ffcc 	andi	r6,r6,2047
 2003704:	01c0ff84 	movi	r7,1022
 2003708:	28c6703a 	and	r3,r5,r3
 200370c:	280ad7fa 	srli	r5,r5,31
 2003710:	3980120e 	bge	r7,r6,200375c <__fixdfsi+0x68>
 2003714:	00810744 	movi	r2,1053
 2003718:	11800c16 	blt	r2,r6,200374c <__fixdfsi+0x58>
 200371c:	00810cc4 	movi	r2,1075
 2003720:	1185c83a 	sub	r2,r2,r6
 2003724:	01c007c4 	movi	r7,31
 2003728:	18c00434 	orhi	r3,r3,16
 200372c:	38800d16 	blt	r7,r2,2003764 <__fixdfsi+0x70>
 2003730:	31befb44 	addi	r6,r6,-1043
 2003734:	2084d83a 	srl	r2,r4,r2
 2003738:	1986983a 	sll	r3,r3,r6
 200373c:	1884b03a 	or	r2,r3,r2
 2003740:	28000726 	beq	r5,zero,2003760 <__fixdfsi+0x6c>
 2003744:	0085c83a 	sub	r2,zero,r2
 2003748:	f800283a 	ret
 200374c:	00a00034 	movhi	r2,32768
 2003750:	10bfffc4 	addi	r2,r2,-1
 2003754:	2885883a 	add	r2,r5,r2
 2003758:	f800283a 	ret
 200375c:	0005883a 	mov	r2,zero
 2003760:	f800283a 	ret
 2003764:	008104c4 	movi	r2,1043
 2003768:	1185c83a 	sub	r2,r2,r6
 200376c:	1884d83a 	srl	r2,r3,r2
 2003770:	003ff306 	br	2003740 <__fixdfsi+0x4c>

02003774 <__floatsidf>:
 2003774:	defffd04 	addi	sp,sp,-12
 2003778:	dfc00215 	stw	ra,8(sp)
 200377c:	dc400115 	stw	r17,4(sp)
 2003780:	dc000015 	stw	r16,0(sp)
 2003784:	20002b26 	beq	r4,zero,2003834 <__floatsidf+0xc0>
 2003788:	2023883a 	mov	r17,r4
 200378c:	2020d7fa 	srli	r16,r4,31
 2003790:	20002d16 	blt	r4,zero,2003848 <__floatsidf+0xd4>
 2003794:	8809883a 	mov	r4,r17
 2003798:	20038500 	call	2003850 <__clzsi2>
 200379c:	01410784 	movi	r5,1054
 20037a0:	288bc83a 	sub	r5,r5,r2
 20037a4:	01010cc4 	movi	r4,1075
 20037a8:	2149c83a 	sub	r4,r4,r5
 20037ac:	00c007c4 	movi	r3,31
 20037b0:	1900160e 	bge	r3,r4,200380c <__floatsidf+0x98>
 20037b4:	00c104c4 	movi	r3,1043
 20037b8:	1947c83a 	sub	r3,r3,r5
 20037bc:	88c6983a 	sll	r3,r17,r3
 20037c0:	00800434 	movhi	r2,16
 20037c4:	10bfffc4 	addi	r2,r2,-1
 20037c8:	1886703a 	and	r3,r3,r2
 20037cc:	2941ffcc 	andi	r5,r5,2047
 20037d0:	800d883a 	mov	r6,r16
 20037d4:	0005883a 	mov	r2,zero
 20037d8:	280a953a 	slli	r5,r5,20
 20037dc:	31803fcc 	andi	r6,r6,255
 20037e0:	01000434 	movhi	r4,16
 20037e4:	300c97fa 	slli	r6,r6,31
 20037e8:	213fffc4 	addi	r4,r4,-1
 20037ec:	1906703a 	and	r3,r3,r4
 20037f0:	1946b03a 	or	r3,r3,r5
 20037f4:	1986b03a 	or	r3,r3,r6
 20037f8:	dfc00217 	ldw	ra,8(sp)
 20037fc:	dc400117 	ldw	r17,4(sp)
 2003800:	dc000017 	ldw	r16,0(sp)
 2003804:	dec00304 	addi	sp,sp,12
 2003808:	f800283a 	ret
 200380c:	00c002c4 	movi	r3,11
 2003810:	1887c83a 	sub	r3,r3,r2
 2003814:	88c6d83a 	srl	r3,r17,r3
 2003818:	8904983a 	sll	r2,r17,r4
 200381c:	01000434 	movhi	r4,16
 2003820:	213fffc4 	addi	r4,r4,-1
 2003824:	2941ffcc 	andi	r5,r5,2047
 2003828:	1906703a 	and	r3,r3,r4
 200382c:	800d883a 	mov	r6,r16
 2003830:	003fe906 	br	20037d8 <__floatsidf+0x64>
 2003834:	000d883a 	mov	r6,zero
 2003838:	000b883a 	mov	r5,zero
 200383c:	0007883a 	mov	r3,zero
 2003840:	0005883a 	mov	r2,zero
 2003844:	003fe406 	br	20037d8 <__floatsidf+0x64>
 2003848:	0123c83a 	sub	r17,zero,r4
 200384c:	003fd106 	br	2003794 <__floatsidf+0x20>

02003850 <__clzsi2>:
 2003850:	00bfffd4 	movui	r2,65535
 2003854:	11000536 	bltu	r2,r4,200386c <__clzsi2+0x1c>
 2003858:	00803fc4 	movi	r2,255
 200385c:	11000f36 	bltu	r2,r4,200389c <__clzsi2+0x4c>
 2003860:	00800804 	movi	r2,32
 2003864:	0007883a 	mov	r3,zero
 2003868:	00000506 	br	2003880 <__clzsi2+0x30>
 200386c:	00804034 	movhi	r2,256
 2003870:	10bfffc4 	addi	r2,r2,-1
 2003874:	11000c2e 	bgeu	r2,r4,20038a8 <__clzsi2+0x58>
 2003878:	00800204 	movi	r2,8
 200387c:	00c00604 	movi	r3,24
 2003880:	20c8d83a 	srl	r4,r4,r3
 2003884:	00c080b4 	movhi	r3,514
 2003888:	18e50344 	addi	r3,r3,-27635
 200388c:	1909883a 	add	r4,r3,r4
 2003890:	20c00003 	ldbu	r3,0(r4)
 2003894:	10c5c83a 	sub	r2,r2,r3
 2003898:	f800283a 	ret
 200389c:	00800604 	movi	r2,24
 20038a0:	00c00204 	movi	r3,8
 20038a4:	003ff606 	br	2003880 <__clzsi2+0x30>
 20038a8:	00800404 	movi	r2,16
 20038ac:	1007883a 	mov	r3,r2
 20038b0:	003ff306 	br	2003880 <__clzsi2+0x30>

020038b4 <__divsi3>:
 20038b4:	20001b16 	blt	r4,zero,2003924 <__divsi3+0x70>
 20038b8:	000f883a 	mov	r7,zero
 20038bc:	28001616 	blt	r5,zero,2003918 <__divsi3+0x64>
 20038c0:	200d883a 	mov	r6,r4
 20038c4:	29001a2e 	bgeu	r5,r4,2003930 <__divsi3+0x7c>
 20038c8:	00800804 	movi	r2,32
 20038cc:	00c00044 	movi	r3,1
 20038d0:	00000106 	br	20038d8 <__divsi3+0x24>
 20038d4:	10000d26 	beq	r2,zero,200390c <__divsi3+0x58>
 20038d8:	294b883a 	add	r5,r5,r5
 20038dc:	10bfffc4 	addi	r2,r2,-1
 20038e0:	18c7883a 	add	r3,r3,r3
 20038e4:	293ffb36 	bltu	r5,r4,20038d4 <__divsi3+0x20>
 20038e8:	0005883a 	mov	r2,zero
 20038ec:	18000726 	beq	r3,zero,200390c <__divsi3+0x58>
 20038f0:	0005883a 	mov	r2,zero
 20038f4:	31400236 	bltu	r6,r5,2003900 <__divsi3+0x4c>
 20038f8:	314dc83a 	sub	r6,r6,r5
 20038fc:	10c4b03a 	or	r2,r2,r3
 2003900:	1806d07a 	srli	r3,r3,1
 2003904:	280ad07a 	srli	r5,r5,1
 2003908:	183ffa1e 	bne	r3,zero,20038f4 <__divsi3+0x40>
 200390c:	38000126 	beq	r7,zero,2003914 <__divsi3+0x60>
 2003910:	0085c83a 	sub	r2,zero,r2
 2003914:	f800283a 	ret
 2003918:	014bc83a 	sub	r5,zero,r5
 200391c:	39c0005c 	xori	r7,r7,1
 2003920:	003fe706 	br	20038c0 <__divsi3+0xc>
 2003924:	0109c83a 	sub	r4,zero,r4
 2003928:	01c00044 	movi	r7,1
 200392c:	003fe306 	br	20038bc <__divsi3+0x8>
 2003930:	00c00044 	movi	r3,1
 2003934:	003fee06 	br	20038f0 <__divsi3+0x3c>

02003938 <__modsi3>:
 2003938:	20001716 	blt	r4,zero,2003998 <__modsi3+0x60>
 200393c:	000f883a 	mov	r7,zero
 2003940:	2005883a 	mov	r2,r4
 2003944:	28001216 	blt	r5,zero,2003990 <__modsi3+0x58>
 2003948:	2900162e 	bgeu	r5,r4,20039a4 <__modsi3+0x6c>
 200394c:	01800804 	movi	r6,32
 2003950:	00c00044 	movi	r3,1
 2003954:	00000106 	br	200395c <__modsi3+0x24>
 2003958:	30000a26 	beq	r6,zero,2003984 <__modsi3+0x4c>
 200395c:	294b883a 	add	r5,r5,r5
 2003960:	31bfffc4 	addi	r6,r6,-1
 2003964:	18c7883a 	add	r3,r3,r3
 2003968:	293ffb36 	bltu	r5,r4,2003958 <__modsi3+0x20>
 200396c:	18000526 	beq	r3,zero,2003984 <__modsi3+0x4c>
 2003970:	1806d07a 	srli	r3,r3,1
 2003974:	11400136 	bltu	r2,r5,200397c <__modsi3+0x44>
 2003978:	1145c83a 	sub	r2,r2,r5
 200397c:	280ad07a 	srli	r5,r5,1
 2003980:	183ffb1e 	bne	r3,zero,2003970 <__modsi3+0x38>
 2003984:	38000126 	beq	r7,zero,200398c <__modsi3+0x54>
 2003988:	0085c83a 	sub	r2,zero,r2
 200398c:	f800283a 	ret
 2003990:	014bc83a 	sub	r5,zero,r5
 2003994:	003fec06 	br	2003948 <__modsi3+0x10>
 2003998:	0109c83a 	sub	r4,zero,r4
 200399c:	01c00044 	movi	r7,1
 20039a0:	003fe706 	br	2003940 <__modsi3+0x8>
 20039a4:	00c00044 	movi	r3,1
 20039a8:	003ff106 	br	2003970 <__modsi3+0x38>

020039ac <__udivsi3>:
 20039ac:	200d883a 	mov	r6,r4
 20039b0:	2900152e 	bgeu	r5,r4,2003a08 <__udivsi3+0x5c>
 20039b4:	28001416 	blt	r5,zero,2003a08 <__udivsi3+0x5c>
 20039b8:	00800804 	movi	r2,32
 20039bc:	00c00044 	movi	r3,1
 20039c0:	00000206 	br	20039cc <__udivsi3+0x20>
 20039c4:	10000e26 	beq	r2,zero,2003a00 <__udivsi3+0x54>
 20039c8:	28000516 	blt	r5,zero,20039e0 <__udivsi3+0x34>
 20039cc:	294b883a 	add	r5,r5,r5
 20039d0:	10bfffc4 	addi	r2,r2,-1
 20039d4:	18c7883a 	add	r3,r3,r3
 20039d8:	293ffa36 	bltu	r5,r4,20039c4 <__udivsi3+0x18>
 20039dc:	18000826 	beq	r3,zero,2003a00 <__udivsi3+0x54>
 20039e0:	0005883a 	mov	r2,zero
 20039e4:	31400236 	bltu	r6,r5,20039f0 <__udivsi3+0x44>
 20039e8:	314dc83a 	sub	r6,r6,r5
 20039ec:	10c4b03a 	or	r2,r2,r3
 20039f0:	1806d07a 	srli	r3,r3,1
 20039f4:	280ad07a 	srli	r5,r5,1
 20039f8:	183ffa1e 	bne	r3,zero,20039e4 <__udivsi3+0x38>
 20039fc:	f800283a 	ret
 2003a00:	0005883a 	mov	r2,zero
 2003a04:	f800283a 	ret
 2003a08:	00c00044 	movi	r3,1
 2003a0c:	003ff406 	br	20039e0 <__udivsi3+0x34>

02003a10 <__umodsi3>:
 2003a10:	2005883a 	mov	r2,r4
 2003a14:	2900122e 	bgeu	r5,r4,2003a60 <__umodsi3+0x50>
 2003a18:	28001116 	blt	r5,zero,2003a60 <__umodsi3+0x50>
 2003a1c:	01800804 	movi	r6,32
 2003a20:	00c00044 	movi	r3,1
 2003a24:	00000206 	br	2003a30 <__umodsi3+0x20>
 2003a28:	30000c26 	beq	r6,zero,2003a5c <__umodsi3+0x4c>
 2003a2c:	28000516 	blt	r5,zero,2003a44 <__umodsi3+0x34>
 2003a30:	294b883a 	add	r5,r5,r5
 2003a34:	31bfffc4 	addi	r6,r6,-1
 2003a38:	18c7883a 	add	r3,r3,r3
 2003a3c:	293ffa36 	bltu	r5,r4,2003a28 <__umodsi3+0x18>
 2003a40:	18000626 	beq	r3,zero,2003a5c <__umodsi3+0x4c>
 2003a44:	1806d07a 	srli	r3,r3,1
 2003a48:	11400136 	bltu	r2,r5,2003a50 <__umodsi3+0x40>
 2003a4c:	1145c83a 	sub	r2,r2,r5
 2003a50:	280ad07a 	srli	r5,r5,1
 2003a54:	183ffb1e 	bne	r3,zero,2003a44 <__umodsi3+0x34>
 2003a58:	f800283a 	ret
 2003a5c:	f800283a 	ret
 2003a60:	00c00044 	movi	r3,1
 2003a64:	003ff706 	br	2003a44 <__umodsi3+0x34>

02003a68 <__errno>:
 2003a68:	008080b4 	movhi	r2,514
 2003a6c:	10acbb04 	addi	r2,r2,-19732
 2003a70:	10800017 	ldw	r2,0(r2)
 2003a74:	f800283a 	ret

02003a78 <_printf_r>:
 2003a78:	defffd04 	addi	sp,sp,-12
 2003a7c:	2805883a 	mov	r2,r5
 2003a80:	dfc00015 	stw	ra,0(sp)
 2003a84:	d9800115 	stw	r6,4(sp)
 2003a88:	d9c00215 	stw	r7,8(sp)
 2003a8c:	21400217 	ldw	r5,8(r4)
 2003a90:	d9c00104 	addi	r7,sp,4
 2003a94:	100d883a 	mov	r6,r2
 2003a98:	2003c500 	call	2003c50 <___vfprintf_internal_r>
 2003a9c:	dfc00017 	ldw	ra,0(sp)
 2003aa0:	dec00304 	addi	sp,sp,12
 2003aa4:	f800283a 	ret

02003aa8 <printf>:
 2003aa8:	defffc04 	addi	sp,sp,-16
 2003aac:	dfc00015 	stw	ra,0(sp)
 2003ab0:	d9400115 	stw	r5,4(sp)
 2003ab4:	d9800215 	stw	r6,8(sp)
 2003ab8:	d9c00315 	stw	r7,12(sp)
 2003abc:	008080b4 	movhi	r2,514
 2003ac0:	10acbb04 	addi	r2,r2,-19732
 2003ac4:	10800017 	ldw	r2,0(r2)
 2003ac8:	200b883a 	mov	r5,r4
 2003acc:	d9800104 	addi	r6,sp,4
 2003ad0:	11000217 	ldw	r4,8(r2)
 2003ad4:	2005f2c0 	call	2005f2c <__vfprintf_internal>
 2003ad8:	dfc00017 	ldw	ra,0(sp)
 2003adc:	dec00404 	addi	sp,sp,16
 2003ae0:	f800283a 	ret

02003ae4 <_puts_r>:
 2003ae4:	defff604 	addi	sp,sp,-40
 2003ae8:	dc000715 	stw	r16,28(sp)
 2003aec:	2021883a 	mov	r16,r4
 2003af0:	2809883a 	mov	r4,r5
 2003af4:	dc400815 	stw	r17,32(sp)
 2003af8:	dfc00915 	stw	ra,36(sp)
 2003afc:	2823883a 	mov	r17,r5
 2003b00:	2003bb80 	call	2003bb8 <strlen>
 2003b04:	10c00044 	addi	r3,r2,1
 2003b08:	d8800115 	stw	r2,4(sp)
 2003b0c:	008080b4 	movhi	r2,514
 2003b10:	10a54504 	addi	r2,r2,-27372
 2003b14:	d8800215 	stw	r2,8(sp)
 2003b18:	00800044 	movi	r2,1
 2003b1c:	d8800315 	stw	r2,12(sp)
 2003b20:	00800084 	movi	r2,2
 2003b24:	dc400015 	stw	r17,0(sp)
 2003b28:	d8c00615 	stw	r3,24(sp)
 2003b2c:	dec00415 	stw	sp,16(sp)
 2003b30:	d8800515 	stw	r2,20(sp)
 2003b34:	80000226 	beq	r16,zero,2003b40 <_puts_r+0x5c>
 2003b38:	80800e17 	ldw	r2,56(r16)
 2003b3c:	10001426 	beq	r2,zero,2003b90 <_puts_r+0xac>
 2003b40:	81400217 	ldw	r5,8(r16)
 2003b44:	2880030b 	ldhu	r2,12(r5)
 2003b48:	10c8000c 	andi	r3,r2,8192
 2003b4c:	1800061e 	bne	r3,zero,2003b68 <_puts_r+0x84>
 2003b50:	29001917 	ldw	r4,100(r5)
 2003b54:	00f7ffc4 	movi	r3,-8193
 2003b58:	10880014 	ori	r2,r2,8192
 2003b5c:	20c6703a 	and	r3,r4,r3
 2003b60:	2880030d 	sth	r2,12(r5)
 2003b64:	28c01915 	stw	r3,100(r5)
 2003b68:	d9800404 	addi	r6,sp,16
 2003b6c:	8009883a 	mov	r4,r16
 2003b70:	20084940 	call	2008494 <__sfvwrite_r>
 2003b74:	1000091e 	bne	r2,zero,2003b9c <_puts_r+0xb8>
 2003b78:	00800284 	movi	r2,10
 2003b7c:	dfc00917 	ldw	ra,36(sp)
 2003b80:	dc400817 	ldw	r17,32(sp)
 2003b84:	dc000717 	ldw	r16,28(sp)
 2003b88:	dec00a04 	addi	sp,sp,40
 2003b8c:	f800283a 	ret
 2003b90:	8009883a 	mov	r4,r16
 2003b94:	20080100 	call	2008010 <__sinit>
 2003b98:	003fe906 	br	2003b40 <_puts_r+0x5c>
 2003b9c:	00bfffc4 	movi	r2,-1
 2003ba0:	003ff606 	br	2003b7c <_puts_r+0x98>

02003ba4 <puts>:
 2003ba4:	008080b4 	movhi	r2,514
 2003ba8:	10acbb04 	addi	r2,r2,-19732
 2003bac:	200b883a 	mov	r5,r4
 2003bb0:	11000017 	ldw	r4,0(r2)
 2003bb4:	2003ae41 	jmpi	2003ae4 <_puts_r>

02003bb8 <strlen>:
 2003bb8:	208000cc 	andi	r2,r4,3
 2003bbc:	10002026 	beq	r2,zero,2003c40 <strlen+0x88>
 2003bc0:	20800007 	ldb	r2,0(r4)
 2003bc4:	10002026 	beq	r2,zero,2003c48 <strlen+0x90>
 2003bc8:	2005883a 	mov	r2,r4
 2003bcc:	00000206 	br	2003bd8 <strlen+0x20>
 2003bd0:	10c00007 	ldb	r3,0(r2)
 2003bd4:	18001826 	beq	r3,zero,2003c38 <strlen+0x80>
 2003bd8:	10800044 	addi	r2,r2,1
 2003bdc:	10c000cc 	andi	r3,r2,3
 2003be0:	183ffb1e 	bne	r3,zero,2003bd0 <strlen+0x18>
 2003be4:	10c00017 	ldw	r3,0(r2)
 2003be8:	01ffbff4 	movhi	r7,65279
 2003bec:	39ffbfc4 	addi	r7,r7,-257
 2003bf0:	00ca303a 	nor	r5,zero,r3
 2003bf4:	01a02074 	movhi	r6,32897
 2003bf8:	19c7883a 	add	r3,r3,r7
 2003bfc:	31a02004 	addi	r6,r6,-32640
 2003c00:	1946703a 	and	r3,r3,r5
 2003c04:	1986703a 	and	r3,r3,r6
 2003c08:	1800091e 	bne	r3,zero,2003c30 <strlen+0x78>
 2003c0c:	10800104 	addi	r2,r2,4
 2003c10:	10c00017 	ldw	r3,0(r2)
 2003c14:	19cb883a 	add	r5,r3,r7
 2003c18:	00c6303a 	nor	r3,zero,r3
 2003c1c:	28c6703a 	and	r3,r5,r3
 2003c20:	1986703a 	and	r3,r3,r6
 2003c24:	183ff926 	beq	r3,zero,2003c0c <strlen+0x54>
 2003c28:	00000106 	br	2003c30 <strlen+0x78>
 2003c2c:	10800044 	addi	r2,r2,1
 2003c30:	10c00007 	ldb	r3,0(r2)
 2003c34:	183ffd1e 	bne	r3,zero,2003c2c <strlen+0x74>
 2003c38:	1105c83a 	sub	r2,r2,r4
 2003c3c:	f800283a 	ret
 2003c40:	2005883a 	mov	r2,r4
 2003c44:	003fe706 	br	2003be4 <strlen+0x2c>
 2003c48:	0005883a 	mov	r2,zero
 2003c4c:	f800283a 	ret

02003c50 <___vfprintf_internal_r>:
 2003c50:	deffb804 	addi	sp,sp,-288
 2003c54:	dfc04715 	stw	ra,284(sp)
 2003c58:	ddc04515 	stw	r23,276(sp)
 2003c5c:	dd404315 	stw	r21,268(sp)
 2003c60:	d9002d15 	stw	r4,180(sp)
 2003c64:	282f883a 	mov	r23,r5
 2003c68:	302b883a 	mov	r21,r6
 2003c6c:	d9c02e15 	stw	r7,184(sp)
 2003c70:	df004615 	stw	fp,280(sp)
 2003c74:	dd804415 	stw	r22,272(sp)
 2003c78:	dd004215 	stw	r20,264(sp)
 2003c7c:	dcc04115 	stw	r19,260(sp)
 2003c80:	dc804015 	stw	r18,256(sp)
 2003c84:	dc403f15 	stw	r17,252(sp)
 2003c88:	dc003e15 	stw	r16,248(sp)
 2003c8c:	2008b900 	call	2008b90 <_localeconv_r>
 2003c90:	10800017 	ldw	r2,0(r2)
 2003c94:	1009883a 	mov	r4,r2
 2003c98:	d8803415 	stw	r2,208(sp)
 2003c9c:	2003bb80 	call	2003bb8 <strlen>
 2003ca0:	d8803715 	stw	r2,220(sp)
 2003ca4:	d8802d17 	ldw	r2,180(sp)
 2003ca8:	10000226 	beq	r2,zero,2003cb4 <___vfprintf_internal_r+0x64>
 2003cac:	10800e17 	ldw	r2,56(r2)
 2003cb0:	1000fb26 	beq	r2,zero,20040a0 <___vfprintf_internal_r+0x450>
 2003cb4:	b880030b 	ldhu	r2,12(r23)
 2003cb8:	10c8000c 	andi	r3,r2,8192
 2003cbc:	1800061e 	bne	r3,zero,2003cd8 <___vfprintf_internal_r+0x88>
 2003cc0:	b9001917 	ldw	r4,100(r23)
 2003cc4:	00f7ffc4 	movi	r3,-8193
 2003cc8:	10880014 	ori	r2,r2,8192
 2003ccc:	20c6703a 	and	r3,r4,r3
 2003cd0:	b880030d 	sth	r2,12(r23)
 2003cd4:	b8c01915 	stw	r3,100(r23)
 2003cd8:	10c0020c 	andi	r3,r2,8
 2003cdc:	1800c326 	beq	r3,zero,2003fec <___vfprintf_internal_r+0x39c>
 2003ce0:	b8c00417 	ldw	r3,16(r23)
 2003ce4:	1800c126 	beq	r3,zero,2003fec <___vfprintf_internal_r+0x39c>
 2003ce8:	1080068c 	andi	r2,r2,26
 2003cec:	00c00284 	movi	r3,10
 2003cf0:	10c0c626 	beq	r2,r3,200400c <___vfprintf_internal_r+0x3bc>
 2003cf4:	d8c00404 	addi	r3,sp,16
 2003cf8:	050080b4 	movhi	r20,514
 2003cfc:	d9001e04 	addi	r4,sp,120
 2003d00:	a5255684 	addi	r20,r20,-27302
 2003d04:	d8c01e15 	stw	r3,120(sp)
 2003d08:	d8002015 	stw	zero,128(sp)
 2003d0c:	d8001f15 	stw	zero,124(sp)
 2003d10:	d8003315 	stw	zero,204(sp)
 2003d14:	d8003615 	stw	zero,216(sp)
 2003d18:	d8003815 	stw	zero,224(sp)
 2003d1c:	1811883a 	mov	r8,r3
 2003d20:	d8003915 	stw	zero,228(sp)
 2003d24:	d8003a15 	stw	zero,232(sp)
 2003d28:	d8002f15 	stw	zero,188(sp)
 2003d2c:	d9002815 	stw	r4,160(sp)
 2003d30:	a8800007 	ldb	r2,0(r21)
 2003d34:	10028b26 	beq	r2,zero,2004764 <___vfprintf_internal_r+0xb14>
 2003d38:	00c00944 	movi	r3,37
 2003d3c:	a823883a 	mov	r17,r21
 2003d40:	10c0021e 	bne	r2,r3,2003d4c <___vfprintf_internal_r+0xfc>
 2003d44:	00001406 	br	2003d98 <___vfprintf_internal_r+0x148>
 2003d48:	10c00326 	beq	r2,r3,2003d58 <___vfprintf_internal_r+0x108>
 2003d4c:	8c400044 	addi	r17,r17,1
 2003d50:	88800007 	ldb	r2,0(r17)
 2003d54:	103ffc1e 	bne	r2,zero,2003d48 <___vfprintf_internal_r+0xf8>
 2003d58:	8d61c83a 	sub	r16,r17,r21
 2003d5c:	80000e26 	beq	r16,zero,2003d98 <___vfprintf_internal_r+0x148>
 2003d60:	d8c02017 	ldw	r3,128(sp)
 2003d64:	d8801f17 	ldw	r2,124(sp)
 2003d68:	45400015 	stw	r21,0(r8)
 2003d6c:	1c07883a 	add	r3,r3,r16
 2003d70:	10800044 	addi	r2,r2,1
 2003d74:	d8c02015 	stw	r3,128(sp)
 2003d78:	44000115 	stw	r16,4(r8)
 2003d7c:	d8801f15 	stw	r2,124(sp)
 2003d80:	00c001c4 	movi	r3,7
 2003d84:	1880a916 	blt	r3,r2,200402c <___vfprintf_internal_r+0x3dc>
 2003d88:	42000204 	addi	r8,r8,8
 2003d8c:	d9402f17 	ldw	r5,188(sp)
 2003d90:	2c0b883a 	add	r5,r5,r16
 2003d94:	d9402f15 	stw	r5,188(sp)
 2003d98:	88800007 	ldb	r2,0(r17)
 2003d9c:	1000aa26 	beq	r2,zero,2004048 <___vfprintf_internal_r+0x3f8>
 2003da0:	8d400044 	addi	r21,r17,1
 2003da4:	8c400047 	ldb	r17,1(r17)
 2003da8:	0021883a 	mov	r16,zero
 2003dac:	00bfffc4 	movi	r2,-1
 2003db0:	0025883a 	mov	r18,zero
 2003db4:	dc002905 	stb	r16,164(sp)
 2003db8:	d8002785 	stb	zero,158(sp)
 2003dbc:	d8002b05 	stb	zero,172(sp)
 2003dc0:	d8802a15 	stw	r2,168(sp)
 2003dc4:	d8003115 	stw	zero,196(sp)
 2003dc8:	04c01604 	movi	r19,88
 2003dcc:	05800244 	movi	r22,9
 2003dd0:	9021883a 	mov	r16,r18
 2003dd4:	4039883a 	mov	fp,r8
 2003dd8:	ad400044 	addi	r21,r21,1
 2003ddc:	88bff804 	addi	r2,r17,-32
 2003de0:	98833236 	bltu	r19,r2,2004aac <___vfprintf_internal_r+0xe5c>
 2003de4:	100490ba 	slli	r2,r2,2
 2003de8:	00c08034 	movhi	r3,512
 2003dec:	18cf7f04 	addi	r3,r3,15868
 2003df0:	10c5883a 	add	r2,r2,r3
 2003df4:	10800017 	ldw	r2,0(r2)
 2003df8:	1000683a 	jmp	r2
 2003dfc:	020049a4 	muli	r8,zero,294
 2003e00:	02004aac 	andhi	r8,zero,298
 2003e04:	02004aac 	andhi	r8,zero,298
 2003e08:	020049c4 	movi	r8,295
 2003e0c:	02004aac 	andhi	r8,zero,298
 2003e10:	02004aac 	andhi	r8,zero,298
 2003e14:	02004aac 	andhi	r8,zero,298
 2003e18:	02004aac 	andhi	r8,zero,298
 2003e1c:	02004aac 	andhi	r8,zero,298
 2003e20:	02004aac 	andhi	r8,zero,298
 2003e24:	020040ac 	andhi	r8,zero,258
 2003e28:	020048b4 	movhi	r8,290
 2003e2c:	02004aac 	andhi	r8,zero,298
 2003e30:	02003f70 	cmpltui	r8,zero,253
 2003e34:	020040d0 	cmplti	r8,zero,259
 2003e38:	02004aac 	andhi	r8,zero,298
 2003e3c:	02004120 	cmpeqi	r8,zero,260
 2003e40:	0200412c 	andhi	r8,zero,260
 2003e44:	0200412c 	andhi	r8,zero,260
 2003e48:	0200412c 	andhi	r8,zero,260
 2003e4c:	0200412c 	andhi	r8,zero,260
 2003e50:	0200412c 	andhi	r8,zero,260
 2003e54:	0200412c 	andhi	r8,zero,260
 2003e58:	0200412c 	andhi	r8,zero,260
 2003e5c:	0200412c 	andhi	r8,zero,260
 2003e60:	0200412c 	andhi	r8,zero,260
 2003e64:	02004aac 	andhi	r8,zero,298
 2003e68:	02004aac 	andhi	r8,zero,298
 2003e6c:	02004aac 	andhi	r8,zero,298
 2003e70:	02004aac 	andhi	r8,zero,298
 2003e74:	02004aac 	andhi	r8,zero,298
 2003e78:	02004aac 	andhi	r8,zero,298
 2003e7c:	02004aac 	andhi	r8,zero,298
 2003e80:	02004aac 	andhi	r8,zero,298
 2003e84:	02004aac 	andhi	r8,zero,298
 2003e88:	02004aac 	andhi	r8,zero,298
 2003e8c:	02004168 	cmpgeui	r8,zero,261
 2003e90:	02004230 	cmpltui	r8,zero,264
 2003e94:	02004aac 	andhi	r8,zero,298
 2003e98:	02004230 	cmpltui	r8,zero,264
 2003e9c:	02004aac 	andhi	r8,zero,298
 2003ea0:	02004aac 	andhi	r8,zero,298
 2003ea4:	02004aac 	andhi	r8,zero,298
 2003ea8:	02004aac 	andhi	r8,zero,298
 2003eac:	020042dc 	xori	r8,zero,267
 2003eb0:	02004aac 	andhi	r8,zero,298
 2003eb4:	02004aac 	andhi	r8,zero,298
 2003eb8:	020042e8 	cmpgeui	r8,zero,267
 2003ebc:	02004aac 	andhi	r8,zero,298
 2003ec0:	02004aac 	andhi	r8,zero,298
 2003ec4:	02004aac 	andhi	r8,zero,298
 2003ec8:	02004aac 	andhi	r8,zero,298
 2003ecc:	02004aac 	andhi	r8,zero,298
 2003ed0:	0200476c 	andhi	r8,zero,285
 2003ed4:	02004aac 	andhi	r8,zero,298
 2003ed8:	02004aac 	andhi	r8,zero,298
 2003edc:	020047d8 	cmpnei	r8,zero,287
 2003ee0:	02004aac 	andhi	r8,zero,298
 2003ee4:	02004aac 	andhi	r8,zero,298
 2003ee8:	02004aac 	andhi	r8,zero,298
 2003eec:	02004aac 	andhi	r8,zero,298
 2003ef0:	02004aac 	andhi	r8,zero,298
 2003ef4:	02004aac 	andhi	r8,zero,298
 2003ef8:	02004aac 	andhi	r8,zero,298
 2003efc:	02004aac 	andhi	r8,zero,298
 2003f00:	02004aac 	andhi	r8,zero,298
 2003f04:	02004aac 	andhi	r8,zero,298
 2003f08:	02004a50 	cmplti	r8,zero,297
 2003f0c:	020049d0 	cmplti	r8,zero,295
 2003f10:	02004230 	cmpltui	r8,zero,264
 2003f14:	02004230 	cmpltui	r8,zero,264
 2003f18:	02004230 	cmpltui	r8,zero,264
 2003f1c:	020049f0 	cmpltui	r8,zero,295
 2003f20:	020049d0 	cmplti	r8,zero,295
 2003f24:	02004aac 	andhi	r8,zero,298
 2003f28:	02004aac 	andhi	r8,zero,298
 2003f2c:	020049fc 	xorhi	r8,zero,295
 2003f30:	02004aac 	andhi	r8,zero,298
 2003f34:	02004a10 	cmplti	r8,zero,296
 2003f38:	02004894 	movui	r8,290
 2003f3c:	02003f7c 	xorhi	r8,zero,253
 2003f40:	020048cc 	andi	r8,zero,291
 2003f44:	02004aac 	andhi	r8,zero,298
 2003f48:	020048d8 	cmpnei	r8,zero,291
 2003f4c:	02004aac 	andhi	r8,zero,298
 2003f50:	0200493c 	xorhi	r8,zero,292
 2003f54:	02004aac 	andhi	r8,zero,298
 2003f58:	02004aac 	andhi	r8,zero,298
 2003f5c:	0200495c 	xori	r8,zero,293
 2003f60:	d8c03117 	ldw	r3,196(sp)
 2003f64:	d8802e15 	stw	r2,184(sp)
 2003f68:	00c7c83a 	sub	r3,zero,r3
 2003f6c:	d8c03115 	stw	r3,196(sp)
 2003f70:	84000114 	ori	r16,r16,4
 2003f74:	ac400007 	ldb	r17,0(r21)
 2003f78:	003f9706 	br	2003dd8 <___vfprintf_internal_r+0x188>
 2003f7c:	00800c04 	movi	r2,48
 2003f80:	d8802705 	stb	r2,156(sp)
 2003f84:	00801e04 	movi	r2,120
 2003f88:	d8802745 	stb	r2,157(sp)
 2003f8c:	d9002a17 	ldw	r4,168(sp)
 2003f90:	d8802e17 	ldw	r2,184(sp)
 2003f94:	d8002785 	stb	zero,158(sp)
 2003f98:	e011883a 	mov	r8,fp
 2003f9c:	10c00104 	addi	r3,r2,4
 2003fa0:	14c00017 	ldw	r19,0(r2)
 2003fa4:	002d883a 	mov	r22,zero
 2003fa8:	80800094 	ori	r2,r16,2
 2003fac:	2002ca16 	blt	r4,zero,2004ad8 <___vfprintf_internal_r+0xe88>
 2003fb0:	00bfdfc4 	movi	r2,-129
 2003fb4:	80a4703a 	and	r18,r16,r2
 2003fb8:	d8c02e15 	stw	r3,184(sp)
 2003fbc:	94800094 	ori	r18,r18,2
 2003fc0:	9802b41e 	bne	r19,zero,2004a94 <___vfprintf_internal_r+0xe44>
 2003fc4:	014080b4 	movhi	r5,514
 2003fc8:	29654f04 	addi	r5,r5,-27332
 2003fcc:	d9403915 	stw	r5,228(sp)
 2003fd0:	04401e04 	movi	r17,120
 2003fd4:	d8802a17 	ldw	r2,168(sp)
 2003fd8:	0039883a 	mov	fp,zero
 2003fdc:	1001fa26 	beq	r2,zero,20047c8 <___vfprintf_internal_r+0xb78>
 2003fe0:	0027883a 	mov	r19,zero
 2003fe4:	002d883a 	mov	r22,zero
 2003fe8:	00021906 	br	2004850 <___vfprintf_internal_r+0xc00>
 2003fec:	d9002d17 	ldw	r4,180(sp)
 2003ff0:	b80b883a 	mov	r5,r23
 2003ff4:	20060040 	call	2006004 <__swsetup_r>
 2003ff8:	1005dc1e 	bne	r2,zero,200576c <___vfprintf_internal_r+0x1b1c>
 2003ffc:	b880030b 	ldhu	r2,12(r23)
 2004000:	00c00284 	movi	r3,10
 2004004:	1080068c 	andi	r2,r2,26
 2004008:	10ff3a1e 	bne	r2,r3,2003cf4 <___vfprintf_internal_r+0xa4>
 200400c:	b880038f 	ldh	r2,14(r23)
 2004010:	103f3816 	blt	r2,zero,2003cf4 <___vfprintf_internal_r+0xa4>
 2004014:	d9c02e17 	ldw	r7,184(sp)
 2004018:	d9002d17 	ldw	r4,180(sp)
 200401c:	a80d883a 	mov	r6,r21
 2004020:	b80b883a 	mov	r5,r23
 2004024:	2005f480 	call	2005f48 <__sbprintf>
 2004028:	00001106 	br	2004070 <___vfprintf_internal_r+0x420>
 200402c:	d9002d17 	ldw	r4,180(sp)
 2004030:	d9801e04 	addi	r6,sp,120
 2004034:	b80b883a 	mov	r5,r23
 2004038:	200b3bc0 	call	200b3bc <__sprint_r>
 200403c:	1000081e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004040:	da000404 	addi	r8,sp,16
 2004044:	003f5106 	br	2003d8c <___vfprintf_internal_r+0x13c>
 2004048:	d8802017 	ldw	r2,128(sp)
 200404c:	10000426 	beq	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004050:	d9002d17 	ldw	r4,180(sp)
 2004054:	d9801e04 	addi	r6,sp,120
 2004058:	b80b883a 	mov	r5,r23
 200405c:	200b3bc0 	call	200b3bc <__sprint_r>
 2004060:	b880030b 	ldhu	r2,12(r23)
 2004064:	1080100c 	andi	r2,r2,64
 2004068:	1005c01e 	bne	r2,zero,200576c <___vfprintf_internal_r+0x1b1c>
 200406c:	d8802f17 	ldw	r2,188(sp)
 2004070:	dfc04717 	ldw	ra,284(sp)
 2004074:	df004617 	ldw	fp,280(sp)
 2004078:	ddc04517 	ldw	r23,276(sp)
 200407c:	dd804417 	ldw	r22,272(sp)
 2004080:	dd404317 	ldw	r21,268(sp)
 2004084:	dd004217 	ldw	r20,264(sp)
 2004088:	dcc04117 	ldw	r19,260(sp)
 200408c:	dc804017 	ldw	r18,256(sp)
 2004090:	dc403f17 	ldw	r17,252(sp)
 2004094:	dc003e17 	ldw	r16,248(sp)
 2004098:	dec04804 	addi	sp,sp,288
 200409c:	f800283a 	ret
 20040a0:	d9002d17 	ldw	r4,180(sp)
 20040a4:	20080100 	call	2008010 <__sinit>
 20040a8:	003f0206 	br	2003cb4 <___vfprintf_internal_r+0x64>
 20040ac:	d9002e17 	ldw	r4,184(sp)
 20040b0:	d9402e17 	ldw	r5,184(sp)
 20040b4:	21000017 	ldw	r4,0(r4)
 20040b8:	28800104 	addi	r2,r5,4
 20040bc:	d9003115 	stw	r4,196(sp)
 20040c0:	203fa716 	blt	r4,zero,2003f60 <___vfprintf_internal_r+0x310>
 20040c4:	d8802e15 	stw	r2,184(sp)
 20040c8:	ac400007 	ldb	r17,0(r21)
 20040cc:	003f4206 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20040d0:	ac400007 	ldb	r17,0(r21)
 20040d4:	01000a84 	movi	r4,42
 20040d8:	a8c00044 	addi	r3,r21,1
 20040dc:	89075826 	beq	r17,r4,2005e40 <___vfprintf_internal_r+0x21f0>
 20040e0:	8cbff404 	addi	r18,r17,-48
 20040e4:	b486ae36 	bltu	r22,r18,2005ba0 <___vfprintf_internal_r+0x1f50>
 20040e8:	0009883a 	mov	r4,zero
 20040ec:	1823883a 	mov	r17,r3
 20040f0:	01400284 	movi	r5,10
 20040f4:	20011180 	call	2001118 <__mulsi3>
 20040f8:	88c00007 	ldb	r3,0(r17)
 20040fc:	1489883a 	add	r4,r2,r18
 2004100:	8d400044 	addi	r21,r17,1
 2004104:	1cbff404 	addi	r18,r3,-48
 2004108:	a823883a 	mov	r17,r21
 200410c:	b4bff82e 	bgeu	r22,r18,20040f0 <___vfprintf_internal_r+0x4a0>
 2004110:	1823883a 	mov	r17,r3
 2004114:	2005f616 	blt	r4,zero,20058f0 <___vfprintf_internal_r+0x1ca0>
 2004118:	d9002a15 	stw	r4,168(sp)
 200411c:	003f2f06 	br	2003ddc <___vfprintf_internal_r+0x18c>
 2004120:	84002014 	ori	r16,r16,128
 2004124:	ac400007 	ldb	r17,0(r21)
 2004128:	003f2b06 	br	2003dd8 <___vfprintf_internal_r+0x188>
 200412c:	8cbff404 	addi	r18,r17,-48
 2004130:	d8003115 	stw	zero,196(sp)
 2004134:	0009883a 	mov	r4,zero
 2004138:	a823883a 	mov	r17,r21
 200413c:	01400284 	movi	r5,10
 2004140:	20011180 	call	2001118 <__mulsi3>
 2004144:	88c00007 	ldb	r3,0(r17)
 2004148:	9089883a 	add	r4,r18,r2
 200414c:	ad400044 	addi	r21,r21,1
 2004150:	1cbff404 	addi	r18,r3,-48
 2004154:	a823883a 	mov	r17,r21
 2004158:	b4bff82e 	bgeu	r22,r18,200413c <___vfprintf_internal_r+0x4ec>
 200415c:	1823883a 	mov	r17,r3
 2004160:	d9003115 	stw	r4,196(sp)
 2004164:	003f1d06 	br	2003ddc <___vfprintf_internal_r+0x18c>
 2004168:	8025883a 	mov	r18,r16
 200416c:	dc002903 	ldbu	r16,164(sp)
 2004170:	e011883a 	mov	r8,fp
 2004174:	84003fcc 	andi	r16,r16,255
 2004178:	8007531e 	bne	r16,zero,2005ec8 <___vfprintf_internal_r+0x2278>
 200417c:	94800414 	ori	r18,r18,16
 2004180:	9080080c 	andi	r2,r18,32
 2004184:	1003a326 	beq	r2,zero,2005014 <___vfprintf_internal_r+0x13c4>
 2004188:	d9002e17 	ldw	r4,184(sp)
 200418c:	20800117 	ldw	r2,4(r4)
 2004190:	24c00017 	ldw	r19,0(r4)
 2004194:	21000204 	addi	r4,r4,8
 2004198:	d9002e15 	stw	r4,184(sp)
 200419c:	102d883a 	mov	r22,r2
 20041a0:	10047316 	blt	r2,zero,2005370 <___vfprintf_internal_r+0x1720>
 20041a4:	d9002a17 	ldw	r4,168(sp)
 20041a8:	df002783 	ldbu	fp,158(sp)
 20041ac:	2003e416 	blt	r4,zero,2005140 <___vfprintf_internal_r+0x14f0>
 20041b0:	00ffdfc4 	movi	r3,-129
 20041b4:	9d84b03a 	or	r2,r19,r22
 20041b8:	90e4703a 	and	r18,r18,r3
 20041bc:	10018026 	beq	r2,zero,20047c0 <___vfprintf_internal_r+0xb70>
 20041c0:	b003ab26 	beq	r22,zero,2005070 <___vfprintf_internal_r+0x1420>
 20041c4:	dc402915 	stw	r17,164(sp)
 20041c8:	dc001e04 	addi	r16,sp,120
 20041cc:	b023883a 	mov	r17,r22
 20041d0:	402d883a 	mov	r22,r8
 20041d4:	9809883a 	mov	r4,r19
 20041d8:	880b883a 	mov	r5,r17
 20041dc:	01800284 	movi	r6,10
 20041e0:	000f883a 	mov	r7,zero
 20041e4:	200d9000 	call	200d900 <__umoddi3>
 20041e8:	10800c04 	addi	r2,r2,48
 20041ec:	843fffc4 	addi	r16,r16,-1
 20041f0:	9809883a 	mov	r4,r19
 20041f4:	880b883a 	mov	r5,r17
 20041f8:	80800005 	stb	r2,0(r16)
 20041fc:	01800284 	movi	r6,10
 2004200:	000f883a 	mov	r7,zero
 2004204:	200d3040 	call	200d304 <__udivdi3>
 2004208:	1027883a 	mov	r19,r2
 200420c:	10c4b03a 	or	r2,r2,r3
 2004210:	1823883a 	mov	r17,r3
 2004214:	103fef1e 	bne	r2,zero,20041d4 <___vfprintf_internal_r+0x584>
 2004218:	d8c02817 	ldw	r3,160(sp)
 200421c:	dc402917 	ldw	r17,164(sp)
 2004220:	b011883a 	mov	r8,r22
 2004224:	1c07c83a 	sub	r3,r3,r16
 2004228:	d8c02b15 	stw	r3,172(sp)
 200422c:	00005f06 	br	20043ac <___vfprintf_internal_r+0x75c>
 2004230:	8025883a 	mov	r18,r16
 2004234:	dc002903 	ldbu	r16,164(sp)
 2004238:	e011883a 	mov	r8,fp
 200423c:	84003fcc 	andi	r16,r16,255
 2004240:	80071e1e 	bne	r16,zero,2005ebc <___vfprintf_internal_r+0x226c>
 2004244:	9080020c 	andi	r2,r18,8
 2004248:	1004af26 	beq	r2,zero,2005508 <___vfprintf_internal_r+0x18b8>
 200424c:	d9002e17 	ldw	r4,184(sp)
 2004250:	d9402e17 	ldw	r5,184(sp)
 2004254:	d8802e17 	ldw	r2,184(sp)
 2004258:	21000017 	ldw	r4,0(r4)
 200425c:	29400117 	ldw	r5,4(r5)
 2004260:	10800204 	addi	r2,r2,8
 2004264:	d9003615 	stw	r4,216(sp)
 2004268:	d9403815 	stw	r5,224(sp)
 200426c:	d8802e15 	stw	r2,184(sp)
 2004270:	d9003617 	ldw	r4,216(sp)
 2004274:	d9403817 	ldw	r5,224(sp)
 2004278:	da003d15 	stw	r8,244(sp)
 200427c:	04000044 	movi	r16,1
 2004280:	200109c0 	call	200109c <__fpclassifyd>
 2004284:	da003d17 	ldw	r8,244(sp)
 2004288:	1404441e 	bne	r2,r16,200539c <___vfprintf_internal_r+0x174c>
 200428c:	d9003617 	ldw	r4,216(sp)
 2004290:	d9403817 	ldw	r5,224(sp)
 2004294:	000d883a 	mov	r6,zero
 2004298:	000f883a 	mov	r7,zero
 200429c:	20024980 	call	2002498 <__ledf2>
 20042a0:	da003d17 	ldw	r8,244(sp)
 20042a4:	1005e316 	blt	r2,zero,2005a34 <___vfprintf_internal_r+0x1de4>
 20042a8:	df002783 	ldbu	fp,158(sp)
 20042ac:	008011c4 	movi	r2,71
 20042b0:	1445580e 	bge	r2,r17,2005814 <___vfprintf_internal_r+0x1bc4>
 20042b4:	040080b4 	movhi	r16,514
 20042b8:	84254704 	addi	r16,r16,-27364
 20042bc:	00c000c4 	movi	r3,3
 20042c0:	00bfdfc4 	movi	r2,-129
 20042c4:	d8c02915 	stw	r3,164(sp)
 20042c8:	90a4703a 	and	r18,r18,r2
 20042cc:	d8c02b15 	stw	r3,172(sp)
 20042d0:	d8002a15 	stw	zero,168(sp)
 20042d4:	d8003215 	stw	zero,200(sp)
 20042d8:	00003a06 	br	20043c4 <___vfprintf_internal_r+0x774>
 20042dc:	84000214 	ori	r16,r16,8
 20042e0:	ac400007 	ldb	r17,0(r21)
 20042e4:	003ebc06 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20042e8:	8025883a 	mov	r18,r16
 20042ec:	dc002903 	ldbu	r16,164(sp)
 20042f0:	e011883a 	mov	r8,fp
 20042f4:	84003fcc 	andi	r16,r16,255
 20042f8:	8007001e 	bne	r16,zero,2005efc <___vfprintf_internal_r+0x22ac>
 20042fc:	94800414 	ori	r18,r18,16
 2004300:	9080080c 	andi	r2,r18,32
 2004304:	1002fa26 	beq	r2,zero,2004ef0 <___vfprintf_internal_r+0x12a0>
 2004308:	d9002e17 	ldw	r4,184(sp)
 200430c:	d9402a17 	ldw	r5,168(sp)
 2004310:	d8002785 	stb	zero,158(sp)
 2004314:	20800204 	addi	r2,r4,8
 2004318:	24c00017 	ldw	r19,0(r4)
 200431c:	25800117 	ldw	r22,4(r4)
 2004320:	2804b116 	blt	r5,zero,20055e8 <___vfprintf_internal_r+0x1998>
 2004324:	013fdfc4 	movi	r4,-129
 2004328:	9d86b03a 	or	r3,r19,r22
 200432c:	d8802e15 	stw	r2,184(sp)
 2004330:	9124703a 	and	r18,r18,r4
 2004334:	1802fb1e 	bne	r3,zero,2004f24 <___vfprintf_internal_r+0x12d4>
 2004338:	d8c02a17 	ldw	r3,168(sp)
 200433c:	0039883a 	mov	fp,zero
 2004340:	1805e526 	beq	r3,zero,2005ad8 <___vfprintf_internal_r+0x1e88>
 2004344:	0027883a 	mov	r19,zero
 2004348:	002d883a 	mov	r22,zero
 200434c:	dc001e04 	addi	r16,sp,120
 2004350:	9806d0fa 	srli	r3,r19,3
 2004354:	b008977a 	slli	r4,r22,29
 2004358:	b02cd0fa 	srli	r22,r22,3
 200435c:	9cc001cc 	andi	r19,r19,7
 2004360:	98800c04 	addi	r2,r19,48
 2004364:	843fffc4 	addi	r16,r16,-1
 2004368:	20e6b03a 	or	r19,r4,r3
 200436c:	80800005 	stb	r2,0(r16)
 2004370:	9d86b03a 	or	r3,r19,r22
 2004374:	183ff61e 	bne	r3,zero,2004350 <___vfprintf_internal_r+0x700>
 2004378:	90c0004c 	andi	r3,r18,1
 200437c:	18014126 	beq	r3,zero,2004884 <___vfprintf_internal_r+0xc34>
 2004380:	10803fcc 	andi	r2,r2,255
 2004384:	1080201c 	xori	r2,r2,128
 2004388:	10bfe004 	addi	r2,r2,-128
 200438c:	00c00c04 	movi	r3,48
 2004390:	10c13c26 	beq	r2,r3,2004884 <___vfprintf_internal_r+0xc34>
 2004394:	80ffffc5 	stb	r3,-1(r16)
 2004398:	d8c02817 	ldw	r3,160(sp)
 200439c:	80bfffc4 	addi	r2,r16,-1
 20043a0:	1021883a 	mov	r16,r2
 20043a4:	1887c83a 	sub	r3,r3,r2
 20043a8:	d8c02b15 	stw	r3,172(sp)
 20043ac:	d8802b17 	ldw	r2,172(sp)
 20043b0:	d9002a17 	ldw	r4,168(sp)
 20043b4:	1100010e 	bge	r2,r4,20043bc <___vfprintf_internal_r+0x76c>
 20043b8:	2005883a 	mov	r2,r4
 20043bc:	d8802915 	stw	r2,164(sp)
 20043c0:	d8003215 	stw	zero,200(sp)
 20043c4:	e7003fcc 	andi	fp,fp,255
 20043c8:	e700201c 	xori	fp,fp,128
 20043cc:	e73fe004 	addi	fp,fp,-128
 20043d0:	e0000326 	beq	fp,zero,20043e0 <___vfprintf_internal_r+0x790>
 20043d4:	d8c02917 	ldw	r3,164(sp)
 20043d8:	18c00044 	addi	r3,r3,1
 20043dc:	d8c02915 	stw	r3,164(sp)
 20043e0:	90c0008c 	andi	r3,r18,2
 20043e4:	d8c02c15 	stw	r3,176(sp)
 20043e8:	18000326 	beq	r3,zero,20043f8 <___vfprintf_internal_r+0x7a8>
 20043ec:	d8c02917 	ldw	r3,164(sp)
 20043f0:	18c00084 	addi	r3,r3,2
 20043f4:	d8c02915 	stw	r3,164(sp)
 20043f8:	90c0210c 	andi	r3,r18,132
 20043fc:	d8c03015 	stw	r3,192(sp)
 2004400:	1801c51e 	bne	r3,zero,2004b18 <___vfprintf_internal_r+0xec8>
 2004404:	d9003117 	ldw	r4,196(sp)
 2004408:	d8c02917 	ldw	r3,164(sp)
 200440c:	20e7c83a 	sub	r19,r4,r3
 2004410:	04c1c10e 	bge	zero,r19,2004b18 <___vfprintf_internal_r+0xec8>
 2004414:	02400404 	movi	r9,16
 2004418:	d8c02017 	ldw	r3,128(sp)
 200441c:	d8801f17 	ldw	r2,124(sp)
 2004420:	4cc52f0e 	bge	r9,r19,20058e0 <___vfprintf_internal_r+0x1c90>
 2004424:	014080b4 	movhi	r5,514
 2004428:	29655a84 	addi	r5,r5,-27286
 200442c:	dc403b15 	stw	r17,236(sp)
 2004430:	d9403515 	stw	r5,212(sp)
 2004434:	9823883a 	mov	r17,r19
 2004438:	482d883a 	mov	r22,r9
 200443c:	9027883a 	mov	r19,r18
 2004440:	070001c4 	movi	fp,7
 2004444:	8025883a 	mov	r18,r16
 2004448:	dc002d17 	ldw	r16,180(sp)
 200444c:	00000306 	br	200445c <___vfprintf_internal_r+0x80c>
 2004450:	8c7ffc04 	addi	r17,r17,-16
 2004454:	42000204 	addi	r8,r8,8
 2004458:	b440130e 	bge	r22,r17,20044a8 <___vfprintf_internal_r+0x858>
 200445c:	010080b4 	movhi	r4,514
 2004460:	18c00404 	addi	r3,r3,16
 2004464:	10800044 	addi	r2,r2,1
 2004468:	21255a84 	addi	r4,r4,-27286
 200446c:	41000015 	stw	r4,0(r8)
 2004470:	45800115 	stw	r22,4(r8)
 2004474:	d8c02015 	stw	r3,128(sp)
 2004478:	d8801f15 	stw	r2,124(sp)
 200447c:	e0bff40e 	bge	fp,r2,2004450 <___vfprintf_internal_r+0x800>
 2004480:	d9801e04 	addi	r6,sp,120
 2004484:	b80b883a 	mov	r5,r23
 2004488:	8009883a 	mov	r4,r16
 200448c:	200b3bc0 	call	200b3bc <__sprint_r>
 2004490:	103ef31e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004494:	8c7ffc04 	addi	r17,r17,-16
 2004498:	d8c02017 	ldw	r3,128(sp)
 200449c:	d8801f17 	ldw	r2,124(sp)
 20044a0:	da000404 	addi	r8,sp,16
 20044a4:	b47fed16 	blt	r22,r17,200445c <___vfprintf_internal_r+0x80c>
 20044a8:	9021883a 	mov	r16,r18
 20044ac:	9825883a 	mov	r18,r19
 20044b0:	8827883a 	mov	r19,r17
 20044b4:	dc403b17 	ldw	r17,236(sp)
 20044b8:	d9403517 	ldw	r5,212(sp)
 20044bc:	98c7883a 	add	r3,r19,r3
 20044c0:	10800044 	addi	r2,r2,1
 20044c4:	41400015 	stw	r5,0(r8)
 20044c8:	44c00115 	stw	r19,4(r8)
 20044cc:	d8c02015 	stw	r3,128(sp)
 20044d0:	d8801f15 	stw	r2,124(sp)
 20044d4:	010001c4 	movi	r4,7
 20044d8:	2082c516 	blt	r4,r2,2004ff0 <___vfprintf_internal_r+0x13a0>
 20044dc:	df002787 	ldb	fp,158(sp)
 20044e0:	42000204 	addi	r8,r8,8
 20044e4:	e0000c26 	beq	fp,zero,2004518 <___vfprintf_internal_r+0x8c8>
 20044e8:	d8801f17 	ldw	r2,124(sp)
 20044ec:	d9002784 	addi	r4,sp,158
 20044f0:	18c00044 	addi	r3,r3,1
 20044f4:	10800044 	addi	r2,r2,1
 20044f8:	41000015 	stw	r4,0(r8)
 20044fc:	01000044 	movi	r4,1
 2004500:	41000115 	stw	r4,4(r8)
 2004504:	d8c02015 	stw	r3,128(sp)
 2004508:	d8801f15 	stw	r2,124(sp)
 200450c:	010001c4 	movi	r4,7
 2004510:	20825e16 	blt	r4,r2,2004e8c <___vfprintf_internal_r+0x123c>
 2004514:	42000204 	addi	r8,r8,8
 2004518:	d8802c17 	ldw	r2,176(sp)
 200451c:	10000c26 	beq	r2,zero,2004550 <___vfprintf_internal_r+0x900>
 2004520:	d8801f17 	ldw	r2,124(sp)
 2004524:	d9002704 	addi	r4,sp,156
 2004528:	18c00084 	addi	r3,r3,2
 200452c:	10800044 	addi	r2,r2,1
 2004530:	41000015 	stw	r4,0(r8)
 2004534:	01000084 	movi	r4,2
 2004538:	41000115 	stw	r4,4(r8)
 200453c:	d8c02015 	stw	r3,128(sp)
 2004540:	d8801f15 	stw	r2,124(sp)
 2004544:	010001c4 	movi	r4,7
 2004548:	20825816 	blt	r4,r2,2004eac <___vfprintf_internal_r+0x125c>
 200454c:	42000204 	addi	r8,r8,8
 2004550:	d9003017 	ldw	r4,192(sp)
 2004554:	00802004 	movi	r2,128
 2004558:	2081bb26 	beq	r4,r2,2004c48 <___vfprintf_internal_r+0xff8>
 200455c:	d9402a17 	ldw	r5,168(sp)
 2004560:	d8802b17 	ldw	r2,172(sp)
 2004564:	28adc83a 	sub	r22,r5,r2
 2004568:	0580310e 	bge	zero,r22,2004630 <___vfprintf_internal_r+0x9e0>
 200456c:	07000404 	movi	fp,16
 2004570:	d8801f17 	ldw	r2,124(sp)
 2004574:	e584360e 	bge	fp,r22,2005650 <___vfprintf_internal_r+0x1a00>
 2004578:	014080b4 	movhi	r5,514
 200457c:	29655684 	addi	r5,r5,-27302
 2004580:	dc402a15 	stw	r17,168(sp)
 2004584:	d9402c15 	stw	r5,176(sp)
 2004588:	b023883a 	mov	r17,r22
 200458c:	04c001c4 	movi	r19,7
 2004590:	a82d883a 	mov	r22,r21
 2004594:	902b883a 	mov	r21,r18
 2004598:	8025883a 	mov	r18,r16
 200459c:	dc002d17 	ldw	r16,180(sp)
 20045a0:	00000306 	br	20045b0 <___vfprintf_internal_r+0x960>
 20045a4:	8c7ffc04 	addi	r17,r17,-16
 20045a8:	42000204 	addi	r8,r8,8
 20045ac:	e440110e 	bge	fp,r17,20045f4 <___vfprintf_internal_r+0x9a4>
 20045b0:	18c00404 	addi	r3,r3,16
 20045b4:	10800044 	addi	r2,r2,1
 20045b8:	45000015 	stw	r20,0(r8)
 20045bc:	47000115 	stw	fp,4(r8)
 20045c0:	d8c02015 	stw	r3,128(sp)
 20045c4:	d8801f15 	stw	r2,124(sp)
 20045c8:	98bff60e 	bge	r19,r2,20045a4 <___vfprintf_internal_r+0x954>
 20045cc:	d9801e04 	addi	r6,sp,120
 20045d0:	b80b883a 	mov	r5,r23
 20045d4:	8009883a 	mov	r4,r16
 20045d8:	200b3bc0 	call	200b3bc <__sprint_r>
 20045dc:	103ea01e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 20045e0:	8c7ffc04 	addi	r17,r17,-16
 20045e4:	d8c02017 	ldw	r3,128(sp)
 20045e8:	d8801f17 	ldw	r2,124(sp)
 20045ec:	da000404 	addi	r8,sp,16
 20045f0:	e47fef16 	blt	fp,r17,20045b0 <___vfprintf_internal_r+0x960>
 20045f4:	9021883a 	mov	r16,r18
 20045f8:	a825883a 	mov	r18,r21
 20045fc:	b02b883a 	mov	r21,r22
 2004600:	882d883a 	mov	r22,r17
 2004604:	dc402a17 	ldw	r17,168(sp)
 2004608:	d9002c17 	ldw	r4,176(sp)
 200460c:	1d87883a 	add	r3,r3,r22
 2004610:	10800044 	addi	r2,r2,1
 2004614:	41000015 	stw	r4,0(r8)
 2004618:	45800115 	stw	r22,4(r8)
 200461c:	d8c02015 	stw	r3,128(sp)
 2004620:	d8801f15 	stw	r2,124(sp)
 2004624:	010001c4 	movi	r4,7
 2004628:	20821016 	blt	r4,r2,2004e6c <___vfprintf_internal_r+0x121c>
 200462c:	42000204 	addi	r8,r8,8
 2004630:	9080400c 	andi	r2,r18,256
 2004634:	10013a1e 	bne	r2,zero,2004b20 <___vfprintf_internal_r+0xed0>
 2004638:	d9402b17 	ldw	r5,172(sp)
 200463c:	d8801f17 	ldw	r2,124(sp)
 2004640:	44000015 	stw	r16,0(r8)
 2004644:	1947883a 	add	r3,r3,r5
 2004648:	10800044 	addi	r2,r2,1
 200464c:	41400115 	stw	r5,4(r8)
 2004650:	d8c02015 	stw	r3,128(sp)
 2004654:	d8801f15 	stw	r2,124(sp)
 2004658:	010001c4 	movi	r4,7
 200465c:	2081f516 	blt	r4,r2,2004e34 <___vfprintf_internal_r+0x11e4>
 2004660:	42000204 	addi	r8,r8,8
 2004664:	9480010c 	andi	r18,r18,4
 2004668:	90003226 	beq	r18,zero,2004734 <___vfprintf_internal_r+0xae4>
 200466c:	d9403117 	ldw	r5,196(sp)
 2004670:	d8802917 	ldw	r2,164(sp)
 2004674:	28a1c83a 	sub	r16,r5,r2
 2004678:	04002e0e 	bge	zero,r16,2004734 <___vfprintf_internal_r+0xae4>
 200467c:	04400404 	movi	r17,16
 2004680:	d8801f17 	ldw	r2,124(sp)
 2004684:	8c04c40e 	bge	r17,r16,2005998 <___vfprintf_internal_r+0x1d48>
 2004688:	014080b4 	movhi	r5,514
 200468c:	29655a84 	addi	r5,r5,-27286
 2004690:	d9403515 	stw	r5,212(sp)
 2004694:	048001c4 	movi	r18,7
 2004698:	dcc02d17 	ldw	r19,180(sp)
 200469c:	00000306 	br	20046ac <___vfprintf_internal_r+0xa5c>
 20046a0:	843ffc04 	addi	r16,r16,-16
 20046a4:	42000204 	addi	r8,r8,8
 20046a8:	8c00130e 	bge	r17,r16,20046f8 <___vfprintf_internal_r+0xaa8>
 20046ac:	010080b4 	movhi	r4,514
 20046b0:	18c00404 	addi	r3,r3,16
 20046b4:	10800044 	addi	r2,r2,1
 20046b8:	21255a84 	addi	r4,r4,-27286
 20046bc:	41000015 	stw	r4,0(r8)
 20046c0:	44400115 	stw	r17,4(r8)
 20046c4:	d8c02015 	stw	r3,128(sp)
 20046c8:	d8801f15 	stw	r2,124(sp)
 20046cc:	90bff40e 	bge	r18,r2,20046a0 <___vfprintf_internal_r+0xa50>
 20046d0:	d9801e04 	addi	r6,sp,120
 20046d4:	b80b883a 	mov	r5,r23
 20046d8:	9809883a 	mov	r4,r19
 20046dc:	200b3bc0 	call	200b3bc <__sprint_r>
 20046e0:	103e5f1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 20046e4:	843ffc04 	addi	r16,r16,-16
 20046e8:	d8c02017 	ldw	r3,128(sp)
 20046ec:	d8801f17 	ldw	r2,124(sp)
 20046f0:	da000404 	addi	r8,sp,16
 20046f4:	8c3fed16 	blt	r17,r16,20046ac <___vfprintf_internal_r+0xa5c>
 20046f8:	d9403517 	ldw	r5,212(sp)
 20046fc:	1c07883a 	add	r3,r3,r16
 2004700:	10800044 	addi	r2,r2,1
 2004704:	41400015 	stw	r5,0(r8)
 2004708:	44000115 	stw	r16,4(r8)
 200470c:	d8c02015 	stw	r3,128(sp)
 2004710:	d8801f15 	stw	r2,124(sp)
 2004714:	010001c4 	movi	r4,7
 2004718:	2080060e 	bge	r4,r2,2004734 <___vfprintf_internal_r+0xae4>
 200471c:	d9002d17 	ldw	r4,180(sp)
 2004720:	d9801e04 	addi	r6,sp,120
 2004724:	b80b883a 	mov	r5,r23
 2004728:	200b3bc0 	call	200b3bc <__sprint_r>
 200472c:	103e4c1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004730:	d8c02017 	ldw	r3,128(sp)
 2004734:	d8803117 	ldw	r2,196(sp)
 2004738:	d9002917 	ldw	r4,164(sp)
 200473c:	1100010e 	bge	r2,r4,2004744 <___vfprintf_internal_r+0xaf4>
 2004740:	2005883a 	mov	r2,r4
 2004744:	d9402f17 	ldw	r5,188(sp)
 2004748:	288b883a 	add	r5,r5,r2
 200474c:	d9402f15 	stw	r5,188(sp)
 2004750:	1801c01e 	bne	r3,zero,2004e54 <___vfprintf_internal_r+0x1204>
 2004754:	a8800007 	ldb	r2,0(r21)
 2004758:	d8001f15 	stw	zero,124(sp)
 200475c:	da000404 	addi	r8,sp,16
 2004760:	103d751e 	bne	r2,zero,2003d38 <___vfprintf_internal_r+0xe8>
 2004764:	a823883a 	mov	r17,r21
 2004768:	003d8b06 	br	2003d98 <___vfprintf_internal_r+0x148>
 200476c:	8025883a 	mov	r18,r16
 2004770:	dc002903 	ldbu	r16,164(sp)
 2004774:	e011883a 	mov	r8,fp
 2004778:	84003fcc 	andi	r16,r16,255
 200477c:	8005e51e 	bne	r16,zero,2005f14 <___vfprintf_internal_r+0x22c4>
 2004780:	94800414 	ori	r18,r18,16
 2004784:	9080080c 	andi	r2,r18,32
 2004788:	10022b26 	beq	r2,zero,2005038 <___vfprintf_internal_r+0x13e8>
 200478c:	d9002e17 	ldw	r4,184(sp)
 2004790:	d9402a17 	ldw	r5,168(sp)
 2004794:	d8002785 	stb	zero,158(sp)
 2004798:	20c00204 	addi	r3,r4,8
 200479c:	24c00017 	ldw	r19,0(r4)
 20047a0:	25800117 	ldw	r22,4(r4)
 20047a4:	28042e16 	blt	r5,zero,2005860 <___vfprintf_internal_r+0x1c10>
 20047a8:	013fdfc4 	movi	r4,-129
 20047ac:	9d84b03a 	or	r2,r19,r22
 20047b0:	d8c02e15 	stw	r3,184(sp)
 20047b4:	9124703a 	and	r18,r18,r4
 20047b8:	0039883a 	mov	fp,zero
 20047bc:	103e801e 	bne	r2,zero,20041c0 <___vfprintf_internal_r+0x570>
 20047c0:	d9002a17 	ldw	r4,168(sp)
 20047c4:	2002e01e 	bne	r4,zero,2005348 <___vfprintf_internal_r+0x16f8>
 20047c8:	d8002a15 	stw	zero,168(sp)
 20047cc:	d8002b15 	stw	zero,172(sp)
 20047d0:	dc001e04 	addi	r16,sp,120
 20047d4:	003ef506 	br	20043ac <___vfprintf_internal_r+0x75c>
 20047d8:	8025883a 	mov	r18,r16
 20047dc:	dc002903 	ldbu	r16,164(sp)
 20047e0:	e011883a 	mov	r8,fp
 20047e4:	84003fcc 	andi	r16,r16,255
 20047e8:	8005ba1e 	bne	r16,zero,2005ed4 <___vfprintf_internal_r+0x2284>
 20047ec:	010080b4 	movhi	r4,514
 20047f0:	21254a04 	addi	r4,r4,-27352
 20047f4:	d9003915 	stw	r4,228(sp)
 20047f8:	9080080c 	andi	r2,r18,32
 20047fc:	10006126 	beq	r2,zero,2004984 <___vfprintf_internal_r+0xd34>
 2004800:	d9402e17 	ldw	r5,184(sp)
 2004804:	2cc00017 	ldw	r19,0(r5)
 2004808:	2d800117 	ldw	r22,4(r5)
 200480c:	29400204 	addi	r5,r5,8
 2004810:	d9402e15 	stw	r5,184(sp)
 2004814:	9080004c 	andi	r2,r18,1
 2004818:	1001ac26 	beq	r2,zero,2004ecc <___vfprintf_internal_r+0x127c>
 200481c:	9d84b03a 	or	r2,r19,r22
 2004820:	10038526 	beq	r2,zero,2005638 <___vfprintf_internal_r+0x19e8>
 2004824:	d8c02a17 	ldw	r3,168(sp)
 2004828:	00800c04 	movi	r2,48
 200482c:	d8802705 	stb	r2,156(sp)
 2004830:	dc402745 	stb	r17,157(sp)
 2004834:	d8002785 	stb	zero,158(sp)
 2004838:	90800094 	ori	r2,r18,2
 200483c:	18047916 	blt	r3,zero,2005a24 <___vfprintf_internal_r+0x1dd4>
 2004840:	00bfdfc4 	movi	r2,-129
 2004844:	90a4703a 	and	r18,r18,r2
 2004848:	94800094 	ori	r18,r18,2
 200484c:	0039883a 	mov	fp,zero
 2004850:	d9003917 	ldw	r4,228(sp)
 2004854:	dc001e04 	addi	r16,sp,120
 2004858:	988003cc 	andi	r2,r19,15
 200485c:	b006973a 	slli	r3,r22,28
 2004860:	2085883a 	add	r2,r4,r2
 2004864:	9826d13a 	srli	r19,r19,4
 2004868:	10800003 	ldbu	r2,0(r2)
 200486c:	b02cd13a 	srli	r22,r22,4
 2004870:	843fffc4 	addi	r16,r16,-1
 2004874:	1ce6b03a 	or	r19,r3,r19
 2004878:	80800005 	stb	r2,0(r16)
 200487c:	9d84b03a 	or	r2,r19,r22
 2004880:	103ff51e 	bne	r2,zero,2004858 <___vfprintf_internal_r+0xc08>
 2004884:	d8c02817 	ldw	r3,160(sp)
 2004888:	1c07c83a 	sub	r3,r3,r16
 200488c:	d8c02b15 	stw	r3,172(sp)
 2004890:	003ec606 	br	20043ac <___vfprintf_internal_r+0x75c>
 2004894:	8025883a 	mov	r18,r16
 2004898:	dc002903 	ldbu	r16,164(sp)
 200489c:	e011883a 	mov	r8,fp
 20048a0:	84003fcc 	andi	r16,r16,255
 20048a4:	803e9626 	beq	r16,zero,2004300 <___vfprintf_internal_r+0x6b0>
 20048a8:	d8c02b03 	ldbu	r3,172(sp)
 20048ac:	d8c02785 	stb	r3,158(sp)
 20048b0:	003e9306 	br	2004300 <___vfprintf_internal_r+0x6b0>
 20048b4:	00c00044 	movi	r3,1
 20048b8:	d8c02905 	stb	r3,164(sp)
 20048bc:	00c00ac4 	movi	r3,43
 20048c0:	d8c02b05 	stb	r3,172(sp)
 20048c4:	ac400007 	ldb	r17,0(r21)
 20048c8:	003d4306 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20048cc:	84000814 	ori	r16,r16,32
 20048d0:	ac400007 	ldb	r17,0(r21)
 20048d4:	003d4006 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20048d8:	d8802e17 	ldw	r2,184(sp)
 20048dc:	8025883a 	mov	r18,r16
 20048e0:	d8002785 	stb	zero,158(sp)
 20048e4:	14000017 	ldw	r16,0(r2)
 20048e8:	e011883a 	mov	r8,fp
 20048ec:	14c00104 	addi	r19,r2,4
 20048f0:	80042d26 	beq	r16,zero,20059a8 <___vfprintf_internal_r+0x1d58>
 20048f4:	d8c02a17 	ldw	r3,168(sp)
 20048f8:	1803e416 	blt	r3,zero,200588c <___vfprintf_internal_r+0x1c3c>
 20048fc:	180d883a 	mov	r6,r3
 2004900:	000b883a 	mov	r5,zero
 2004904:	8009883a 	mov	r4,r16
 2004908:	df003d15 	stw	fp,244(sp)
 200490c:	20095880 	call	2009588 <memchr>
 2004910:	da003d17 	ldw	r8,244(sp)
 2004914:	10046826 	beq	r2,zero,2005ab8 <___vfprintf_internal_r+0x1e68>
 2004918:	1405c83a 	sub	r2,r2,r16
 200491c:	d8802b15 	stw	r2,172(sp)
 2004920:	1003e016 	blt	r2,zero,20058a4 <___vfprintf_internal_r+0x1c54>
 2004924:	df002783 	ldbu	fp,158(sp)
 2004928:	d8802915 	stw	r2,164(sp)
 200492c:	dcc02e15 	stw	r19,184(sp)
 2004930:	d8002a15 	stw	zero,168(sp)
 2004934:	d8003215 	stw	zero,200(sp)
 2004938:	003ea206 	br	20043c4 <___vfprintf_internal_r+0x774>
 200493c:	8025883a 	mov	r18,r16
 2004940:	dc002903 	ldbu	r16,164(sp)
 2004944:	e011883a 	mov	r8,fp
 2004948:	84003fcc 	andi	r16,r16,255
 200494c:	803f8d26 	beq	r16,zero,2004784 <___vfprintf_internal_r+0xb34>
 2004950:	d8c02b03 	ldbu	r3,172(sp)
 2004954:	d8c02785 	stb	r3,158(sp)
 2004958:	003f8a06 	br	2004784 <___vfprintf_internal_r+0xb34>
 200495c:	8025883a 	mov	r18,r16
 2004960:	dc002903 	ldbu	r16,164(sp)
 2004964:	e011883a 	mov	r8,fp
 2004968:	84003fcc 	andi	r16,r16,255
 200496c:	8005661e 	bne	r16,zero,2005f08 <___vfprintf_internal_r+0x22b8>
 2004970:	010080b4 	movhi	r4,514
 2004974:	21254f04 	addi	r4,r4,-27332
 2004978:	d9003915 	stw	r4,228(sp)
 200497c:	9080080c 	andi	r2,r18,32
 2004980:	103f9f1e 	bne	r2,zero,2004800 <___vfprintf_internal_r+0xbb0>
 2004984:	9080040c 	andi	r2,r18,16
 2004988:	1002eb26 	beq	r2,zero,2005538 <___vfprintf_internal_r+0x18e8>
 200498c:	d8802e17 	ldw	r2,184(sp)
 2004990:	002d883a 	mov	r22,zero
 2004994:	14c00017 	ldw	r19,0(r2)
 2004998:	10800104 	addi	r2,r2,4
 200499c:	d8802e15 	stw	r2,184(sp)
 20049a0:	003f9c06 	br	2004814 <___vfprintf_internal_r+0xbc4>
 20049a4:	d8802b07 	ldb	r2,172(sp)
 20049a8:	1002e11e 	bne	r2,zero,2005530 <___vfprintf_internal_r+0x18e0>
 20049ac:	00c00044 	movi	r3,1
 20049b0:	d8c02905 	stb	r3,164(sp)
 20049b4:	00c00804 	movi	r3,32
 20049b8:	d8c02b05 	stb	r3,172(sp)
 20049bc:	ac400007 	ldb	r17,0(r21)
 20049c0:	003d0506 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20049c4:	84000054 	ori	r16,r16,1
 20049c8:	ac400007 	ldb	r17,0(r21)
 20049cc:	003d0206 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20049d0:	8025883a 	mov	r18,r16
 20049d4:	dc002903 	ldbu	r16,164(sp)
 20049d8:	e011883a 	mov	r8,fp
 20049dc:	84003fcc 	andi	r16,r16,255
 20049e0:	803de726 	beq	r16,zero,2004180 <___vfprintf_internal_r+0x530>
 20049e4:	d8c02b03 	ldbu	r3,172(sp)
 20049e8:	d8c02785 	stb	r3,158(sp)
 20049ec:	003de406 	br	2004180 <___vfprintf_internal_r+0x530>
 20049f0:	84001014 	ori	r16,r16,64
 20049f4:	ac400007 	ldb	r17,0(r21)
 20049f8:	003cf706 	br	2003dd8 <___vfprintf_internal_r+0x188>
 20049fc:	ac400007 	ldb	r17,0(r21)
 2004a00:	00801b04 	movi	r2,108
 2004a04:	88838f26 	beq	r17,r2,2005844 <___vfprintf_internal_r+0x1bf4>
 2004a08:	84000414 	ori	r16,r16,16
 2004a0c:	003cf206 	br	2003dd8 <___vfprintf_internal_r+0x188>
 2004a10:	8025883a 	mov	r18,r16
 2004a14:	dc002903 	ldbu	r16,164(sp)
 2004a18:	e011883a 	mov	r8,fp
 2004a1c:	84003fcc 	andi	r16,r16,255
 2004a20:	80053f1e 	bne	r16,zero,2005f20 <___vfprintf_internal_r+0x22d0>
 2004a24:	9080080c 	andi	r2,r18,32
 2004a28:	1002d226 	beq	r2,zero,2005574 <___vfprintf_internal_r+0x1924>
 2004a2c:	d9002e17 	ldw	r4,184(sp)
 2004a30:	d9402f17 	ldw	r5,188(sp)
 2004a34:	20800017 	ldw	r2,0(r4)
 2004a38:	2807d7fa 	srai	r3,r5,31
 2004a3c:	21000104 	addi	r4,r4,4
 2004a40:	d9002e15 	stw	r4,184(sp)
 2004a44:	11400015 	stw	r5,0(r2)
 2004a48:	10c00115 	stw	r3,4(r2)
 2004a4c:	003cb806 	br	2003d30 <___vfprintf_internal_r+0xe0>
 2004a50:	d8c02e17 	ldw	r3,184(sp)
 2004a54:	d9002e17 	ldw	r4,184(sp)
 2004a58:	8025883a 	mov	r18,r16
 2004a5c:	18800017 	ldw	r2,0(r3)
 2004a60:	21000104 	addi	r4,r4,4
 2004a64:	00c00044 	movi	r3,1
 2004a68:	e011883a 	mov	r8,fp
 2004a6c:	d8c02915 	stw	r3,164(sp)
 2004a70:	d8002785 	stb	zero,158(sp)
 2004a74:	d8801405 	stb	r2,80(sp)
 2004a78:	d9002e15 	stw	r4,184(sp)
 2004a7c:	d8c02b15 	stw	r3,172(sp)
 2004a80:	d8002a15 	stw	zero,168(sp)
 2004a84:	d8003215 	stw	zero,200(sp)
 2004a88:	dc001404 	addi	r16,sp,80
 2004a8c:	0039883a 	mov	fp,zero
 2004a90:	003e5306 	br	20043e0 <___vfprintf_internal_r+0x790>
 2004a94:	010080b4 	movhi	r4,514
 2004a98:	21254f04 	addi	r4,r4,-27332
 2004a9c:	0039883a 	mov	fp,zero
 2004aa0:	d9003915 	stw	r4,228(sp)
 2004aa4:	04401e04 	movi	r17,120
 2004aa8:	003f6906 	br	2004850 <___vfprintf_internal_r+0xc00>
 2004aac:	8025883a 	mov	r18,r16
 2004ab0:	dc002903 	ldbu	r16,164(sp)
 2004ab4:	e011883a 	mov	r8,fp
 2004ab8:	84003fcc 	andi	r16,r16,255
 2004abc:	8005081e 	bne	r16,zero,2005ee0 <___vfprintf_internal_r+0x2290>
 2004ac0:	883d6126 	beq	r17,zero,2004048 <___vfprintf_internal_r+0x3f8>
 2004ac4:	00c00044 	movi	r3,1
 2004ac8:	d8c02915 	stw	r3,164(sp)
 2004acc:	dc401405 	stb	r17,80(sp)
 2004ad0:	d8002785 	stb	zero,158(sp)
 2004ad4:	003fe906 	br	2004a7c <___vfprintf_internal_r+0xe2c>
 2004ad8:	014080b4 	movhi	r5,514
 2004adc:	29654f04 	addi	r5,r5,-27332
 2004ae0:	d9403915 	stw	r5,228(sp)
 2004ae4:	d8c02e15 	stw	r3,184(sp)
 2004ae8:	1025883a 	mov	r18,r2
 2004aec:	04401e04 	movi	r17,120
 2004af0:	9d84b03a 	or	r2,r19,r22
 2004af4:	1000fc1e 	bne	r2,zero,2004ee8 <___vfprintf_internal_r+0x1298>
 2004af8:	0039883a 	mov	fp,zero
 2004afc:	00800084 	movi	r2,2
 2004b00:	10803fcc 	andi	r2,r2,255
 2004b04:	00c00044 	movi	r3,1
 2004b08:	10c20f26 	beq	r2,r3,2005348 <___vfprintf_internal_r+0x16f8>
 2004b0c:	00c00084 	movi	r3,2
 2004b10:	10fd3326 	beq	r2,r3,2003fe0 <___vfprintf_internal_r+0x390>
 2004b14:	003e0b06 	br	2004344 <___vfprintf_internal_r+0x6f4>
 2004b18:	d8c02017 	ldw	r3,128(sp)
 2004b1c:	003e7106 	br	20044e4 <___vfprintf_internal_r+0x894>
 2004b20:	00801944 	movi	r2,101
 2004b24:	14407e0e 	bge	r2,r17,2004d20 <___vfprintf_internal_r+0x10d0>
 2004b28:	d9003617 	ldw	r4,216(sp)
 2004b2c:	d9403817 	ldw	r5,224(sp)
 2004b30:	000d883a 	mov	r6,zero
 2004b34:	000f883a 	mov	r7,zero
 2004b38:	d8c03c15 	stw	r3,240(sp)
 2004b3c:	da003d15 	stw	r8,244(sp)
 2004b40:	200dec40 	call	200dec4 <__eqdf2>
 2004b44:	d8c03c17 	ldw	r3,240(sp)
 2004b48:	da003d17 	ldw	r8,244(sp)
 2004b4c:	1000f71e 	bne	r2,zero,2004f2c <___vfprintf_internal_r+0x12dc>
 2004b50:	d8801f17 	ldw	r2,124(sp)
 2004b54:	010080b4 	movhi	r4,514
 2004b58:	21255604 	addi	r4,r4,-27304
 2004b5c:	18c00044 	addi	r3,r3,1
 2004b60:	10800044 	addi	r2,r2,1
 2004b64:	41000015 	stw	r4,0(r8)
 2004b68:	01000044 	movi	r4,1
 2004b6c:	41000115 	stw	r4,4(r8)
 2004b70:	d8c02015 	stw	r3,128(sp)
 2004b74:	d8801f15 	stw	r2,124(sp)
 2004b78:	010001c4 	movi	r4,7
 2004b7c:	2082b816 	blt	r4,r2,2005660 <___vfprintf_internal_r+0x1a10>
 2004b80:	42000204 	addi	r8,r8,8
 2004b84:	d8802617 	ldw	r2,152(sp)
 2004b88:	d9403317 	ldw	r5,204(sp)
 2004b8c:	11400216 	blt	r2,r5,2004b98 <___vfprintf_internal_r+0xf48>
 2004b90:	9080004c 	andi	r2,r18,1
 2004b94:	103eb326 	beq	r2,zero,2004664 <___vfprintf_internal_r+0xa14>
 2004b98:	d8803717 	ldw	r2,220(sp)
 2004b9c:	d9003417 	ldw	r4,208(sp)
 2004ba0:	d9403717 	ldw	r5,220(sp)
 2004ba4:	1887883a 	add	r3,r3,r2
 2004ba8:	d8801f17 	ldw	r2,124(sp)
 2004bac:	41000015 	stw	r4,0(r8)
 2004bb0:	41400115 	stw	r5,4(r8)
 2004bb4:	10800044 	addi	r2,r2,1
 2004bb8:	d8c02015 	stw	r3,128(sp)
 2004bbc:	d8801f15 	stw	r2,124(sp)
 2004bc0:	010001c4 	movi	r4,7
 2004bc4:	20832916 	blt	r4,r2,200586c <___vfprintf_internal_r+0x1c1c>
 2004bc8:	42000204 	addi	r8,r8,8
 2004bcc:	d8803317 	ldw	r2,204(sp)
 2004bd0:	143fffc4 	addi	r16,r2,-1
 2004bd4:	043ea30e 	bge	zero,r16,2004664 <___vfprintf_internal_r+0xa14>
 2004bd8:	04400404 	movi	r17,16
 2004bdc:	d8801f17 	ldw	r2,124(sp)
 2004be0:	8c00880e 	bge	r17,r16,2004e04 <___vfprintf_internal_r+0x11b4>
 2004be4:	014080b4 	movhi	r5,514
 2004be8:	29655684 	addi	r5,r5,-27302
 2004bec:	d9402c15 	stw	r5,176(sp)
 2004bf0:	058001c4 	movi	r22,7
 2004bf4:	dcc02d17 	ldw	r19,180(sp)
 2004bf8:	00000306 	br	2004c08 <___vfprintf_internal_r+0xfb8>
 2004bfc:	42000204 	addi	r8,r8,8
 2004c00:	843ffc04 	addi	r16,r16,-16
 2004c04:	8c00820e 	bge	r17,r16,2004e10 <___vfprintf_internal_r+0x11c0>
 2004c08:	18c00404 	addi	r3,r3,16
 2004c0c:	10800044 	addi	r2,r2,1
 2004c10:	45000015 	stw	r20,0(r8)
 2004c14:	44400115 	stw	r17,4(r8)
 2004c18:	d8c02015 	stw	r3,128(sp)
 2004c1c:	d8801f15 	stw	r2,124(sp)
 2004c20:	b0bff60e 	bge	r22,r2,2004bfc <___vfprintf_internal_r+0xfac>
 2004c24:	d9801e04 	addi	r6,sp,120
 2004c28:	b80b883a 	mov	r5,r23
 2004c2c:	9809883a 	mov	r4,r19
 2004c30:	200b3bc0 	call	200b3bc <__sprint_r>
 2004c34:	103d0a1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004c38:	d8c02017 	ldw	r3,128(sp)
 2004c3c:	d8801f17 	ldw	r2,124(sp)
 2004c40:	da000404 	addi	r8,sp,16
 2004c44:	003fee06 	br	2004c00 <___vfprintf_internal_r+0xfb0>
 2004c48:	d9403117 	ldw	r5,196(sp)
 2004c4c:	d8802917 	ldw	r2,164(sp)
 2004c50:	28adc83a 	sub	r22,r5,r2
 2004c54:	05be410e 	bge	zero,r22,200455c <___vfprintf_internal_r+0x90c>
 2004c58:	07000404 	movi	fp,16
 2004c5c:	d8801f17 	ldw	r2,124(sp)
 2004c60:	e5838f0e 	bge	fp,r22,2005aa0 <___vfprintf_internal_r+0x1e50>
 2004c64:	014080b4 	movhi	r5,514
 2004c68:	29655684 	addi	r5,r5,-27302
 2004c6c:	dc403015 	stw	r17,192(sp)
 2004c70:	d9402c15 	stw	r5,176(sp)
 2004c74:	b023883a 	mov	r17,r22
 2004c78:	04c001c4 	movi	r19,7
 2004c7c:	a82d883a 	mov	r22,r21
 2004c80:	902b883a 	mov	r21,r18
 2004c84:	8025883a 	mov	r18,r16
 2004c88:	dc002d17 	ldw	r16,180(sp)
 2004c8c:	00000306 	br	2004c9c <___vfprintf_internal_r+0x104c>
 2004c90:	8c7ffc04 	addi	r17,r17,-16
 2004c94:	42000204 	addi	r8,r8,8
 2004c98:	e440110e 	bge	fp,r17,2004ce0 <___vfprintf_internal_r+0x1090>
 2004c9c:	18c00404 	addi	r3,r3,16
 2004ca0:	10800044 	addi	r2,r2,1
 2004ca4:	45000015 	stw	r20,0(r8)
 2004ca8:	47000115 	stw	fp,4(r8)
 2004cac:	d8c02015 	stw	r3,128(sp)
 2004cb0:	d8801f15 	stw	r2,124(sp)
 2004cb4:	98bff60e 	bge	r19,r2,2004c90 <___vfprintf_internal_r+0x1040>
 2004cb8:	d9801e04 	addi	r6,sp,120
 2004cbc:	b80b883a 	mov	r5,r23
 2004cc0:	8009883a 	mov	r4,r16
 2004cc4:	200b3bc0 	call	200b3bc <__sprint_r>
 2004cc8:	103ce51e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004ccc:	8c7ffc04 	addi	r17,r17,-16
 2004cd0:	d8c02017 	ldw	r3,128(sp)
 2004cd4:	d8801f17 	ldw	r2,124(sp)
 2004cd8:	da000404 	addi	r8,sp,16
 2004cdc:	e47fef16 	blt	fp,r17,2004c9c <___vfprintf_internal_r+0x104c>
 2004ce0:	9021883a 	mov	r16,r18
 2004ce4:	a825883a 	mov	r18,r21
 2004ce8:	b02b883a 	mov	r21,r22
 2004cec:	882d883a 	mov	r22,r17
 2004cf0:	dc403017 	ldw	r17,192(sp)
 2004cf4:	d9002c17 	ldw	r4,176(sp)
 2004cf8:	1d87883a 	add	r3,r3,r22
 2004cfc:	10800044 	addi	r2,r2,1
 2004d00:	41000015 	stw	r4,0(r8)
 2004d04:	45800115 	stw	r22,4(r8)
 2004d08:	d8c02015 	stw	r3,128(sp)
 2004d0c:	d8801f15 	stw	r2,124(sp)
 2004d10:	010001c4 	movi	r4,7
 2004d14:	20818e16 	blt	r4,r2,2005350 <___vfprintf_internal_r+0x1700>
 2004d18:	42000204 	addi	r8,r8,8
 2004d1c:	003e0f06 	br	200455c <___vfprintf_internal_r+0x90c>
 2004d20:	d9403317 	ldw	r5,204(sp)
 2004d24:	00800044 	movi	r2,1
 2004d28:	18c00044 	addi	r3,r3,1
 2004d2c:	1141530e 	bge	r2,r5,200527c <___vfprintf_internal_r+0x162c>
 2004d30:	dc401f17 	ldw	r17,124(sp)
 2004d34:	00800044 	movi	r2,1
 2004d38:	40800115 	stw	r2,4(r8)
 2004d3c:	8c400044 	addi	r17,r17,1
 2004d40:	44000015 	stw	r16,0(r8)
 2004d44:	d8c02015 	stw	r3,128(sp)
 2004d48:	dc401f15 	stw	r17,124(sp)
 2004d4c:	008001c4 	movi	r2,7
 2004d50:	14416b16 	blt	r2,r17,2005300 <___vfprintf_internal_r+0x16b0>
 2004d54:	42000204 	addi	r8,r8,8
 2004d58:	d8803717 	ldw	r2,220(sp)
 2004d5c:	d9003417 	ldw	r4,208(sp)
 2004d60:	8c400044 	addi	r17,r17,1
 2004d64:	10c7883a 	add	r3,r2,r3
 2004d68:	40800115 	stw	r2,4(r8)
 2004d6c:	41000015 	stw	r4,0(r8)
 2004d70:	d8c02015 	stw	r3,128(sp)
 2004d74:	dc401f15 	stw	r17,124(sp)
 2004d78:	008001c4 	movi	r2,7
 2004d7c:	14416916 	blt	r2,r17,2005324 <___vfprintf_internal_r+0x16d4>
 2004d80:	45800204 	addi	r22,r8,8
 2004d84:	d9003617 	ldw	r4,216(sp)
 2004d88:	d9403817 	ldw	r5,224(sp)
 2004d8c:	000d883a 	mov	r6,zero
 2004d90:	000f883a 	mov	r7,zero
 2004d94:	d8c03c15 	stw	r3,240(sp)
 2004d98:	200dec40 	call	200dec4 <__eqdf2>
 2004d9c:	d8c03c17 	ldw	r3,240(sp)
 2004da0:	1000bc26 	beq	r2,zero,2005094 <___vfprintf_internal_r+0x1444>
 2004da4:	d9403317 	ldw	r5,204(sp)
 2004da8:	84000044 	addi	r16,r16,1
 2004dac:	8c400044 	addi	r17,r17,1
 2004db0:	28bfffc4 	addi	r2,r5,-1
 2004db4:	1887883a 	add	r3,r3,r2
 2004db8:	b0800115 	stw	r2,4(r22)
 2004dbc:	b4000015 	stw	r16,0(r22)
 2004dc0:	d8c02015 	stw	r3,128(sp)
 2004dc4:	dc401f15 	stw	r17,124(sp)
 2004dc8:	008001c4 	movi	r2,7
 2004dcc:	14414316 	blt	r2,r17,20052dc <___vfprintf_internal_r+0x168c>
 2004dd0:	b5800204 	addi	r22,r22,8
 2004dd4:	d9003a17 	ldw	r4,232(sp)
 2004dd8:	df0022c4 	addi	fp,sp,139
 2004ddc:	8c400044 	addi	r17,r17,1
 2004de0:	20c7883a 	add	r3,r4,r3
 2004de4:	b7000015 	stw	fp,0(r22)
 2004de8:	b1000115 	stw	r4,4(r22)
 2004dec:	d8c02015 	stw	r3,128(sp)
 2004df0:	dc401f15 	stw	r17,124(sp)
 2004df4:	008001c4 	movi	r2,7
 2004df8:	14400e16 	blt	r2,r17,2004e34 <___vfprintf_internal_r+0x11e4>
 2004dfc:	b2000204 	addi	r8,r22,8
 2004e00:	003e1806 	br	2004664 <___vfprintf_internal_r+0xa14>
 2004e04:	010080b4 	movhi	r4,514
 2004e08:	21255684 	addi	r4,r4,-27302
 2004e0c:	d9002c15 	stw	r4,176(sp)
 2004e10:	d9002c17 	ldw	r4,176(sp)
 2004e14:	1c07883a 	add	r3,r3,r16
 2004e18:	44000115 	stw	r16,4(r8)
 2004e1c:	41000015 	stw	r4,0(r8)
 2004e20:	10800044 	addi	r2,r2,1
 2004e24:	d8c02015 	stw	r3,128(sp)
 2004e28:	d8801f15 	stw	r2,124(sp)
 2004e2c:	010001c4 	movi	r4,7
 2004e30:	20be0b0e 	bge	r4,r2,2004660 <___vfprintf_internal_r+0xa10>
 2004e34:	d9002d17 	ldw	r4,180(sp)
 2004e38:	d9801e04 	addi	r6,sp,120
 2004e3c:	b80b883a 	mov	r5,r23
 2004e40:	200b3bc0 	call	200b3bc <__sprint_r>
 2004e44:	103c861e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004e48:	d8c02017 	ldw	r3,128(sp)
 2004e4c:	da000404 	addi	r8,sp,16
 2004e50:	003e0406 	br	2004664 <___vfprintf_internal_r+0xa14>
 2004e54:	d9002d17 	ldw	r4,180(sp)
 2004e58:	d9801e04 	addi	r6,sp,120
 2004e5c:	b80b883a 	mov	r5,r23
 2004e60:	200b3bc0 	call	200b3bc <__sprint_r>
 2004e64:	103e3b26 	beq	r2,zero,2004754 <___vfprintf_internal_r+0xb04>
 2004e68:	003c7d06 	br	2004060 <___vfprintf_internal_r+0x410>
 2004e6c:	d9002d17 	ldw	r4,180(sp)
 2004e70:	d9801e04 	addi	r6,sp,120
 2004e74:	b80b883a 	mov	r5,r23
 2004e78:	200b3bc0 	call	200b3bc <__sprint_r>
 2004e7c:	103c781e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004e80:	d8c02017 	ldw	r3,128(sp)
 2004e84:	da000404 	addi	r8,sp,16
 2004e88:	003de906 	br	2004630 <___vfprintf_internal_r+0x9e0>
 2004e8c:	d9002d17 	ldw	r4,180(sp)
 2004e90:	d9801e04 	addi	r6,sp,120
 2004e94:	b80b883a 	mov	r5,r23
 2004e98:	200b3bc0 	call	200b3bc <__sprint_r>
 2004e9c:	103c701e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004ea0:	d8c02017 	ldw	r3,128(sp)
 2004ea4:	da000404 	addi	r8,sp,16
 2004ea8:	003d9b06 	br	2004518 <___vfprintf_internal_r+0x8c8>
 2004eac:	d9002d17 	ldw	r4,180(sp)
 2004eb0:	d9801e04 	addi	r6,sp,120
 2004eb4:	b80b883a 	mov	r5,r23
 2004eb8:	200b3bc0 	call	200b3bc <__sprint_r>
 2004ebc:	103c681e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004ec0:	d8c02017 	ldw	r3,128(sp)
 2004ec4:	da000404 	addi	r8,sp,16
 2004ec8:	003da106 	br	2004550 <___vfprintf_internal_r+0x900>
 2004ecc:	d9402a17 	ldw	r5,168(sp)
 2004ed0:	d8002785 	stb	zero,158(sp)
 2004ed4:	283f0616 	blt	r5,zero,2004af0 <___vfprintf_internal_r+0xea0>
 2004ed8:	00ffdfc4 	movi	r3,-129
 2004edc:	9d84b03a 	or	r2,r19,r22
 2004ee0:	90e4703a 	and	r18,r18,r3
 2004ee4:	103c3b26 	beq	r2,zero,2003fd4 <___vfprintf_internal_r+0x384>
 2004ee8:	0039883a 	mov	fp,zero
 2004eec:	003e5806 	br	2004850 <___vfprintf_internal_r+0xc00>
 2004ef0:	9080040c 	andi	r2,r18,16
 2004ef4:	1001b326 	beq	r2,zero,20055c4 <___vfprintf_internal_r+0x1974>
 2004ef8:	d8c02e17 	ldw	r3,184(sp)
 2004efc:	d9002a17 	ldw	r4,168(sp)
 2004f00:	d8002785 	stb	zero,158(sp)
 2004f04:	18800104 	addi	r2,r3,4
 2004f08:	1cc00017 	ldw	r19,0(r3)
 2004f0c:	002d883a 	mov	r22,zero
 2004f10:	2001b516 	blt	r4,zero,20055e8 <___vfprintf_internal_r+0x1998>
 2004f14:	00ffdfc4 	movi	r3,-129
 2004f18:	d8802e15 	stw	r2,184(sp)
 2004f1c:	90e4703a 	and	r18,r18,r3
 2004f20:	983d0526 	beq	r19,zero,2004338 <___vfprintf_internal_r+0x6e8>
 2004f24:	0039883a 	mov	fp,zero
 2004f28:	003d0806 	br	200434c <___vfprintf_internal_r+0x6fc>
 2004f2c:	dc402617 	ldw	r17,152(sp)
 2004f30:	0441d30e 	bge	zero,r17,2005680 <___vfprintf_internal_r+0x1a30>
 2004f34:	dc403217 	ldw	r17,200(sp)
 2004f38:	d8803317 	ldw	r2,204(sp)
 2004f3c:	1440010e 	bge	r2,r17,2004f44 <___vfprintf_internal_r+0x12f4>
 2004f40:	1023883a 	mov	r17,r2
 2004f44:	04400a0e 	bge	zero,r17,2004f70 <___vfprintf_internal_r+0x1320>
 2004f48:	d8801f17 	ldw	r2,124(sp)
 2004f4c:	1c47883a 	add	r3,r3,r17
 2004f50:	44000015 	stw	r16,0(r8)
 2004f54:	10800044 	addi	r2,r2,1
 2004f58:	44400115 	stw	r17,4(r8)
 2004f5c:	d8c02015 	stw	r3,128(sp)
 2004f60:	d8801f15 	stw	r2,124(sp)
 2004f64:	010001c4 	movi	r4,7
 2004f68:	20826516 	blt	r4,r2,2005900 <___vfprintf_internal_r+0x1cb0>
 2004f6c:	42000204 	addi	r8,r8,8
 2004f70:	88026116 	blt	r17,zero,20058f8 <___vfprintf_internal_r+0x1ca8>
 2004f74:	d9003217 	ldw	r4,200(sp)
 2004f78:	2463c83a 	sub	r17,r4,r17
 2004f7c:	04407b0e 	bge	zero,r17,200516c <___vfprintf_internal_r+0x151c>
 2004f80:	05800404 	movi	r22,16
 2004f84:	d8801f17 	ldw	r2,124(sp)
 2004f88:	b4419d0e 	bge	r22,r17,2005600 <___vfprintf_internal_r+0x19b0>
 2004f8c:	010080b4 	movhi	r4,514
 2004f90:	21255684 	addi	r4,r4,-27302
 2004f94:	d9002c15 	stw	r4,176(sp)
 2004f98:	070001c4 	movi	fp,7
 2004f9c:	dcc02d17 	ldw	r19,180(sp)
 2004fa0:	00000306 	br	2004fb0 <___vfprintf_internal_r+0x1360>
 2004fa4:	42000204 	addi	r8,r8,8
 2004fa8:	8c7ffc04 	addi	r17,r17,-16
 2004fac:	b441970e 	bge	r22,r17,200560c <___vfprintf_internal_r+0x19bc>
 2004fb0:	18c00404 	addi	r3,r3,16
 2004fb4:	10800044 	addi	r2,r2,1
 2004fb8:	45000015 	stw	r20,0(r8)
 2004fbc:	45800115 	stw	r22,4(r8)
 2004fc0:	d8c02015 	stw	r3,128(sp)
 2004fc4:	d8801f15 	stw	r2,124(sp)
 2004fc8:	e0bff60e 	bge	fp,r2,2004fa4 <___vfprintf_internal_r+0x1354>
 2004fcc:	d9801e04 	addi	r6,sp,120
 2004fd0:	b80b883a 	mov	r5,r23
 2004fd4:	9809883a 	mov	r4,r19
 2004fd8:	200b3bc0 	call	200b3bc <__sprint_r>
 2004fdc:	103c201e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2004fe0:	d8c02017 	ldw	r3,128(sp)
 2004fe4:	d8801f17 	ldw	r2,124(sp)
 2004fe8:	da000404 	addi	r8,sp,16
 2004fec:	003fee06 	br	2004fa8 <___vfprintf_internal_r+0x1358>
 2004ff0:	d9002d17 	ldw	r4,180(sp)
 2004ff4:	d9801e04 	addi	r6,sp,120
 2004ff8:	b80b883a 	mov	r5,r23
 2004ffc:	200b3bc0 	call	200b3bc <__sprint_r>
 2005000:	103c171e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005004:	d8c02017 	ldw	r3,128(sp)
 2005008:	df002787 	ldb	fp,158(sp)
 200500c:	da000404 	addi	r8,sp,16
 2005010:	003d3406 	br	20044e4 <___vfprintf_internal_r+0x894>
 2005014:	9080040c 	andi	r2,r18,16
 2005018:	10016126 	beq	r2,zero,20055a0 <___vfprintf_internal_r+0x1950>
 200501c:	d9402e17 	ldw	r5,184(sp)
 2005020:	2cc00017 	ldw	r19,0(r5)
 2005024:	29400104 	addi	r5,r5,4
 2005028:	d9402e15 	stw	r5,184(sp)
 200502c:	982dd7fa 	srai	r22,r19,31
 2005030:	b005883a 	mov	r2,r22
 2005034:	003c5a06 	br	20041a0 <___vfprintf_internal_r+0x550>
 2005038:	9080040c 	andi	r2,r18,16
 200503c:	10003526 	beq	r2,zero,2005114 <___vfprintf_internal_r+0x14c4>
 2005040:	d8c02e17 	ldw	r3,184(sp)
 2005044:	d9002a17 	ldw	r4,168(sp)
 2005048:	d8002785 	stb	zero,158(sp)
 200504c:	18800104 	addi	r2,r3,4
 2005050:	1cc00017 	ldw	r19,0(r3)
 2005054:	002d883a 	mov	r22,zero
 2005058:	20003716 	blt	r4,zero,2005138 <___vfprintf_internal_r+0x14e8>
 200505c:	00ffdfc4 	movi	r3,-129
 2005060:	d8802e15 	stw	r2,184(sp)
 2005064:	90e4703a 	and	r18,r18,r3
 2005068:	0039883a 	mov	fp,zero
 200506c:	983dd426 	beq	r19,zero,20047c0 <___vfprintf_internal_r+0xb70>
 2005070:	00800244 	movi	r2,9
 2005074:	14fc5336 	bltu	r2,r19,20041c4 <___vfprintf_internal_r+0x574>
 2005078:	d8c02817 	ldw	r3,160(sp)
 200507c:	dc001dc4 	addi	r16,sp,119
 2005080:	9cc00c04 	addi	r19,r19,48
 2005084:	1c07c83a 	sub	r3,r3,r16
 2005088:	dcc01dc5 	stb	r19,119(sp)
 200508c:	d8c02b15 	stw	r3,172(sp)
 2005090:	003cc606 	br	20043ac <___vfprintf_internal_r+0x75c>
 2005094:	d8803317 	ldw	r2,204(sp)
 2005098:	143fffc4 	addi	r16,r2,-1
 200509c:	043f4d0e 	bge	zero,r16,2004dd4 <___vfprintf_internal_r+0x1184>
 20050a0:	07000404 	movi	fp,16
 20050a4:	e400810e 	bge	fp,r16,20052ac <___vfprintf_internal_r+0x165c>
 20050a8:	014080b4 	movhi	r5,514
 20050ac:	29655684 	addi	r5,r5,-27302
 20050b0:	d9402c15 	stw	r5,176(sp)
 20050b4:	01c001c4 	movi	r7,7
 20050b8:	dcc02d17 	ldw	r19,180(sp)
 20050bc:	00000306 	br	20050cc <___vfprintf_internal_r+0x147c>
 20050c0:	b5800204 	addi	r22,r22,8
 20050c4:	843ffc04 	addi	r16,r16,-16
 20050c8:	e4007b0e 	bge	fp,r16,20052b8 <___vfprintf_internal_r+0x1668>
 20050cc:	18c00404 	addi	r3,r3,16
 20050d0:	8c400044 	addi	r17,r17,1
 20050d4:	b5000015 	stw	r20,0(r22)
 20050d8:	b7000115 	stw	fp,4(r22)
 20050dc:	d8c02015 	stw	r3,128(sp)
 20050e0:	dc401f15 	stw	r17,124(sp)
 20050e4:	3c7ff60e 	bge	r7,r17,20050c0 <___vfprintf_internal_r+0x1470>
 20050e8:	d9801e04 	addi	r6,sp,120
 20050ec:	b80b883a 	mov	r5,r23
 20050f0:	9809883a 	mov	r4,r19
 20050f4:	d9c03c15 	stw	r7,240(sp)
 20050f8:	200b3bc0 	call	200b3bc <__sprint_r>
 20050fc:	d9c03c17 	ldw	r7,240(sp)
 2005100:	103bd71e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005104:	d8c02017 	ldw	r3,128(sp)
 2005108:	dc401f17 	ldw	r17,124(sp)
 200510c:	dd800404 	addi	r22,sp,16
 2005110:	003fec06 	br	20050c4 <___vfprintf_internal_r+0x1474>
 2005114:	9080100c 	andi	r2,r18,64
 2005118:	d8002785 	stb	zero,158(sp)
 200511c:	10010e26 	beq	r2,zero,2005558 <___vfprintf_internal_r+0x1908>
 2005120:	d9402e17 	ldw	r5,184(sp)
 2005124:	d8c02a17 	ldw	r3,168(sp)
 2005128:	002d883a 	mov	r22,zero
 200512c:	28800104 	addi	r2,r5,4
 2005130:	2cc0000b 	ldhu	r19,0(r5)
 2005134:	183fc90e 	bge	r3,zero,200505c <___vfprintf_internal_r+0x140c>
 2005138:	d8802e15 	stw	r2,184(sp)
 200513c:	0039883a 	mov	fp,zero
 2005140:	9d84b03a 	or	r2,r19,r22
 2005144:	103c1e1e 	bne	r2,zero,20041c0 <___vfprintf_internal_r+0x570>
 2005148:	00800044 	movi	r2,1
 200514c:	003e6c06 	br	2004b00 <___vfprintf_internal_r+0xeb0>
 2005150:	d9002d17 	ldw	r4,180(sp)
 2005154:	d9801e04 	addi	r6,sp,120
 2005158:	b80b883a 	mov	r5,r23
 200515c:	200b3bc0 	call	200b3bc <__sprint_r>
 2005160:	103bbf1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005164:	d8c02017 	ldw	r3,128(sp)
 2005168:	da000404 	addi	r8,sp,16
 200516c:	d9003217 	ldw	r4,200(sp)
 2005170:	d8802617 	ldw	r2,152(sp)
 2005174:	d9403317 	ldw	r5,204(sp)
 2005178:	8123883a 	add	r17,r16,r4
 200517c:	11400216 	blt	r2,r5,2005188 <___vfprintf_internal_r+0x1538>
 2005180:	9100004c 	andi	r4,r18,1
 2005184:	20000d26 	beq	r4,zero,20051bc <___vfprintf_internal_r+0x156c>
 2005188:	d9003717 	ldw	r4,220(sp)
 200518c:	d9403417 	ldw	r5,208(sp)
 2005190:	1907883a 	add	r3,r3,r4
 2005194:	d9001f17 	ldw	r4,124(sp)
 2005198:	41400015 	stw	r5,0(r8)
 200519c:	d9403717 	ldw	r5,220(sp)
 20051a0:	21000044 	addi	r4,r4,1
 20051a4:	d8c02015 	stw	r3,128(sp)
 20051a8:	41400115 	stw	r5,4(r8)
 20051ac:	d9001f15 	stw	r4,124(sp)
 20051b0:	014001c4 	movi	r5,7
 20051b4:	2901e816 	blt	r5,r4,2005958 <___vfprintf_internal_r+0x1d08>
 20051b8:	42000204 	addi	r8,r8,8
 20051bc:	d9003317 	ldw	r4,204(sp)
 20051c0:	8121883a 	add	r16,r16,r4
 20051c4:	2085c83a 	sub	r2,r4,r2
 20051c8:	8461c83a 	sub	r16,r16,r17
 20051cc:	1400010e 	bge	r2,r16,20051d4 <___vfprintf_internal_r+0x1584>
 20051d0:	1021883a 	mov	r16,r2
 20051d4:	04000a0e 	bge	zero,r16,2005200 <___vfprintf_internal_r+0x15b0>
 20051d8:	d9001f17 	ldw	r4,124(sp)
 20051dc:	1c07883a 	add	r3,r3,r16
 20051e0:	44400015 	stw	r17,0(r8)
 20051e4:	21000044 	addi	r4,r4,1
 20051e8:	44000115 	stw	r16,4(r8)
 20051ec:	d8c02015 	stw	r3,128(sp)
 20051f0:	d9001f15 	stw	r4,124(sp)
 20051f4:	014001c4 	movi	r5,7
 20051f8:	2901fb16 	blt	r5,r4,20059e8 <___vfprintf_internal_r+0x1d98>
 20051fc:	42000204 	addi	r8,r8,8
 2005200:	8001f716 	blt	r16,zero,20059e0 <___vfprintf_internal_r+0x1d90>
 2005204:	1421c83a 	sub	r16,r2,r16
 2005208:	043d160e 	bge	zero,r16,2004664 <___vfprintf_internal_r+0xa14>
 200520c:	04400404 	movi	r17,16
 2005210:	d8801f17 	ldw	r2,124(sp)
 2005214:	8c3efb0e 	bge	r17,r16,2004e04 <___vfprintf_internal_r+0x11b4>
 2005218:	014080b4 	movhi	r5,514
 200521c:	29655684 	addi	r5,r5,-27302
 2005220:	d9402c15 	stw	r5,176(sp)
 2005224:	058001c4 	movi	r22,7
 2005228:	dcc02d17 	ldw	r19,180(sp)
 200522c:	00000306 	br	200523c <___vfprintf_internal_r+0x15ec>
 2005230:	42000204 	addi	r8,r8,8
 2005234:	843ffc04 	addi	r16,r16,-16
 2005238:	8c3ef50e 	bge	r17,r16,2004e10 <___vfprintf_internal_r+0x11c0>
 200523c:	18c00404 	addi	r3,r3,16
 2005240:	10800044 	addi	r2,r2,1
 2005244:	45000015 	stw	r20,0(r8)
 2005248:	44400115 	stw	r17,4(r8)
 200524c:	d8c02015 	stw	r3,128(sp)
 2005250:	d8801f15 	stw	r2,124(sp)
 2005254:	b0bff60e 	bge	r22,r2,2005230 <___vfprintf_internal_r+0x15e0>
 2005258:	d9801e04 	addi	r6,sp,120
 200525c:	b80b883a 	mov	r5,r23
 2005260:	9809883a 	mov	r4,r19
 2005264:	200b3bc0 	call	200b3bc <__sprint_r>
 2005268:	103b7d1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 200526c:	d8c02017 	ldw	r3,128(sp)
 2005270:	d8801f17 	ldw	r2,124(sp)
 2005274:	da000404 	addi	r8,sp,16
 2005278:	003fee06 	br	2005234 <___vfprintf_internal_r+0x15e4>
 200527c:	9088703a 	and	r4,r18,r2
 2005280:	203eab1e 	bne	r4,zero,2004d30 <___vfprintf_internal_r+0x10e0>
 2005284:	dc401f17 	ldw	r17,124(sp)
 2005288:	40800115 	stw	r2,4(r8)
 200528c:	44000015 	stw	r16,0(r8)
 2005290:	8c400044 	addi	r17,r17,1
 2005294:	d8c02015 	stw	r3,128(sp)
 2005298:	dc401f15 	stw	r17,124(sp)
 200529c:	008001c4 	movi	r2,7
 20052a0:	14400e16 	blt	r2,r17,20052dc <___vfprintf_internal_r+0x168c>
 20052a4:	45800204 	addi	r22,r8,8
 20052a8:	003eca06 	br	2004dd4 <___vfprintf_internal_r+0x1184>
 20052ac:	010080b4 	movhi	r4,514
 20052b0:	21255684 	addi	r4,r4,-27302
 20052b4:	d9002c15 	stw	r4,176(sp)
 20052b8:	d8802c17 	ldw	r2,176(sp)
 20052bc:	1c07883a 	add	r3,r3,r16
 20052c0:	8c400044 	addi	r17,r17,1
 20052c4:	b0800015 	stw	r2,0(r22)
 20052c8:	b4000115 	stw	r16,4(r22)
 20052cc:	d8c02015 	stw	r3,128(sp)
 20052d0:	dc401f15 	stw	r17,124(sp)
 20052d4:	008001c4 	movi	r2,7
 20052d8:	147ebd0e 	bge	r2,r17,2004dd0 <___vfprintf_internal_r+0x1180>
 20052dc:	d9002d17 	ldw	r4,180(sp)
 20052e0:	d9801e04 	addi	r6,sp,120
 20052e4:	b80b883a 	mov	r5,r23
 20052e8:	200b3bc0 	call	200b3bc <__sprint_r>
 20052ec:	103b5c1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 20052f0:	d8c02017 	ldw	r3,128(sp)
 20052f4:	dc401f17 	ldw	r17,124(sp)
 20052f8:	dd800404 	addi	r22,sp,16
 20052fc:	003eb506 	br	2004dd4 <___vfprintf_internal_r+0x1184>
 2005300:	d9002d17 	ldw	r4,180(sp)
 2005304:	d9801e04 	addi	r6,sp,120
 2005308:	b80b883a 	mov	r5,r23
 200530c:	200b3bc0 	call	200b3bc <__sprint_r>
 2005310:	103b531e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005314:	d8c02017 	ldw	r3,128(sp)
 2005318:	dc401f17 	ldw	r17,124(sp)
 200531c:	da000404 	addi	r8,sp,16
 2005320:	003e8d06 	br	2004d58 <___vfprintf_internal_r+0x1108>
 2005324:	d9002d17 	ldw	r4,180(sp)
 2005328:	d9801e04 	addi	r6,sp,120
 200532c:	b80b883a 	mov	r5,r23
 2005330:	200b3bc0 	call	200b3bc <__sprint_r>
 2005334:	103b4a1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005338:	d8c02017 	ldw	r3,128(sp)
 200533c:	dc401f17 	ldw	r17,124(sp)
 2005340:	dd800404 	addi	r22,sp,16
 2005344:	003e8f06 	br	2004d84 <___vfprintf_internal_r+0x1134>
 2005348:	0027883a 	mov	r19,zero
 200534c:	003f4a06 	br	2005078 <___vfprintf_internal_r+0x1428>
 2005350:	d9002d17 	ldw	r4,180(sp)
 2005354:	d9801e04 	addi	r6,sp,120
 2005358:	b80b883a 	mov	r5,r23
 200535c:	200b3bc0 	call	200b3bc <__sprint_r>
 2005360:	103b3f1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005364:	d8c02017 	ldw	r3,128(sp)
 2005368:	da000404 	addi	r8,sp,16
 200536c:	003c7b06 	br	200455c <___vfprintf_internal_r+0x90c>
 2005370:	d9402a17 	ldw	r5,168(sp)
 2005374:	04e7c83a 	sub	r19,zero,r19
 2005378:	07000b44 	movi	fp,45
 200537c:	9804c03a 	cmpne	r2,r19,zero
 2005380:	05adc83a 	sub	r22,zero,r22
 2005384:	df002785 	stb	fp,158(sp)
 2005388:	b0adc83a 	sub	r22,r22,r2
 200538c:	28017b16 	blt	r5,zero,200597c <___vfprintf_internal_r+0x1d2c>
 2005390:	00bfdfc4 	movi	r2,-129
 2005394:	90a4703a 	and	r18,r18,r2
 2005398:	003b8906 	br	20041c0 <___vfprintf_internal_r+0x570>
 200539c:	d9003617 	ldw	r4,216(sp)
 20053a0:	d9403817 	ldw	r5,224(sp)
 20053a4:	da003d15 	stw	r8,244(sp)
 20053a8:	200109c0 	call	200109c <__fpclassifyd>
 20053ac:	da003d17 	ldw	r8,244(sp)
 20053b0:	1000f026 	beq	r2,zero,2005774 <___vfprintf_internal_r+0x1b24>
 20053b4:	d9002a17 	ldw	r4,168(sp)
 20053b8:	05bff7c4 	movi	r22,-33
 20053bc:	00bfffc4 	movi	r2,-1
 20053c0:	8dac703a 	and	r22,r17,r22
 20053c4:	20820026 	beq	r4,r2,2005bc8 <___vfprintf_internal_r+0x1f78>
 20053c8:	008011c4 	movi	r2,71
 20053cc:	b081f726 	beq	r22,r2,2005bac <___vfprintf_internal_r+0x1f5c>
 20053d0:	d9003817 	ldw	r4,224(sp)
 20053d4:	90c04014 	ori	r3,r18,256
 20053d8:	d8c02c15 	stw	r3,176(sp)
 20053dc:	20021516 	blt	r4,zero,2005c34 <___vfprintf_internal_r+0x1fe4>
 20053e0:	dcc03817 	ldw	r19,224(sp)
 20053e4:	d8002905 	stb	zero,164(sp)
 20053e8:	00801984 	movi	r2,102
 20053ec:	8881f926 	beq	r17,r2,2005bd4 <___vfprintf_internal_r+0x1f84>
 20053f0:	00801184 	movi	r2,70
 20053f4:	88821c26 	beq	r17,r2,2005c68 <___vfprintf_internal_r+0x2018>
 20053f8:	00801144 	movi	r2,69
 20053fc:	b081ef26 	beq	r22,r2,2005bbc <___vfprintf_internal_r+0x1f6c>
 2005400:	d8c02a17 	ldw	r3,168(sp)
 2005404:	d8802104 	addi	r2,sp,132
 2005408:	d8800315 	stw	r2,12(sp)
 200540c:	d9403617 	ldw	r5,216(sp)
 2005410:	d8802504 	addi	r2,sp,148
 2005414:	d9002d17 	ldw	r4,180(sp)
 2005418:	d8800215 	stw	r2,8(sp)
 200541c:	d8802604 	addi	r2,sp,152
 2005420:	d8c00015 	stw	r3,0(sp)
 2005424:	d8800115 	stw	r2,4(sp)
 2005428:	01c00084 	movi	r7,2
 200542c:	980d883a 	mov	r6,r19
 2005430:	d8c03c15 	stw	r3,240(sp)
 2005434:	da003d15 	stw	r8,244(sp)
 2005438:	20063800 	call	2006380 <_dtoa_r>
 200543c:	1021883a 	mov	r16,r2
 2005440:	008019c4 	movi	r2,103
 2005444:	d8c03c17 	ldw	r3,240(sp)
 2005448:	da003d17 	ldw	r8,244(sp)
 200544c:	88817126 	beq	r17,r2,2005a14 <___vfprintf_internal_r+0x1dc4>
 2005450:	008011c4 	movi	r2,71
 2005454:	88829126 	beq	r17,r2,2005e9c <___vfprintf_internal_r+0x224c>
 2005458:	80f9883a 	add	fp,r16,r3
 200545c:	d9003617 	ldw	r4,216(sp)
 2005460:	000d883a 	mov	r6,zero
 2005464:	000f883a 	mov	r7,zero
 2005468:	980b883a 	mov	r5,r19
 200546c:	da003d15 	stw	r8,244(sp)
 2005470:	200dec40 	call	200dec4 <__eqdf2>
 2005474:	da003d17 	ldw	r8,244(sp)
 2005478:	10018d26 	beq	r2,zero,2005ab0 <___vfprintf_internal_r+0x1e60>
 200547c:	d8802117 	ldw	r2,132(sp)
 2005480:	1700062e 	bgeu	r2,fp,200549c <___vfprintf_internal_r+0x184c>
 2005484:	01000c04 	movi	r4,48
 2005488:	10c00044 	addi	r3,r2,1
 200548c:	d8c02115 	stw	r3,132(sp)
 2005490:	11000005 	stb	r4,0(r2)
 2005494:	d8802117 	ldw	r2,132(sp)
 2005498:	173ffb36 	bltu	r2,fp,2005488 <___vfprintf_internal_r+0x1838>
 200549c:	1405c83a 	sub	r2,r2,r16
 20054a0:	d8803315 	stw	r2,204(sp)
 20054a4:	008011c4 	movi	r2,71
 20054a8:	b0817626 	beq	r22,r2,2005a84 <___vfprintf_internal_r+0x1e34>
 20054ac:	00801944 	movi	r2,101
 20054b0:	1442800e 	bge	r2,r17,2005eb4 <___vfprintf_internal_r+0x2264>
 20054b4:	d8c02617 	ldw	r3,152(sp)
 20054b8:	00801984 	movi	r2,102
 20054bc:	d8c03215 	stw	r3,200(sp)
 20054c0:	8881fe26 	beq	r17,r2,2005cbc <___vfprintf_internal_r+0x206c>
 20054c4:	d8c03217 	ldw	r3,200(sp)
 20054c8:	d9003317 	ldw	r4,204(sp)
 20054cc:	1901dd16 	blt	r3,r4,2005c44 <___vfprintf_internal_r+0x1ff4>
 20054d0:	9480004c 	andi	r18,r18,1
 20054d4:	90022b1e 	bne	r18,zero,2005d84 <___vfprintf_internal_r+0x2134>
 20054d8:	1805883a 	mov	r2,r3
 20054dc:	18028316 	blt	r3,zero,2005eec <___vfprintf_internal_r+0x229c>
 20054e0:	d8c03217 	ldw	r3,200(sp)
 20054e4:	044019c4 	movi	r17,103
 20054e8:	d8c02b15 	stw	r3,172(sp)
 20054ec:	df002907 	ldb	fp,164(sp)
 20054f0:	e001531e 	bne	fp,zero,2005a40 <___vfprintf_internal_r+0x1df0>
 20054f4:	df002783 	ldbu	fp,158(sp)
 20054f8:	d8802915 	stw	r2,164(sp)
 20054fc:	dc802c17 	ldw	r18,176(sp)
 2005500:	d8002a15 	stw	zero,168(sp)
 2005504:	003baf06 	br	20043c4 <___vfprintf_internal_r+0x774>
 2005508:	d8c02e17 	ldw	r3,184(sp)
 200550c:	d9002e17 	ldw	r4,184(sp)
 2005510:	d9402e17 	ldw	r5,184(sp)
 2005514:	18c00017 	ldw	r3,0(r3)
 2005518:	21000117 	ldw	r4,4(r4)
 200551c:	29400204 	addi	r5,r5,8
 2005520:	d8c03615 	stw	r3,216(sp)
 2005524:	d9003815 	stw	r4,224(sp)
 2005528:	d9402e15 	stw	r5,184(sp)
 200552c:	003b5006 	br	2004270 <___vfprintf_internal_r+0x620>
 2005530:	ac400007 	ldb	r17,0(r21)
 2005534:	003a2806 	br	2003dd8 <___vfprintf_internal_r+0x188>
 2005538:	9080100c 	andi	r2,r18,64
 200553c:	1000a826 	beq	r2,zero,20057e0 <___vfprintf_internal_r+0x1b90>
 2005540:	d8c02e17 	ldw	r3,184(sp)
 2005544:	002d883a 	mov	r22,zero
 2005548:	1cc0000b 	ldhu	r19,0(r3)
 200554c:	18c00104 	addi	r3,r3,4
 2005550:	d8c02e15 	stw	r3,184(sp)
 2005554:	003caf06 	br	2004814 <___vfprintf_internal_r+0xbc4>
 2005558:	d9002e17 	ldw	r4,184(sp)
 200555c:	d9402a17 	ldw	r5,168(sp)
 2005560:	002d883a 	mov	r22,zero
 2005564:	20800104 	addi	r2,r4,4
 2005568:	24c00017 	ldw	r19,0(r4)
 200556c:	283ebb0e 	bge	r5,zero,200505c <___vfprintf_internal_r+0x140c>
 2005570:	003ef106 	br	2005138 <___vfprintf_internal_r+0x14e8>
 2005574:	9080040c 	andi	r2,r18,16
 2005578:	1000921e 	bne	r2,zero,20057c4 <___vfprintf_internal_r+0x1b74>
 200557c:	9480100c 	andi	r18,r18,64
 2005580:	90013926 	beq	r18,zero,2005a68 <___vfprintf_internal_r+0x1e18>
 2005584:	d9402e17 	ldw	r5,184(sp)
 2005588:	d8c02f17 	ldw	r3,188(sp)
 200558c:	28800017 	ldw	r2,0(r5)
 2005590:	29400104 	addi	r5,r5,4
 2005594:	d9402e15 	stw	r5,184(sp)
 2005598:	10c0000d 	sth	r3,0(r2)
 200559c:	0039e406 	br	2003d30 <___vfprintf_internal_r+0xe0>
 20055a0:	9080100c 	andi	r2,r18,64
 20055a4:	10008026 	beq	r2,zero,20057a8 <___vfprintf_internal_r+0x1b58>
 20055a8:	d8802e17 	ldw	r2,184(sp)
 20055ac:	14c0000f 	ldh	r19,0(r2)
 20055b0:	10800104 	addi	r2,r2,4
 20055b4:	d8802e15 	stw	r2,184(sp)
 20055b8:	982dd7fa 	srai	r22,r19,31
 20055bc:	b005883a 	mov	r2,r22
 20055c0:	003af706 	br	20041a0 <___vfprintf_internal_r+0x550>
 20055c4:	9080100c 	andi	r2,r18,64
 20055c8:	d8002785 	stb	zero,158(sp)
 20055cc:	10008a1e 	bne	r2,zero,20057f8 <___vfprintf_internal_r+0x1ba8>
 20055d0:	d9002e17 	ldw	r4,184(sp)
 20055d4:	d9402a17 	ldw	r5,168(sp)
 20055d8:	002d883a 	mov	r22,zero
 20055dc:	20800104 	addi	r2,r4,4
 20055e0:	24c00017 	ldw	r19,0(r4)
 20055e4:	283e4b0e 	bge	r5,zero,2004f14 <___vfprintf_internal_r+0x12c4>
 20055e8:	9d86b03a 	or	r3,r19,r22
 20055ec:	d8802e15 	stw	r2,184(sp)
 20055f0:	183e4c1e 	bne	r3,zero,2004f24 <___vfprintf_internal_r+0x12d4>
 20055f4:	0039883a 	mov	fp,zero
 20055f8:	0005883a 	mov	r2,zero
 20055fc:	003d4006 	br	2004b00 <___vfprintf_internal_r+0xeb0>
 2005600:	014080b4 	movhi	r5,514
 2005604:	29655684 	addi	r5,r5,-27302
 2005608:	d9402c15 	stw	r5,176(sp)
 200560c:	d9402c17 	ldw	r5,176(sp)
 2005610:	1c47883a 	add	r3,r3,r17
 2005614:	10800044 	addi	r2,r2,1
 2005618:	41400015 	stw	r5,0(r8)
 200561c:	44400115 	stw	r17,4(r8)
 2005620:	d8c02015 	stw	r3,128(sp)
 2005624:	d8801f15 	stw	r2,124(sp)
 2005628:	010001c4 	movi	r4,7
 200562c:	20bec816 	blt	r4,r2,2005150 <___vfprintf_internal_r+0x1500>
 2005630:	42000204 	addi	r8,r8,8
 2005634:	003ecd06 	br	200516c <___vfprintf_internal_r+0x151c>
 2005638:	d9002a17 	ldw	r4,168(sp)
 200563c:	d8002785 	stb	zero,158(sp)
 2005640:	203d2d16 	blt	r4,zero,2004af8 <___vfprintf_internal_r+0xea8>
 2005644:	00bfdfc4 	movi	r2,-129
 2005648:	90a4703a 	and	r18,r18,r2
 200564c:	003a6106 	br	2003fd4 <___vfprintf_internal_r+0x384>
 2005650:	010080b4 	movhi	r4,514
 2005654:	21255684 	addi	r4,r4,-27302
 2005658:	d9002c15 	stw	r4,176(sp)
 200565c:	003bea06 	br	2004608 <___vfprintf_internal_r+0x9b8>
 2005660:	d9002d17 	ldw	r4,180(sp)
 2005664:	d9801e04 	addi	r6,sp,120
 2005668:	b80b883a 	mov	r5,r23
 200566c:	200b3bc0 	call	200b3bc <__sprint_r>
 2005670:	103a7b1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005674:	d8c02017 	ldw	r3,128(sp)
 2005678:	da000404 	addi	r8,sp,16
 200567c:	003d4106 	br	2004b84 <___vfprintf_internal_r+0xf34>
 2005680:	d8801f17 	ldw	r2,124(sp)
 2005684:	014080b4 	movhi	r5,514
 2005688:	01000044 	movi	r4,1
 200568c:	18c00044 	addi	r3,r3,1
 2005690:	10800044 	addi	r2,r2,1
 2005694:	29655604 	addi	r5,r5,-27304
 2005698:	41000115 	stw	r4,4(r8)
 200569c:	41400015 	stw	r5,0(r8)
 20056a0:	d8c02015 	stw	r3,128(sp)
 20056a4:	d8801f15 	stw	r2,124(sp)
 20056a8:	010001c4 	movi	r4,7
 20056ac:	20805c16 	blt	r4,r2,2005820 <___vfprintf_internal_r+0x1bd0>
 20056b0:	42000204 	addi	r8,r8,8
 20056b4:	8800041e 	bne	r17,zero,20056c8 <___vfprintf_internal_r+0x1a78>
 20056b8:	d8803317 	ldw	r2,204(sp)
 20056bc:	1000021e 	bne	r2,zero,20056c8 <___vfprintf_internal_r+0x1a78>
 20056c0:	9080004c 	andi	r2,r18,1
 20056c4:	103be726 	beq	r2,zero,2004664 <___vfprintf_internal_r+0xa14>
 20056c8:	d9003717 	ldw	r4,220(sp)
 20056cc:	d8801f17 	ldw	r2,124(sp)
 20056d0:	d9403417 	ldw	r5,208(sp)
 20056d4:	20c7883a 	add	r3,r4,r3
 20056d8:	10800044 	addi	r2,r2,1
 20056dc:	41000115 	stw	r4,4(r8)
 20056e0:	41400015 	stw	r5,0(r8)
 20056e4:	d8c02015 	stw	r3,128(sp)
 20056e8:	d8801f15 	stw	r2,124(sp)
 20056ec:	010001c4 	movi	r4,7
 20056f0:	20812116 	blt	r4,r2,2005b78 <___vfprintf_internal_r+0x1f28>
 20056f4:	42000204 	addi	r8,r8,8
 20056f8:	0463c83a 	sub	r17,zero,r17
 20056fc:	0440730e 	bge	zero,r17,20058cc <___vfprintf_internal_r+0x1c7c>
 2005700:	05800404 	movi	r22,16
 2005704:	b440860e 	bge	r22,r17,2005920 <___vfprintf_internal_r+0x1cd0>
 2005708:	014080b4 	movhi	r5,514
 200570c:	29655684 	addi	r5,r5,-27302
 2005710:	d9402c15 	stw	r5,176(sp)
 2005714:	070001c4 	movi	fp,7
 2005718:	dcc02d17 	ldw	r19,180(sp)
 200571c:	00000306 	br	200572c <___vfprintf_internal_r+0x1adc>
 2005720:	42000204 	addi	r8,r8,8
 2005724:	8c7ffc04 	addi	r17,r17,-16
 2005728:	b440800e 	bge	r22,r17,200592c <___vfprintf_internal_r+0x1cdc>
 200572c:	18c00404 	addi	r3,r3,16
 2005730:	10800044 	addi	r2,r2,1
 2005734:	45000015 	stw	r20,0(r8)
 2005738:	45800115 	stw	r22,4(r8)
 200573c:	d8c02015 	stw	r3,128(sp)
 2005740:	d8801f15 	stw	r2,124(sp)
 2005744:	e0bff60e 	bge	fp,r2,2005720 <___vfprintf_internal_r+0x1ad0>
 2005748:	d9801e04 	addi	r6,sp,120
 200574c:	b80b883a 	mov	r5,r23
 2005750:	9809883a 	mov	r4,r19
 2005754:	200b3bc0 	call	200b3bc <__sprint_r>
 2005758:	103a411e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 200575c:	d8c02017 	ldw	r3,128(sp)
 2005760:	d8801f17 	ldw	r2,124(sp)
 2005764:	da000404 	addi	r8,sp,16
 2005768:	003fee06 	br	2005724 <___vfprintf_internal_r+0x1ad4>
 200576c:	00bfffc4 	movi	r2,-1
 2005770:	003a3f06 	br	2004070 <___vfprintf_internal_r+0x420>
 2005774:	008011c4 	movi	r2,71
 2005778:	1440b816 	blt	r2,r17,2005a5c <___vfprintf_internal_r+0x1e0c>
 200577c:	040080b4 	movhi	r16,514
 2005780:	84254804 	addi	r16,r16,-27360
 2005784:	00c000c4 	movi	r3,3
 2005788:	00bfdfc4 	movi	r2,-129
 200578c:	d8c02915 	stw	r3,164(sp)
 2005790:	90a4703a 	and	r18,r18,r2
 2005794:	df002783 	ldbu	fp,158(sp)
 2005798:	d8c02b15 	stw	r3,172(sp)
 200579c:	d8002a15 	stw	zero,168(sp)
 20057a0:	d8003215 	stw	zero,200(sp)
 20057a4:	003b0706 	br	20043c4 <___vfprintf_internal_r+0x774>
 20057a8:	d8c02e17 	ldw	r3,184(sp)
 20057ac:	1cc00017 	ldw	r19,0(r3)
 20057b0:	18c00104 	addi	r3,r3,4
 20057b4:	d8c02e15 	stw	r3,184(sp)
 20057b8:	982dd7fa 	srai	r22,r19,31
 20057bc:	b005883a 	mov	r2,r22
 20057c0:	003a7706 	br	20041a0 <___vfprintf_internal_r+0x550>
 20057c4:	d8c02e17 	ldw	r3,184(sp)
 20057c8:	d9002f17 	ldw	r4,188(sp)
 20057cc:	18800017 	ldw	r2,0(r3)
 20057d0:	18c00104 	addi	r3,r3,4
 20057d4:	d8c02e15 	stw	r3,184(sp)
 20057d8:	11000015 	stw	r4,0(r2)
 20057dc:	00395406 	br	2003d30 <___vfprintf_internal_r+0xe0>
 20057e0:	d9002e17 	ldw	r4,184(sp)
 20057e4:	002d883a 	mov	r22,zero
 20057e8:	24c00017 	ldw	r19,0(r4)
 20057ec:	21000104 	addi	r4,r4,4
 20057f0:	d9002e15 	stw	r4,184(sp)
 20057f4:	003c0706 	br	2004814 <___vfprintf_internal_r+0xbc4>
 20057f8:	d9402e17 	ldw	r5,184(sp)
 20057fc:	d8c02a17 	ldw	r3,168(sp)
 2005800:	002d883a 	mov	r22,zero
 2005804:	28800104 	addi	r2,r5,4
 2005808:	2cc0000b 	ldhu	r19,0(r5)
 200580c:	183dc10e 	bge	r3,zero,2004f14 <___vfprintf_internal_r+0x12c4>
 2005810:	003f7506 	br	20055e8 <___vfprintf_internal_r+0x1998>
 2005814:	040080b4 	movhi	r16,514
 2005818:	84254604 	addi	r16,r16,-27368
 200581c:	003aa706 	br	20042bc <___vfprintf_internal_r+0x66c>
 2005820:	d9002d17 	ldw	r4,180(sp)
 2005824:	d9801e04 	addi	r6,sp,120
 2005828:	b80b883a 	mov	r5,r23
 200582c:	200b3bc0 	call	200b3bc <__sprint_r>
 2005830:	103a0b1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005834:	dc402617 	ldw	r17,152(sp)
 2005838:	d8c02017 	ldw	r3,128(sp)
 200583c:	da000404 	addi	r8,sp,16
 2005840:	003f9c06 	br	20056b4 <___vfprintf_internal_r+0x1a64>
 2005844:	ac400043 	ldbu	r17,1(r21)
 2005848:	84000814 	ori	r16,r16,32
 200584c:	ad400044 	addi	r21,r21,1
 2005850:	8c403fcc 	andi	r17,r17,255
 2005854:	8c40201c 	xori	r17,r17,128
 2005858:	8c7fe004 	addi	r17,r17,-128
 200585c:	00395e06 	br	2003dd8 <___vfprintf_internal_r+0x188>
 2005860:	d8c02e15 	stw	r3,184(sp)
 2005864:	0039883a 	mov	fp,zero
 2005868:	003e3506 	br	2005140 <___vfprintf_internal_r+0x14f0>
 200586c:	d9002d17 	ldw	r4,180(sp)
 2005870:	d9801e04 	addi	r6,sp,120
 2005874:	b80b883a 	mov	r5,r23
 2005878:	200b3bc0 	call	200b3bc <__sprint_r>
 200587c:	1039f81e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005880:	d8c02017 	ldw	r3,128(sp)
 2005884:	da000404 	addi	r8,sp,16
 2005888:	003cd006 	br	2004bcc <___vfprintf_internal_r+0xf7c>
 200588c:	8009883a 	mov	r4,r16
 2005890:	df003d15 	stw	fp,244(sp)
 2005894:	2003bb80 	call	2003bb8 <strlen>
 2005898:	d8802b15 	stw	r2,172(sp)
 200589c:	da003d17 	ldw	r8,244(sp)
 20058a0:	103c200e 	bge	r2,zero,2004924 <___vfprintf_internal_r+0xcd4>
 20058a4:	0005883a 	mov	r2,zero
 20058a8:	003c1e06 	br	2004924 <___vfprintf_internal_r+0xcd4>
 20058ac:	d9002d17 	ldw	r4,180(sp)
 20058b0:	d9801e04 	addi	r6,sp,120
 20058b4:	b80b883a 	mov	r5,r23
 20058b8:	200b3bc0 	call	200b3bc <__sprint_r>
 20058bc:	1039e81e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 20058c0:	d8c02017 	ldw	r3,128(sp)
 20058c4:	d8801f17 	ldw	r2,124(sp)
 20058c8:	da000404 	addi	r8,sp,16
 20058cc:	d9403317 	ldw	r5,204(sp)
 20058d0:	10800044 	addi	r2,r2,1
 20058d4:	44000015 	stw	r16,0(r8)
 20058d8:	28c7883a 	add	r3,r5,r3
 20058dc:	003b5b06 	br	200464c <___vfprintf_internal_r+0x9fc>
 20058e0:	010080b4 	movhi	r4,514
 20058e4:	21255a84 	addi	r4,r4,-27286
 20058e8:	d9003515 	stw	r4,212(sp)
 20058ec:	003af206 	br	20044b8 <___vfprintf_internal_r+0x868>
 20058f0:	013fffc4 	movi	r4,-1
 20058f4:	003a0806 	br	2004118 <___vfprintf_internal_r+0x4c8>
 20058f8:	0023883a 	mov	r17,zero
 20058fc:	003d9d06 	br	2004f74 <___vfprintf_internal_r+0x1324>
 2005900:	d9002d17 	ldw	r4,180(sp)
 2005904:	d9801e04 	addi	r6,sp,120
 2005908:	b80b883a 	mov	r5,r23
 200590c:	200b3bc0 	call	200b3bc <__sprint_r>
 2005910:	1039d31e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005914:	d8c02017 	ldw	r3,128(sp)
 2005918:	da000404 	addi	r8,sp,16
 200591c:	003d9406 	br	2004f70 <___vfprintf_internal_r+0x1320>
 2005920:	010080b4 	movhi	r4,514
 2005924:	21255684 	addi	r4,r4,-27302
 2005928:	d9002c15 	stw	r4,176(sp)
 200592c:	d9002c17 	ldw	r4,176(sp)
 2005930:	1c47883a 	add	r3,r3,r17
 2005934:	10800044 	addi	r2,r2,1
 2005938:	41000015 	stw	r4,0(r8)
 200593c:	44400115 	stw	r17,4(r8)
 2005940:	d8c02015 	stw	r3,128(sp)
 2005944:	d8801f15 	stw	r2,124(sp)
 2005948:	010001c4 	movi	r4,7
 200594c:	20bfd716 	blt	r4,r2,20058ac <___vfprintf_internal_r+0x1c5c>
 2005950:	42000204 	addi	r8,r8,8
 2005954:	003fdd06 	br	20058cc <___vfprintf_internal_r+0x1c7c>
 2005958:	d9002d17 	ldw	r4,180(sp)
 200595c:	d9801e04 	addi	r6,sp,120
 2005960:	b80b883a 	mov	r5,r23
 2005964:	200b3bc0 	call	200b3bc <__sprint_r>
 2005968:	1039bd1e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 200596c:	d8802617 	ldw	r2,152(sp)
 2005970:	d8c02017 	ldw	r3,128(sp)
 2005974:	da000404 	addi	r8,sp,16
 2005978:	003e1006 	br	20051bc <___vfprintf_internal_r+0x156c>
 200597c:	00800044 	movi	r2,1
 2005980:	10803fcc 	andi	r2,r2,255
 2005984:	00c00044 	movi	r3,1
 2005988:	10fa0d26 	beq	r2,r3,20041c0 <___vfprintf_internal_r+0x570>
 200598c:	00c00084 	movi	r3,2
 2005990:	10fbaf26 	beq	r2,r3,2004850 <___vfprintf_internal_r+0xc00>
 2005994:	003a6d06 	br	200434c <___vfprintf_internal_r+0x6fc>
 2005998:	010080b4 	movhi	r4,514
 200599c:	21255a84 	addi	r4,r4,-27286
 20059a0:	d9003515 	stw	r4,212(sp)
 20059a4:	003b5406 	br	20046f8 <___vfprintf_internal_r+0xaa8>
 20059a8:	d8802a17 	ldw	r2,168(sp)
 20059ac:	00c00184 	movi	r3,6
 20059b0:	1880012e 	bgeu	r3,r2,20059b8 <___vfprintf_internal_r+0x1d68>
 20059b4:	1805883a 	mov	r2,r3
 20059b8:	d8802b15 	stw	r2,172(sp)
 20059bc:	1000ef16 	blt	r2,zero,2005d7c <___vfprintf_internal_r+0x212c>
 20059c0:	040080b4 	movhi	r16,514
 20059c4:	d8802915 	stw	r2,164(sp)
 20059c8:	dcc02e15 	stw	r19,184(sp)
 20059cc:	d8002a15 	stw	zero,168(sp)
 20059d0:	d8003215 	stw	zero,200(sp)
 20059d4:	84255404 	addi	r16,r16,-27312
 20059d8:	0039883a 	mov	fp,zero
 20059dc:	003a8006 	br	20043e0 <___vfprintf_internal_r+0x790>
 20059e0:	0021883a 	mov	r16,zero
 20059e4:	003e0706 	br	2005204 <___vfprintf_internal_r+0x15b4>
 20059e8:	d9002d17 	ldw	r4,180(sp)
 20059ec:	d9801e04 	addi	r6,sp,120
 20059f0:	b80b883a 	mov	r5,r23
 20059f4:	200b3bc0 	call	200b3bc <__sprint_r>
 20059f8:	1039991e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 20059fc:	d8802617 	ldw	r2,152(sp)
 2005a00:	d9403317 	ldw	r5,204(sp)
 2005a04:	d8c02017 	ldw	r3,128(sp)
 2005a08:	da000404 	addi	r8,sp,16
 2005a0c:	2885c83a 	sub	r2,r5,r2
 2005a10:	003dfb06 	br	2005200 <___vfprintf_internal_r+0x15b0>
 2005a14:	9080004c 	andi	r2,r18,1
 2005a18:	103e8f1e 	bne	r2,zero,2005458 <___vfprintf_internal_r+0x1808>
 2005a1c:	d8802117 	ldw	r2,132(sp)
 2005a20:	003e9e06 	br	200549c <___vfprintf_internal_r+0x184c>
 2005a24:	1025883a 	mov	r18,r2
 2005a28:	0039883a 	mov	fp,zero
 2005a2c:	00800084 	movi	r2,2
 2005a30:	003fd306 	br	2005980 <___vfprintf_internal_r+0x1d30>
 2005a34:	07000b44 	movi	fp,45
 2005a38:	df002785 	stb	fp,158(sp)
 2005a3c:	003a1b06 	br	20042ac <___vfprintf_internal_r+0x65c>
 2005a40:	00c00b44 	movi	r3,45
 2005a44:	d8c02785 	stb	r3,158(sp)
 2005a48:	d8802915 	stw	r2,164(sp)
 2005a4c:	dc802c17 	ldw	r18,176(sp)
 2005a50:	d8002a15 	stw	zero,168(sp)
 2005a54:	07000b44 	movi	fp,45
 2005a58:	003a5e06 	br	20043d4 <___vfprintf_internal_r+0x784>
 2005a5c:	040080b4 	movhi	r16,514
 2005a60:	84254904 	addi	r16,r16,-27356
 2005a64:	003f4706 	br	2005784 <___vfprintf_internal_r+0x1b34>
 2005a68:	d9002e17 	ldw	r4,184(sp)
 2005a6c:	d9402f17 	ldw	r5,188(sp)
 2005a70:	20800017 	ldw	r2,0(r4)
 2005a74:	21000104 	addi	r4,r4,4
 2005a78:	d9002e15 	stw	r4,184(sp)
 2005a7c:	11400015 	stw	r5,0(r2)
 2005a80:	0038ab06 	br	2003d30 <___vfprintf_internal_r+0xe0>
 2005a84:	dd802617 	ldw	r22,152(sp)
 2005a88:	00bfff44 	movi	r2,-3
 2005a8c:	b0801c16 	blt	r22,r2,2005b00 <___vfprintf_internal_r+0x1eb0>
 2005a90:	d9402a17 	ldw	r5,168(sp)
 2005a94:	2d801a16 	blt	r5,r22,2005b00 <___vfprintf_internal_r+0x1eb0>
 2005a98:	dd803215 	stw	r22,200(sp)
 2005a9c:	003e8906 	br	20054c4 <___vfprintf_internal_r+0x1874>
 2005aa0:	010080b4 	movhi	r4,514
 2005aa4:	21255684 	addi	r4,r4,-27302
 2005aa8:	d9002c15 	stw	r4,176(sp)
 2005aac:	003c9106 	br	2004cf4 <___vfprintf_internal_r+0x10a4>
 2005ab0:	e005883a 	mov	r2,fp
 2005ab4:	003e7906 	br	200549c <___vfprintf_internal_r+0x184c>
 2005ab8:	d9002a17 	ldw	r4,168(sp)
 2005abc:	df002783 	ldbu	fp,158(sp)
 2005ac0:	dcc02e15 	stw	r19,184(sp)
 2005ac4:	d9002915 	stw	r4,164(sp)
 2005ac8:	d9002b15 	stw	r4,172(sp)
 2005acc:	d8002a15 	stw	zero,168(sp)
 2005ad0:	d8003215 	stw	zero,200(sp)
 2005ad4:	003a3b06 	br	20043c4 <___vfprintf_internal_r+0x774>
 2005ad8:	9080004c 	andi	r2,r18,1
 2005adc:	0039883a 	mov	fp,zero
 2005ae0:	10000426 	beq	r2,zero,2005af4 <___vfprintf_internal_r+0x1ea4>
 2005ae4:	00800c04 	movi	r2,48
 2005ae8:	dc001dc4 	addi	r16,sp,119
 2005aec:	d8801dc5 	stb	r2,119(sp)
 2005af0:	003b6406 	br	2004884 <___vfprintf_internal_r+0xc34>
 2005af4:	d8002b15 	stw	zero,172(sp)
 2005af8:	dc001e04 	addi	r16,sp,120
 2005afc:	003a2b06 	br	20043ac <___vfprintf_internal_r+0x75c>
 2005b00:	8c7fff84 	addi	r17,r17,-2
 2005b04:	b5bfffc4 	addi	r22,r22,-1
 2005b08:	dd802615 	stw	r22,152(sp)
 2005b0c:	dc4022c5 	stb	r17,139(sp)
 2005b10:	b000bf16 	blt	r22,zero,2005e10 <___vfprintf_internal_r+0x21c0>
 2005b14:	00800ac4 	movi	r2,43
 2005b18:	d8802305 	stb	r2,140(sp)
 2005b1c:	00800244 	movi	r2,9
 2005b20:	15807016 	blt	r2,r22,2005ce4 <___vfprintf_internal_r+0x2094>
 2005b24:	00800c04 	movi	r2,48
 2005b28:	b5800c04 	addi	r22,r22,48
 2005b2c:	d8802345 	stb	r2,141(sp)
 2005b30:	dd802385 	stb	r22,142(sp)
 2005b34:	d88023c4 	addi	r2,sp,143
 2005b38:	df0022c4 	addi	fp,sp,139
 2005b3c:	d8c03317 	ldw	r3,204(sp)
 2005b40:	1739c83a 	sub	fp,r2,fp
 2005b44:	d9003317 	ldw	r4,204(sp)
 2005b48:	e0c7883a 	add	r3,fp,r3
 2005b4c:	df003a15 	stw	fp,232(sp)
 2005b50:	d8c02b15 	stw	r3,172(sp)
 2005b54:	00800044 	movi	r2,1
 2005b58:	1100b30e 	bge	r2,r4,2005e28 <___vfprintf_internal_r+0x21d8>
 2005b5c:	d8c02b17 	ldw	r3,172(sp)
 2005b60:	18c00044 	addi	r3,r3,1
 2005b64:	d8c02b15 	stw	r3,172(sp)
 2005b68:	1805883a 	mov	r2,r3
 2005b6c:	1800ac16 	blt	r3,zero,2005e20 <___vfprintf_internal_r+0x21d0>
 2005b70:	d8003215 	stw	zero,200(sp)
 2005b74:	003e5d06 	br	20054ec <___vfprintf_internal_r+0x189c>
 2005b78:	d9002d17 	ldw	r4,180(sp)
 2005b7c:	d9801e04 	addi	r6,sp,120
 2005b80:	b80b883a 	mov	r5,r23
 2005b84:	200b3bc0 	call	200b3bc <__sprint_r>
 2005b88:	1039351e 	bne	r2,zero,2004060 <___vfprintf_internal_r+0x410>
 2005b8c:	dc402617 	ldw	r17,152(sp)
 2005b90:	d8c02017 	ldw	r3,128(sp)
 2005b94:	d8801f17 	ldw	r2,124(sp)
 2005b98:	da000404 	addi	r8,sp,16
 2005b9c:	003ed606 	br	20056f8 <___vfprintf_internal_r+0x1aa8>
 2005ba0:	182b883a 	mov	r21,r3
 2005ba4:	d8002a15 	stw	zero,168(sp)
 2005ba8:	00388c06 	br	2003ddc <___vfprintf_internal_r+0x18c>
 2005bac:	d8802a17 	ldw	r2,168(sp)
 2005bb0:	103e071e 	bne	r2,zero,20053d0 <___vfprintf_internal_r+0x1780>
 2005bb4:	dc002a15 	stw	r16,168(sp)
 2005bb8:	003e0506 	br	20053d0 <___vfprintf_internal_r+0x1780>
 2005bbc:	d9002a17 	ldw	r4,168(sp)
 2005bc0:	20c00044 	addi	r3,r4,1
 2005bc4:	003e0f06 	br	2005404 <___vfprintf_internal_r+0x17b4>
 2005bc8:	01400184 	movi	r5,6
 2005bcc:	d9402a15 	stw	r5,168(sp)
 2005bd0:	003dff06 	br	20053d0 <___vfprintf_internal_r+0x1780>
 2005bd4:	d8802104 	addi	r2,sp,132
 2005bd8:	d8800315 	stw	r2,12(sp)
 2005bdc:	d8802504 	addi	r2,sp,148
 2005be0:	d8800215 	stw	r2,8(sp)
 2005be4:	d8802604 	addi	r2,sp,152
 2005be8:	d8800115 	stw	r2,4(sp)
 2005bec:	d8802a17 	ldw	r2,168(sp)
 2005bf0:	d9403617 	ldw	r5,216(sp)
 2005bf4:	d9002d17 	ldw	r4,180(sp)
 2005bf8:	d8800015 	stw	r2,0(sp)
 2005bfc:	01c000c4 	movi	r7,3
 2005c00:	980d883a 	mov	r6,r19
 2005c04:	da003d15 	stw	r8,244(sp)
 2005c08:	20063800 	call	2006380 <_dtoa_r>
 2005c0c:	d8c02a17 	ldw	r3,168(sp)
 2005c10:	da003d17 	ldw	r8,244(sp)
 2005c14:	1021883a 	mov	r16,r2
 2005c18:	10f9883a 	add	fp,r2,r3
 2005c1c:	81000007 	ldb	r4,0(r16)
 2005c20:	00800c04 	movi	r2,48
 2005c24:	20805e26 	beq	r4,r2,2005da0 <___vfprintf_internal_r+0x2150>
 2005c28:	d8c02617 	ldw	r3,152(sp)
 2005c2c:	e0f9883a 	add	fp,fp,r3
 2005c30:	003e0a06 	br	200545c <___vfprintf_internal_r+0x180c>
 2005c34:	00c00b44 	movi	r3,45
 2005c38:	24e0003c 	xorhi	r19,r4,32768
 2005c3c:	d8c02905 	stb	r3,164(sp)
 2005c40:	003de906 	br	20053e8 <___vfprintf_internal_r+0x1798>
 2005c44:	d8c03217 	ldw	r3,200(sp)
 2005c48:	00c07a0e 	bge	zero,r3,2005e34 <___vfprintf_internal_r+0x21e4>
 2005c4c:	00800044 	movi	r2,1
 2005c50:	d9003317 	ldw	r4,204(sp)
 2005c54:	1105883a 	add	r2,r2,r4
 2005c58:	d8802b15 	stw	r2,172(sp)
 2005c5c:	10004e16 	blt	r2,zero,2005d98 <___vfprintf_internal_r+0x2148>
 2005c60:	044019c4 	movi	r17,103
 2005c64:	003e2106 	br	20054ec <___vfprintf_internal_r+0x189c>
 2005c68:	d9002a17 	ldw	r4,168(sp)
 2005c6c:	d8802104 	addi	r2,sp,132
 2005c70:	d8800315 	stw	r2,12(sp)
 2005c74:	d9000015 	stw	r4,0(sp)
 2005c78:	d8802504 	addi	r2,sp,148
 2005c7c:	d9403617 	ldw	r5,216(sp)
 2005c80:	d9002d17 	ldw	r4,180(sp)
 2005c84:	d8800215 	stw	r2,8(sp)
 2005c88:	d8802604 	addi	r2,sp,152
 2005c8c:	d8800115 	stw	r2,4(sp)
 2005c90:	01c000c4 	movi	r7,3
 2005c94:	980d883a 	mov	r6,r19
 2005c98:	da003d15 	stw	r8,244(sp)
 2005c9c:	20063800 	call	2006380 <_dtoa_r>
 2005ca0:	d8c02a17 	ldw	r3,168(sp)
 2005ca4:	da003d17 	ldw	r8,244(sp)
 2005ca8:	1021883a 	mov	r16,r2
 2005cac:	00801184 	movi	r2,70
 2005cb0:	80f9883a 	add	fp,r16,r3
 2005cb4:	88bfd926 	beq	r17,r2,2005c1c <___vfprintf_internal_r+0x1fcc>
 2005cb8:	003de806 	br	200545c <___vfprintf_internal_r+0x180c>
 2005cbc:	d9002a17 	ldw	r4,168(sp)
 2005cc0:	00c04d0e 	bge	zero,r3,2005df8 <___vfprintf_internal_r+0x21a8>
 2005cc4:	2000441e 	bne	r4,zero,2005dd8 <___vfprintf_internal_r+0x2188>
 2005cc8:	9480004c 	andi	r18,r18,1
 2005ccc:	9000421e 	bne	r18,zero,2005dd8 <___vfprintf_internal_r+0x2188>
 2005cd0:	1805883a 	mov	r2,r3
 2005cd4:	18006f16 	blt	r3,zero,2005e94 <___vfprintf_internal_r+0x2244>
 2005cd8:	d8c03217 	ldw	r3,200(sp)
 2005cdc:	d8c02b15 	stw	r3,172(sp)
 2005ce0:	003e0206 	br	20054ec <___vfprintf_internal_r+0x189c>
 2005ce4:	df0022c4 	addi	fp,sp,139
 2005ce8:	dc002a15 	stw	r16,168(sp)
 2005cec:	4027883a 	mov	r19,r8
 2005cf0:	e021883a 	mov	r16,fp
 2005cf4:	b009883a 	mov	r4,r22
 2005cf8:	01400284 	movi	r5,10
 2005cfc:	20039380 	call	2003938 <__modsi3>
 2005d00:	10800c04 	addi	r2,r2,48
 2005d04:	843fffc4 	addi	r16,r16,-1
 2005d08:	b009883a 	mov	r4,r22
 2005d0c:	01400284 	movi	r5,10
 2005d10:	80800005 	stb	r2,0(r16)
 2005d14:	20038b40 	call	20038b4 <__divsi3>
 2005d18:	102d883a 	mov	r22,r2
 2005d1c:	00800244 	movi	r2,9
 2005d20:	15bff416 	blt	r2,r22,2005cf4 <___vfprintf_internal_r+0x20a4>
 2005d24:	9811883a 	mov	r8,r19
 2005d28:	b0800c04 	addi	r2,r22,48
 2005d2c:	8027883a 	mov	r19,r16
 2005d30:	997fffc4 	addi	r5,r19,-1
 2005d34:	98bfffc5 	stb	r2,-1(r19)
 2005d38:	dc002a17 	ldw	r16,168(sp)
 2005d3c:	2f006d2e 	bgeu	r5,fp,2005ef4 <___vfprintf_internal_r+0x22a4>
 2005d40:	d9c02384 	addi	r7,sp,142
 2005d44:	3ccfc83a 	sub	r7,r7,r19
 2005d48:	d9002344 	addi	r4,sp,141
 2005d4c:	e1cf883a 	add	r7,fp,r7
 2005d50:	00000106 	br	2005d58 <___vfprintf_internal_r+0x2108>
 2005d54:	28800003 	ldbu	r2,0(r5)
 2005d58:	20800005 	stb	r2,0(r4)
 2005d5c:	21000044 	addi	r4,r4,1
 2005d60:	29400044 	addi	r5,r5,1
 2005d64:	393ffb1e 	bne	r7,r4,2005d54 <___vfprintf_internal_r+0x2104>
 2005d68:	d8802304 	addi	r2,sp,140
 2005d6c:	14c5c83a 	sub	r2,r2,r19
 2005d70:	d8c02344 	addi	r3,sp,141
 2005d74:	1885883a 	add	r2,r3,r2
 2005d78:	003f7006 	br	2005b3c <___vfprintf_internal_r+0x1eec>
 2005d7c:	0005883a 	mov	r2,zero
 2005d80:	003f0f06 	br	20059c0 <___vfprintf_internal_r+0x1d70>
 2005d84:	d8c03217 	ldw	r3,200(sp)
 2005d88:	18c00044 	addi	r3,r3,1
 2005d8c:	d8c02b15 	stw	r3,172(sp)
 2005d90:	1805883a 	mov	r2,r3
 2005d94:	183fb20e 	bge	r3,zero,2005c60 <___vfprintf_internal_r+0x2010>
 2005d98:	0005883a 	mov	r2,zero
 2005d9c:	003fb006 	br	2005c60 <___vfprintf_internal_r+0x2010>
 2005da0:	d9003617 	ldw	r4,216(sp)
 2005da4:	000d883a 	mov	r6,zero
 2005da8:	000f883a 	mov	r7,zero
 2005dac:	980b883a 	mov	r5,r19
 2005db0:	d8c03c15 	stw	r3,240(sp)
 2005db4:	da003d15 	stw	r8,244(sp)
 2005db8:	200dec40 	call	200dec4 <__eqdf2>
 2005dbc:	d8c03c17 	ldw	r3,240(sp)
 2005dc0:	da003d17 	ldw	r8,244(sp)
 2005dc4:	103f9826 	beq	r2,zero,2005c28 <___vfprintf_internal_r+0x1fd8>
 2005dc8:	00800044 	movi	r2,1
 2005dcc:	10c7c83a 	sub	r3,r2,r3
 2005dd0:	d8c02615 	stw	r3,152(sp)
 2005dd4:	003f9506 	br	2005c2c <___vfprintf_internal_r+0x1fdc>
 2005dd8:	d9002a17 	ldw	r4,168(sp)
 2005ddc:	d8c03217 	ldw	r3,200(sp)
 2005de0:	20800044 	addi	r2,r4,1
 2005de4:	1885883a 	add	r2,r3,r2
 2005de8:	d8802b15 	stw	r2,172(sp)
 2005dec:	103dbf0e 	bge	r2,zero,20054ec <___vfprintf_internal_r+0x189c>
 2005df0:	0005883a 	mov	r2,zero
 2005df4:	003dbd06 	br	20054ec <___vfprintf_internal_r+0x189c>
 2005df8:	2000201e 	bne	r4,zero,2005e7c <___vfprintf_internal_r+0x222c>
 2005dfc:	9480004c 	andi	r18,r18,1
 2005e00:	90001e1e 	bne	r18,zero,2005e7c <___vfprintf_internal_r+0x222c>
 2005e04:	00800044 	movi	r2,1
 2005e08:	d8802b15 	stw	r2,172(sp)
 2005e0c:	003db706 	br	20054ec <___vfprintf_internal_r+0x189c>
 2005e10:	00800b44 	movi	r2,45
 2005e14:	05adc83a 	sub	r22,zero,r22
 2005e18:	d8802305 	stb	r2,140(sp)
 2005e1c:	003f3f06 	br	2005b1c <___vfprintf_internal_r+0x1ecc>
 2005e20:	0005883a 	mov	r2,zero
 2005e24:	003f5206 	br	2005b70 <___vfprintf_internal_r+0x1f20>
 2005e28:	90a4703a 	and	r18,r18,r2
 2005e2c:	903f4e26 	beq	r18,zero,2005b68 <___vfprintf_internal_r+0x1f18>
 2005e30:	003f4a06 	br	2005b5c <___vfprintf_internal_r+0x1f0c>
 2005e34:	00800084 	movi	r2,2
 2005e38:	10c5c83a 	sub	r2,r2,r3
 2005e3c:	003f8406 	br	2005c50 <___vfprintf_internal_r+0x2000>
 2005e40:	d9402e17 	ldw	r5,184(sp)
 2005e44:	d9002e17 	ldw	r4,184(sp)
 2005e48:	ac400043 	ldbu	r17,1(r21)
 2005e4c:	29400017 	ldw	r5,0(r5)
 2005e50:	20800104 	addi	r2,r4,4
 2005e54:	d8802e15 	stw	r2,184(sp)
 2005e58:	d9402a15 	stw	r5,168(sp)
 2005e5c:	182b883a 	mov	r21,r3
 2005e60:	283e7b0e 	bge	r5,zero,2005850 <___vfprintf_internal_r+0x1c00>
 2005e64:	8c403fcc 	andi	r17,r17,255
 2005e68:	017fffc4 	movi	r5,-1
 2005e6c:	8c40201c 	xori	r17,r17,128
 2005e70:	d9402a15 	stw	r5,168(sp)
 2005e74:	8c7fe004 	addi	r17,r17,-128
 2005e78:	0037d706 	br	2003dd8 <___vfprintf_internal_r+0x188>
 2005e7c:	d8c02a17 	ldw	r3,168(sp)
 2005e80:	18c00084 	addi	r3,r3,2
 2005e84:	d8c02b15 	stw	r3,172(sp)
 2005e88:	1805883a 	mov	r2,r3
 2005e8c:	183d970e 	bge	r3,zero,20054ec <___vfprintf_internal_r+0x189c>
 2005e90:	003fd706 	br	2005df0 <___vfprintf_internal_r+0x21a0>
 2005e94:	0005883a 	mov	r2,zero
 2005e98:	003f8f06 	br	2005cd8 <___vfprintf_internal_r+0x2088>
 2005e9c:	9080004c 	andi	r2,r18,1
 2005ea0:	103f821e 	bne	r2,zero,2005cac <___vfprintf_internal_r+0x205c>
 2005ea4:	d8802117 	ldw	r2,132(sp)
 2005ea8:	1405c83a 	sub	r2,r2,r16
 2005eac:	d8803315 	stw	r2,204(sp)
 2005eb0:	b47ef426 	beq	r22,r17,2005a84 <___vfprintf_internal_r+0x1e34>
 2005eb4:	dd802617 	ldw	r22,152(sp)
 2005eb8:	003f1206 	br	2005b04 <___vfprintf_internal_r+0x1eb4>
 2005ebc:	d8c02b03 	ldbu	r3,172(sp)
 2005ec0:	d8c02785 	stb	r3,158(sp)
 2005ec4:	0038df06 	br	2004244 <___vfprintf_internal_r+0x5f4>
 2005ec8:	d8c02b03 	ldbu	r3,172(sp)
 2005ecc:	d8c02785 	stb	r3,158(sp)
 2005ed0:	0038aa06 	br	200417c <___vfprintf_internal_r+0x52c>
 2005ed4:	d8c02b03 	ldbu	r3,172(sp)
 2005ed8:	d8c02785 	stb	r3,158(sp)
 2005edc:	003a4306 	br	20047ec <___vfprintf_internal_r+0xb9c>
 2005ee0:	d8c02b03 	ldbu	r3,172(sp)
 2005ee4:	d8c02785 	stb	r3,158(sp)
 2005ee8:	003af506 	br	2004ac0 <___vfprintf_internal_r+0xe70>
 2005eec:	0005883a 	mov	r2,zero
 2005ef0:	003d7b06 	br	20054e0 <___vfprintf_internal_r+0x1890>
 2005ef4:	d8802344 	addi	r2,sp,141
 2005ef8:	003f1006 	br	2005b3c <___vfprintf_internal_r+0x1eec>
 2005efc:	d8c02b03 	ldbu	r3,172(sp)
 2005f00:	d8c02785 	stb	r3,158(sp)
 2005f04:	0038fd06 	br	20042fc <___vfprintf_internal_r+0x6ac>
 2005f08:	d8c02b03 	ldbu	r3,172(sp)
 2005f0c:	d8c02785 	stb	r3,158(sp)
 2005f10:	003a9706 	br	2004970 <___vfprintf_internal_r+0xd20>
 2005f14:	d8c02b03 	ldbu	r3,172(sp)
 2005f18:	d8c02785 	stb	r3,158(sp)
 2005f1c:	003a1806 	br	2004780 <___vfprintf_internal_r+0xb30>
 2005f20:	d8c02b03 	ldbu	r3,172(sp)
 2005f24:	d8c02785 	stb	r3,158(sp)
 2005f28:	003abe06 	br	2004a24 <___vfprintf_internal_r+0xdd4>

02005f2c <__vfprintf_internal>:
 2005f2c:	008080b4 	movhi	r2,514
 2005f30:	10acbb04 	addi	r2,r2,-19732
 2005f34:	300f883a 	mov	r7,r6
 2005f38:	280d883a 	mov	r6,r5
 2005f3c:	200b883a 	mov	r5,r4
 2005f40:	11000017 	ldw	r4,0(r2)
 2005f44:	2003c501 	jmpi	2003c50 <___vfprintf_internal_r>

02005f48 <__sbprintf>:
 2005f48:	2880030b 	ldhu	r2,12(r5)
 2005f4c:	2ac01917 	ldw	r11,100(r5)
 2005f50:	2a80038b 	ldhu	r10,14(r5)
 2005f54:	2a400717 	ldw	r9,28(r5)
 2005f58:	2a000917 	ldw	r8,36(r5)
 2005f5c:	defee204 	addi	sp,sp,-1144
 2005f60:	00c10004 	movi	r3,1024
 2005f64:	dc011a15 	stw	r16,1128(sp)
 2005f68:	10bfff4c 	andi	r2,r2,65533
 2005f6c:	2821883a 	mov	r16,r5
 2005f70:	d8cb883a 	add	r5,sp,r3
 2005f74:	dc811c15 	stw	r18,1136(sp)
 2005f78:	dc411b15 	stw	r17,1132(sp)
 2005f7c:	dfc11d15 	stw	ra,1140(sp)
 2005f80:	2025883a 	mov	r18,r4
 2005f84:	d881030d 	sth	r2,1036(sp)
 2005f88:	dac11915 	stw	r11,1124(sp)
 2005f8c:	da81038d 	sth	r10,1038(sp)
 2005f90:	da410715 	stw	r9,1052(sp)
 2005f94:	da010915 	stw	r8,1060(sp)
 2005f98:	dec10015 	stw	sp,1024(sp)
 2005f9c:	dec10415 	stw	sp,1040(sp)
 2005fa0:	d8c10215 	stw	r3,1032(sp)
 2005fa4:	d8c10515 	stw	r3,1044(sp)
 2005fa8:	d8010615 	stw	zero,1048(sp)
 2005fac:	2003c500 	call	2003c50 <___vfprintf_internal_r>
 2005fb0:	1023883a 	mov	r17,r2
 2005fb4:	10000416 	blt	r2,zero,2005fc8 <__sbprintf+0x80>
 2005fb8:	d9410004 	addi	r5,sp,1024
 2005fbc:	9009883a 	mov	r4,r18
 2005fc0:	2007c240 	call	2007c24 <_fflush_r>
 2005fc4:	10000d1e 	bne	r2,zero,2005ffc <__sbprintf+0xb4>
 2005fc8:	d881030b 	ldhu	r2,1036(sp)
 2005fcc:	1080100c 	andi	r2,r2,64
 2005fd0:	10000326 	beq	r2,zero,2005fe0 <__sbprintf+0x98>
 2005fd4:	8080030b 	ldhu	r2,12(r16)
 2005fd8:	10801014 	ori	r2,r2,64
 2005fdc:	8080030d 	sth	r2,12(r16)
 2005fe0:	8805883a 	mov	r2,r17
 2005fe4:	dfc11d17 	ldw	ra,1140(sp)
 2005fe8:	dc811c17 	ldw	r18,1136(sp)
 2005fec:	dc411b17 	ldw	r17,1132(sp)
 2005ff0:	dc011a17 	ldw	r16,1128(sp)
 2005ff4:	dec11e04 	addi	sp,sp,1144
 2005ff8:	f800283a 	ret
 2005ffc:	047fffc4 	movi	r17,-1
 2006000:	003ff106 	br	2005fc8 <__sbprintf+0x80>

02006004 <__swsetup_r>:
 2006004:	008080b4 	movhi	r2,514
 2006008:	defffd04 	addi	sp,sp,-12
 200600c:	10acbb04 	addi	r2,r2,-19732
 2006010:	dc400115 	stw	r17,4(sp)
 2006014:	2023883a 	mov	r17,r4
 2006018:	11000017 	ldw	r4,0(r2)
 200601c:	dc000015 	stw	r16,0(sp)
 2006020:	dfc00215 	stw	ra,8(sp)
 2006024:	2821883a 	mov	r16,r5
 2006028:	20000226 	beq	r4,zero,2006034 <__swsetup_r+0x30>
 200602c:	20800e17 	ldw	r2,56(r4)
 2006030:	10003126 	beq	r2,zero,20060f8 <__swsetup_r+0xf4>
 2006034:	8080030b 	ldhu	r2,12(r16)
 2006038:	10c0020c 	andi	r3,r2,8
 200603c:	1009883a 	mov	r4,r2
 2006040:	18000f26 	beq	r3,zero,2006080 <__swsetup_r+0x7c>
 2006044:	80c00417 	ldw	r3,16(r16)
 2006048:	18001526 	beq	r3,zero,20060a0 <__swsetup_r+0x9c>
 200604c:	1100004c 	andi	r4,r2,1
 2006050:	20001c1e 	bne	r4,zero,20060c4 <__swsetup_r+0xc0>
 2006054:	1080008c 	andi	r2,r2,2
 2006058:	1000291e 	bne	r2,zero,2006100 <__swsetup_r+0xfc>
 200605c:	80800517 	ldw	r2,20(r16)
 2006060:	80800215 	stw	r2,8(r16)
 2006064:	18001c26 	beq	r3,zero,20060d8 <__swsetup_r+0xd4>
 2006068:	0005883a 	mov	r2,zero
 200606c:	dfc00217 	ldw	ra,8(sp)
 2006070:	dc400117 	ldw	r17,4(sp)
 2006074:	dc000017 	ldw	r16,0(sp)
 2006078:	dec00304 	addi	sp,sp,12
 200607c:	f800283a 	ret
 2006080:	2080040c 	andi	r2,r4,16
 2006084:	10002e26 	beq	r2,zero,2006140 <__swsetup_r+0x13c>
 2006088:	2080010c 	andi	r2,r4,4
 200608c:	10001e1e 	bne	r2,zero,2006108 <__swsetup_r+0x104>
 2006090:	80c00417 	ldw	r3,16(r16)
 2006094:	20800214 	ori	r2,r4,8
 2006098:	8080030d 	sth	r2,12(r16)
 200609c:	183feb1e 	bne	r3,zero,200604c <__swsetup_r+0x48>
 20060a0:	1100a00c 	andi	r4,r2,640
 20060a4:	01408004 	movi	r5,512
 20060a8:	217fe826 	beq	r4,r5,200604c <__swsetup_r+0x48>
 20060ac:	800b883a 	mov	r5,r16
 20060b0:	8809883a 	mov	r4,r17
 20060b4:	2008bc00 	call	2008bc0 <__smakebuf_r>
 20060b8:	8080030b 	ldhu	r2,12(r16)
 20060bc:	80c00417 	ldw	r3,16(r16)
 20060c0:	003fe206 	br	200604c <__swsetup_r+0x48>
 20060c4:	80800517 	ldw	r2,20(r16)
 20060c8:	80000215 	stw	zero,8(r16)
 20060cc:	0085c83a 	sub	r2,zero,r2
 20060d0:	80800615 	stw	r2,24(r16)
 20060d4:	183fe41e 	bne	r3,zero,2006068 <__swsetup_r+0x64>
 20060d8:	80c0030b 	ldhu	r3,12(r16)
 20060dc:	0005883a 	mov	r2,zero
 20060e0:	1900200c 	andi	r4,r3,128
 20060e4:	203fe126 	beq	r4,zero,200606c <__swsetup_r+0x68>
 20060e8:	18c01014 	ori	r3,r3,64
 20060ec:	80c0030d 	sth	r3,12(r16)
 20060f0:	00bfffc4 	movi	r2,-1
 20060f4:	003fdd06 	br	200606c <__swsetup_r+0x68>
 20060f8:	20080100 	call	2008010 <__sinit>
 20060fc:	003fcd06 	br	2006034 <__swsetup_r+0x30>
 2006100:	0005883a 	mov	r2,zero
 2006104:	003fd606 	br	2006060 <__swsetup_r+0x5c>
 2006108:	81400c17 	ldw	r5,48(r16)
 200610c:	28000626 	beq	r5,zero,2006128 <__swsetup_r+0x124>
 2006110:	80801004 	addi	r2,r16,64
 2006114:	28800326 	beq	r5,r2,2006124 <__swsetup_r+0x120>
 2006118:	8809883a 	mov	r4,r17
 200611c:	20081840 	call	2008184 <_free_r>
 2006120:	8100030b 	ldhu	r4,12(r16)
 2006124:	80000c15 	stw	zero,48(r16)
 2006128:	80c00417 	ldw	r3,16(r16)
 200612c:	00bff6c4 	movi	r2,-37
 2006130:	1108703a 	and	r4,r2,r4
 2006134:	80000115 	stw	zero,4(r16)
 2006138:	80c00015 	stw	r3,0(r16)
 200613c:	003fd506 	br	2006094 <__swsetup_r+0x90>
 2006140:	00800244 	movi	r2,9
 2006144:	88800015 	stw	r2,0(r17)
 2006148:	20801014 	ori	r2,r4,64
 200614c:	8080030d 	sth	r2,12(r16)
 2006150:	00bfffc4 	movi	r2,-1
 2006154:	003fc506 	br	200606c <__swsetup_r+0x68>

02006158 <quorem>:
 2006158:	defff204 	addi	sp,sp,-56
 200615c:	ddc00b15 	stw	r23,44(sp)
 2006160:	20800417 	ldw	r2,16(r4)
 2006164:	2dc00417 	ldw	r23,16(r5)
 2006168:	dfc00d15 	stw	ra,52(sp)
 200616c:	df000c15 	stw	fp,48(sp)
 2006170:	dd800a15 	stw	r22,40(sp)
 2006174:	dd400915 	stw	r21,36(sp)
 2006178:	dd000815 	stw	r20,32(sp)
 200617c:	dcc00715 	stw	r19,28(sp)
 2006180:	dc800615 	stw	r18,24(sp)
 2006184:	dc400515 	stw	r17,20(sp)
 2006188:	dc000415 	stw	r16,16(sp)
 200618c:	15c07a16 	blt	r2,r23,2006378 <quorem+0x220>
 2006190:	bdffffc4 	addi	r23,r23,-1
 2006194:	bde9883a 	add	r20,r23,r23
 2006198:	28c00504 	addi	r3,r5,20
 200619c:	a529883a 	add	r20,r20,r20
 20061a0:	1d39883a 	add	fp,r3,r20
 20061a4:	24c00504 	addi	r19,r4,20
 20061a8:	d9400215 	stw	r5,8(sp)
 20061ac:	9d29883a 	add	r20,r19,r20
 20061b0:	e1400017 	ldw	r5,0(fp)
 20061b4:	d9000015 	stw	r4,0(sp)
 20061b8:	a1000017 	ldw	r4,0(r20)
 20061bc:	29400044 	addi	r5,r5,1
 20061c0:	d8c00115 	stw	r3,4(sp)
 20061c4:	dd000315 	stw	r20,12(sp)
 20061c8:	20039ac0 	call	20039ac <__udivsi3>
 20061cc:	1025883a 	mov	r18,r2
 20061d0:	10003026 	beq	r2,zero,2006294 <quorem+0x13c>
 20061d4:	dc400117 	ldw	r17,4(sp)
 20061d8:	9829883a 	mov	r20,r19
 20061dc:	002d883a 	mov	r22,zero
 20061e0:	0021883a 	mov	r16,zero
 20061e4:	8d400017 	ldw	r21,0(r17)
 20061e8:	900b883a 	mov	r5,r18
 20061ec:	8c400104 	addi	r17,r17,4
 20061f0:	a93fffcc 	andi	r4,r21,65535
 20061f4:	20011180 	call	2001118 <__mulsi3>
 20061f8:	a808d43a 	srli	r4,r21,16
 20061fc:	900b883a 	mov	r5,r18
 2006200:	15ad883a 	add	r22,r2,r22
 2006204:	20011180 	call	2001118 <__mulsi3>
 2006208:	a1000017 	ldw	r4,0(r20)
 200620c:	b00cd43a 	srli	r6,r22,16
 2006210:	b0ffffcc 	andi	r3,r22,65535
 2006214:	217fffcc 	andi	r5,r4,65535
 2006218:	2c21883a 	add	r16,r5,r16
 200621c:	80c7c83a 	sub	r3,r16,r3
 2006220:	2008d43a 	srli	r4,r4,16
 2006224:	1185883a 	add	r2,r2,r6
 2006228:	1821d43a 	srai	r16,r3,16
 200622c:	117fffcc 	andi	r5,r2,65535
 2006230:	2149c83a 	sub	r4,r4,r5
 2006234:	2421883a 	add	r16,r4,r16
 2006238:	8008943a 	slli	r4,r16,16
 200623c:	18ffffcc 	andi	r3,r3,65535
 2006240:	102cd43a 	srli	r22,r2,16
 2006244:	20c8b03a 	or	r4,r4,r3
 2006248:	a1000015 	stw	r4,0(r20)
 200624c:	8021d43a 	srai	r16,r16,16
 2006250:	a5000104 	addi	r20,r20,4
 2006254:	e47fe32e 	bgeu	fp,r17,20061e4 <quorem+0x8c>
 2006258:	d8c00317 	ldw	r3,12(sp)
 200625c:	18800017 	ldw	r2,0(r3)
 2006260:	10000c1e 	bne	r2,zero,2006294 <quorem+0x13c>
 2006264:	18bfff04 	addi	r2,r3,-4
 2006268:	9880082e 	bgeu	r19,r2,200628c <quorem+0x134>
 200626c:	18ffff17 	ldw	r3,-4(r3)
 2006270:	18000326 	beq	r3,zero,2006280 <quorem+0x128>
 2006274:	00000506 	br	200628c <quorem+0x134>
 2006278:	10c00017 	ldw	r3,0(r2)
 200627c:	1800031e 	bne	r3,zero,200628c <quorem+0x134>
 2006280:	10bfff04 	addi	r2,r2,-4
 2006284:	bdffffc4 	addi	r23,r23,-1
 2006288:	98bffb36 	bltu	r19,r2,2006278 <quorem+0x120>
 200628c:	d8c00017 	ldw	r3,0(sp)
 2006290:	1dc00415 	stw	r23,16(r3)
 2006294:	d9400217 	ldw	r5,8(sp)
 2006298:	d9000017 	ldw	r4,0(sp)
 200629c:	200a3bc0 	call	200a3bc <__mcmp>
 20062a0:	10002816 	blt	r2,zero,2006344 <quorem+0x1ec>
 20062a4:	dc400117 	ldw	r17,4(sp)
 20062a8:	94800044 	addi	r18,r18,1
 20062ac:	980d883a 	mov	r6,r19
 20062b0:	0007883a 	mov	r3,zero
 20062b4:	31000017 	ldw	r4,0(r6)
 20062b8:	89400017 	ldw	r5,0(r17)
 20062bc:	31800104 	addi	r6,r6,4
 20062c0:	20bfffcc 	andi	r2,r4,65535
 20062c4:	10c7883a 	add	r3,r2,r3
 20062c8:	28bfffcc 	andi	r2,r5,65535
 20062cc:	1885c83a 	sub	r2,r3,r2
 20062d0:	280ad43a 	srli	r5,r5,16
 20062d4:	2008d43a 	srli	r4,r4,16
 20062d8:	1007d43a 	srai	r3,r2,16
 20062dc:	10bfffcc 	andi	r2,r2,65535
 20062e0:	2149c83a 	sub	r4,r4,r5
 20062e4:	20c9883a 	add	r4,r4,r3
 20062e8:	200a943a 	slli	r5,r4,16
 20062ec:	8c400104 	addi	r17,r17,4
 20062f0:	2007d43a 	srai	r3,r4,16
 20062f4:	2884b03a 	or	r2,r5,r2
 20062f8:	30bfff15 	stw	r2,-4(r6)
 20062fc:	e47fed2e 	bgeu	fp,r17,20062b4 <quorem+0x15c>
 2006300:	bdc5883a 	add	r2,r23,r23
 2006304:	1085883a 	add	r2,r2,r2
 2006308:	9887883a 	add	r3,r19,r2
 200630c:	18800017 	ldw	r2,0(r3)
 2006310:	10000c1e 	bne	r2,zero,2006344 <quorem+0x1ec>
 2006314:	18bfff04 	addi	r2,r3,-4
 2006318:	9880082e 	bgeu	r19,r2,200633c <quorem+0x1e4>
 200631c:	18ffff17 	ldw	r3,-4(r3)
 2006320:	18000326 	beq	r3,zero,2006330 <quorem+0x1d8>
 2006324:	00000506 	br	200633c <quorem+0x1e4>
 2006328:	10c00017 	ldw	r3,0(r2)
 200632c:	1800031e 	bne	r3,zero,200633c <quorem+0x1e4>
 2006330:	10bfff04 	addi	r2,r2,-4
 2006334:	bdffffc4 	addi	r23,r23,-1
 2006338:	98bffb36 	bltu	r19,r2,2006328 <quorem+0x1d0>
 200633c:	d8c00017 	ldw	r3,0(sp)
 2006340:	1dc00415 	stw	r23,16(r3)
 2006344:	9005883a 	mov	r2,r18
 2006348:	dfc00d17 	ldw	ra,52(sp)
 200634c:	df000c17 	ldw	fp,48(sp)
 2006350:	ddc00b17 	ldw	r23,44(sp)
 2006354:	dd800a17 	ldw	r22,40(sp)
 2006358:	dd400917 	ldw	r21,36(sp)
 200635c:	dd000817 	ldw	r20,32(sp)
 2006360:	dcc00717 	ldw	r19,28(sp)
 2006364:	dc800617 	ldw	r18,24(sp)
 2006368:	dc400517 	ldw	r17,20(sp)
 200636c:	dc000417 	ldw	r16,16(sp)
 2006370:	dec00e04 	addi	sp,sp,56
 2006374:	f800283a 	ret
 2006378:	0005883a 	mov	r2,zero
 200637c:	003ff206 	br	2006348 <quorem+0x1f0>

02006380 <_dtoa_r>:
 2006380:	20801017 	ldw	r2,64(r4)
 2006384:	deffde04 	addi	sp,sp,-136
 2006388:	df002015 	stw	fp,128(sp)
 200638c:	dcc01b15 	stw	r19,108(sp)
 2006390:	dc801a15 	stw	r18,104(sp)
 2006394:	dc401915 	stw	r17,100(sp)
 2006398:	dc001815 	stw	r16,96(sp)
 200639c:	dfc02115 	stw	ra,132(sp)
 20063a0:	ddc01f15 	stw	r23,124(sp)
 20063a4:	dd801e15 	stw	r22,120(sp)
 20063a8:	dd401d15 	stw	r21,116(sp)
 20063ac:	dd001c15 	stw	r20,112(sp)
 20063b0:	d9c00315 	stw	r7,12(sp)
 20063b4:	2039883a 	mov	fp,r4
 20063b8:	3023883a 	mov	r17,r6
 20063bc:	2825883a 	mov	r18,r5
 20063c0:	dc002417 	ldw	r16,144(sp)
 20063c4:	3027883a 	mov	r19,r6
 20063c8:	10000826 	beq	r2,zero,20063ec <_dtoa_r+0x6c>
 20063cc:	21801117 	ldw	r6,68(r4)
 20063d0:	00c00044 	movi	r3,1
 20063d4:	100b883a 	mov	r5,r2
 20063d8:	1986983a 	sll	r3,r3,r6
 20063dc:	11800115 	stw	r6,4(r2)
 20063e0:	10c00215 	stw	r3,8(r2)
 20063e4:	2009ae00 	call	2009ae0 <_Bfree>
 20063e8:	e0001015 	stw	zero,64(fp)
 20063ec:	88002e16 	blt	r17,zero,20064a8 <_dtoa_r+0x128>
 20063f0:	80000015 	stw	zero,0(r16)
 20063f4:	889ffc2c 	andhi	r2,r17,32752
 20063f8:	00dffc34 	movhi	r3,32752
 20063fc:	10c01c26 	beq	r2,r3,2006470 <_dtoa_r+0xf0>
 2006400:	000d883a 	mov	r6,zero
 2006404:	000f883a 	mov	r7,zero
 2006408:	9009883a 	mov	r4,r18
 200640c:	980b883a 	mov	r5,r19
 2006410:	200dec40 	call	200dec4 <__eqdf2>
 2006414:	10002b1e 	bne	r2,zero,20064c4 <_dtoa_r+0x144>
 2006418:	d9c02317 	ldw	r7,140(sp)
 200641c:	00800044 	movi	r2,1
 2006420:	38800015 	stw	r2,0(r7)
 2006424:	d8802517 	ldw	r2,148(sp)
 2006428:	10019e26 	beq	r2,zero,2006aa4 <_dtoa_r+0x724>
 200642c:	d8c02517 	ldw	r3,148(sp)
 2006430:	008080b4 	movhi	r2,514
 2006434:	10a55644 	addi	r2,r2,-27303
 2006438:	18800015 	stw	r2,0(r3)
 200643c:	10bfffc4 	addi	r2,r2,-1
 2006440:	dfc02117 	ldw	ra,132(sp)
 2006444:	df002017 	ldw	fp,128(sp)
 2006448:	ddc01f17 	ldw	r23,124(sp)
 200644c:	dd801e17 	ldw	r22,120(sp)
 2006450:	dd401d17 	ldw	r21,116(sp)
 2006454:	dd001c17 	ldw	r20,112(sp)
 2006458:	dcc01b17 	ldw	r19,108(sp)
 200645c:	dc801a17 	ldw	r18,104(sp)
 2006460:	dc401917 	ldw	r17,100(sp)
 2006464:	dc001817 	ldw	r16,96(sp)
 2006468:	dec02204 	addi	sp,sp,136
 200646c:	f800283a 	ret
 2006470:	d8c02317 	ldw	r3,140(sp)
 2006474:	0089c3c4 	movi	r2,9999
 2006478:	18800015 	stw	r2,0(r3)
 200647c:	90017726 	beq	r18,zero,2006a5c <_dtoa_r+0x6dc>
 2006480:	008080b4 	movhi	r2,514
 2006484:	10a56204 	addi	r2,r2,-27256
 2006488:	d9002517 	ldw	r4,148(sp)
 200648c:	203fec26 	beq	r4,zero,2006440 <_dtoa_r+0xc0>
 2006490:	10c000c7 	ldb	r3,3(r2)
 2006494:	1801781e 	bne	r3,zero,2006a78 <_dtoa_r+0x6f8>
 2006498:	10c000c4 	addi	r3,r2,3
 200649c:	d9802517 	ldw	r6,148(sp)
 20064a0:	30c00015 	stw	r3,0(r6)
 20064a4:	003fe606 	br	2006440 <_dtoa_r+0xc0>
 20064a8:	04e00034 	movhi	r19,32768
 20064ac:	9cffffc4 	addi	r19,r19,-1
 20064b0:	00800044 	movi	r2,1
 20064b4:	8ce6703a 	and	r19,r17,r19
 20064b8:	80800015 	stw	r2,0(r16)
 20064bc:	9823883a 	mov	r17,r19
 20064c0:	003fcc06 	br	20063f4 <_dtoa_r+0x74>
 20064c4:	d8800204 	addi	r2,sp,8
 20064c8:	d8800015 	stw	r2,0(sp)
 20064cc:	d9c00104 	addi	r7,sp,4
 20064d0:	900b883a 	mov	r5,r18
 20064d4:	980d883a 	mov	r6,r19
 20064d8:	e009883a 	mov	r4,fp
 20064dc:	8820d53a 	srli	r16,r17,20
 20064e0:	200a7880 	call	200a788 <__d2b>
 20064e4:	d8800915 	stw	r2,36(sp)
 20064e8:	8001651e 	bne	r16,zero,2006a80 <_dtoa_r+0x700>
 20064ec:	dd800217 	ldw	r22,8(sp)
 20064f0:	dc000117 	ldw	r16,4(sp)
 20064f4:	00800804 	movi	r2,32
 20064f8:	b421883a 	add	r16,r22,r16
 20064fc:	80c10c84 	addi	r3,r16,1074
 2006500:	10c2d10e 	bge	r2,r3,2007048 <_dtoa_r+0xcc8>
 2006504:	00801004 	movi	r2,64
 2006508:	81010484 	addi	r4,r16,1042
 200650c:	10c7c83a 	sub	r3,r2,r3
 2006510:	9108d83a 	srl	r4,r18,r4
 2006514:	88e2983a 	sll	r17,r17,r3
 2006518:	2448b03a 	or	r4,r4,r17
 200651c:	200df4c0 	call	200df4c <__floatunsidf>
 2006520:	017f8434 	movhi	r5,65040
 2006524:	01800044 	movi	r6,1
 2006528:	1009883a 	mov	r4,r2
 200652c:	194b883a 	add	r5,r3,r5
 2006530:	843fffc4 	addi	r16,r16,-1
 2006534:	d9801115 	stw	r6,68(sp)
 2006538:	000d883a 	mov	r6,zero
 200653c:	01cffe34 	movhi	r7,16376
 2006540:	2002df80 	call	2002df8 <__subdf3>
 2006544:	0198dbf4 	movhi	r6,25455
 2006548:	01cff4f4 	movhi	r7,16339
 200654c:	3190d844 	addi	r6,r6,17249
 2006550:	39e1e9c4 	addi	r7,r7,-30809
 2006554:	1009883a 	mov	r4,r2
 2006558:	180b883a 	mov	r5,r3
 200655c:	200258c0 	call	200258c <__muldf3>
 2006560:	01a2d874 	movhi	r6,35681
 2006564:	01cff1f4 	movhi	r7,16327
 2006568:	31b22cc4 	addi	r6,r6,-14157
 200656c:	39e28a04 	addi	r7,r7,-30168
 2006570:	180b883a 	mov	r5,r3
 2006574:	1009883a 	mov	r4,r2
 2006578:	20011400 	call	2001140 <__adddf3>
 200657c:	8009883a 	mov	r4,r16
 2006580:	1029883a 	mov	r20,r2
 2006584:	1823883a 	mov	r17,r3
 2006588:	20037740 	call	2003774 <__floatsidf>
 200658c:	019427f4 	movhi	r6,20639
 2006590:	01cff4f4 	movhi	r7,16339
 2006594:	319e7ec4 	addi	r6,r6,31227
 2006598:	39d104c4 	addi	r7,r7,17427
 200659c:	1009883a 	mov	r4,r2
 20065a0:	180b883a 	mov	r5,r3
 20065a4:	200258c0 	call	200258c <__muldf3>
 20065a8:	100d883a 	mov	r6,r2
 20065ac:	180f883a 	mov	r7,r3
 20065b0:	a009883a 	mov	r4,r20
 20065b4:	880b883a 	mov	r5,r17
 20065b8:	20011400 	call	2001140 <__adddf3>
 20065bc:	1009883a 	mov	r4,r2
 20065c0:	180b883a 	mov	r5,r3
 20065c4:	1029883a 	mov	r20,r2
 20065c8:	1823883a 	mov	r17,r3
 20065cc:	20036f40 	call	20036f4 <__fixdfsi>
 20065d0:	000d883a 	mov	r6,zero
 20065d4:	000f883a 	mov	r7,zero
 20065d8:	a009883a 	mov	r4,r20
 20065dc:	880b883a 	mov	r5,r17
 20065e0:	d8800515 	stw	r2,20(sp)
 20065e4:	20024980 	call	2002498 <__ledf2>
 20065e8:	10028716 	blt	r2,zero,2007008 <_dtoa_r+0xc88>
 20065ec:	d8c00517 	ldw	r3,20(sp)
 20065f0:	00800584 	movi	r2,22
 20065f4:	10c27536 	bltu	r2,r3,2006fcc <_dtoa_r+0xc4c>
 20065f8:	180490fa 	slli	r2,r3,3
 20065fc:	00c080b4 	movhi	r3,514
 2006600:	18e57d04 	addi	r3,r3,-27148
 2006604:	1885883a 	add	r2,r3,r2
 2006608:	11000017 	ldw	r4,0(r2)
 200660c:	11400117 	ldw	r5,4(r2)
 2006610:	900d883a 	mov	r6,r18
 2006614:	980f883a 	mov	r7,r19
 2006618:	20023bc0 	call	20023bc <__gedf2>
 200661c:	00828d0e 	bge	zero,r2,2007054 <_dtoa_r+0xcd4>
 2006620:	d9000517 	ldw	r4,20(sp)
 2006624:	d8000e15 	stw	zero,56(sp)
 2006628:	213fffc4 	addi	r4,r4,-1
 200662c:	d9000515 	stw	r4,20(sp)
 2006630:	b42dc83a 	sub	r22,r22,r16
 2006634:	b5bfffc4 	addi	r22,r22,-1
 2006638:	b0026f16 	blt	r22,zero,2006ff8 <_dtoa_r+0xc78>
 200663c:	d8000815 	stw	zero,32(sp)
 2006640:	d9c00517 	ldw	r7,20(sp)
 2006644:	38026416 	blt	r7,zero,2006fd8 <_dtoa_r+0xc58>
 2006648:	b1ed883a 	add	r22,r22,r7
 200664c:	d9c00d15 	stw	r7,52(sp)
 2006650:	d8000a15 	stw	zero,40(sp)
 2006654:	d9800317 	ldw	r6,12(sp)
 2006658:	00800244 	movi	r2,9
 200665c:	11811436 	bltu	r2,r6,2006ab0 <_dtoa_r+0x730>
 2006660:	00800144 	movi	r2,5
 2006664:	1184e10e 	bge	r2,r6,20079ec <_dtoa_r+0x166c>
 2006668:	31bfff04 	addi	r6,r6,-4
 200666c:	d9800315 	stw	r6,12(sp)
 2006670:	0023883a 	mov	r17,zero
 2006674:	d9800317 	ldw	r6,12(sp)
 2006678:	008000c4 	movi	r2,3
 200667c:	30836726 	beq	r6,r2,200741c <_dtoa_r+0x109c>
 2006680:	1183410e 	bge	r2,r6,2007388 <_dtoa_r+0x1008>
 2006684:	d9c00317 	ldw	r7,12(sp)
 2006688:	00800104 	movi	r2,4
 200668c:	38827c26 	beq	r7,r2,2007080 <_dtoa_r+0xd00>
 2006690:	00800144 	movi	r2,5
 2006694:	3884c41e 	bne	r7,r2,20079a8 <_dtoa_r+0x1628>
 2006698:	00800044 	movi	r2,1
 200669c:	d8800b15 	stw	r2,44(sp)
 20066a0:	d8c00517 	ldw	r3,20(sp)
 20066a4:	d9002217 	ldw	r4,136(sp)
 20066a8:	1907883a 	add	r3,r3,r4
 20066ac:	19800044 	addi	r6,r3,1
 20066b0:	d8c00c15 	stw	r3,48(sp)
 20066b4:	d9800615 	stw	r6,24(sp)
 20066b8:	0183a40e 	bge	zero,r6,200754c <_dtoa_r+0x11cc>
 20066bc:	d9800617 	ldw	r6,24(sp)
 20066c0:	3021883a 	mov	r16,r6
 20066c4:	e0001115 	stw	zero,68(fp)
 20066c8:	008005c4 	movi	r2,23
 20066cc:	1184c92e 	bgeu	r2,r6,20079f4 <_dtoa_r+0x1674>
 20066d0:	00c00044 	movi	r3,1
 20066d4:	00800104 	movi	r2,4
 20066d8:	1085883a 	add	r2,r2,r2
 20066dc:	11000504 	addi	r4,r2,20
 20066e0:	180b883a 	mov	r5,r3
 20066e4:	18c00044 	addi	r3,r3,1
 20066e8:	313ffb2e 	bgeu	r6,r4,20066d8 <_dtoa_r+0x358>
 20066ec:	e1401115 	stw	r5,68(fp)
 20066f0:	e009883a 	mov	r4,fp
 20066f4:	2009a380 	call	2009a38 <_Balloc>
 20066f8:	d8800715 	stw	r2,28(sp)
 20066fc:	e0801015 	stw	r2,64(fp)
 2006700:	00800384 	movi	r2,14
 2006704:	1400f736 	bltu	r2,r16,2006ae4 <_dtoa_r+0x764>
 2006708:	8800f626 	beq	r17,zero,2006ae4 <_dtoa_r+0x764>
 200670c:	d9c00517 	ldw	r7,20(sp)
 2006710:	01c39a0e 	bge	zero,r7,200757c <_dtoa_r+0x11fc>
 2006714:	388003cc 	andi	r2,r7,15
 2006718:	100490fa 	slli	r2,r2,3
 200671c:	382bd13a 	srai	r21,r7,4
 2006720:	00c080b4 	movhi	r3,514
 2006724:	18e57d04 	addi	r3,r3,-27148
 2006728:	1885883a 	add	r2,r3,r2
 200672c:	a8c0040c 	andi	r3,r21,16
 2006730:	12400017 	ldw	r9,0(r2)
 2006734:	12000117 	ldw	r8,4(r2)
 2006738:	18037926 	beq	r3,zero,2007520 <_dtoa_r+0x11a0>
 200673c:	008080b4 	movhi	r2,514
 2006740:	10a57304 	addi	r2,r2,-27188
 2006744:	11800817 	ldw	r6,32(r2)
 2006748:	11c00917 	ldw	r7,36(r2)
 200674c:	9009883a 	mov	r4,r18
 2006750:	980b883a 	mov	r5,r19
 2006754:	da001715 	stw	r8,92(sp)
 2006758:	da401615 	stw	r9,88(sp)
 200675c:	20019ec0 	call	20019ec <__divdf3>
 2006760:	da001717 	ldw	r8,92(sp)
 2006764:	da401617 	ldw	r9,88(sp)
 2006768:	ad4003cc 	andi	r21,r21,15
 200676c:	040000c4 	movi	r16,3
 2006770:	1023883a 	mov	r17,r2
 2006774:	1829883a 	mov	r20,r3
 2006778:	a8001126 	beq	r21,zero,20067c0 <_dtoa_r+0x440>
 200677c:	05c080b4 	movhi	r23,514
 2006780:	bde57304 	addi	r23,r23,-27188
 2006784:	4805883a 	mov	r2,r9
 2006788:	4007883a 	mov	r3,r8
 200678c:	a980004c 	andi	r6,r21,1
 2006790:	1009883a 	mov	r4,r2
 2006794:	a82bd07a 	srai	r21,r21,1
 2006798:	180b883a 	mov	r5,r3
 200679c:	30000426 	beq	r6,zero,20067b0 <_dtoa_r+0x430>
 20067a0:	b9800017 	ldw	r6,0(r23)
 20067a4:	b9c00117 	ldw	r7,4(r23)
 20067a8:	84000044 	addi	r16,r16,1
 20067ac:	200258c0 	call	200258c <__muldf3>
 20067b0:	bdc00204 	addi	r23,r23,8
 20067b4:	a83ff51e 	bne	r21,zero,200678c <_dtoa_r+0x40c>
 20067b8:	1013883a 	mov	r9,r2
 20067bc:	1811883a 	mov	r8,r3
 20067c0:	480d883a 	mov	r6,r9
 20067c4:	400f883a 	mov	r7,r8
 20067c8:	8809883a 	mov	r4,r17
 20067cc:	a00b883a 	mov	r5,r20
 20067d0:	20019ec0 	call	20019ec <__divdf3>
 20067d4:	d8800f15 	stw	r2,60(sp)
 20067d8:	d8c01015 	stw	r3,64(sp)
 20067dc:	d8c00e17 	ldw	r3,56(sp)
 20067e0:	18000626 	beq	r3,zero,20067fc <_dtoa_r+0x47c>
 20067e4:	d9000f17 	ldw	r4,60(sp)
 20067e8:	d9401017 	ldw	r5,64(sp)
 20067ec:	000d883a 	mov	r6,zero
 20067f0:	01cffc34 	movhi	r7,16368
 20067f4:	20024980 	call	2002498 <__ledf2>
 20067f8:	10040b16 	blt	r2,zero,2007828 <_dtoa_r+0x14a8>
 20067fc:	8009883a 	mov	r4,r16
 2006800:	20037740 	call	2003774 <__floatsidf>
 2006804:	d9800f17 	ldw	r6,60(sp)
 2006808:	d9c01017 	ldw	r7,64(sp)
 200680c:	1009883a 	mov	r4,r2
 2006810:	180b883a 	mov	r5,r3
 2006814:	200258c0 	call	200258c <__muldf3>
 2006818:	000d883a 	mov	r6,zero
 200681c:	01d00734 	movhi	r7,16412
 2006820:	1009883a 	mov	r4,r2
 2006824:	180b883a 	mov	r5,r3
 2006828:	20011400 	call	2001140 <__adddf3>
 200682c:	1021883a 	mov	r16,r2
 2006830:	d8800617 	ldw	r2,24(sp)
 2006834:	047f3034 	movhi	r17,64704
 2006838:	1c63883a 	add	r17,r3,r17
 200683c:	10031826 	beq	r2,zero,20074a0 <_dtoa_r+0x1120>
 2006840:	d8c00517 	ldw	r3,20(sp)
 2006844:	db000617 	ldw	r12,24(sp)
 2006848:	d8c01315 	stw	r3,76(sp)
 200684c:	d9000b17 	ldw	r4,44(sp)
 2006850:	20038f26 	beq	r4,zero,2007690 <_dtoa_r+0x1310>
 2006854:	60bfffc4 	addi	r2,r12,-1
 2006858:	100490fa 	slli	r2,r2,3
 200685c:	00c080b4 	movhi	r3,514
 2006860:	18e57d04 	addi	r3,r3,-27148
 2006864:	1885883a 	add	r2,r3,r2
 2006868:	11800017 	ldw	r6,0(r2)
 200686c:	11c00117 	ldw	r7,4(r2)
 2006870:	d8800717 	ldw	r2,28(sp)
 2006874:	0009883a 	mov	r4,zero
 2006878:	014ff834 	movhi	r5,16352
 200687c:	db001615 	stw	r12,88(sp)
 2006880:	15c00044 	addi	r23,r2,1
 2006884:	20019ec0 	call	20019ec <__divdf3>
 2006888:	800d883a 	mov	r6,r16
 200688c:	880f883a 	mov	r7,r17
 2006890:	1009883a 	mov	r4,r2
 2006894:	180b883a 	mov	r5,r3
 2006898:	2002df80 	call	2002df8 <__subdf3>
 200689c:	d9401017 	ldw	r5,64(sp)
 20068a0:	d9000f17 	ldw	r4,60(sp)
 20068a4:	102b883a 	mov	r21,r2
 20068a8:	d8c01215 	stw	r3,72(sp)
 20068ac:	20036f40 	call	20036f4 <__fixdfsi>
 20068b0:	1009883a 	mov	r4,r2
 20068b4:	1029883a 	mov	r20,r2
 20068b8:	20037740 	call	2003774 <__floatsidf>
 20068bc:	d9000f17 	ldw	r4,60(sp)
 20068c0:	d9401017 	ldw	r5,64(sp)
 20068c4:	100d883a 	mov	r6,r2
 20068c8:	180f883a 	mov	r7,r3
 20068cc:	2002df80 	call	2002df8 <__subdf3>
 20068d0:	1823883a 	mov	r17,r3
 20068d4:	d8c00717 	ldw	r3,28(sp)
 20068d8:	d9401217 	ldw	r5,72(sp)
 20068dc:	a2000c04 	addi	r8,r20,48
 20068e0:	1021883a 	mov	r16,r2
 20068e4:	1a000005 	stb	r8,0(r3)
 20068e8:	800d883a 	mov	r6,r16
 20068ec:	880f883a 	mov	r7,r17
 20068f0:	a809883a 	mov	r4,r21
 20068f4:	4029883a 	mov	r20,r8
 20068f8:	20023bc0 	call	20023bc <__gedf2>
 20068fc:	00841d16 	blt	zero,r2,2007974 <_dtoa_r+0x15f4>
 2006900:	800d883a 	mov	r6,r16
 2006904:	880f883a 	mov	r7,r17
 2006908:	0009883a 	mov	r4,zero
 200690c:	014ffc34 	movhi	r5,16368
 2006910:	2002df80 	call	2002df8 <__subdf3>
 2006914:	d9401217 	ldw	r5,72(sp)
 2006918:	100d883a 	mov	r6,r2
 200691c:	180f883a 	mov	r7,r3
 2006920:	a809883a 	mov	r4,r21
 2006924:	20023bc0 	call	20023bc <__gedf2>
 2006928:	db001617 	ldw	r12,88(sp)
 200692c:	00840e16 	blt	zero,r2,2007968 <_dtoa_r+0x15e8>
 2006930:	00800044 	movi	r2,1
 2006934:	13006b0e 	bge	r2,r12,2006ae4 <_dtoa_r+0x764>
 2006938:	d9000717 	ldw	r4,28(sp)
 200693c:	dd800f15 	stw	r22,60(sp)
 2006940:	dcc01015 	stw	r19,64(sp)
 2006944:	2319883a 	add	r12,r4,r12
 2006948:	dcc01217 	ldw	r19,72(sp)
 200694c:	602d883a 	mov	r22,r12
 2006950:	dc801215 	stw	r18,72(sp)
 2006954:	b825883a 	mov	r18,r23
 2006958:	00000906 	br	2006980 <_dtoa_r+0x600>
 200695c:	2002df80 	call	2002df8 <__subdf3>
 2006960:	a80d883a 	mov	r6,r21
 2006964:	980f883a 	mov	r7,r19
 2006968:	1009883a 	mov	r4,r2
 200696c:	180b883a 	mov	r5,r3
 2006970:	20024980 	call	2002498 <__ledf2>
 2006974:	1003e816 	blt	r2,zero,2007918 <_dtoa_r+0x1598>
 2006978:	b825883a 	mov	r18,r23
 200697c:	bd83e926 	beq	r23,r22,2007924 <_dtoa_r+0x15a4>
 2006980:	a809883a 	mov	r4,r21
 2006984:	980b883a 	mov	r5,r19
 2006988:	000d883a 	mov	r6,zero
 200698c:	01d00934 	movhi	r7,16420
 2006990:	200258c0 	call	200258c <__muldf3>
 2006994:	000d883a 	mov	r6,zero
 2006998:	01d00934 	movhi	r7,16420
 200699c:	8009883a 	mov	r4,r16
 20069a0:	880b883a 	mov	r5,r17
 20069a4:	102b883a 	mov	r21,r2
 20069a8:	1827883a 	mov	r19,r3
 20069ac:	200258c0 	call	200258c <__muldf3>
 20069b0:	180b883a 	mov	r5,r3
 20069b4:	1009883a 	mov	r4,r2
 20069b8:	1821883a 	mov	r16,r3
 20069bc:	1023883a 	mov	r17,r2
 20069c0:	20036f40 	call	20036f4 <__fixdfsi>
 20069c4:	1009883a 	mov	r4,r2
 20069c8:	1029883a 	mov	r20,r2
 20069cc:	20037740 	call	2003774 <__floatsidf>
 20069d0:	8809883a 	mov	r4,r17
 20069d4:	800b883a 	mov	r5,r16
 20069d8:	100d883a 	mov	r6,r2
 20069dc:	180f883a 	mov	r7,r3
 20069e0:	2002df80 	call	2002df8 <__subdf3>
 20069e4:	a5000c04 	addi	r20,r20,48
 20069e8:	a80d883a 	mov	r6,r21
 20069ec:	980f883a 	mov	r7,r19
 20069f0:	1009883a 	mov	r4,r2
 20069f4:	180b883a 	mov	r5,r3
 20069f8:	95000005 	stb	r20,0(r18)
 20069fc:	1021883a 	mov	r16,r2
 2006a00:	1823883a 	mov	r17,r3
 2006a04:	20024980 	call	2002498 <__ledf2>
 2006a08:	bdc00044 	addi	r23,r23,1
 2006a0c:	800d883a 	mov	r6,r16
 2006a10:	880f883a 	mov	r7,r17
 2006a14:	0009883a 	mov	r4,zero
 2006a18:	014ffc34 	movhi	r5,16368
 2006a1c:	103fcf0e 	bge	r2,zero,200695c <_dtoa_r+0x5dc>
 2006a20:	d8c01317 	ldw	r3,76(sp)
 2006a24:	d8c00515 	stw	r3,20(sp)
 2006a28:	d9400917 	ldw	r5,36(sp)
 2006a2c:	e009883a 	mov	r4,fp
 2006a30:	2009ae00 	call	2009ae0 <_Bfree>
 2006a34:	d9000517 	ldw	r4,20(sp)
 2006a38:	d9802317 	ldw	r6,140(sp)
 2006a3c:	d9c02517 	ldw	r7,148(sp)
 2006a40:	b8000005 	stb	zero,0(r23)
 2006a44:	20800044 	addi	r2,r4,1
 2006a48:	30800015 	stw	r2,0(r6)
 2006a4c:	3802aa26 	beq	r7,zero,20074f8 <_dtoa_r+0x1178>
 2006a50:	3dc00015 	stw	r23,0(r7)
 2006a54:	d8800717 	ldw	r2,28(sp)
 2006a58:	003e7906 	br	2006440 <_dtoa_r+0xc0>
 2006a5c:	00800434 	movhi	r2,16
 2006a60:	10bfffc4 	addi	r2,r2,-1
 2006a64:	88a2703a 	and	r17,r17,r2
 2006a68:	883e851e 	bne	r17,zero,2006480 <_dtoa_r+0x100>
 2006a6c:	008080b4 	movhi	r2,514
 2006a70:	10a55f04 	addi	r2,r2,-27268
 2006a74:	003e8406 	br	2006488 <_dtoa_r+0x108>
 2006a78:	10c00204 	addi	r3,r2,8
 2006a7c:	003e8706 	br	200649c <_dtoa_r+0x11c>
 2006a80:	01400434 	movhi	r5,16
 2006a84:	297fffc4 	addi	r5,r5,-1
 2006a88:	994a703a 	and	r5,r19,r5
 2006a8c:	9009883a 	mov	r4,r18
 2006a90:	843f0044 	addi	r16,r16,-1023
 2006a94:	294ffc34 	orhi	r5,r5,16368
 2006a98:	dd800217 	ldw	r22,8(sp)
 2006a9c:	d8001115 	stw	zero,68(sp)
 2006aa0:	003ea506 	br	2006538 <_dtoa_r+0x1b8>
 2006aa4:	008080b4 	movhi	r2,514
 2006aa8:	10a55604 	addi	r2,r2,-27304
 2006aac:	003e6406 	br	2006440 <_dtoa_r+0xc0>
 2006ab0:	e0001115 	stw	zero,68(fp)
 2006ab4:	000b883a 	mov	r5,zero
 2006ab8:	e009883a 	mov	r4,fp
 2006abc:	2009a380 	call	2009a38 <_Balloc>
 2006ac0:	01bfffc4 	movi	r6,-1
 2006ac4:	01c00044 	movi	r7,1
 2006ac8:	d8800715 	stw	r2,28(sp)
 2006acc:	d9800c15 	stw	r6,48(sp)
 2006ad0:	e0801015 	stw	r2,64(fp)
 2006ad4:	d8000315 	stw	zero,12(sp)
 2006ad8:	d9c00b15 	stw	r7,44(sp)
 2006adc:	d9800615 	stw	r6,24(sp)
 2006ae0:	d8002215 	stw	zero,136(sp)
 2006ae4:	d8800117 	ldw	r2,4(sp)
 2006ae8:	10008916 	blt	r2,zero,2006d10 <_dtoa_r+0x990>
 2006aec:	d9000517 	ldw	r4,20(sp)
 2006af0:	00c00384 	movi	r3,14
 2006af4:	19008616 	blt	r3,r4,2006d10 <_dtoa_r+0x990>
 2006af8:	200490fa 	slli	r2,r4,3
 2006afc:	00c080b4 	movhi	r3,514
 2006b00:	d9802217 	ldw	r6,136(sp)
 2006b04:	18e57d04 	addi	r3,r3,-27148
 2006b08:	1885883a 	add	r2,r3,r2
 2006b0c:	14000017 	ldw	r16,0(r2)
 2006b10:	14400117 	ldw	r17,4(r2)
 2006b14:	30016316 	blt	r6,zero,20070a4 <_dtoa_r+0xd24>
 2006b18:	800d883a 	mov	r6,r16
 2006b1c:	880f883a 	mov	r7,r17
 2006b20:	9009883a 	mov	r4,r18
 2006b24:	980b883a 	mov	r5,r19
 2006b28:	20019ec0 	call	20019ec <__divdf3>
 2006b2c:	180b883a 	mov	r5,r3
 2006b30:	1009883a 	mov	r4,r2
 2006b34:	20036f40 	call	20036f4 <__fixdfsi>
 2006b38:	1009883a 	mov	r4,r2
 2006b3c:	102b883a 	mov	r21,r2
 2006b40:	20037740 	call	2003774 <__floatsidf>
 2006b44:	800d883a 	mov	r6,r16
 2006b48:	880f883a 	mov	r7,r17
 2006b4c:	1009883a 	mov	r4,r2
 2006b50:	180b883a 	mov	r5,r3
 2006b54:	200258c0 	call	200258c <__muldf3>
 2006b58:	100d883a 	mov	r6,r2
 2006b5c:	180f883a 	mov	r7,r3
 2006b60:	9009883a 	mov	r4,r18
 2006b64:	980b883a 	mov	r5,r19
 2006b68:	2002df80 	call	2002df8 <__subdf3>
 2006b6c:	d9c00717 	ldw	r7,28(sp)
 2006b70:	1009883a 	mov	r4,r2
 2006b74:	a8800c04 	addi	r2,r21,48
 2006b78:	38800005 	stb	r2,0(r7)
 2006b7c:	3dc00044 	addi	r23,r7,1
 2006b80:	d9c00617 	ldw	r7,24(sp)
 2006b84:	01800044 	movi	r6,1
 2006b88:	180b883a 	mov	r5,r3
 2006b8c:	2005883a 	mov	r2,r4
 2006b90:	39803826 	beq	r7,r6,2006c74 <_dtoa_r+0x8f4>
 2006b94:	000d883a 	mov	r6,zero
 2006b98:	01d00934 	movhi	r7,16420
 2006b9c:	200258c0 	call	200258c <__muldf3>
 2006ba0:	000d883a 	mov	r6,zero
 2006ba4:	000f883a 	mov	r7,zero
 2006ba8:	1009883a 	mov	r4,r2
 2006bac:	180b883a 	mov	r5,r3
 2006bb0:	1025883a 	mov	r18,r2
 2006bb4:	1827883a 	mov	r19,r3
 2006bb8:	200dec40 	call	200dec4 <__eqdf2>
 2006bbc:	103f9a26 	beq	r2,zero,2006a28 <_dtoa_r+0x6a8>
 2006bc0:	d9c00617 	ldw	r7,24(sp)
 2006bc4:	d8c00717 	ldw	r3,28(sp)
 2006bc8:	b829883a 	mov	r20,r23
 2006bcc:	38bfffc4 	addi	r2,r7,-1
 2006bd0:	18ad883a 	add	r22,r3,r2
 2006bd4:	00000a06 	br	2006c00 <_dtoa_r+0x880>
 2006bd8:	200258c0 	call	200258c <__muldf3>
 2006bdc:	000d883a 	mov	r6,zero
 2006be0:	000f883a 	mov	r7,zero
 2006be4:	1009883a 	mov	r4,r2
 2006be8:	180b883a 	mov	r5,r3
 2006bec:	1025883a 	mov	r18,r2
 2006bf0:	1827883a 	mov	r19,r3
 2006bf4:	b829883a 	mov	r20,r23
 2006bf8:	200dec40 	call	200dec4 <__eqdf2>
 2006bfc:	103f8a26 	beq	r2,zero,2006a28 <_dtoa_r+0x6a8>
 2006c00:	800d883a 	mov	r6,r16
 2006c04:	880f883a 	mov	r7,r17
 2006c08:	9009883a 	mov	r4,r18
 2006c0c:	980b883a 	mov	r5,r19
 2006c10:	20019ec0 	call	20019ec <__divdf3>
 2006c14:	180b883a 	mov	r5,r3
 2006c18:	1009883a 	mov	r4,r2
 2006c1c:	20036f40 	call	20036f4 <__fixdfsi>
 2006c20:	1009883a 	mov	r4,r2
 2006c24:	102b883a 	mov	r21,r2
 2006c28:	20037740 	call	2003774 <__floatsidf>
 2006c2c:	800d883a 	mov	r6,r16
 2006c30:	880f883a 	mov	r7,r17
 2006c34:	1009883a 	mov	r4,r2
 2006c38:	180b883a 	mov	r5,r3
 2006c3c:	200258c0 	call	200258c <__muldf3>
 2006c40:	100d883a 	mov	r6,r2
 2006c44:	180f883a 	mov	r7,r3
 2006c48:	9009883a 	mov	r4,r18
 2006c4c:	980b883a 	mov	r5,r19
 2006c50:	2002df80 	call	2002df8 <__subdf3>
 2006c54:	aa000c04 	addi	r8,r21,48
 2006c58:	a2000005 	stb	r8,0(r20)
 2006c5c:	000d883a 	mov	r6,zero
 2006c60:	01d00934 	movhi	r7,16420
 2006c64:	1009883a 	mov	r4,r2
 2006c68:	180b883a 	mov	r5,r3
 2006c6c:	a5c00044 	addi	r23,r20,1
 2006c70:	b53fd91e 	bne	r22,r20,2006bd8 <_dtoa_r+0x858>
 2006c74:	100d883a 	mov	r6,r2
 2006c78:	180f883a 	mov	r7,r3
 2006c7c:	1009883a 	mov	r4,r2
 2006c80:	180b883a 	mov	r5,r3
 2006c84:	20011400 	call	2001140 <__adddf3>
 2006c88:	100d883a 	mov	r6,r2
 2006c8c:	180f883a 	mov	r7,r3
 2006c90:	8009883a 	mov	r4,r16
 2006c94:	880b883a 	mov	r5,r17
 2006c98:	1027883a 	mov	r19,r2
 2006c9c:	1825883a 	mov	r18,r3
 2006ca0:	20024980 	call	2002498 <__ledf2>
 2006ca4:	10000816 	blt	r2,zero,2006cc8 <_dtoa_r+0x948>
 2006ca8:	980d883a 	mov	r6,r19
 2006cac:	900f883a 	mov	r7,r18
 2006cb0:	8009883a 	mov	r4,r16
 2006cb4:	880b883a 	mov	r5,r17
 2006cb8:	200dec40 	call	200dec4 <__eqdf2>
 2006cbc:	103f5a1e 	bne	r2,zero,2006a28 <_dtoa_r+0x6a8>
 2006cc0:	ad40004c 	andi	r21,r21,1
 2006cc4:	a83f5826 	beq	r21,zero,2006a28 <_dtoa_r+0x6a8>
 2006cc8:	bd3fffc3 	ldbu	r20,-1(r23)
 2006ccc:	b8bfffc4 	addi	r2,r23,-1
 2006cd0:	1007883a 	mov	r3,r2
 2006cd4:	01400e44 	movi	r5,57
 2006cd8:	d9800717 	ldw	r6,28(sp)
 2006cdc:	00000506 	br	2006cf4 <_dtoa_r+0x974>
 2006ce0:	18ffffc4 	addi	r3,r3,-1
 2006ce4:	11824726 	beq	r2,r6,2007604 <_dtoa_r+0x1284>
 2006ce8:	1d000003 	ldbu	r20,0(r3)
 2006cec:	102f883a 	mov	r23,r2
 2006cf0:	10bfffc4 	addi	r2,r2,-1
 2006cf4:	a1003fcc 	andi	r4,r20,255
 2006cf8:	2100201c 	xori	r4,r4,128
 2006cfc:	213fe004 	addi	r4,r4,-128
 2006d00:	217ff726 	beq	r4,r5,2006ce0 <_dtoa_r+0x960>
 2006d04:	a2000044 	addi	r8,r20,1
 2006d08:	12000005 	stb	r8,0(r2)
 2006d0c:	003f4606 	br	2006a28 <_dtoa_r+0x6a8>
 2006d10:	d9000b17 	ldw	r4,44(sp)
 2006d14:	2000c826 	beq	r4,zero,2007038 <_dtoa_r+0xcb8>
 2006d18:	d9800317 	ldw	r6,12(sp)
 2006d1c:	00c00044 	movi	r3,1
 2006d20:	1980f90e 	bge	r3,r6,2007108 <_dtoa_r+0xd88>
 2006d24:	d8800617 	ldw	r2,24(sp)
 2006d28:	d8c00a17 	ldw	r3,40(sp)
 2006d2c:	157fffc4 	addi	r21,r2,-1
 2006d30:	1d41f316 	blt	r3,r21,2007500 <_dtoa_r+0x1180>
 2006d34:	1d6bc83a 	sub	r21,r3,r21
 2006d38:	d9c00617 	ldw	r7,24(sp)
 2006d3c:	3802aa16 	blt	r7,zero,20077e8 <_dtoa_r+0x1468>
 2006d40:	dd000817 	ldw	r20,32(sp)
 2006d44:	d8800617 	ldw	r2,24(sp)
 2006d48:	d8c00817 	ldw	r3,32(sp)
 2006d4c:	01400044 	movi	r5,1
 2006d50:	e009883a 	mov	r4,fp
 2006d54:	1887883a 	add	r3,r3,r2
 2006d58:	d8c00815 	stw	r3,32(sp)
 2006d5c:	b0ad883a 	add	r22,r22,r2
 2006d60:	2009e6c0 	call	2009e6c <__i2b>
 2006d64:	1023883a 	mov	r17,r2
 2006d68:	a0000826 	beq	r20,zero,2006d8c <_dtoa_r+0xa0c>
 2006d6c:	0580070e 	bge	zero,r22,2006d8c <_dtoa_r+0xa0c>
 2006d70:	a005883a 	mov	r2,r20
 2006d74:	b500b916 	blt	r22,r20,200705c <_dtoa_r+0xcdc>
 2006d78:	d9000817 	ldw	r4,32(sp)
 2006d7c:	a0a9c83a 	sub	r20,r20,r2
 2006d80:	b0adc83a 	sub	r22,r22,r2
 2006d84:	2089c83a 	sub	r4,r4,r2
 2006d88:	d9000815 	stw	r4,32(sp)
 2006d8c:	d9800a17 	ldw	r6,40(sp)
 2006d90:	0181810e 	bge	zero,r6,2007398 <_dtoa_r+0x1018>
 2006d94:	d9c00b17 	ldw	r7,44(sp)
 2006d98:	3800b326 	beq	r7,zero,2007068 <_dtoa_r+0xce8>
 2006d9c:	a800b226 	beq	r21,zero,2007068 <_dtoa_r+0xce8>
 2006da0:	880b883a 	mov	r5,r17
 2006da4:	a80d883a 	mov	r6,r21
 2006da8:	e009883a 	mov	r4,fp
 2006dac:	200a1340 	call	200a134 <__pow5mult>
 2006db0:	d9800917 	ldw	r6,36(sp)
 2006db4:	100b883a 	mov	r5,r2
 2006db8:	e009883a 	mov	r4,fp
 2006dbc:	1023883a 	mov	r17,r2
 2006dc0:	2009ea80 	call	2009ea8 <__multiply>
 2006dc4:	1021883a 	mov	r16,r2
 2006dc8:	d8800a17 	ldw	r2,40(sp)
 2006dcc:	d9400917 	ldw	r5,36(sp)
 2006dd0:	e009883a 	mov	r4,fp
 2006dd4:	1545c83a 	sub	r2,r2,r21
 2006dd8:	d8800a15 	stw	r2,40(sp)
 2006ddc:	2009ae00 	call	2009ae0 <_Bfree>
 2006de0:	d8c00a17 	ldw	r3,40(sp)
 2006de4:	18009f1e 	bne	r3,zero,2007064 <_dtoa_r+0xce4>
 2006de8:	05c00044 	movi	r23,1
 2006dec:	e009883a 	mov	r4,fp
 2006df0:	b80b883a 	mov	r5,r23
 2006df4:	2009e6c0 	call	2009e6c <__i2b>
 2006df8:	d9000d17 	ldw	r4,52(sp)
 2006dfc:	102b883a 	mov	r21,r2
 2006e00:	2000ce26 	beq	r4,zero,200713c <_dtoa_r+0xdbc>
 2006e04:	200d883a 	mov	r6,r4
 2006e08:	100b883a 	mov	r5,r2
 2006e0c:	e009883a 	mov	r4,fp
 2006e10:	200a1340 	call	200a134 <__pow5mult>
 2006e14:	d9800317 	ldw	r6,12(sp)
 2006e18:	102b883a 	mov	r21,r2
 2006e1c:	b981810e 	bge	r23,r6,2007424 <_dtoa_r+0x10a4>
 2006e20:	0027883a 	mov	r19,zero
 2006e24:	a8800417 	ldw	r2,16(r21)
 2006e28:	05c00804 	movi	r23,32
 2006e2c:	10800104 	addi	r2,r2,4
 2006e30:	1085883a 	add	r2,r2,r2
 2006e34:	1085883a 	add	r2,r2,r2
 2006e38:	a885883a 	add	r2,r21,r2
 2006e3c:	11000017 	ldw	r4,0(r2)
 2006e40:	2009d540 	call	2009d54 <__hi0bits>
 2006e44:	b885c83a 	sub	r2,r23,r2
 2006e48:	1585883a 	add	r2,r2,r22
 2006e4c:	108007cc 	andi	r2,r2,31
 2006e50:	1000b326 	beq	r2,zero,2007120 <_dtoa_r+0xda0>
 2006e54:	00c00804 	movi	r3,32
 2006e58:	1887c83a 	sub	r3,r3,r2
 2006e5c:	01000104 	movi	r4,4
 2006e60:	20c2cd0e 	bge	r4,r3,2007998 <_dtoa_r+0x1618>
 2006e64:	00c00704 	movi	r3,28
 2006e68:	1885c83a 	sub	r2,r3,r2
 2006e6c:	d8c00817 	ldw	r3,32(sp)
 2006e70:	a0a9883a 	add	r20,r20,r2
 2006e74:	b0ad883a 	add	r22,r22,r2
 2006e78:	1887883a 	add	r3,r3,r2
 2006e7c:	d8c00815 	stw	r3,32(sp)
 2006e80:	d9800817 	ldw	r6,32(sp)
 2006e84:	0180040e 	bge	zero,r6,2006e98 <_dtoa_r+0xb18>
 2006e88:	800b883a 	mov	r5,r16
 2006e8c:	e009883a 	mov	r4,fp
 2006e90:	200a2740 	call	200a274 <__lshift>
 2006e94:	1021883a 	mov	r16,r2
 2006e98:	0580050e 	bge	zero,r22,2006eb0 <_dtoa_r+0xb30>
 2006e9c:	a80b883a 	mov	r5,r21
 2006ea0:	b00d883a 	mov	r6,r22
 2006ea4:	e009883a 	mov	r4,fp
 2006ea8:	200a2740 	call	200a274 <__lshift>
 2006eac:	102b883a 	mov	r21,r2
 2006eb0:	d9c00e17 	ldw	r7,56(sp)
 2006eb4:	3801211e 	bne	r7,zero,200733c <_dtoa_r+0xfbc>
 2006eb8:	d9800617 	ldw	r6,24(sp)
 2006ebc:	0181380e 	bge	zero,r6,20073a0 <_dtoa_r+0x1020>
 2006ec0:	d8c00b17 	ldw	r3,44(sp)
 2006ec4:	1800ab1e 	bne	r3,zero,2007174 <_dtoa_r+0xdf4>
 2006ec8:	dc800717 	ldw	r18,28(sp)
 2006ecc:	dcc00617 	ldw	r19,24(sp)
 2006ed0:	9029883a 	mov	r20,r18
 2006ed4:	00000206 	br	2006ee0 <_dtoa_r+0xb60>
 2006ed8:	2009b080 	call	2009b08 <__multadd>
 2006edc:	1021883a 	mov	r16,r2
 2006ee0:	a80b883a 	mov	r5,r21
 2006ee4:	8009883a 	mov	r4,r16
 2006ee8:	20061580 	call	2006158 <quorem>
 2006eec:	10800c04 	addi	r2,r2,48
 2006ef0:	90800005 	stb	r2,0(r18)
 2006ef4:	94800044 	addi	r18,r18,1
 2006ef8:	9507c83a 	sub	r3,r18,r20
 2006efc:	000f883a 	mov	r7,zero
 2006f00:	01800284 	movi	r6,10
 2006f04:	800b883a 	mov	r5,r16
 2006f08:	e009883a 	mov	r4,fp
 2006f0c:	1cfff216 	blt	r3,r19,2006ed8 <_dtoa_r+0xb58>
 2006f10:	1011883a 	mov	r8,r2
 2006f14:	d8800617 	ldw	r2,24(sp)
 2006f18:	0082370e 	bge	zero,r2,20077f8 <_dtoa_r+0x1478>
 2006f1c:	d9000717 	ldw	r4,28(sp)
 2006f20:	0025883a 	mov	r18,zero
 2006f24:	20af883a 	add	r23,r4,r2
 2006f28:	01800044 	movi	r6,1
 2006f2c:	800b883a 	mov	r5,r16
 2006f30:	e009883a 	mov	r4,fp
 2006f34:	da001715 	stw	r8,92(sp)
 2006f38:	200a2740 	call	200a274 <__lshift>
 2006f3c:	a80b883a 	mov	r5,r21
 2006f40:	1009883a 	mov	r4,r2
 2006f44:	d8800915 	stw	r2,36(sp)
 2006f48:	200a3bc0 	call	200a3bc <__mcmp>
 2006f4c:	da001717 	ldw	r8,92(sp)
 2006f50:	0081800e 	bge	zero,r2,2007554 <_dtoa_r+0x11d4>
 2006f54:	b93fffc3 	ldbu	r4,-1(r23)
 2006f58:	b8bfffc4 	addi	r2,r23,-1
 2006f5c:	1007883a 	mov	r3,r2
 2006f60:	01800e44 	movi	r6,57
 2006f64:	d9c00717 	ldw	r7,28(sp)
 2006f68:	00000506 	br	2006f80 <_dtoa_r+0xc00>
 2006f6c:	18ffffc4 	addi	r3,r3,-1
 2006f70:	11c12326 	beq	r2,r7,2007400 <_dtoa_r+0x1080>
 2006f74:	19000003 	ldbu	r4,0(r3)
 2006f78:	102f883a 	mov	r23,r2
 2006f7c:	10bfffc4 	addi	r2,r2,-1
 2006f80:	21403fcc 	andi	r5,r4,255
 2006f84:	2940201c 	xori	r5,r5,128
 2006f88:	297fe004 	addi	r5,r5,-128
 2006f8c:	29bff726 	beq	r5,r6,2006f6c <_dtoa_r+0xbec>
 2006f90:	21000044 	addi	r4,r4,1
 2006f94:	11000005 	stb	r4,0(r2)
 2006f98:	a80b883a 	mov	r5,r21
 2006f9c:	e009883a 	mov	r4,fp
 2006fa0:	2009ae00 	call	2009ae0 <_Bfree>
 2006fa4:	883ea026 	beq	r17,zero,2006a28 <_dtoa_r+0x6a8>
 2006fa8:	90000426 	beq	r18,zero,2006fbc <_dtoa_r+0xc3c>
 2006fac:	94400326 	beq	r18,r17,2006fbc <_dtoa_r+0xc3c>
 2006fb0:	900b883a 	mov	r5,r18
 2006fb4:	e009883a 	mov	r4,fp
 2006fb8:	2009ae00 	call	2009ae0 <_Bfree>
 2006fbc:	880b883a 	mov	r5,r17
 2006fc0:	e009883a 	mov	r4,fp
 2006fc4:	2009ae00 	call	2009ae0 <_Bfree>
 2006fc8:	003e9706 	br	2006a28 <_dtoa_r+0x6a8>
 2006fcc:	01800044 	movi	r6,1
 2006fd0:	d9800e15 	stw	r6,56(sp)
 2006fd4:	003d9606 	br	2006630 <_dtoa_r+0x2b0>
 2006fd8:	d8800817 	ldw	r2,32(sp)
 2006fdc:	d8c00517 	ldw	r3,20(sp)
 2006fe0:	d8000d15 	stw	zero,52(sp)
 2006fe4:	10c5c83a 	sub	r2,r2,r3
 2006fe8:	00c9c83a 	sub	r4,zero,r3
 2006fec:	d8800815 	stw	r2,32(sp)
 2006ff0:	d9000a15 	stw	r4,40(sp)
 2006ff4:	003d9706 	br	2006654 <_dtoa_r+0x2d4>
 2006ff8:	05adc83a 	sub	r22,zero,r22
 2006ffc:	dd800815 	stw	r22,32(sp)
 2007000:	002d883a 	mov	r22,zero
 2007004:	003d8e06 	br	2006640 <_dtoa_r+0x2c0>
 2007008:	d9000517 	ldw	r4,20(sp)
 200700c:	20037740 	call	2003774 <__floatsidf>
 2007010:	100d883a 	mov	r6,r2
 2007014:	180f883a 	mov	r7,r3
 2007018:	a009883a 	mov	r4,r20
 200701c:	880b883a 	mov	r5,r17
 2007020:	200dec40 	call	200dec4 <__eqdf2>
 2007024:	103d7126 	beq	r2,zero,20065ec <_dtoa_r+0x26c>
 2007028:	d9c00517 	ldw	r7,20(sp)
 200702c:	39ffffc4 	addi	r7,r7,-1
 2007030:	d9c00515 	stw	r7,20(sp)
 2007034:	003d6d06 	br	20065ec <_dtoa_r+0x26c>
 2007038:	dd400a17 	ldw	r21,40(sp)
 200703c:	dd000817 	ldw	r20,32(sp)
 2007040:	0023883a 	mov	r17,zero
 2007044:	003f4806 	br	2006d68 <_dtoa_r+0x9e8>
 2007048:	10e3c83a 	sub	r17,r2,r3
 200704c:	9448983a 	sll	r4,r18,r17
 2007050:	003d3206 	br	200651c <_dtoa_r+0x19c>
 2007054:	d8000e15 	stw	zero,56(sp)
 2007058:	003d7506 	br	2006630 <_dtoa_r+0x2b0>
 200705c:	b005883a 	mov	r2,r22
 2007060:	003f4506 	br	2006d78 <_dtoa_r+0x9f8>
 2007064:	dc000915 	stw	r16,36(sp)
 2007068:	d9800a17 	ldw	r6,40(sp)
 200706c:	d9400917 	ldw	r5,36(sp)
 2007070:	e009883a 	mov	r4,fp
 2007074:	200a1340 	call	200a134 <__pow5mult>
 2007078:	1021883a 	mov	r16,r2
 200707c:	003f5a06 	br	2006de8 <_dtoa_r+0xa68>
 2007080:	01c00044 	movi	r7,1
 2007084:	d9c00b15 	stw	r7,44(sp)
 2007088:	d8802217 	ldw	r2,136(sp)
 200708c:	0081280e 	bge	zero,r2,2007530 <_dtoa_r+0x11b0>
 2007090:	100d883a 	mov	r6,r2
 2007094:	1021883a 	mov	r16,r2
 2007098:	d8800c15 	stw	r2,48(sp)
 200709c:	d8800615 	stw	r2,24(sp)
 20070a0:	003d8806 	br	20066c4 <_dtoa_r+0x344>
 20070a4:	d8800617 	ldw	r2,24(sp)
 20070a8:	00be9b16 	blt	zero,r2,2006b18 <_dtoa_r+0x798>
 20070ac:	10010f1e 	bne	r2,zero,20074ec <_dtoa_r+0x116c>
 20070b0:	880b883a 	mov	r5,r17
 20070b4:	000d883a 	mov	r6,zero
 20070b8:	01d00534 	movhi	r7,16404
 20070bc:	8009883a 	mov	r4,r16
 20070c0:	200258c0 	call	200258c <__muldf3>
 20070c4:	900d883a 	mov	r6,r18
 20070c8:	980f883a 	mov	r7,r19
 20070cc:	1009883a 	mov	r4,r2
 20070d0:	180b883a 	mov	r5,r3
 20070d4:	20023bc0 	call	20023bc <__gedf2>
 20070d8:	002b883a 	mov	r21,zero
 20070dc:	0023883a 	mov	r17,zero
 20070e0:	1000bf16 	blt	r2,zero,20073e0 <_dtoa_r+0x1060>
 20070e4:	d9802217 	ldw	r6,136(sp)
 20070e8:	ddc00717 	ldw	r23,28(sp)
 20070ec:	018c303a 	nor	r6,zero,r6
 20070f0:	d9800515 	stw	r6,20(sp)
 20070f4:	a80b883a 	mov	r5,r21
 20070f8:	e009883a 	mov	r4,fp
 20070fc:	2009ae00 	call	2009ae0 <_Bfree>
 2007100:	883e4926 	beq	r17,zero,2006a28 <_dtoa_r+0x6a8>
 2007104:	003fad06 	br	2006fbc <_dtoa_r+0xc3c>
 2007108:	d9c01117 	ldw	r7,68(sp)
 200710c:	3801bc26 	beq	r7,zero,2007800 <_dtoa_r+0x1480>
 2007110:	10810cc4 	addi	r2,r2,1075
 2007114:	dd400a17 	ldw	r21,40(sp)
 2007118:	dd000817 	ldw	r20,32(sp)
 200711c:	003f0a06 	br	2006d48 <_dtoa_r+0x9c8>
 2007120:	00800704 	movi	r2,28
 2007124:	d9000817 	ldw	r4,32(sp)
 2007128:	a0a9883a 	add	r20,r20,r2
 200712c:	b0ad883a 	add	r22,r22,r2
 2007130:	2089883a 	add	r4,r4,r2
 2007134:	d9000815 	stw	r4,32(sp)
 2007138:	003f5106 	br	2006e80 <_dtoa_r+0xb00>
 200713c:	d8c00317 	ldw	r3,12(sp)
 2007140:	b8c1fc0e 	bge	r23,r3,2007934 <_dtoa_r+0x15b4>
 2007144:	0027883a 	mov	r19,zero
 2007148:	b805883a 	mov	r2,r23
 200714c:	003f3e06 	br	2006e48 <_dtoa_r+0xac8>
 2007150:	880b883a 	mov	r5,r17
 2007154:	e009883a 	mov	r4,fp
 2007158:	000f883a 	mov	r7,zero
 200715c:	01800284 	movi	r6,10
 2007160:	2009b080 	call	2009b08 <__multadd>
 2007164:	d9000c17 	ldw	r4,48(sp)
 2007168:	1023883a 	mov	r17,r2
 200716c:	0102040e 	bge	zero,r4,2007980 <_dtoa_r+0x1600>
 2007170:	d9000615 	stw	r4,24(sp)
 2007174:	0500050e 	bge	zero,r20,200718c <_dtoa_r+0xe0c>
 2007178:	880b883a 	mov	r5,r17
 200717c:	a00d883a 	mov	r6,r20
 2007180:	e009883a 	mov	r4,fp
 2007184:	200a2740 	call	200a274 <__lshift>
 2007188:	1023883a 	mov	r17,r2
 200718c:	9801241e 	bne	r19,zero,2007620 <_dtoa_r+0x12a0>
 2007190:	8829883a 	mov	r20,r17
 2007194:	d9000617 	ldw	r4,24(sp)
 2007198:	dcc00717 	ldw	r19,28(sp)
 200719c:	9480004c 	andi	r18,r18,1
 20071a0:	20bfffc4 	addi	r2,r4,-1
 20071a4:	9885883a 	add	r2,r19,r2
 20071a8:	d8800415 	stw	r2,16(sp)
 20071ac:	dc800615 	stw	r18,24(sp)
 20071b0:	a80b883a 	mov	r5,r21
 20071b4:	8009883a 	mov	r4,r16
 20071b8:	20061580 	call	2006158 <quorem>
 20071bc:	880b883a 	mov	r5,r17
 20071c0:	8009883a 	mov	r4,r16
 20071c4:	102f883a 	mov	r23,r2
 20071c8:	200a3bc0 	call	200a3bc <__mcmp>
 20071cc:	a80b883a 	mov	r5,r21
 20071d0:	a00d883a 	mov	r6,r20
 20071d4:	e009883a 	mov	r4,fp
 20071d8:	102d883a 	mov	r22,r2
 20071dc:	200a41c0 	call	200a41c <__mdiff>
 20071e0:	1007883a 	mov	r3,r2
 20071e4:	10800317 	ldw	r2,12(r2)
 20071e8:	bc800c04 	addi	r18,r23,48
 20071ec:	180b883a 	mov	r5,r3
 20071f0:	10004e1e 	bne	r2,zero,200732c <_dtoa_r+0xfac>
 20071f4:	8009883a 	mov	r4,r16
 20071f8:	d8c01615 	stw	r3,88(sp)
 20071fc:	200a3bc0 	call	200a3bc <__mcmp>
 2007200:	d8c01617 	ldw	r3,88(sp)
 2007204:	e009883a 	mov	r4,fp
 2007208:	d8801615 	stw	r2,88(sp)
 200720c:	180b883a 	mov	r5,r3
 2007210:	2009ae00 	call	2009ae0 <_Bfree>
 2007214:	d8801617 	ldw	r2,88(sp)
 2007218:	1000041e 	bne	r2,zero,200722c <_dtoa_r+0xeac>
 200721c:	d9800317 	ldw	r6,12(sp)
 2007220:	3000021e 	bne	r6,zero,200722c <_dtoa_r+0xeac>
 2007224:	d8c00617 	ldw	r3,24(sp)
 2007228:	18003726 	beq	r3,zero,2007308 <_dtoa_r+0xf88>
 200722c:	b0002016 	blt	r22,zero,20072b0 <_dtoa_r+0xf30>
 2007230:	b000041e 	bne	r22,zero,2007244 <_dtoa_r+0xec4>
 2007234:	d9000317 	ldw	r4,12(sp)
 2007238:	2000021e 	bne	r4,zero,2007244 <_dtoa_r+0xec4>
 200723c:	d8c00617 	ldw	r3,24(sp)
 2007240:	18001b26 	beq	r3,zero,20072b0 <_dtoa_r+0xf30>
 2007244:	00810716 	blt	zero,r2,2007664 <_dtoa_r+0x12e4>
 2007248:	d8c00417 	ldw	r3,16(sp)
 200724c:	9d800044 	addi	r22,r19,1
 2007250:	9c800005 	stb	r18,0(r19)
 2007254:	b02f883a 	mov	r23,r22
 2007258:	98c10626 	beq	r19,r3,2007674 <_dtoa_r+0x12f4>
 200725c:	800b883a 	mov	r5,r16
 2007260:	000f883a 	mov	r7,zero
 2007264:	01800284 	movi	r6,10
 2007268:	e009883a 	mov	r4,fp
 200726c:	2009b080 	call	2009b08 <__multadd>
 2007270:	1021883a 	mov	r16,r2
 2007274:	000f883a 	mov	r7,zero
 2007278:	01800284 	movi	r6,10
 200727c:	880b883a 	mov	r5,r17
 2007280:	e009883a 	mov	r4,fp
 2007284:	8d002526 	beq	r17,r20,200731c <_dtoa_r+0xf9c>
 2007288:	2009b080 	call	2009b08 <__multadd>
 200728c:	a00b883a 	mov	r5,r20
 2007290:	000f883a 	mov	r7,zero
 2007294:	01800284 	movi	r6,10
 2007298:	e009883a 	mov	r4,fp
 200729c:	1023883a 	mov	r17,r2
 20072a0:	2009b080 	call	2009b08 <__multadd>
 20072a4:	1029883a 	mov	r20,r2
 20072a8:	b027883a 	mov	r19,r22
 20072ac:	003fc006 	br	20071b0 <_dtoa_r+0xe30>
 20072b0:	9011883a 	mov	r8,r18
 20072b4:	00800e0e 	bge	zero,r2,20072f0 <_dtoa_r+0xf70>
 20072b8:	800b883a 	mov	r5,r16
 20072bc:	01800044 	movi	r6,1
 20072c0:	e009883a 	mov	r4,fp
 20072c4:	da001715 	stw	r8,92(sp)
 20072c8:	200a2740 	call	200a274 <__lshift>
 20072cc:	a80b883a 	mov	r5,r21
 20072d0:	1009883a 	mov	r4,r2
 20072d4:	1021883a 	mov	r16,r2
 20072d8:	200a3bc0 	call	200a3bc <__mcmp>
 20072dc:	da001717 	ldw	r8,92(sp)
 20072e0:	0081960e 	bge	zero,r2,200793c <_dtoa_r+0x15bc>
 20072e4:	00800e44 	movi	r2,57
 20072e8:	40817026 	beq	r8,r2,20078ac <_dtoa_r+0x152c>
 20072ec:	ba000c44 	addi	r8,r23,49
 20072f0:	8825883a 	mov	r18,r17
 20072f4:	9dc00044 	addi	r23,r19,1
 20072f8:	9a000005 	stb	r8,0(r19)
 20072fc:	a023883a 	mov	r17,r20
 2007300:	dc000915 	stw	r16,36(sp)
 2007304:	003f2406 	br	2006f98 <_dtoa_r+0xc18>
 2007308:	00800e44 	movi	r2,57
 200730c:	9011883a 	mov	r8,r18
 2007310:	90816626 	beq	r18,r2,20078ac <_dtoa_r+0x152c>
 2007314:	05bff516 	blt	zero,r22,20072ec <_dtoa_r+0xf6c>
 2007318:	003ff506 	br	20072f0 <_dtoa_r+0xf70>
 200731c:	2009b080 	call	2009b08 <__multadd>
 2007320:	1023883a 	mov	r17,r2
 2007324:	1029883a 	mov	r20,r2
 2007328:	003fdf06 	br	20072a8 <_dtoa_r+0xf28>
 200732c:	e009883a 	mov	r4,fp
 2007330:	2009ae00 	call	2009ae0 <_Bfree>
 2007334:	00800044 	movi	r2,1
 2007338:	003fbc06 	br	200722c <_dtoa_r+0xeac>
 200733c:	a80b883a 	mov	r5,r21
 2007340:	8009883a 	mov	r4,r16
 2007344:	200a3bc0 	call	200a3bc <__mcmp>
 2007348:	103edb0e 	bge	r2,zero,2006eb8 <_dtoa_r+0xb38>
 200734c:	800b883a 	mov	r5,r16
 2007350:	000f883a 	mov	r7,zero
 2007354:	01800284 	movi	r6,10
 2007358:	e009883a 	mov	r4,fp
 200735c:	2009b080 	call	2009b08 <__multadd>
 2007360:	1021883a 	mov	r16,r2
 2007364:	d8800517 	ldw	r2,20(sp)
 2007368:	d8c00b17 	ldw	r3,44(sp)
 200736c:	10bfffc4 	addi	r2,r2,-1
 2007370:	d8800515 	stw	r2,20(sp)
 2007374:	183f761e 	bne	r3,zero,2007150 <_dtoa_r+0xdd0>
 2007378:	d9000c17 	ldw	r4,48(sp)
 200737c:	0101730e 	bge	zero,r4,200794c <_dtoa_r+0x15cc>
 2007380:	d9000615 	stw	r4,24(sp)
 2007384:	003ed006 	br	2006ec8 <_dtoa_r+0xb48>
 2007388:	00800084 	movi	r2,2
 200738c:	3081861e 	bne	r6,r2,20079a8 <_dtoa_r+0x1628>
 2007390:	d8000b15 	stw	zero,44(sp)
 2007394:	003f3c06 	br	2007088 <_dtoa_r+0xd08>
 2007398:	dc000917 	ldw	r16,36(sp)
 200739c:	003e9206 	br	2006de8 <_dtoa_r+0xa68>
 20073a0:	d9c00317 	ldw	r7,12(sp)
 20073a4:	00800084 	movi	r2,2
 20073a8:	11fec50e 	bge	r2,r7,2006ec0 <_dtoa_r+0xb40>
 20073ac:	d9000617 	ldw	r4,24(sp)
 20073b0:	20013c1e 	bne	r4,zero,20078a4 <_dtoa_r+0x1524>
 20073b4:	a80b883a 	mov	r5,r21
 20073b8:	000f883a 	mov	r7,zero
 20073bc:	01800144 	movi	r6,5
 20073c0:	e009883a 	mov	r4,fp
 20073c4:	2009b080 	call	2009b08 <__multadd>
 20073c8:	100b883a 	mov	r5,r2
 20073cc:	8009883a 	mov	r4,r16
 20073d0:	102b883a 	mov	r21,r2
 20073d4:	200a3bc0 	call	200a3bc <__mcmp>
 20073d8:	dc000915 	stw	r16,36(sp)
 20073dc:	00bf410e 	bge	zero,r2,20070e4 <_dtoa_r+0xd64>
 20073e0:	d9c00717 	ldw	r7,28(sp)
 20073e4:	00800c44 	movi	r2,49
 20073e8:	38800005 	stb	r2,0(r7)
 20073ec:	d8800517 	ldw	r2,20(sp)
 20073f0:	3dc00044 	addi	r23,r7,1
 20073f4:	10800044 	addi	r2,r2,1
 20073f8:	d8800515 	stw	r2,20(sp)
 20073fc:	003f3d06 	br	20070f4 <_dtoa_r+0xd74>
 2007400:	d9800517 	ldw	r6,20(sp)
 2007404:	d9c00717 	ldw	r7,28(sp)
 2007408:	00800c44 	movi	r2,49
 200740c:	31800044 	addi	r6,r6,1
 2007410:	d9800515 	stw	r6,20(sp)
 2007414:	38800005 	stb	r2,0(r7)
 2007418:	003edf06 	br	2006f98 <_dtoa_r+0xc18>
 200741c:	d8000b15 	stw	zero,44(sp)
 2007420:	003c9f06 	br	20066a0 <_dtoa_r+0x320>
 2007424:	903e7e1e 	bne	r18,zero,2006e20 <_dtoa_r+0xaa0>
 2007428:	00800434 	movhi	r2,16
 200742c:	10bfffc4 	addi	r2,r2,-1
 2007430:	9884703a 	and	r2,r19,r2
 2007434:	1000ea1e 	bne	r2,zero,20077e0 <_dtoa_r+0x1460>
 2007438:	9cdffc2c 	andhi	r19,r19,32752
 200743c:	9800e826 	beq	r19,zero,20077e0 <_dtoa_r+0x1460>
 2007440:	d9c00817 	ldw	r7,32(sp)
 2007444:	b5800044 	addi	r22,r22,1
 2007448:	04c00044 	movi	r19,1
 200744c:	39c00044 	addi	r7,r7,1
 2007450:	d9c00815 	stw	r7,32(sp)
 2007454:	d8800d17 	ldw	r2,52(sp)
 2007458:	103e721e 	bne	r2,zero,2006e24 <_dtoa_r+0xaa4>
 200745c:	00800044 	movi	r2,1
 2007460:	003e7906 	br	2006e48 <_dtoa_r+0xac8>
 2007464:	8009883a 	mov	r4,r16
 2007468:	20037740 	call	2003774 <__floatsidf>
 200746c:	d9800f17 	ldw	r6,60(sp)
 2007470:	d9c01017 	ldw	r7,64(sp)
 2007474:	1009883a 	mov	r4,r2
 2007478:	180b883a 	mov	r5,r3
 200747c:	200258c0 	call	200258c <__muldf3>
 2007480:	000d883a 	mov	r6,zero
 2007484:	01d00734 	movhi	r7,16412
 2007488:	1009883a 	mov	r4,r2
 200748c:	180b883a 	mov	r5,r3
 2007490:	20011400 	call	2001140 <__adddf3>
 2007494:	047f3034 	movhi	r17,64704
 2007498:	1021883a 	mov	r16,r2
 200749c:	1c63883a 	add	r17,r3,r17
 20074a0:	d9000f17 	ldw	r4,60(sp)
 20074a4:	d9401017 	ldw	r5,64(sp)
 20074a8:	000d883a 	mov	r6,zero
 20074ac:	01d00534 	movhi	r7,16404
 20074b0:	2002df80 	call	2002df8 <__subdf3>
 20074b4:	800d883a 	mov	r6,r16
 20074b8:	880f883a 	mov	r7,r17
 20074bc:	1009883a 	mov	r4,r2
 20074c0:	180b883a 	mov	r5,r3
 20074c4:	102b883a 	mov	r21,r2
 20074c8:	1829883a 	mov	r20,r3
 20074cc:	20023bc0 	call	20023bc <__gedf2>
 20074d0:	00806c16 	blt	zero,r2,2007684 <_dtoa_r+0x1304>
 20074d4:	89e0003c 	xorhi	r7,r17,32768
 20074d8:	800d883a 	mov	r6,r16
 20074dc:	a809883a 	mov	r4,r21
 20074e0:	a00b883a 	mov	r5,r20
 20074e4:	20024980 	call	2002498 <__ledf2>
 20074e8:	103d7e0e 	bge	r2,zero,2006ae4 <_dtoa_r+0x764>
 20074ec:	002b883a 	mov	r21,zero
 20074f0:	0023883a 	mov	r17,zero
 20074f4:	003efb06 	br	20070e4 <_dtoa_r+0xd64>
 20074f8:	d8800717 	ldw	r2,28(sp)
 20074fc:	003bd006 	br	2006440 <_dtoa_r+0xc0>
 2007500:	d9000a17 	ldw	r4,40(sp)
 2007504:	d9800d17 	ldw	r6,52(sp)
 2007508:	dd400a15 	stw	r21,40(sp)
 200750c:	a905c83a 	sub	r2,r21,r4
 2007510:	308d883a 	add	r6,r6,r2
 2007514:	d9800d15 	stw	r6,52(sp)
 2007518:	002b883a 	mov	r21,zero
 200751c:	003e0606 	br	2006d38 <_dtoa_r+0x9b8>
 2007520:	9023883a 	mov	r17,r18
 2007524:	9829883a 	mov	r20,r19
 2007528:	04000084 	movi	r16,2
 200752c:	003c9206 	br	2006778 <_dtoa_r+0x3f8>
 2007530:	04000044 	movi	r16,1
 2007534:	dc000c15 	stw	r16,48(sp)
 2007538:	dc000615 	stw	r16,24(sp)
 200753c:	dc002215 	stw	r16,136(sp)
 2007540:	e0001115 	stw	zero,68(fp)
 2007544:	000b883a 	mov	r5,zero
 2007548:	003c6906 	br	20066f0 <_dtoa_r+0x370>
 200754c:	3021883a 	mov	r16,r6
 2007550:	003ffb06 	br	2007540 <_dtoa_r+0x11c0>
 2007554:	1000021e 	bne	r2,zero,2007560 <_dtoa_r+0x11e0>
 2007558:	4200004c 	andi	r8,r8,1
 200755c:	403e7d1e 	bne	r8,zero,2006f54 <_dtoa_r+0xbd4>
 2007560:	01000c04 	movi	r4,48
 2007564:	00000106 	br	200756c <_dtoa_r+0x11ec>
 2007568:	102f883a 	mov	r23,r2
 200756c:	b8bfffc4 	addi	r2,r23,-1
 2007570:	10c00007 	ldb	r3,0(r2)
 2007574:	193ffc26 	beq	r3,r4,2007568 <_dtoa_r+0x11e8>
 2007578:	003e8706 	br	2006f98 <_dtoa_r+0xc18>
 200757c:	d8800517 	ldw	r2,20(sp)
 2007580:	00a3c83a 	sub	r17,zero,r2
 2007584:	8800a426 	beq	r17,zero,2007818 <_dtoa_r+0x1498>
 2007588:	888003cc 	andi	r2,r17,15
 200758c:	100490fa 	slli	r2,r2,3
 2007590:	00c080b4 	movhi	r3,514
 2007594:	18e57d04 	addi	r3,r3,-27148
 2007598:	1885883a 	add	r2,r3,r2
 200759c:	11800017 	ldw	r6,0(r2)
 20075a0:	11c00117 	ldw	r7,4(r2)
 20075a4:	9009883a 	mov	r4,r18
 20075a8:	980b883a 	mov	r5,r19
 20075ac:	8823d13a 	srai	r17,r17,4
 20075b0:	200258c0 	call	200258c <__muldf3>
 20075b4:	d8800f15 	stw	r2,60(sp)
 20075b8:	d8c01015 	stw	r3,64(sp)
 20075bc:	8800e826 	beq	r17,zero,2007960 <_dtoa_r+0x15e0>
 20075c0:	050080b4 	movhi	r20,514
 20075c4:	a5257304 	addi	r20,r20,-27188
 20075c8:	04000084 	movi	r16,2
 20075cc:	8980004c 	andi	r6,r17,1
 20075d0:	1009883a 	mov	r4,r2
 20075d4:	8823d07a 	srai	r17,r17,1
 20075d8:	180b883a 	mov	r5,r3
 20075dc:	30000426 	beq	r6,zero,20075f0 <_dtoa_r+0x1270>
 20075e0:	a1800017 	ldw	r6,0(r20)
 20075e4:	a1c00117 	ldw	r7,4(r20)
 20075e8:	84000044 	addi	r16,r16,1
 20075ec:	200258c0 	call	200258c <__muldf3>
 20075f0:	a5000204 	addi	r20,r20,8
 20075f4:	883ff51e 	bne	r17,zero,20075cc <_dtoa_r+0x124c>
 20075f8:	d8800f15 	stw	r2,60(sp)
 20075fc:	d8c01015 	stw	r3,64(sp)
 2007600:	003c7606 	br	20067dc <_dtoa_r+0x45c>
 2007604:	00c00c04 	movi	r3,48
 2007608:	10c00005 	stb	r3,0(r2)
 200760c:	d8c00517 	ldw	r3,20(sp)
 2007610:	bd3fffc3 	ldbu	r20,-1(r23)
 2007614:	18c00044 	addi	r3,r3,1
 2007618:	d8c00515 	stw	r3,20(sp)
 200761c:	003db906 	br	2006d04 <_dtoa_r+0x984>
 2007620:	89400117 	ldw	r5,4(r17)
 2007624:	e009883a 	mov	r4,fp
 2007628:	2009a380 	call	2009a38 <_Balloc>
 200762c:	89800417 	ldw	r6,16(r17)
 2007630:	89400304 	addi	r5,r17,12
 2007634:	11000304 	addi	r4,r2,12
 2007638:	31800084 	addi	r6,r6,2
 200763c:	318d883a 	add	r6,r6,r6
 2007640:	318d883a 	add	r6,r6,r6
 2007644:	1027883a 	mov	r19,r2
 2007648:	200966c0 	call	200966c <memcpy>
 200764c:	01800044 	movi	r6,1
 2007650:	980b883a 	mov	r5,r19
 2007654:	e009883a 	mov	r4,fp
 2007658:	200a2740 	call	200a274 <__lshift>
 200765c:	1029883a 	mov	r20,r2
 2007660:	003ecc06 	br	2007194 <_dtoa_r+0xe14>
 2007664:	00800e44 	movi	r2,57
 2007668:	90809026 	beq	r18,r2,20078ac <_dtoa_r+0x152c>
 200766c:	92000044 	addi	r8,r18,1
 2007670:	003f1f06 	br	20072f0 <_dtoa_r+0xf70>
 2007674:	9011883a 	mov	r8,r18
 2007678:	8825883a 	mov	r18,r17
 200767c:	a023883a 	mov	r17,r20
 2007680:	003e2906 	br	2006f28 <_dtoa_r+0xba8>
 2007684:	002b883a 	mov	r21,zero
 2007688:	0023883a 	mov	r17,zero
 200768c:	003f5406 	br	20073e0 <_dtoa_r+0x1060>
 2007690:	61bfffc4 	addi	r6,r12,-1
 2007694:	300490fa 	slli	r2,r6,3
 2007698:	00c080b4 	movhi	r3,514
 200769c:	18e57d04 	addi	r3,r3,-27148
 20076a0:	1885883a 	add	r2,r3,r2
 20076a4:	11000017 	ldw	r4,0(r2)
 20076a8:	11400117 	ldw	r5,4(r2)
 20076ac:	d8800717 	ldw	r2,28(sp)
 20076b0:	880f883a 	mov	r7,r17
 20076b4:	d9801215 	stw	r6,72(sp)
 20076b8:	800d883a 	mov	r6,r16
 20076bc:	db001615 	stw	r12,88(sp)
 20076c0:	15c00044 	addi	r23,r2,1
 20076c4:	200258c0 	call	200258c <__muldf3>
 20076c8:	d9401017 	ldw	r5,64(sp)
 20076cc:	d9000f17 	ldw	r4,60(sp)
 20076d0:	d8c01515 	stw	r3,84(sp)
 20076d4:	d8801415 	stw	r2,80(sp)
 20076d8:	20036f40 	call	20036f4 <__fixdfsi>
 20076dc:	1009883a 	mov	r4,r2
 20076e0:	1021883a 	mov	r16,r2
 20076e4:	20037740 	call	2003774 <__floatsidf>
 20076e8:	d9000f17 	ldw	r4,60(sp)
 20076ec:	d9401017 	ldw	r5,64(sp)
 20076f0:	100d883a 	mov	r6,r2
 20076f4:	180f883a 	mov	r7,r3
 20076f8:	2002df80 	call	2002df8 <__subdf3>
 20076fc:	1829883a 	mov	r20,r3
 2007700:	d8c00717 	ldw	r3,28(sp)
 2007704:	84000c04 	addi	r16,r16,48
 2007708:	1023883a 	mov	r17,r2
 200770c:	1c000005 	stb	r16,0(r3)
 2007710:	db001617 	ldw	r12,88(sp)
 2007714:	00800044 	movi	r2,1
 2007718:	60802226 	beq	r12,r2,20077a4 <_dtoa_r+0x1424>
 200771c:	d9c00717 	ldw	r7,28(sp)
 2007720:	8805883a 	mov	r2,r17
 2007724:	b82b883a 	mov	r21,r23
 2007728:	3b19883a 	add	r12,r7,r12
 200772c:	6023883a 	mov	r17,r12
 2007730:	a007883a 	mov	r3,r20
 2007734:	dc800f15 	stw	r18,60(sp)
 2007738:	000d883a 	mov	r6,zero
 200773c:	01d00934 	movhi	r7,16420
 2007740:	1009883a 	mov	r4,r2
 2007744:	180b883a 	mov	r5,r3
 2007748:	200258c0 	call	200258c <__muldf3>
 200774c:	180b883a 	mov	r5,r3
 2007750:	1009883a 	mov	r4,r2
 2007754:	1829883a 	mov	r20,r3
 2007758:	1025883a 	mov	r18,r2
 200775c:	20036f40 	call	20036f4 <__fixdfsi>
 2007760:	1009883a 	mov	r4,r2
 2007764:	1021883a 	mov	r16,r2
 2007768:	20037740 	call	2003774 <__floatsidf>
 200776c:	100d883a 	mov	r6,r2
 2007770:	180f883a 	mov	r7,r3
 2007774:	9009883a 	mov	r4,r18
 2007778:	a00b883a 	mov	r5,r20
 200777c:	84000c04 	addi	r16,r16,48
 2007780:	2002df80 	call	2002df8 <__subdf3>
 2007784:	ad400044 	addi	r21,r21,1
 2007788:	ac3fffc5 	stb	r16,-1(r21)
 200778c:	ac7fea1e 	bne	r21,r17,2007738 <_dtoa_r+0x13b8>
 2007790:	1023883a 	mov	r17,r2
 2007794:	d8801217 	ldw	r2,72(sp)
 2007798:	dc800f17 	ldw	r18,60(sp)
 200779c:	1829883a 	mov	r20,r3
 20077a0:	b8af883a 	add	r23,r23,r2
 20077a4:	d9001417 	ldw	r4,80(sp)
 20077a8:	d9401517 	ldw	r5,84(sp)
 20077ac:	000d883a 	mov	r6,zero
 20077b0:	01cff834 	movhi	r7,16352
 20077b4:	20011400 	call	2001140 <__adddf3>
 20077b8:	880d883a 	mov	r6,r17
 20077bc:	a00f883a 	mov	r7,r20
 20077c0:	1009883a 	mov	r4,r2
 20077c4:	180b883a 	mov	r5,r3
 20077c8:	20024980 	call	2002498 <__ledf2>
 20077cc:	10003e0e 	bge	r2,zero,20078c8 <_dtoa_r+0x1548>
 20077d0:	d9001317 	ldw	r4,76(sp)
 20077d4:	bd3fffc3 	ldbu	r20,-1(r23)
 20077d8:	d9000515 	stw	r4,20(sp)
 20077dc:	003d3b06 	br	2006ccc <_dtoa_r+0x94c>
 20077e0:	0027883a 	mov	r19,zero
 20077e4:	003f1b06 	br	2007454 <_dtoa_r+0x10d4>
 20077e8:	d8800817 	ldw	r2,32(sp)
 20077ec:	11e9c83a 	sub	r20,r2,r7
 20077f0:	0005883a 	mov	r2,zero
 20077f4:	003d5406 	br	2006d48 <_dtoa_r+0x9c8>
 20077f8:	00800044 	movi	r2,1
 20077fc:	003dc706 	br	2006f1c <_dtoa_r+0xb9c>
 2007800:	d8c00217 	ldw	r3,8(sp)
 2007804:	00800d84 	movi	r2,54
 2007808:	dd400a17 	ldw	r21,40(sp)
 200780c:	10c5c83a 	sub	r2,r2,r3
 2007810:	dd000817 	ldw	r20,32(sp)
 2007814:	003d4c06 	br	2006d48 <_dtoa_r+0x9c8>
 2007818:	dc800f15 	stw	r18,60(sp)
 200781c:	dcc01015 	stw	r19,64(sp)
 2007820:	04000084 	movi	r16,2
 2007824:	003bed06 	br	20067dc <_dtoa_r+0x45c>
 2007828:	d9000617 	ldw	r4,24(sp)
 200782c:	203f0d26 	beq	r4,zero,2007464 <_dtoa_r+0x10e4>
 2007830:	d9800c17 	ldw	r6,48(sp)
 2007834:	01bcab0e 	bge	zero,r6,2006ae4 <_dtoa_r+0x764>
 2007838:	d9401017 	ldw	r5,64(sp)
 200783c:	d9000f17 	ldw	r4,60(sp)
 2007840:	000d883a 	mov	r6,zero
 2007844:	01d00934 	movhi	r7,16420
 2007848:	200258c0 	call	200258c <__muldf3>
 200784c:	81000044 	addi	r4,r16,1
 2007850:	d8800f15 	stw	r2,60(sp)
 2007854:	d8c01015 	stw	r3,64(sp)
 2007858:	20037740 	call	2003774 <__floatsidf>
 200785c:	d9800f17 	ldw	r6,60(sp)
 2007860:	d9c01017 	ldw	r7,64(sp)
 2007864:	1009883a 	mov	r4,r2
 2007868:	180b883a 	mov	r5,r3
 200786c:	200258c0 	call	200258c <__muldf3>
 2007870:	01d00734 	movhi	r7,16412
 2007874:	000d883a 	mov	r6,zero
 2007878:	1009883a 	mov	r4,r2
 200787c:	180b883a 	mov	r5,r3
 2007880:	20011400 	call	2001140 <__adddf3>
 2007884:	d9c00517 	ldw	r7,20(sp)
 2007888:	047f3034 	movhi	r17,64704
 200788c:	1021883a 	mov	r16,r2
 2007890:	39ffffc4 	addi	r7,r7,-1
 2007894:	d9c01315 	stw	r7,76(sp)
 2007898:	1c63883a 	add	r17,r3,r17
 200789c:	db000c17 	ldw	r12,48(sp)
 20078a0:	003bea06 	br	200684c <_dtoa_r+0x4cc>
 20078a4:	dc000915 	stw	r16,36(sp)
 20078a8:	003e0e06 	br	20070e4 <_dtoa_r+0xd64>
 20078ac:	01000e44 	movi	r4,57
 20078b0:	8825883a 	mov	r18,r17
 20078b4:	9dc00044 	addi	r23,r19,1
 20078b8:	99000005 	stb	r4,0(r19)
 20078bc:	a023883a 	mov	r17,r20
 20078c0:	dc000915 	stw	r16,36(sp)
 20078c4:	003da406 	br	2006f58 <_dtoa_r+0xbd8>
 20078c8:	d9801417 	ldw	r6,80(sp)
 20078cc:	d9c01517 	ldw	r7,84(sp)
 20078d0:	0009883a 	mov	r4,zero
 20078d4:	014ff834 	movhi	r5,16352
 20078d8:	2002df80 	call	2002df8 <__subdf3>
 20078dc:	880d883a 	mov	r6,r17
 20078e0:	a00f883a 	mov	r7,r20
 20078e4:	1009883a 	mov	r4,r2
 20078e8:	180b883a 	mov	r5,r3
 20078ec:	20023bc0 	call	20023bc <__gedf2>
 20078f0:	00bc7c0e 	bge	zero,r2,2006ae4 <_dtoa_r+0x764>
 20078f4:	01000c04 	movi	r4,48
 20078f8:	00000106 	br	2007900 <_dtoa_r+0x1580>
 20078fc:	102f883a 	mov	r23,r2
 2007900:	b8bfffc4 	addi	r2,r23,-1
 2007904:	10c00007 	ldb	r3,0(r2)
 2007908:	193ffc26 	beq	r3,r4,20078fc <_dtoa_r+0x157c>
 200790c:	d9801317 	ldw	r6,76(sp)
 2007910:	d9800515 	stw	r6,20(sp)
 2007914:	003c4406 	br	2006a28 <_dtoa_r+0x6a8>
 2007918:	d9801317 	ldw	r6,76(sp)
 200791c:	d9800515 	stw	r6,20(sp)
 2007920:	003cea06 	br	2006ccc <_dtoa_r+0x94c>
 2007924:	dd800f17 	ldw	r22,60(sp)
 2007928:	dcc01017 	ldw	r19,64(sp)
 200792c:	dc801217 	ldw	r18,72(sp)
 2007930:	003c6c06 	br	2006ae4 <_dtoa_r+0x764>
 2007934:	903e031e 	bne	r18,zero,2007144 <_dtoa_r+0xdc4>
 2007938:	003ebb06 	br	2007428 <_dtoa_r+0x10a8>
 200793c:	103e6c1e 	bne	r2,zero,20072f0 <_dtoa_r+0xf70>
 2007940:	4080004c 	andi	r2,r8,1
 2007944:	103e6a26 	beq	r2,zero,20072f0 <_dtoa_r+0xf70>
 2007948:	003e6606 	br	20072e4 <_dtoa_r+0xf64>
 200794c:	d8c00317 	ldw	r3,12(sp)
 2007950:	00800084 	movi	r2,2
 2007954:	10c02916 	blt	r2,r3,20079fc <_dtoa_r+0x167c>
 2007958:	d9000c17 	ldw	r4,48(sp)
 200795c:	003e8806 	br	2007380 <_dtoa_r+0x1000>
 2007960:	04000084 	movi	r16,2
 2007964:	003b9d06 	br	20067dc <_dtoa_r+0x45c>
 2007968:	d9001317 	ldw	r4,76(sp)
 200796c:	d9000515 	stw	r4,20(sp)
 2007970:	003cd606 	br	2006ccc <_dtoa_r+0x94c>
 2007974:	d8801317 	ldw	r2,76(sp)
 2007978:	d8800515 	stw	r2,20(sp)
 200797c:	003c2a06 	br	2006a28 <_dtoa_r+0x6a8>
 2007980:	d9800317 	ldw	r6,12(sp)
 2007984:	00800084 	movi	r2,2
 2007988:	11801516 	blt	r2,r6,20079e0 <_dtoa_r+0x1660>
 200798c:	d9c00c17 	ldw	r7,48(sp)
 2007990:	d9c00615 	stw	r7,24(sp)
 2007994:	003df706 	br	2007174 <_dtoa_r+0xdf4>
 2007998:	193d3926 	beq	r3,r4,2006e80 <_dtoa_r+0xb00>
 200799c:	00c00f04 	movi	r3,60
 20079a0:	1885c83a 	sub	r2,r3,r2
 20079a4:	003ddf06 	br	2007124 <_dtoa_r+0xda4>
 20079a8:	e009883a 	mov	r4,fp
 20079ac:	e0001115 	stw	zero,68(fp)
 20079b0:	000b883a 	mov	r5,zero
 20079b4:	2009a380 	call	2009a38 <_Balloc>
 20079b8:	d8800715 	stw	r2,28(sp)
 20079bc:	d8c00717 	ldw	r3,28(sp)
 20079c0:	00bfffc4 	movi	r2,-1
 20079c4:	01000044 	movi	r4,1
 20079c8:	d8800c15 	stw	r2,48(sp)
 20079cc:	e0c01015 	stw	r3,64(fp)
 20079d0:	d9000b15 	stw	r4,44(sp)
 20079d4:	d8800615 	stw	r2,24(sp)
 20079d8:	d8002215 	stw	zero,136(sp)
 20079dc:	003c4106 	br	2006ae4 <_dtoa_r+0x764>
 20079e0:	d8c00c17 	ldw	r3,48(sp)
 20079e4:	d8c00615 	stw	r3,24(sp)
 20079e8:	003e7006 	br	20073ac <_dtoa_r+0x102c>
 20079ec:	04400044 	movi	r17,1
 20079f0:	003b2006 	br	2006674 <_dtoa_r+0x2f4>
 20079f4:	000b883a 	mov	r5,zero
 20079f8:	003b3d06 	br	20066f0 <_dtoa_r+0x370>
 20079fc:	d8800c17 	ldw	r2,48(sp)
 2007a00:	d8800615 	stw	r2,24(sp)
 2007a04:	003e6906 	br	20073ac <_dtoa_r+0x102c>

02007a08 <__sflush_r>:
 2007a08:	2880030b 	ldhu	r2,12(r5)
 2007a0c:	defffb04 	addi	sp,sp,-20
 2007a10:	dcc00315 	stw	r19,12(sp)
 2007a14:	dc400115 	stw	r17,4(sp)
 2007a18:	dfc00415 	stw	ra,16(sp)
 2007a1c:	dc800215 	stw	r18,8(sp)
 2007a20:	dc000015 	stw	r16,0(sp)
 2007a24:	10c0020c 	andi	r3,r2,8
 2007a28:	2823883a 	mov	r17,r5
 2007a2c:	2027883a 	mov	r19,r4
 2007a30:	1800311e 	bne	r3,zero,2007af8 <__sflush_r+0xf0>
 2007a34:	28c00117 	ldw	r3,4(r5)
 2007a38:	10820014 	ori	r2,r2,2048
 2007a3c:	2880030d 	sth	r2,12(r5)
 2007a40:	00c04b0e 	bge	zero,r3,2007b70 <__sflush_r+0x168>
 2007a44:	8a000a17 	ldw	r8,40(r17)
 2007a48:	40002326 	beq	r8,zero,2007ad8 <__sflush_r+0xd0>
 2007a4c:	9c000017 	ldw	r16,0(r19)
 2007a50:	10c4000c 	andi	r3,r2,4096
 2007a54:	98000015 	stw	zero,0(r19)
 2007a58:	18004826 	beq	r3,zero,2007b7c <__sflush_r+0x174>
 2007a5c:	89801417 	ldw	r6,80(r17)
 2007a60:	10c0010c 	andi	r3,r2,4
 2007a64:	18000626 	beq	r3,zero,2007a80 <__sflush_r+0x78>
 2007a68:	88c00117 	ldw	r3,4(r17)
 2007a6c:	88800c17 	ldw	r2,48(r17)
 2007a70:	30cdc83a 	sub	r6,r6,r3
 2007a74:	10000226 	beq	r2,zero,2007a80 <__sflush_r+0x78>
 2007a78:	88800f17 	ldw	r2,60(r17)
 2007a7c:	308dc83a 	sub	r6,r6,r2
 2007a80:	89400717 	ldw	r5,28(r17)
 2007a84:	000f883a 	mov	r7,zero
 2007a88:	9809883a 	mov	r4,r19
 2007a8c:	403ee83a 	callr	r8
 2007a90:	00ffffc4 	movi	r3,-1
 2007a94:	10c04426 	beq	r2,r3,2007ba8 <__sflush_r+0x1a0>
 2007a98:	88c0030b 	ldhu	r3,12(r17)
 2007a9c:	89000417 	ldw	r4,16(r17)
 2007aa0:	88000115 	stw	zero,4(r17)
 2007aa4:	197dffcc 	andi	r5,r3,63487
 2007aa8:	8940030d 	sth	r5,12(r17)
 2007aac:	89000015 	stw	r4,0(r17)
 2007ab0:	18c4000c 	andi	r3,r3,4096
 2007ab4:	18002c1e 	bne	r3,zero,2007b68 <__sflush_r+0x160>
 2007ab8:	89400c17 	ldw	r5,48(r17)
 2007abc:	9c000015 	stw	r16,0(r19)
 2007ac0:	28000526 	beq	r5,zero,2007ad8 <__sflush_r+0xd0>
 2007ac4:	88801004 	addi	r2,r17,64
 2007ac8:	28800226 	beq	r5,r2,2007ad4 <__sflush_r+0xcc>
 2007acc:	9809883a 	mov	r4,r19
 2007ad0:	20081840 	call	2008184 <_free_r>
 2007ad4:	88000c15 	stw	zero,48(r17)
 2007ad8:	0005883a 	mov	r2,zero
 2007adc:	dfc00417 	ldw	ra,16(sp)
 2007ae0:	dcc00317 	ldw	r19,12(sp)
 2007ae4:	dc800217 	ldw	r18,8(sp)
 2007ae8:	dc400117 	ldw	r17,4(sp)
 2007aec:	dc000017 	ldw	r16,0(sp)
 2007af0:	dec00504 	addi	sp,sp,20
 2007af4:	f800283a 	ret
 2007af8:	2c800417 	ldw	r18,16(r5)
 2007afc:	903ff626 	beq	r18,zero,2007ad8 <__sflush_r+0xd0>
 2007b00:	2c000017 	ldw	r16,0(r5)
 2007b04:	108000cc 	andi	r2,r2,3
 2007b08:	2c800015 	stw	r18,0(r5)
 2007b0c:	84a1c83a 	sub	r16,r16,r18
 2007b10:	1000131e 	bne	r2,zero,2007b60 <__sflush_r+0x158>
 2007b14:	28800517 	ldw	r2,20(r5)
 2007b18:	88800215 	stw	r2,8(r17)
 2007b1c:	04000316 	blt	zero,r16,2007b2c <__sflush_r+0x124>
 2007b20:	003fed06 	br	2007ad8 <__sflush_r+0xd0>
 2007b24:	90a5883a 	add	r18,r18,r2
 2007b28:	043feb0e 	bge	zero,r16,2007ad8 <__sflush_r+0xd0>
 2007b2c:	88800917 	ldw	r2,36(r17)
 2007b30:	89400717 	ldw	r5,28(r17)
 2007b34:	800f883a 	mov	r7,r16
 2007b38:	900d883a 	mov	r6,r18
 2007b3c:	9809883a 	mov	r4,r19
 2007b40:	103ee83a 	callr	r2
 2007b44:	80a1c83a 	sub	r16,r16,r2
 2007b48:	00bff616 	blt	zero,r2,2007b24 <__sflush_r+0x11c>
 2007b4c:	88c0030b 	ldhu	r3,12(r17)
 2007b50:	00bfffc4 	movi	r2,-1
 2007b54:	18c01014 	ori	r3,r3,64
 2007b58:	88c0030d 	sth	r3,12(r17)
 2007b5c:	003fdf06 	br	2007adc <__sflush_r+0xd4>
 2007b60:	0005883a 	mov	r2,zero
 2007b64:	003fec06 	br	2007b18 <__sflush_r+0x110>
 2007b68:	88801415 	stw	r2,80(r17)
 2007b6c:	003fd206 	br	2007ab8 <__sflush_r+0xb0>
 2007b70:	28c00f17 	ldw	r3,60(r5)
 2007b74:	00ffb316 	blt	zero,r3,2007a44 <__sflush_r+0x3c>
 2007b78:	003fd706 	br	2007ad8 <__sflush_r+0xd0>
 2007b7c:	89400717 	ldw	r5,28(r17)
 2007b80:	000d883a 	mov	r6,zero
 2007b84:	01c00044 	movi	r7,1
 2007b88:	9809883a 	mov	r4,r19
 2007b8c:	403ee83a 	callr	r8
 2007b90:	100d883a 	mov	r6,r2
 2007b94:	00bfffc4 	movi	r2,-1
 2007b98:	30801426 	beq	r6,r2,2007bec <__sflush_r+0x1e4>
 2007b9c:	8880030b 	ldhu	r2,12(r17)
 2007ba0:	8a000a17 	ldw	r8,40(r17)
 2007ba4:	003fae06 	br	2007a60 <__sflush_r+0x58>
 2007ba8:	98c00017 	ldw	r3,0(r19)
 2007bac:	183fba26 	beq	r3,zero,2007a98 <__sflush_r+0x90>
 2007bb0:	01000744 	movi	r4,29
 2007bb4:	19000626 	beq	r3,r4,2007bd0 <__sflush_r+0x1c8>
 2007bb8:	01000584 	movi	r4,22
 2007bbc:	19000426 	beq	r3,r4,2007bd0 <__sflush_r+0x1c8>
 2007bc0:	88c0030b 	ldhu	r3,12(r17)
 2007bc4:	18c01014 	ori	r3,r3,64
 2007bc8:	88c0030d 	sth	r3,12(r17)
 2007bcc:	003fc306 	br	2007adc <__sflush_r+0xd4>
 2007bd0:	8880030b 	ldhu	r2,12(r17)
 2007bd4:	88c00417 	ldw	r3,16(r17)
 2007bd8:	88000115 	stw	zero,4(r17)
 2007bdc:	10bdffcc 	andi	r2,r2,63487
 2007be0:	8880030d 	sth	r2,12(r17)
 2007be4:	88c00015 	stw	r3,0(r17)
 2007be8:	003fb306 	br	2007ab8 <__sflush_r+0xb0>
 2007bec:	98800017 	ldw	r2,0(r19)
 2007bf0:	103fea26 	beq	r2,zero,2007b9c <__sflush_r+0x194>
 2007bf4:	00c00744 	movi	r3,29
 2007bf8:	10c00226 	beq	r2,r3,2007c04 <__sflush_r+0x1fc>
 2007bfc:	00c00584 	movi	r3,22
 2007c00:	10c0031e 	bne	r2,r3,2007c10 <__sflush_r+0x208>
 2007c04:	9c000015 	stw	r16,0(r19)
 2007c08:	0005883a 	mov	r2,zero
 2007c0c:	003fb306 	br	2007adc <__sflush_r+0xd4>
 2007c10:	88c0030b 	ldhu	r3,12(r17)
 2007c14:	3005883a 	mov	r2,r6
 2007c18:	18c01014 	ori	r3,r3,64
 2007c1c:	88c0030d 	sth	r3,12(r17)
 2007c20:	003fae06 	br	2007adc <__sflush_r+0xd4>

02007c24 <_fflush_r>:
 2007c24:	defffd04 	addi	sp,sp,-12
 2007c28:	dc000115 	stw	r16,4(sp)
 2007c2c:	dfc00215 	stw	ra,8(sp)
 2007c30:	2021883a 	mov	r16,r4
 2007c34:	20000226 	beq	r4,zero,2007c40 <_fflush_r+0x1c>
 2007c38:	20800e17 	ldw	r2,56(r4)
 2007c3c:	10000c26 	beq	r2,zero,2007c70 <_fflush_r+0x4c>
 2007c40:	2880030f 	ldh	r2,12(r5)
 2007c44:	1000051e 	bne	r2,zero,2007c5c <_fflush_r+0x38>
 2007c48:	0005883a 	mov	r2,zero
 2007c4c:	dfc00217 	ldw	ra,8(sp)
 2007c50:	dc000117 	ldw	r16,4(sp)
 2007c54:	dec00304 	addi	sp,sp,12
 2007c58:	f800283a 	ret
 2007c5c:	8009883a 	mov	r4,r16
 2007c60:	dfc00217 	ldw	ra,8(sp)
 2007c64:	dc000117 	ldw	r16,4(sp)
 2007c68:	dec00304 	addi	sp,sp,12
 2007c6c:	2007a081 	jmpi	2007a08 <__sflush_r>
 2007c70:	d9400015 	stw	r5,0(sp)
 2007c74:	20080100 	call	2008010 <__sinit>
 2007c78:	d9400017 	ldw	r5,0(sp)
 2007c7c:	003ff006 	br	2007c40 <_fflush_r+0x1c>

02007c80 <fflush>:
 2007c80:	20000526 	beq	r4,zero,2007c98 <fflush+0x18>
 2007c84:	008080b4 	movhi	r2,514
 2007c88:	10acbb04 	addi	r2,r2,-19732
 2007c8c:	200b883a 	mov	r5,r4
 2007c90:	11000017 	ldw	r4,0(r2)
 2007c94:	2007c241 	jmpi	2007c24 <_fflush_r>
 2007c98:	008080b4 	movhi	r2,514
 2007c9c:	10acba04 	addi	r2,r2,-19736
 2007ca0:	11000017 	ldw	r4,0(r2)
 2007ca4:	01408034 	movhi	r5,512
 2007ca8:	295f0904 	addi	r5,r5,31780
 2007cac:	2008a201 	jmpi	2008a20 <_fwalk_reent>

02007cb0 <__fp_unlock>:
 2007cb0:	0005883a 	mov	r2,zero
 2007cb4:	f800283a 	ret

02007cb8 <_cleanup_r>:
 2007cb8:	01408074 	movhi	r5,513
 2007cbc:	2972d204 	addi	r5,r5,-13496
 2007cc0:	2008a201 	jmpi	2008a20 <_fwalk_reent>

02007cc4 <__sinit.part.1>:
 2007cc4:	defff704 	addi	sp,sp,-36
 2007cc8:	00c08034 	movhi	r3,512
 2007ccc:	dfc00815 	stw	ra,32(sp)
 2007cd0:	ddc00715 	stw	r23,28(sp)
 2007cd4:	dd800615 	stw	r22,24(sp)
 2007cd8:	dd400515 	stw	r21,20(sp)
 2007cdc:	dd000415 	stw	r20,16(sp)
 2007ce0:	dcc00315 	stw	r19,12(sp)
 2007ce4:	dc800215 	stw	r18,8(sp)
 2007ce8:	dc400115 	stw	r17,4(sp)
 2007cec:	dc000015 	stw	r16,0(sp)
 2007cf0:	18df2e04 	addi	r3,r3,31928
 2007cf4:	24000117 	ldw	r16,4(r4)
 2007cf8:	20c00f15 	stw	r3,60(r4)
 2007cfc:	2080bb04 	addi	r2,r4,748
 2007d00:	00c000c4 	movi	r3,3
 2007d04:	20c0b915 	stw	r3,740(r4)
 2007d08:	2080ba15 	stw	r2,744(r4)
 2007d0c:	2000b815 	stw	zero,736(r4)
 2007d10:	05c00204 	movi	r23,8
 2007d14:	00800104 	movi	r2,4
 2007d18:	2025883a 	mov	r18,r4
 2007d1c:	b80d883a 	mov	r6,r23
 2007d20:	81001704 	addi	r4,r16,92
 2007d24:	000b883a 	mov	r5,zero
 2007d28:	80000015 	stw	zero,0(r16)
 2007d2c:	80000115 	stw	zero,4(r16)
 2007d30:	80000215 	stw	zero,8(r16)
 2007d34:	8080030d 	sth	r2,12(r16)
 2007d38:	80001915 	stw	zero,100(r16)
 2007d3c:	8000038d 	sth	zero,14(r16)
 2007d40:	80000415 	stw	zero,16(r16)
 2007d44:	80000515 	stw	zero,20(r16)
 2007d48:	80000615 	stw	zero,24(r16)
 2007d4c:	20099100 	call	2009910 <memset>
 2007d50:	05808074 	movhi	r22,513
 2007d54:	94400217 	ldw	r17,8(r18)
 2007d58:	05408074 	movhi	r21,513
 2007d5c:	05008074 	movhi	r20,513
 2007d60:	04c08074 	movhi	r19,513
 2007d64:	b5ac2a04 	addi	r22,r22,-20312
 2007d68:	ad6c4104 	addi	r21,r21,-20220
 2007d6c:	a52c6004 	addi	r20,r20,-20096
 2007d70:	9cec7704 	addi	r19,r19,-20004
 2007d74:	85800815 	stw	r22,32(r16)
 2007d78:	85400915 	stw	r21,36(r16)
 2007d7c:	85000a15 	stw	r20,40(r16)
 2007d80:	84c00b15 	stw	r19,44(r16)
 2007d84:	84000715 	stw	r16,28(r16)
 2007d88:	00800284 	movi	r2,10
 2007d8c:	8880030d 	sth	r2,12(r17)
 2007d90:	00800044 	movi	r2,1
 2007d94:	b80d883a 	mov	r6,r23
 2007d98:	89001704 	addi	r4,r17,92
 2007d9c:	000b883a 	mov	r5,zero
 2007da0:	88000015 	stw	zero,0(r17)
 2007da4:	88000115 	stw	zero,4(r17)
 2007da8:	88000215 	stw	zero,8(r17)
 2007dac:	88001915 	stw	zero,100(r17)
 2007db0:	8880038d 	sth	r2,14(r17)
 2007db4:	88000415 	stw	zero,16(r17)
 2007db8:	88000515 	stw	zero,20(r17)
 2007dbc:	88000615 	stw	zero,24(r17)
 2007dc0:	20099100 	call	2009910 <memset>
 2007dc4:	94000317 	ldw	r16,12(r18)
 2007dc8:	00800484 	movi	r2,18
 2007dcc:	8c400715 	stw	r17,28(r17)
 2007dd0:	8d800815 	stw	r22,32(r17)
 2007dd4:	8d400915 	stw	r21,36(r17)
 2007dd8:	8d000a15 	stw	r20,40(r17)
 2007ddc:	8cc00b15 	stw	r19,44(r17)
 2007de0:	8080030d 	sth	r2,12(r16)
 2007de4:	00800084 	movi	r2,2
 2007de8:	80000015 	stw	zero,0(r16)
 2007dec:	80000115 	stw	zero,4(r16)
 2007df0:	80000215 	stw	zero,8(r16)
 2007df4:	80001915 	stw	zero,100(r16)
 2007df8:	8080038d 	sth	r2,14(r16)
 2007dfc:	80000415 	stw	zero,16(r16)
 2007e00:	80000515 	stw	zero,20(r16)
 2007e04:	80000615 	stw	zero,24(r16)
 2007e08:	b80d883a 	mov	r6,r23
 2007e0c:	000b883a 	mov	r5,zero
 2007e10:	81001704 	addi	r4,r16,92
 2007e14:	20099100 	call	2009910 <memset>
 2007e18:	00800044 	movi	r2,1
 2007e1c:	84000715 	stw	r16,28(r16)
 2007e20:	85800815 	stw	r22,32(r16)
 2007e24:	85400915 	stw	r21,36(r16)
 2007e28:	85000a15 	stw	r20,40(r16)
 2007e2c:	84c00b15 	stw	r19,44(r16)
 2007e30:	90800e15 	stw	r2,56(r18)
 2007e34:	dfc00817 	ldw	ra,32(sp)
 2007e38:	ddc00717 	ldw	r23,28(sp)
 2007e3c:	dd800617 	ldw	r22,24(sp)
 2007e40:	dd400517 	ldw	r21,20(sp)
 2007e44:	dd000417 	ldw	r20,16(sp)
 2007e48:	dcc00317 	ldw	r19,12(sp)
 2007e4c:	dc800217 	ldw	r18,8(sp)
 2007e50:	dc400117 	ldw	r17,4(sp)
 2007e54:	dc000017 	ldw	r16,0(sp)
 2007e58:	dec00904 	addi	sp,sp,36
 2007e5c:	f800283a 	ret

02007e60 <__fp_lock>:
 2007e60:	0005883a 	mov	r2,zero
 2007e64:	f800283a 	ret

02007e68 <__sfmoreglue>:
 2007e68:	defffc04 	addi	sp,sp,-16
 2007e6c:	dc800215 	stw	r18,8(sp)
 2007e70:	2825883a 	mov	r18,r5
 2007e74:	dc000015 	stw	r16,0(sp)
 2007e78:	01401a04 	movi	r5,104
 2007e7c:	2021883a 	mov	r16,r4
 2007e80:	913fffc4 	addi	r4,r18,-1
 2007e84:	dfc00315 	stw	ra,12(sp)
 2007e88:	dc400115 	stw	r17,4(sp)
 2007e8c:	20011180 	call	2001118 <__mulsi3>
 2007e90:	8009883a 	mov	r4,r16
 2007e94:	11401d04 	addi	r5,r2,116
 2007e98:	1023883a 	mov	r17,r2
 2007e9c:	2008d7c0 	call	2008d7c <_malloc_r>
 2007ea0:	1021883a 	mov	r16,r2
 2007ea4:	10000726 	beq	r2,zero,2007ec4 <__sfmoreglue+0x5c>
 2007ea8:	11000304 	addi	r4,r2,12
 2007eac:	10000015 	stw	zero,0(r2)
 2007eb0:	14800115 	stw	r18,4(r2)
 2007eb4:	11000215 	stw	r4,8(r2)
 2007eb8:	89801a04 	addi	r6,r17,104
 2007ebc:	000b883a 	mov	r5,zero
 2007ec0:	20099100 	call	2009910 <memset>
 2007ec4:	8005883a 	mov	r2,r16
 2007ec8:	dfc00317 	ldw	ra,12(sp)
 2007ecc:	dc800217 	ldw	r18,8(sp)
 2007ed0:	dc400117 	ldw	r17,4(sp)
 2007ed4:	dc000017 	ldw	r16,0(sp)
 2007ed8:	dec00404 	addi	sp,sp,16
 2007edc:	f800283a 	ret

02007ee0 <__sfp>:
 2007ee0:	defffb04 	addi	sp,sp,-20
 2007ee4:	dc000015 	stw	r16,0(sp)
 2007ee8:	040080b4 	movhi	r16,514
 2007eec:	842cba04 	addi	r16,r16,-19736
 2007ef0:	dcc00315 	stw	r19,12(sp)
 2007ef4:	2027883a 	mov	r19,r4
 2007ef8:	81000017 	ldw	r4,0(r16)
 2007efc:	dfc00415 	stw	ra,16(sp)
 2007f00:	dc800215 	stw	r18,8(sp)
 2007f04:	20800e17 	ldw	r2,56(r4)
 2007f08:	dc400115 	stw	r17,4(sp)
 2007f0c:	1000021e 	bne	r2,zero,2007f18 <__sfp+0x38>
 2007f10:	2007cc40 	call	2007cc4 <__sinit.part.1>
 2007f14:	81000017 	ldw	r4,0(r16)
 2007f18:	2480b804 	addi	r18,r4,736
 2007f1c:	047fffc4 	movi	r17,-1
 2007f20:	91000117 	ldw	r4,4(r18)
 2007f24:	94000217 	ldw	r16,8(r18)
 2007f28:	213fffc4 	addi	r4,r4,-1
 2007f2c:	20000a16 	blt	r4,zero,2007f58 <__sfp+0x78>
 2007f30:	8080030f 	ldh	r2,12(r16)
 2007f34:	10000c26 	beq	r2,zero,2007f68 <__sfp+0x88>
 2007f38:	80c01d04 	addi	r3,r16,116
 2007f3c:	00000206 	br	2007f48 <__sfp+0x68>
 2007f40:	18bfe60f 	ldh	r2,-104(r3)
 2007f44:	10000826 	beq	r2,zero,2007f68 <__sfp+0x88>
 2007f48:	213fffc4 	addi	r4,r4,-1
 2007f4c:	1c3ffd04 	addi	r16,r3,-12
 2007f50:	18c01a04 	addi	r3,r3,104
 2007f54:	247ffa1e 	bne	r4,r17,2007f40 <__sfp+0x60>
 2007f58:	90800017 	ldw	r2,0(r18)
 2007f5c:	10001d26 	beq	r2,zero,2007fd4 <__sfp+0xf4>
 2007f60:	1025883a 	mov	r18,r2
 2007f64:	003fee06 	br	2007f20 <__sfp+0x40>
 2007f68:	00bfffc4 	movi	r2,-1
 2007f6c:	8080038d 	sth	r2,14(r16)
 2007f70:	00800044 	movi	r2,1
 2007f74:	8080030d 	sth	r2,12(r16)
 2007f78:	80001915 	stw	zero,100(r16)
 2007f7c:	80000015 	stw	zero,0(r16)
 2007f80:	80000215 	stw	zero,8(r16)
 2007f84:	80000115 	stw	zero,4(r16)
 2007f88:	80000415 	stw	zero,16(r16)
 2007f8c:	80000515 	stw	zero,20(r16)
 2007f90:	80000615 	stw	zero,24(r16)
 2007f94:	01800204 	movi	r6,8
 2007f98:	000b883a 	mov	r5,zero
 2007f9c:	81001704 	addi	r4,r16,92
 2007fa0:	20099100 	call	2009910 <memset>
 2007fa4:	8005883a 	mov	r2,r16
 2007fa8:	80000c15 	stw	zero,48(r16)
 2007fac:	80000d15 	stw	zero,52(r16)
 2007fb0:	80001115 	stw	zero,68(r16)
 2007fb4:	80001215 	stw	zero,72(r16)
 2007fb8:	dfc00417 	ldw	ra,16(sp)
 2007fbc:	dcc00317 	ldw	r19,12(sp)
 2007fc0:	dc800217 	ldw	r18,8(sp)
 2007fc4:	dc400117 	ldw	r17,4(sp)
 2007fc8:	dc000017 	ldw	r16,0(sp)
 2007fcc:	dec00504 	addi	sp,sp,20
 2007fd0:	f800283a 	ret
 2007fd4:	01400104 	movi	r5,4
 2007fd8:	9809883a 	mov	r4,r19
 2007fdc:	2007e680 	call	2007e68 <__sfmoreglue>
 2007fe0:	90800015 	stw	r2,0(r18)
 2007fe4:	103fde1e 	bne	r2,zero,2007f60 <__sfp+0x80>
 2007fe8:	00800304 	movi	r2,12
 2007fec:	98800015 	stw	r2,0(r19)
 2007ff0:	0005883a 	mov	r2,zero
 2007ff4:	003ff006 	br	2007fb8 <__sfp+0xd8>

02007ff8 <_cleanup>:
 2007ff8:	008080b4 	movhi	r2,514
 2007ffc:	10acba04 	addi	r2,r2,-19736
 2008000:	11000017 	ldw	r4,0(r2)
 2008004:	01408074 	movhi	r5,513
 2008008:	2972d204 	addi	r5,r5,-13496
 200800c:	2008a201 	jmpi	2008a20 <_fwalk_reent>

02008010 <__sinit>:
 2008010:	20800e17 	ldw	r2,56(r4)
 2008014:	10000126 	beq	r2,zero,200801c <__sinit+0xc>
 2008018:	f800283a 	ret
 200801c:	2007cc41 	jmpi	2007cc4 <__sinit.part.1>

02008020 <__sfp_lock_acquire>:
 2008020:	f800283a 	ret

02008024 <__sfp_lock_release>:
 2008024:	f800283a 	ret

02008028 <__sinit_lock_acquire>:
 2008028:	f800283a 	ret

0200802c <__sinit_lock_release>:
 200802c:	f800283a 	ret

02008030 <__fp_lock_all>:
 2008030:	008080b4 	movhi	r2,514
 2008034:	10acbb04 	addi	r2,r2,-19732
 2008038:	11000017 	ldw	r4,0(r2)
 200803c:	01408034 	movhi	r5,512
 2008040:	295f9804 	addi	r5,r5,32352
 2008044:	200895c1 	jmpi	200895c <_fwalk>

02008048 <__fp_unlock_all>:
 2008048:	008080b4 	movhi	r2,514
 200804c:	10acbb04 	addi	r2,r2,-19732
 2008050:	11000017 	ldw	r4,0(r2)
 2008054:	01408034 	movhi	r5,512
 2008058:	295f2c04 	addi	r5,r5,31920
 200805c:	200895c1 	jmpi	200895c <_fwalk>

02008060 <_malloc_trim_r>:
 2008060:	defffb04 	addi	sp,sp,-20
 2008064:	dcc00315 	stw	r19,12(sp)
 2008068:	04c080b4 	movhi	r19,514
 200806c:	dc800215 	stw	r18,8(sp)
 2008070:	dc400115 	stw	r17,4(sp)
 2008074:	dc000015 	stw	r16,0(sp)
 2008078:	dfc00415 	stw	ra,16(sp)
 200807c:	2821883a 	mov	r16,r5
 2008080:	9ce73204 	addi	r19,r19,-25400
 2008084:	2025883a 	mov	r18,r4
 2008088:	200eaa40 	call	200eaa4 <__malloc_lock>
 200808c:	98800217 	ldw	r2,8(r19)
 2008090:	14400117 	ldw	r17,4(r2)
 2008094:	00bfff04 	movi	r2,-4
 2008098:	88a2703a 	and	r17,r17,r2
 200809c:	8c21c83a 	sub	r16,r17,r16
 20080a0:	8403fbc4 	addi	r16,r16,4079
 20080a4:	8020d33a 	srli	r16,r16,12
 20080a8:	0083ffc4 	movi	r2,4095
 20080ac:	843fffc4 	addi	r16,r16,-1
 20080b0:	8020933a 	slli	r16,r16,12
 20080b4:	1400060e 	bge	r2,r16,20080d0 <_malloc_trim_r+0x70>
 20080b8:	000b883a 	mov	r5,zero
 20080bc:	9009883a 	mov	r4,r18
 20080c0:	200b0540 	call	200b054 <_sbrk_r>
 20080c4:	98c00217 	ldw	r3,8(r19)
 20080c8:	1c47883a 	add	r3,r3,r17
 20080cc:	10c00a26 	beq	r2,r3,20080f8 <_malloc_trim_r+0x98>
 20080d0:	9009883a 	mov	r4,r18
 20080d4:	200ebc40 	call	200ebc4 <__malloc_unlock>
 20080d8:	0005883a 	mov	r2,zero
 20080dc:	dfc00417 	ldw	ra,16(sp)
 20080e0:	dcc00317 	ldw	r19,12(sp)
 20080e4:	dc800217 	ldw	r18,8(sp)
 20080e8:	dc400117 	ldw	r17,4(sp)
 20080ec:	dc000017 	ldw	r16,0(sp)
 20080f0:	dec00504 	addi	sp,sp,20
 20080f4:	f800283a 	ret
 20080f8:	040bc83a 	sub	r5,zero,r16
 20080fc:	9009883a 	mov	r4,r18
 2008100:	200b0540 	call	200b054 <_sbrk_r>
 2008104:	00ffffc4 	movi	r3,-1
 2008108:	10c00d26 	beq	r2,r3,2008140 <_malloc_trim_r+0xe0>
 200810c:	00c080b4 	movhi	r3,514
 2008110:	18f3f104 	addi	r3,r3,-12348
 2008114:	18800017 	ldw	r2,0(r3)
 2008118:	99000217 	ldw	r4,8(r19)
 200811c:	8c23c83a 	sub	r17,r17,r16
 2008120:	8c400054 	ori	r17,r17,1
 2008124:	1421c83a 	sub	r16,r2,r16
 2008128:	24400115 	stw	r17,4(r4)
 200812c:	9009883a 	mov	r4,r18
 2008130:	1c000015 	stw	r16,0(r3)
 2008134:	200ebc40 	call	200ebc4 <__malloc_unlock>
 2008138:	00800044 	movi	r2,1
 200813c:	003fe706 	br	20080dc <_malloc_trim_r+0x7c>
 2008140:	000b883a 	mov	r5,zero
 2008144:	9009883a 	mov	r4,r18
 2008148:	200b0540 	call	200b054 <_sbrk_r>
 200814c:	99000217 	ldw	r4,8(r19)
 2008150:	014003c4 	movi	r5,15
 2008154:	1107c83a 	sub	r3,r2,r4
 2008158:	28ffdd0e 	bge	r5,r3,20080d0 <_malloc_trim_r+0x70>
 200815c:	014080b4 	movhi	r5,514
 2008160:	296cbd04 	addi	r5,r5,-19724
 2008164:	29400017 	ldw	r5,0(r5)
 2008168:	18c00054 	ori	r3,r3,1
 200816c:	20c00115 	stw	r3,4(r4)
 2008170:	00c080b4 	movhi	r3,514
 2008174:	1145c83a 	sub	r2,r2,r5
 2008178:	18f3f104 	addi	r3,r3,-12348
 200817c:	18800015 	stw	r2,0(r3)
 2008180:	003fd306 	br	20080d0 <_malloc_trim_r+0x70>

02008184 <_free_r>:
 2008184:	28004126 	beq	r5,zero,200828c <_free_r+0x108>
 2008188:	defffd04 	addi	sp,sp,-12
 200818c:	dc400115 	stw	r17,4(sp)
 2008190:	dc000015 	stw	r16,0(sp)
 2008194:	2023883a 	mov	r17,r4
 2008198:	2821883a 	mov	r16,r5
 200819c:	dfc00215 	stw	ra,8(sp)
 20081a0:	200eaa40 	call	200eaa4 <__malloc_lock>
 20081a4:	81ffff17 	ldw	r7,-4(r16)
 20081a8:	00bfff84 	movi	r2,-2
 20081ac:	010080b4 	movhi	r4,514
 20081b0:	81bffe04 	addi	r6,r16,-8
 20081b4:	3884703a 	and	r2,r7,r2
 20081b8:	21273204 	addi	r4,r4,-25400
 20081bc:	308b883a 	add	r5,r6,r2
 20081c0:	2a400117 	ldw	r9,4(r5)
 20081c4:	22000217 	ldw	r8,8(r4)
 20081c8:	00ffff04 	movi	r3,-4
 20081cc:	48c6703a 	and	r3,r9,r3
 20081d0:	2a005726 	beq	r5,r8,2008330 <_free_r+0x1ac>
 20081d4:	28c00115 	stw	r3,4(r5)
 20081d8:	39c0004c 	andi	r7,r7,1
 20081dc:	3800091e 	bne	r7,zero,2008204 <_free_r+0x80>
 20081e0:	823ffe17 	ldw	r8,-8(r16)
 20081e4:	22400204 	addi	r9,r4,8
 20081e8:	320dc83a 	sub	r6,r6,r8
 20081ec:	31c00217 	ldw	r7,8(r6)
 20081f0:	1205883a 	add	r2,r2,r8
 20081f4:	3a406526 	beq	r7,r9,200838c <_free_r+0x208>
 20081f8:	32000317 	ldw	r8,12(r6)
 20081fc:	3a000315 	stw	r8,12(r7)
 2008200:	41c00215 	stw	r7,8(r8)
 2008204:	28cf883a 	add	r7,r5,r3
 2008208:	39c00117 	ldw	r7,4(r7)
 200820c:	39c0004c 	andi	r7,r7,1
 2008210:	38003a26 	beq	r7,zero,20082fc <_free_r+0x178>
 2008214:	10c00054 	ori	r3,r2,1
 2008218:	30c00115 	stw	r3,4(r6)
 200821c:	3087883a 	add	r3,r6,r2
 2008220:	18800015 	stw	r2,0(r3)
 2008224:	00c07fc4 	movi	r3,511
 2008228:	18801936 	bltu	r3,r2,2008290 <_free_r+0x10c>
 200822c:	1004d0fa 	srli	r2,r2,3
 2008230:	01c00044 	movi	r7,1
 2008234:	21400117 	ldw	r5,4(r4)
 2008238:	10c00044 	addi	r3,r2,1
 200823c:	18c7883a 	add	r3,r3,r3
 2008240:	1005d0ba 	srai	r2,r2,2
 2008244:	18c7883a 	add	r3,r3,r3
 2008248:	18c7883a 	add	r3,r3,r3
 200824c:	1907883a 	add	r3,r3,r4
 2008250:	3884983a 	sll	r2,r7,r2
 2008254:	19c00017 	ldw	r7,0(r3)
 2008258:	1a3ffe04 	addi	r8,r3,-8
 200825c:	1144b03a 	or	r2,r2,r5
 2008260:	32000315 	stw	r8,12(r6)
 2008264:	31c00215 	stw	r7,8(r6)
 2008268:	20800115 	stw	r2,4(r4)
 200826c:	19800015 	stw	r6,0(r3)
 2008270:	39800315 	stw	r6,12(r7)
 2008274:	8809883a 	mov	r4,r17
 2008278:	dfc00217 	ldw	ra,8(sp)
 200827c:	dc400117 	ldw	r17,4(sp)
 2008280:	dc000017 	ldw	r16,0(sp)
 2008284:	dec00304 	addi	sp,sp,12
 2008288:	200ebc41 	jmpi	200ebc4 <__malloc_unlock>
 200828c:	f800283a 	ret
 2008290:	100ad27a 	srli	r5,r2,9
 2008294:	00c00104 	movi	r3,4
 2008298:	19404a36 	bltu	r3,r5,20083c4 <_free_r+0x240>
 200829c:	100ad1ba 	srli	r5,r2,6
 20082a0:	28c00e44 	addi	r3,r5,57
 20082a4:	18c7883a 	add	r3,r3,r3
 20082a8:	29400e04 	addi	r5,r5,56
 20082ac:	18c7883a 	add	r3,r3,r3
 20082b0:	18c7883a 	add	r3,r3,r3
 20082b4:	1909883a 	add	r4,r3,r4
 20082b8:	20c00017 	ldw	r3,0(r4)
 20082bc:	01c080b4 	movhi	r7,514
 20082c0:	213ffe04 	addi	r4,r4,-8
 20082c4:	39e73204 	addi	r7,r7,-25400
 20082c8:	20c04426 	beq	r4,r3,20083dc <_free_r+0x258>
 20082cc:	01ffff04 	movi	r7,-4
 20082d0:	19400117 	ldw	r5,4(r3)
 20082d4:	29ca703a 	and	r5,r5,r7
 20082d8:	1140022e 	bgeu	r2,r5,20082e4 <_free_r+0x160>
 20082dc:	18c00217 	ldw	r3,8(r3)
 20082e0:	20fffb1e 	bne	r4,r3,20082d0 <_free_r+0x14c>
 20082e4:	19000317 	ldw	r4,12(r3)
 20082e8:	31000315 	stw	r4,12(r6)
 20082ec:	30c00215 	stw	r3,8(r6)
 20082f0:	21800215 	stw	r6,8(r4)
 20082f4:	19800315 	stw	r6,12(r3)
 20082f8:	003fde06 	br	2008274 <_free_r+0xf0>
 20082fc:	29c00217 	ldw	r7,8(r5)
 2008300:	10c5883a 	add	r2,r2,r3
 2008304:	00c080b4 	movhi	r3,514
 2008308:	18e73404 	addi	r3,r3,-25392
 200830c:	38c03b26 	beq	r7,r3,20083fc <_free_r+0x278>
 2008310:	2a000317 	ldw	r8,12(r5)
 2008314:	11400054 	ori	r5,r2,1
 2008318:	3087883a 	add	r3,r6,r2
 200831c:	3a000315 	stw	r8,12(r7)
 2008320:	41c00215 	stw	r7,8(r8)
 2008324:	31400115 	stw	r5,4(r6)
 2008328:	18800015 	stw	r2,0(r3)
 200832c:	003fbd06 	br	2008224 <_free_r+0xa0>
 2008330:	39c0004c 	andi	r7,r7,1
 2008334:	10c5883a 	add	r2,r2,r3
 2008338:	3800071e 	bne	r7,zero,2008358 <_free_r+0x1d4>
 200833c:	81fffe17 	ldw	r7,-8(r16)
 2008340:	31cdc83a 	sub	r6,r6,r7
 2008344:	30c00317 	ldw	r3,12(r6)
 2008348:	31400217 	ldw	r5,8(r6)
 200834c:	11c5883a 	add	r2,r2,r7
 2008350:	28c00315 	stw	r3,12(r5)
 2008354:	19400215 	stw	r5,8(r3)
 2008358:	10c00054 	ori	r3,r2,1
 200835c:	30c00115 	stw	r3,4(r6)
 2008360:	00c080b4 	movhi	r3,514
 2008364:	18ecbe04 	addi	r3,r3,-19720
 2008368:	18c00017 	ldw	r3,0(r3)
 200836c:	21800215 	stw	r6,8(r4)
 2008370:	10ffc036 	bltu	r2,r3,2008274 <_free_r+0xf0>
 2008374:	008080b4 	movhi	r2,514
 2008378:	10b3cf04 	addi	r2,r2,-12484
 200837c:	11400017 	ldw	r5,0(r2)
 2008380:	8809883a 	mov	r4,r17
 2008384:	20080600 	call	2008060 <_malloc_trim_r>
 2008388:	003fba06 	br	2008274 <_free_r+0xf0>
 200838c:	28c9883a 	add	r4,r5,r3
 2008390:	21000117 	ldw	r4,4(r4)
 2008394:	2100004c 	andi	r4,r4,1
 2008398:	2000391e 	bne	r4,zero,2008480 <_free_r+0x2fc>
 200839c:	29c00217 	ldw	r7,8(r5)
 20083a0:	29000317 	ldw	r4,12(r5)
 20083a4:	1885883a 	add	r2,r3,r2
 20083a8:	10c00054 	ori	r3,r2,1
 20083ac:	39000315 	stw	r4,12(r7)
 20083b0:	21c00215 	stw	r7,8(r4)
 20083b4:	30c00115 	stw	r3,4(r6)
 20083b8:	308d883a 	add	r6,r6,r2
 20083bc:	30800015 	stw	r2,0(r6)
 20083c0:	003fac06 	br	2008274 <_free_r+0xf0>
 20083c4:	00c00504 	movi	r3,20
 20083c8:	19401536 	bltu	r3,r5,2008420 <_free_r+0x29c>
 20083cc:	28c01704 	addi	r3,r5,92
 20083d0:	18c7883a 	add	r3,r3,r3
 20083d4:	294016c4 	addi	r5,r5,91
 20083d8:	003fb406 	br	20082ac <_free_r+0x128>
 20083dc:	280bd0ba 	srai	r5,r5,2
 20083e0:	00c00044 	movi	r3,1
 20083e4:	38800117 	ldw	r2,4(r7)
 20083e8:	194a983a 	sll	r5,r3,r5
 20083ec:	2007883a 	mov	r3,r4
 20083f0:	2884b03a 	or	r2,r5,r2
 20083f4:	38800115 	stw	r2,4(r7)
 20083f8:	003fbb06 	br	20082e8 <_free_r+0x164>
 20083fc:	21800515 	stw	r6,20(r4)
 2008400:	21800415 	stw	r6,16(r4)
 2008404:	10c00054 	ori	r3,r2,1
 2008408:	31c00315 	stw	r7,12(r6)
 200840c:	31c00215 	stw	r7,8(r6)
 2008410:	30c00115 	stw	r3,4(r6)
 2008414:	308d883a 	add	r6,r6,r2
 2008418:	30800015 	stw	r2,0(r6)
 200841c:	003f9506 	br	2008274 <_free_r+0xf0>
 2008420:	00c01504 	movi	r3,84
 2008424:	19400536 	bltu	r3,r5,200843c <_free_r+0x2b8>
 2008428:	100ad33a 	srli	r5,r2,12
 200842c:	28c01bc4 	addi	r3,r5,111
 2008430:	18c7883a 	add	r3,r3,r3
 2008434:	29401b84 	addi	r5,r5,110
 2008438:	003f9c06 	br	20082ac <_free_r+0x128>
 200843c:	00c05504 	movi	r3,340
 2008440:	19400536 	bltu	r3,r5,2008458 <_free_r+0x2d4>
 2008444:	100ad3fa 	srli	r5,r2,15
 2008448:	28c01e04 	addi	r3,r5,120
 200844c:	18c7883a 	add	r3,r3,r3
 2008450:	29401dc4 	addi	r5,r5,119
 2008454:	003f9506 	br	20082ac <_free_r+0x128>
 2008458:	00c15504 	movi	r3,1364
 200845c:	19400536 	bltu	r3,r5,2008474 <_free_r+0x2f0>
 2008460:	100ad4ba 	srli	r5,r2,18
 2008464:	28c01f44 	addi	r3,r5,125
 2008468:	18c7883a 	add	r3,r3,r3
 200846c:	29401f04 	addi	r5,r5,124
 2008470:	003f8e06 	br	20082ac <_free_r+0x128>
 2008474:	00c03f84 	movi	r3,254
 2008478:	01401f84 	movi	r5,126
 200847c:	003f8b06 	br	20082ac <_free_r+0x128>
 2008480:	10c00054 	ori	r3,r2,1
 2008484:	30c00115 	stw	r3,4(r6)
 2008488:	308d883a 	add	r6,r6,r2
 200848c:	30800015 	stw	r2,0(r6)
 2008490:	003f7806 	br	2008274 <_free_r+0xf0>

02008494 <__sfvwrite_r>:
 2008494:	30800217 	ldw	r2,8(r6)
 2008498:	10006726 	beq	r2,zero,2008638 <__sfvwrite_r+0x1a4>
 200849c:	28c0030b 	ldhu	r3,12(r5)
 20084a0:	defff404 	addi	sp,sp,-48
 20084a4:	dd400715 	stw	r21,28(sp)
 20084a8:	dd000615 	stw	r20,24(sp)
 20084ac:	dc000215 	stw	r16,8(sp)
 20084b0:	dfc00b15 	stw	ra,44(sp)
 20084b4:	df000a15 	stw	fp,40(sp)
 20084b8:	ddc00915 	stw	r23,36(sp)
 20084bc:	dd800815 	stw	r22,32(sp)
 20084c0:	dcc00515 	stw	r19,20(sp)
 20084c4:	dc800415 	stw	r18,16(sp)
 20084c8:	dc400315 	stw	r17,12(sp)
 20084cc:	1880020c 	andi	r2,r3,8
 20084d0:	2821883a 	mov	r16,r5
 20084d4:	202b883a 	mov	r21,r4
 20084d8:	3029883a 	mov	r20,r6
 20084dc:	10002726 	beq	r2,zero,200857c <__sfvwrite_r+0xe8>
 20084e0:	28800417 	ldw	r2,16(r5)
 20084e4:	10002526 	beq	r2,zero,200857c <__sfvwrite_r+0xe8>
 20084e8:	1880008c 	andi	r2,r3,2
 20084ec:	a4400017 	ldw	r17,0(r20)
 20084f0:	10002a26 	beq	r2,zero,200859c <__sfvwrite_r+0x108>
 20084f4:	05a00034 	movhi	r22,32768
 20084f8:	0027883a 	mov	r19,zero
 20084fc:	0025883a 	mov	r18,zero
 2008500:	b5bf0004 	addi	r22,r22,-1024
 2008504:	980d883a 	mov	r6,r19
 2008508:	a809883a 	mov	r4,r21
 200850c:	90004626 	beq	r18,zero,2008628 <__sfvwrite_r+0x194>
 2008510:	900f883a 	mov	r7,r18
 2008514:	b480022e 	bgeu	r22,r18,2008520 <__sfvwrite_r+0x8c>
 2008518:	01e00034 	movhi	r7,32768
 200851c:	39ff0004 	addi	r7,r7,-1024
 2008520:	80800917 	ldw	r2,36(r16)
 2008524:	81400717 	ldw	r5,28(r16)
 2008528:	103ee83a 	callr	r2
 200852c:	00805a0e 	bge	zero,r2,2008698 <__sfvwrite_r+0x204>
 2008530:	a0c00217 	ldw	r3,8(r20)
 2008534:	98a7883a 	add	r19,r19,r2
 2008538:	90a5c83a 	sub	r18,r18,r2
 200853c:	1885c83a 	sub	r2,r3,r2
 2008540:	a0800215 	stw	r2,8(r20)
 2008544:	103fef1e 	bne	r2,zero,2008504 <__sfvwrite_r+0x70>
 2008548:	0005883a 	mov	r2,zero
 200854c:	dfc00b17 	ldw	ra,44(sp)
 2008550:	df000a17 	ldw	fp,40(sp)
 2008554:	ddc00917 	ldw	r23,36(sp)
 2008558:	dd800817 	ldw	r22,32(sp)
 200855c:	dd400717 	ldw	r21,28(sp)
 2008560:	dd000617 	ldw	r20,24(sp)
 2008564:	dcc00517 	ldw	r19,20(sp)
 2008568:	dc800417 	ldw	r18,16(sp)
 200856c:	dc400317 	ldw	r17,12(sp)
 2008570:	dc000217 	ldw	r16,8(sp)
 2008574:	dec00c04 	addi	sp,sp,48
 2008578:	f800283a 	ret
 200857c:	800b883a 	mov	r5,r16
 2008580:	a809883a 	mov	r4,r21
 2008584:	20060040 	call	2006004 <__swsetup_r>
 2008588:	1000ee1e 	bne	r2,zero,2008944 <__sfvwrite_r+0x4b0>
 200858c:	80c0030b 	ldhu	r3,12(r16)
 2008590:	a4400017 	ldw	r17,0(r20)
 2008594:	1880008c 	andi	r2,r3,2
 2008598:	103fd61e 	bne	r2,zero,20084f4 <__sfvwrite_r+0x60>
 200859c:	1880004c 	andi	r2,r3,1
 20085a0:	1000421e 	bne	r2,zero,20086ac <__sfvwrite_r+0x218>
 20085a4:	0039883a 	mov	fp,zero
 20085a8:	0025883a 	mov	r18,zero
 20085ac:	90001a26 	beq	r18,zero,2008618 <__sfvwrite_r+0x184>
 20085b0:	1880800c 	andi	r2,r3,512
 20085b4:	84c00217 	ldw	r19,8(r16)
 20085b8:	10002126 	beq	r2,zero,2008640 <__sfvwrite_r+0x1ac>
 20085bc:	982f883a 	mov	r23,r19
 20085c0:	94c09636 	bltu	r18,r19,200881c <__sfvwrite_r+0x388>
 20085c4:	1881200c 	andi	r2,r3,1152
 20085c8:	1000a11e 	bne	r2,zero,2008850 <__sfvwrite_r+0x3bc>
 20085cc:	81000017 	ldw	r4,0(r16)
 20085d0:	b80d883a 	mov	r6,r23
 20085d4:	e00b883a 	mov	r5,fp
 20085d8:	20097b40 	call	20097b4 <memmove>
 20085dc:	80c00217 	ldw	r3,8(r16)
 20085e0:	81000017 	ldw	r4,0(r16)
 20085e4:	9005883a 	mov	r2,r18
 20085e8:	1ce7c83a 	sub	r19,r3,r19
 20085ec:	25cf883a 	add	r7,r4,r23
 20085f0:	84c00215 	stw	r19,8(r16)
 20085f4:	81c00015 	stw	r7,0(r16)
 20085f8:	a0c00217 	ldw	r3,8(r20)
 20085fc:	e0b9883a 	add	fp,fp,r2
 2008600:	90a5c83a 	sub	r18,r18,r2
 2008604:	18a7c83a 	sub	r19,r3,r2
 2008608:	a4c00215 	stw	r19,8(r20)
 200860c:	983fce26 	beq	r19,zero,2008548 <__sfvwrite_r+0xb4>
 2008610:	80c0030b 	ldhu	r3,12(r16)
 2008614:	903fe61e 	bne	r18,zero,20085b0 <__sfvwrite_r+0x11c>
 2008618:	8f000017 	ldw	fp,0(r17)
 200861c:	8c800117 	ldw	r18,4(r17)
 2008620:	8c400204 	addi	r17,r17,8
 2008624:	003fe106 	br	20085ac <__sfvwrite_r+0x118>
 2008628:	8cc00017 	ldw	r19,0(r17)
 200862c:	8c800117 	ldw	r18,4(r17)
 2008630:	8c400204 	addi	r17,r17,8
 2008634:	003fb306 	br	2008504 <__sfvwrite_r+0x70>
 2008638:	0005883a 	mov	r2,zero
 200863c:	f800283a 	ret
 2008640:	81000017 	ldw	r4,0(r16)
 2008644:	80800417 	ldw	r2,16(r16)
 2008648:	11005a36 	bltu	r2,r4,20087b4 <__sfvwrite_r+0x320>
 200864c:	85c00517 	ldw	r23,20(r16)
 2008650:	95c05836 	bltu	r18,r23,20087b4 <__sfvwrite_r+0x320>
 2008654:	00a00034 	movhi	r2,32768
 2008658:	10bfffc4 	addi	r2,r2,-1
 200865c:	9009883a 	mov	r4,r18
 2008660:	1480012e 	bgeu	r2,r18,2008668 <__sfvwrite_r+0x1d4>
 2008664:	1009883a 	mov	r4,r2
 2008668:	b80b883a 	mov	r5,r23
 200866c:	20038b40 	call	20038b4 <__divsi3>
 2008670:	b80b883a 	mov	r5,r23
 2008674:	1009883a 	mov	r4,r2
 2008678:	20011180 	call	2001118 <__mulsi3>
 200867c:	81400717 	ldw	r5,28(r16)
 2008680:	80c00917 	ldw	r3,36(r16)
 2008684:	100f883a 	mov	r7,r2
 2008688:	e00d883a 	mov	r6,fp
 200868c:	a809883a 	mov	r4,r21
 2008690:	183ee83a 	callr	r3
 2008694:	00bfd816 	blt	zero,r2,20085f8 <__sfvwrite_r+0x164>
 2008698:	8080030b 	ldhu	r2,12(r16)
 200869c:	10801014 	ori	r2,r2,64
 20086a0:	8080030d 	sth	r2,12(r16)
 20086a4:	00bfffc4 	movi	r2,-1
 20086a8:	003fa806 	br	200854c <__sfvwrite_r+0xb8>
 20086ac:	0027883a 	mov	r19,zero
 20086b0:	0011883a 	mov	r8,zero
 20086b4:	0039883a 	mov	fp,zero
 20086b8:	0025883a 	mov	r18,zero
 20086bc:	90001f26 	beq	r18,zero,200873c <__sfvwrite_r+0x2a8>
 20086c0:	40005a26 	beq	r8,zero,200882c <__sfvwrite_r+0x398>
 20086c4:	982d883a 	mov	r22,r19
 20086c8:	94c0012e 	bgeu	r18,r19,20086d0 <__sfvwrite_r+0x23c>
 20086cc:	902d883a 	mov	r22,r18
 20086d0:	81000017 	ldw	r4,0(r16)
 20086d4:	80800417 	ldw	r2,16(r16)
 20086d8:	b02f883a 	mov	r23,r22
 20086dc:	81c00517 	ldw	r7,20(r16)
 20086e0:	1100032e 	bgeu	r2,r4,20086f0 <__sfvwrite_r+0x25c>
 20086e4:	80c00217 	ldw	r3,8(r16)
 20086e8:	38c7883a 	add	r3,r7,r3
 20086ec:	1d801816 	blt	r3,r22,2008750 <__sfvwrite_r+0x2bc>
 20086f0:	b1c03e16 	blt	r22,r7,20087ec <__sfvwrite_r+0x358>
 20086f4:	80800917 	ldw	r2,36(r16)
 20086f8:	81400717 	ldw	r5,28(r16)
 20086fc:	e00d883a 	mov	r6,fp
 2008700:	da000115 	stw	r8,4(sp)
 2008704:	a809883a 	mov	r4,r21
 2008708:	103ee83a 	callr	r2
 200870c:	102f883a 	mov	r23,r2
 2008710:	da000117 	ldw	r8,4(sp)
 2008714:	00bfe00e 	bge	zero,r2,2008698 <__sfvwrite_r+0x204>
 2008718:	9de7c83a 	sub	r19,r19,r23
 200871c:	98001f26 	beq	r19,zero,200879c <__sfvwrite_r+0x308>
 2008720:	a0800217 	ldw	r2,8(r20)
 2008724:	e5f9883a 	add	fp,fp,r23
 2008728:	95e5c83a 	sub	r18,r18,r23
 200872c:	15efc83a 	sub	r23,r2,r23
 2008730:	a5c00215 	stw	r23,8(r20)
 2008734:	b83f8426 	beq	r23,zero,2008548 <__sfvwrite_r+0xb4>
 2008738:	903fe11e 	bne	r18,zero,20086c0 <__sfvwrite_r+0x22c>
 200873c:	8f000017 	ldw	fp,0(r17)
 2008740:	8c800117 	ldw	r18,4(r17)
 2008744:	0011883a 	mov	r8,zero
 2008748:	8c400204 	addi	r17,r17,8
 200874c:	003fdb06 	br	20086bc <__sfvwrite_r+0x228>
 2008750:	180d883a 	mov	r6,r3
 2008754:	e00b883a 	mov	r5,fp
 2008758:	da000115 	stw	r8,4(sp)
 200875c:	d8c00015 	stw	r3,0(sp)
 2008760:	20097b40 	call	20097b4 <memmove>
 2008764:	d8c00017 	ldw	r3,0(sp)
 2008768:	80800017 	ldw	r2,0(r16)
 200876c:	800b883a 	mov	r5,r16
 2008770:	a809883a 	mov	r4,r21
 2008774:	10c5883a 	add	r2,r2,r3
 2008778:	80800015 	stw	r2,0(r16)
 200877c:	d8c00015 	stw	r3,0(sp)
 2008780:	2007c240 	call	2007c24 <_fflush_r>
 2008784:	d8c00017 	ldw	r3,0(sp)
 2008788:	da000117 	ldw	r8,4(sp)
 200878c:	103fc21e 	bne	r2,zero,2008698 <__sfvwrite_r+0x204>
 2008790:	182f883a 	mov	r23,r3
 2008794:	9de7c83a 	sub	r19,r19,r23
 2008798:	983fe11e 	bne	r19,zero,2008720 <__sfvwrite_r+0x28c>
 200879c:	800b883a 	mov	r5,r16
 20087a0:	a809883a 	mov	r4,r21
 20087a4:	2007c240 	call	2007c24 <_fflush_r>
 20087a8:	103fbb1e 	bne	r2,zero,2008698 <__sfvwrite_r+0x204>
 20087ac:	0011883a 	mov	r8,zero
 20087b0:	003fdb06 	br	2008720 <__sfvwrite_r+0x28c>
 20087b4:	94c0012e 	bgeu	r18,r19,20087bc <__sfvwrite_r+0x328>
 20087b8:	9027883a 	mov	r19,r18
 20087bc:	980d883a 	mov	r6,r19
 20087c0:	e00b883a 	mov	r5,fp
 20087c4:	20097b40 	call	20097b4 <memmove>
 20087c8:	80800217 	ldw	r2,8(r16)
 20087cc:	80c00017 	ldw	r3,0(r16)
 20087d0:	14c5c83a 	sub	r2,r2,r19
 20087d4:	1cc7883a 	add	r3,r3,r19
 20087d8:	80800215 	stw	r2,8(r16)
 20087dc:	80c00015 	stw	r3,0(r16)
 20087e0:	10004326 	beq	r2,zero,20088f0 <__sfvwrite_r+0x45c>
 20087e4:	9805883a 	mov	r2,r19
 20087e8:	003f8306 	br	20085f8 <__sfvwrite_r+0x164>
 20087ec:	b00d883a 	mov	r6,r22
 20087f0:	e00b883a 	mov	r5,fp
 20087f4:	da000115 	stw	r8,4(sp)
 20087f8:	20097b40 	call	20097b4 <memmove>
 20087fc:	80800217 	ldw	r2,8(r16)
 2008800:	80c00017 	ldw	r3,0(r16)
 2008804:	da000117 	ldw	r8,4(sp)
 2008808:	1585c83a 	sub	r2,r2,r22
 200880c:	1dad883a 	add	r22,r3,r22
 2008810:	80800215 	stw	r2,8(r16)
 2008814:	85800015 	stw	r22,0(r16)
 2008818:	003fbf06 	br	2008718 <__sfvwrite_r+0x284>
 200881c:	81000017 	ldw	r4,0(r16)
 2008820:	9027883a 	mov	r19,r18
 2008824:	902f883a 	mov	r23,r18
 2008828:	003f6906 	br	20085d0 <__sfvwrite_r+0x13c>
 200882c:	900d883a 	mov	r6,r18
 2008830:	01400284 	movi	r5,10
 2008834:	e009883a 	mov	r4,fp
 2008838:	20095880 	call	2009588 <memchr>
 200883c:	10003e26 	beq	r2,zero,2008938 <__sfvwrite_r+0x4a4>
 2008840:	10800044 	addi	r2,r2,1
 2008844:	1727c83a 	sub	r19,r2,fp
 2008848:	02000044 	movi	r8,1
 200884c:	003f9d06 	br	20086c4 <__sfvwrite_r+0x230>
 2008850:	80800517 	ldw	r2,20(r16)
 2008854:	81400417 	ldw	r5,16(r16)
 2008858:	81c00017 	ldw	r7,0(r16)
 200885c:	10a7883a 	add	r19,r2,r2
 2008860:	9885883a 	add	r2,r19,r2
 2008864:	1026d7fa 	srli	r19,r2,31
 2008868:	396dc83a 	sub	r22,r7,r5
 200886c:	b1000044 	addi	r4,r22,1
 2008870:	9885883a 	add	r2,r19,r2
 2008874:	1027d07a 	srai	r19,r2,1
 2008878:	2485883a 	add	r2,r4,r18
 200887c:	980d883a 	mov	r6,r19
 2008880:	9880022e 	bgeu	r19,r2,200888c <__sfvwrite_r+0x3f8>
 2008884:	1027883a 	mov	r19,r2
 2008888:	100d883a 	mov	r6,r2
 200888c:	18c1000c 	andi	r3,r3,1024
 2008890:	18001c26 	beq	r3,zero,2008904 <__sfvwrite_r+0x470>
 2008894:	300b883a 	mov	r5,r6
 2008898:	a809883a 	mov	r4,r21
 200889c:	2008d7c0 	call	2008d7c <_malloc_r>
 20088a0:	102f883a 	mov	r23,r2
 20088a4:	10002926 	beq	r2,zero,200894c <__sfvwrite_r+0x4b8>
 20088a8:	81400417 	ldw	r5,16(r16)
 20088ac:	b00d883a 	mov	r6,r22
 20088b0:	1009883a 	mov	r4,r2
 20088b4:	200966c0 	call	200966c <memcpy>
 20088b8:	8080030b 	ldhu	r2,12(r16)
 20088bc:	00fedfc4 	movi	r3,-1153
 20088c0:	10c4703a 	and	r2,r2,r3
 20088c4:	10802014 	ori	r2,r2,128
 20088c8:	8080030d 	sth	r2,12(r16)
 20088cc:	bd89883a 	add	r4,r23,r22
 20088d0:	9d8fc83a 	sub	r7,r19,r22
 20088d4:	85c00415 	stw	r23,16(r16)
 20088d8:	84c00515 	stw	r19,20(r16)
 20088dc:	81000015 	stw	r4,0(r16)
 20088e0:	9027883a 	mov	r19,r18
 20088e4:	81c00215 	stw	r7,8(r16)
 20088e8:	902f883a 	mov	r23,r18
 20088ec:	003f3806 	br	20085d0 <__sfvwrite_r+0x13c>
 20088f0:	800b883a 	mov	r5,r16
 20088f4:	a809883a 	mov	r4,r21
 20088f8:	2007c240 	call	2007c24 <_fflush_r>
 20088fc:	103fb926 	beq	r2,zero,20087e4 <__sfvwrite_r+0x350>
 2008900:	003f6506 	br	2008698 <__sfvwrite_r+0x204>
 2008904:	a809883a 	mov	r4,r21
 2008908:	200aaf00 	call	200aaf0 <_realloc_r>
 200890c:	102f883a 	mov	r23,r2
 2008910:	103fee1e 	bne	r2,zero,20088cc <__sfvwrite_r+0x438>
 2008914:	81400417 	ldw	r5,16(r16)
 2008918:	a809883a 	mov	r4,r21
 200891c:	20081840 	call	2008184 <_free_r>
 2008920:	8080030b 	ldhu	r2,12(r16)
 2008924:	00ffdfc4 	movi	r3,-129
 2008928:	1884703a 	and	r2,r3,r2
 200892c:	00c00304 	movi	r3,12
 2008930:	a8c00015 	stw	r3,0(r21)
 2008934:	003f5906 	br	200869c <__sfvwrite_r+0x208>
 2008938:	94c00044 	addi	r19,r18,1
 200893c:	02000044 	movi	r8,1
 2008940:	003f6006 	br	20086c4 <__sfvwrite_r+0x230>
 2008944:	00bfffc4 	movi	r2,-1
 2008948:	003f0006 	br	200854c <__sfvwrite_r+0xb8>
 200894c:	00800304 	movi	r2,12
 2008950:	a8800015 	stw	r2,0(r21)
 2008954:	8080030b 	ldhu	r2,12(r16)
 2008958:	003f5006 	br	200869c <__sfvwrite_r+0x208>

0200895c <_fwalk>:
 200895c:	defff704 	addi	sp,sp,-36
 2008960:	dd000415 	stw	r20,16(sp)
 2008964:	dfc00815 	stw	ra,32(sp)
 2008968:	ddc00715 	stw	r23,28(sp)
 200896c:	dd800615 	stw	r22,24(sp)
 2008970:	dd400515 	stw	r21,20(sp)
 2008974:	dcc00315 	stw	r19,12(sp)
 2008978:	dc800215 	stw	r18,8(sp)
 200897c:	dc400115 	stw	r17,4(sp)
 2008980:	dc000015 	stw	r16,0(sp)
 2008984:	2500b804 	addi	r20,r4,736
 2008988:	a0002326 	beq	r20,zero,2008a18 <_fwalk+0xbc>
 200898c:	282b883a 	mov	r21,r5
 2008990:	002f883a 	mov	r23,zero
 2008994:	05800044 	movi	r22,1
 2008998:	04ffffc4 	movi	r19,-1
 200899c:	a4400117 	ldw	r17,4(r20)
 20089a0:	a4800217 	ldw	r18,8(r20)
 20089a4:	8c7fffc4 	addi	r17,r17,-1
 20089a8:	88000d16 	blt	r17,zero,20089e0 <_fwalk+0x84>
 20089ac:	94000304 	addi	r16,r18,12
 20089b0:	94800384 	addi	r18,r18,14
 20089b4:	8080000b 	ldhu	r2,0(r16)
 20089b8:	8c7fffc4 	addi	r17,r17,-1
 20089bc:	813ffd04 	addi	r4,r16,-12
 20089c0:	b080042e 	bgeu	r22,r2,20089d4 <_fwalk+0x78>
 20089c4:	9080000f 	ldh	r2,0(r18)
 20089c8:	14c00226 	beq	r2,r19,20089d4 <_fwalk+0x78>
 20089cc:	a83ee83a 	callr	r21
 20089d0:	b8aeb03a 	or	r23,r23,r2
 20089d4:	84001a04 	addi	r16,r16,104
 20089d8:	94801a04 	addi	r18,r18,104
 20089dc:	8cfff51e 	bne	r17,r19,20089b4 <_fwalk+0x58>
 20089e0:	a5000017 	ldw	r20,0(r20)
 20089e4:	a03fed1e 	bne	r20,zero,200899c <_fwalk+0x40>
 20089e8:	b805883a 	mov	r2,r23
 20089ec:	dfc00817 	ldw	ra,32(sp)
 20089f0:	ddc00717 	ldw	r23,28(sp)
 20089f4:	dd800617 	ldw	r22,24(sp)
 20089f8:	dd400517 	ldw	r21,20(sp)
 20089fc:	dd000417 	ldw	r20,16(sp)
 2008a00:	dcc00317 	ldw	r19,12(sp)
 2008a04:	dc800217 	ldw	r18,8(sp)
 2008a08:	dc400117 	ldw	r17,4(sp)
 2008a0c:	dc000017 	ldw	r16,0(sp)
 2008a10:	dec00904 	addi	sp,sp,36
 2008a14:	f800283a 	ret
 2008a18:	002f883a 	mov	r23,zero
 2008a1c:	003ff206 	br	20089e8 <_fwalk+0x8c>

02008a20 <_fwalk_reent>:
 2008a20:	defff704 	addi	sp,sp,-36
 2008a24:	dd000415 	stw	r20,16(sp)
 2008a28:	dfc00815 	stw	ra,32(sp)
 2008a2c:	ddc00715 	stw	r23,28(sp)
 2008a30:	dd800615 	stw	r22,24(sp)
 2008a34:	dd400515 	stw	r21,20(sp)
 2008a38:	dcc00315 	stw	r19,12(sp)
 2008a3c:	dc800215 	stw	r18,8(sp)
 2008a40:	dc400115 	stw	r17,4(sp)
 2008a44:	dc000015 	stw	r16,0(sp)
 2008a48:	2500b804 	addi	r20,r4,736
 2008a4c:	a0002326 	beq	r20,zero,2008adc <_fwalk_reent+0xbc>
 2008a50:	282b883a 	mov	r21,r5
 2008a54:	2027883a 	mov	r19,r4
 2008a58:	002f883a 	mov	r23,zero
 2008a5c:	05800044 	movi	r22,1
 2008a60:	04bfffc4 	movi	r18,-1
 2008a64:	a4400117 	ldw	r17,4(r20)
 2008a68:	a4000217 	ldw	r16,8(r20)
 2008a6c:	8c7fffc4 	addi	r17,r17,-1
 2008a70:	88000c16 	blt	r17,zero,2008aa4 <_fwalk_reent+0x84>
 2008a74:	84000304 	addi	r16,r16,12
 2008a78:	8080000b 	ldhu	r2,0(r16)
 2008a7c:	8c7fffc4 	addi	r17,r17,-1
 2008a80:	817ffd04 	addi	r5,r16,-12
 2008a84:	b080052e 	bgeu	r22,r2,2008a9c <_fwalk_reent+0x7c>
 2008a88:	8080008f 	ldh	r2,2(r16)
 2008a8c:	9809883a 	mov	r4,r19
 2008a90:	14800226 	beq	r2,r18,2008a9c <_fwalk_reent+0x7c>
 2008a94:	a83ee83a 	callr	r21
 2008a98:	b8aeb03a 	or	r23,r23,r2
 2008a9c:	84001a04 	addi	r16,r16,104
 2008aa0:	8cbff51e 	bne	r17,r18,2008a78 <_fwalk_reent+0x58>
 2008aa4:	a5000017 	ldw	r20,0(r20)
 2008aa8:	a03fee1e 	bne	r20,zero,2008a64 <_fwalk_reent+0x44>
 2008aac:	b805883a 	mov	r2,r23
 2008ab0:	dfc00817 	ldw	ra,32(sp)
 2008ab4:	ddc00717 	ldw	r23,28(sp)
 2008ab8:	dd800617 	ldw	r22,24(sp)
 2008abc:	dd400517 	ldw	r21,20(sp)
 2008ac0:	dd000417 	ldw	r20,16(sp)
 2008ac4:	dcc00317 	ldw	r19,12(sp)
 2008ac8:	dc800217 	ldw	r18,8(sp)
 2008acc:	dc400117 	ldw	r17,4(sp)
 2008ad0:	dc000017 	ldw	r16,0(sp)
 2008ad4:	dec00904 	addi	sp,sp,36
 2008ad8:	f800283a 	ret
 2008adc:	002f883a 	mov	r23,zero
 2008ae0:	003ff206 	br	2008aac <_fwalk_reent+0x8c>

02008ae4 <_setlocale_r>:
 2008ae4:	30001b26 	beq	r6,zero,2008b54 <_setlocale_r+0x70>
 2008ae8:	014080b4 	movhi	r5,514
 2008aec:	defffe04 	addi	sp,sp,-8
 2008af0:	29656304 	addi	r5,r5,-27252
 2008af4:	3009883a 	mov	r4,r6
 2008af8:	dc000015 	stw	r16,0(sp)
 2008afc:	dfc00115 	stw	ra,4(sp)
 2008b00:	3021883a 	mov	r16,r6
 2008b04:	200b1e40 	call	200b1e4 <strcmp>
 2008b08:	1000061e 	bne	r2,zero,2008b24 <_setlocale_r+0x40>
 2008b0c:	008080b4 	movhi	r2,514
 2008b10:	10a54404 	addi	r2,r2,-27376
 2008b14:	dfc00117 	ldw	ra,4(sp)
 2008b18:	dc000017 	ldw	r16,0(sp)
 2008b1c:	dec00204 	addi	sp,sp,8
 2008b20:	f800283a 	ret
 2008b24:	014080b4 	movhi	r5,514
 2008b28:	29654404 	addi	r5,r5,-27376
 2008b2c:	8009883a 	mov	r4,r16
 2008b30:	200b1e40 	call	200b1e4 <strcmp>
 2008b34:	103ff526 	beq	r2,zero,2008b0c <_setlocale_r+0x28>
 2008b38:	014080b4 	movhi	r5,514
 2008b3c:	29654e04 	addi	r5,r5,-27336
 2008b40:	8009883a 	mov	r4,r16
 2008b44:	200b1e40 	call	200b1e4 <strcmp>
 2008b48:	103ff026 	beq	r2,zero,2008b0c <_setlocale_r+0x28>
 2008b4c:	0005883a 	mov	r2,zero
 2008b50:	003ff006 	br	2008b14 <_setlocale_r+0x30>
 2008b54:	008080b4 	movhi	r2,514
 2008b58:	10a54404 	addi	r2,r2,-27376
 2008b5c:	f800283a 	ret

02008b60 <__locale_charset>:
 2008b60:	008080b4 	movhi	r2,514
 2008b64:	10a71c04 	addi	r2,r2,-25488
 2008b68:	f800283a 	ret

02008b6c <__locale_mb_cur_max>:
 2008b6c:	008080b4 	movhi	r2,514
 2008b70:	10acbc04 	addi	r2,r2,-19728
 2008b74:	10800017 	ldw	r2,0(r2)
 2008b78:	f800283a 	ret

02008b7c <__locale_msgcharset>:
 2008b7c:	008080b4 	movhi	r2,514
 2008b80:	10a71404 	addi	r2,r2,-25520
 2008b84:	f800283a 	ret

02008b88 <__locale_cjk_lang>:
 2008b88:	0005883a 	mov	r2,zero
 2008b8c:	f800283a 	ret

02008b90 <_localeconv_r>:
 2008b90:	008080b4 	movhi	r2,514
 2008b94:	10a72404 	addi	r2,r2,-25456
 2008b98:	f800283a 	ret

02008b9c <setlocale>:
 2008b9c:	008080b4 	movhi	r2,514
 2008ba0:	10acbb04 	addi	r2,r2,-19732
 2008ba4:	280d883a 	mov	r6,r5
 2008ba8:	200b883a 	mov	r5,r4
 2008bac:	11000017 	ldw	r4,0(r2)
 2008bb0:	2008ae41 	jmpi	2008ae4 <_setlocale_r>

02008bb4 <localeconv>:
 2008bb4:	008080b4 	movhi	r2,514
 2008bb8:	10a72404 	addi	r2,r2,-25456
 2008bbc:	f800283a 	ret

02008bc0 <__smakebuf_r>:
 2008bc0:	2880030b 	ldhu	r2,12(r5)
 2008bc4:	10c0008c 	andi	r3,r2,2
 2008bc8:	1800411e 	bne	r3,zero,2008cd0 <__smakebuf_r+0x110>
 2008bcc:	deffec04 	addi	sp,sp,-80
 2008bd0:	dc000f15 	stw	r16,60(sp)
 2008bd4:	2821883a 	mov	r16,r5
 2008bd8:	2940038f 	ldh	r5,14(r5)
 2008bdc:	dc401015 	stw	r17,64(sp)
 2008be0:	dfc01315 	stw	ra,76(sp)
 2008be4:	dcc01215 	stw	r19,72(sp)
 2008be8:	dc801115 	stw	r18,68(sp)
 2008bec:	2023883a 	mov	r17,r4
 2008bf0:	28001c16 	blt	r5,zero,2008c64 <__smakebuf_r+0xa4>
 2008bf4:	d80d883a 	mov	r6,sp
 2008bf8:	200ce540 	call	200ce54 <_fstat_r>
 2008bfc:	10001816 	blt	r2,zero,2008c60 <__smakebuf_r+0xa0>
 2008c00:	d8800117 	ldw	r2,4(sp)
 2008c04:	00e00014 	movui	r3,32768
 2008c08:	10bc000c 	andi	r2,r2,61440
 2008c0c:	14c80020 	cmpeqi	r19,r2,8192
 2008c10:	10c03726 	beq	r2,r3,2008cf0 <__smakebuf_r+0x130>
 2008c14:	80c0030b 	ldhu	r3,12(r16)
 2008c18:	18c20014 	ori	r3,r3,2048
 2008c1c:	80c0030d 	sth	r3,12(r16)
 2008c20:	00c80004 	movi	r3,8192
 2008c24:	10c0521e 	bne	r2,r3,2008d70 <__smakebuf_r+0x1b0>
 2008c28:	8140038f 	ldh	r5,14(r16)
 2008c2c:	8809883a 	mov	r4,r17
 2008c30:	200ceb00 	call	200ceb0 <_isatty_r>
 2008c34:	10004c26 	beq	r2,zero,2008d68 <__smakebuf_r+0x1a8>
 2008c38:	8080030b 	ldhu	r2,12(r16)
 2008c3c:	80c010c4 	addi	r3,r16,67
 2008c40:	80c00015 	stw	r3,0(r16)
 2008c44:	10800054 	ori	r2,r2,1
 2008c48:	8080030d 	sth	r2,12(r16)
 2008c4c:	00800044 	movi	r2,1
 2008c50:	80c00415 	stw	r3,16(r16)
 2008c54:	80800515 	stw	r2,20(r16)
 2008c58:	04810004 	movi	r18,1024
 2008c5c:	00000706 	br	2008c7c <__smakebuf_r+0xbc>
 2008c60:	8080030b 	ldhu	r2,12(r16)
 2008c64:	10c0200c 	andi	r3,r2,128
 2008c68:	18001f1e 	bne	r3,zero,2008ce8 <__smakebuf_r+0x128>
 2008c6c:	04810004 	movi	r18,1024
 2008c70:	10820014 	ori	r2,r2,2048
 2008c74:	8080030d 	sth	r2,12(r16)
 2008c78:	0027883a 	mov	r19,zero
 2008c7c:	900b883a 	mov	r5,r18
 2008c80:	8809883a 	mov	r4,r17
 2008c84:	2008d7c0 	call	2008d7c <_malloc_r>
 2008c88:	10002c26 	beq	r2,zero,2008d3c <__smakebuf_r+0x17c>
 2008c8c:	80c0030b 	ldhu	r3,12(r16)
 2008c90:	01008034 	movhi	r4,512
 2008c94:	211f2e04 	addi	r4,r4,31928
 2008c98:	89000f15 	stw	r4,60(r17)
 2008c9c:	18c02014 	ori	r3,r3,128
 2008ca0:	80c0030d 	sth	r3,12(r16)
 2008ca4:	80800015 	stw	r2,0(r16)
 2008ca8:	80800415 	stw	r2,16(r16)
 2008cac:	84800515 	stw	r18,20(r16)
 2008cb0:	98001a1e 	bne	r19,zero,2008d1c <__smakebuf_r+0x15c>
 2008cb4:	dfc01317 	ldw	ra,76(sp)
 2008cb8:	dcc01217 	ldw	r19,72(sp)
 2008cbc:	dc801117 	ldw	r18,68(sp)
 2008cc0:	dc401017 	ldw	r17,64(sp)
 2008cc4:	dc000f17 	ldw	r16,60(sp)
 2008cc8:	dec01404 	addi	sp,sp,80
 2008ccc:	f800283a 	ret
 2008cd0:	288010c4 	addi	r2,r5,67
 2008cd4:	28800015 	stw	r2,0(r5)
 2008cd8:	28800415 	stw	r2,16(r5)
 2008cdc:	00800044 	movi	r2,1
 2008ce0:	28800515 	stw	r2,20(r5)
 2008ce4:	f800283a 	ret
 2008ce8:	04801004 	movi	r18,64
 2008cec:	003fe006 	br	2008c70 <__smakebuf_r+0xb0>
 2008cf0:	81000a17 	ldw	r4,40(r16)
 2008cf4:	00c08074 	movhi	r3,513
 2008cf8:	18ec6004 	addi	r3,r3,-20096
 2008cfc:	20ffc51e 	bne	r4,r3,2008c14 <__smakebuf_r+0x54>
 2008d00:	8080030b 	ldhu	r2,12(r16)
 2008d04:	04810004 	movi	r18,1024
 2008d08:	84801315 	stw	r18,76(r16)
 2008d0c:	1484b03a 	or	r2,r2,r18
 2008d10:	8080030d 	sth	r2,12(r16)
 2008d14:	0027883a 	mov	r19,zero
 2008d18:	003fd806 	br	2008c7c <__smakebuf_r+0xbc>
 2008d1c:	8140038f 	ldh	r5,14(r16)
 2008d20:	8809883a 	mov	r4,r17
 2008d24:	200ceb00 	call	200ceb0 <_isatty_r>
 2008d28:	103fe226 	beq	r2,zero,2008cb4 <__smakebuf_r+0xf4>
 2008d2c:	8080030b 	ldhu	r2,12(r16)
 2008d30:	10800054 	ori	r2,r2,1
 2008d34:	8080030d 	sth	r2,12(r16)
 2008d38:	003fde06 	br	2008cb4 <__smakebuf_r+0xf4>
 2008d3c:	8080030b 	ldhu	r2,12(r16)
 2008d40:	10c0800c 	andi	r3,r2,512
 2008d44:	183fdb1e 	bne	r3,zero,2008cb4 <__smakebuf_r+0xf4>
 2008d48:	10800094 	ori	r2,r2,2
 2008d4c:	80c010c4 	addi	r3,r16,67
 2008d50:	8080030d 	sth	r2,12(r16)
 2008d54:	00800044 	movi	r2,1
 2008d58:	80c00015 	stw	r3,0(r16)
 2008d5c:	80c00415 	stw	r3,16(r16)
 2008d60:	80800515 	stw	r2,20(r16)
 2008d64:	003fd306 	br	2008cb4 <__smakebuf_r+0xf4>
 2008d68:	04810004 	movi	r18,1024
 2008d6c:	003fc306 	br	2008c7c <__smakebuf_r+0xbc>
 2008d70:	0027883a 	mov	r19,zero
 2008d74:	04810004 	movi	r18,1024
 2008d78:	003fc006 	br	2008c7c <__smakebuf_r+0xbc>

02008d7c <_malloc_r>:
 2008d7c:	defff504 	addi	sp,sp,-44
 2008d80:	dc800315 	stw	r18,12(sp)
 2008d84:	dfc00a15 	stw	ra,40(sp)
 2008d88:	df000915 	stw	fp,36(sp)
 2008d8c:	ddc00815 	stw	r23,32(sp)
 2008d90:	dd800715 	stw	r22,28(sp)
 2008d94:	dd400615 	stw	r21,24(sp)
 2008d98:	dd000515 	stw	r20,20(sp)
 2008d9c:	dcc00415 	stw	r19,16(sp)
 2008da0:	dc400215 	stw	r17,8(sp)
 2008da4:	dc000115 	stw	r16,4(sp)
 2008da8:	288002c4 	addi	r2,r5,11
 2008dac:	00c00584 	movi	r3,22
 2008db0:	2025883a 	mov	r18,r4
 2008db4:	18807f2e 	bgeu	r3,r2,2008fb4 <_malloc_r+0x238>
 2008db8:	047ffe04 	movi	r17,-8
 2008dbc:	1462703a 	and	r17,r2,r17
 2008dc0:	8800a316 	blt	r17,zero,2009050 <_malloc_r+0x2d4>
 2008dc4:	8940a236 	bltu	r17,r5,2009050 <_malloc_r+0x2d4>
 2008dc8:	200eaa40 	call	200eaa4 <__malloc_lock>
 2008dcc:	00807dc4 	movi	r2,503
 2008dd0:	1441e92e 	bgeu	r2,r17,2009578 <_malloc_r+0x7fc>
 2008dd4:	8804d27a 	srli	r2,r17,9
 2008dd8:	1000a126 	beq	r2,zero,2009060 <_malloc_r+0x2e4>
 2008ddc:	00c00104 	movi	r3,4
 2008de0:	18811e36 	bltu	r3,r2,200925c <_malloc_r+0x4e0>
 2008de4:	8804d1ba 	srli	r2,r17,6
 2008de8:	12000e44 	addi	r8,r2,57
 2008dec:	11c00e04 	addi	r7,r2,56
 2008df0:	4209883a 	add	r4,r8,r8
 2008df4:	04c080b4 	movhi	r19,514
 2008df8:	2109883a 	add	r4,r4,r4
 2008dfc:	9ce73204 	addi	r19,r19,-25400
 2008e00:	2109883a 	add	r4,r4,r4
 2008e04:	9909883a 	add	r4,r19,r4
 2008e08:	24000117 	ldw	r16,4(r4)
 2008e0c:	213ffe04 	addi	r4,r4,-8
 2008e10:	24009726 	beq	r4,r16,2009070 <_malloc_r+0x2f4>
 2008e14:	80800117 	ldw	r2,4(r16)
 2008e18:	01bfff04 	movi	r6,-4
 2008e1c:	014003c4 	movi	r5,15
 2008e20:	1184703a 	and	r2,r2,r6
 2008e24:	1447c83a 	sub	r3,r2,r17
 2008e28:	28c00716 	blt	r5,r3,2008e48 <_malloc_r+0xcc>
 2008e2c:	1800920e 	bge	r3,zero,2009078 <_malloc_r+0x2fc>
 2008e30:	84000317 	ldw	r16,12(r16)
 2008e34:	24008e26 	beq	r4,r16,2009070 <_malloc_r+0x2f4>
 2008e38:	80800117 	ldw	r2,4(r16)
 2008e3c:	1184703a 	and	r2,r2,r6
 2008e40:	1447c83a 	sub	r3,r2,r17
 2008e44:	28fff90e 	bge	r5,r3,2008e2c <_malloc_r+0xb0>
 2008e48:	3809883a 	mov	r4,r7
 2008e4c:	018080b4 	movhi	r6,514
 2008e50:	9c000417 	ldw	r16,16(r19)
 2008e54:	31a73204 	addi	r6,r6,-25400
 2008e58:	32000204 	addi	r8,r6,8
 2008e5c:	82013426 	beq	r16,r8,2009330 <_malloc_r+0x5b4>
 2008e60:	80c00117 	ldw	r3,4(r16)
 2008e64:	00bfff04 	movi	r2,-4
 2008e68:	188e703a 	and	r7,r3,r2
 2008e6c:	3c45c83a 	sub	r2,r7,r17
 2008e70:	00c003c4 	movi	r3,15
 2008e74:	18811f16 	blt	r3,r2,20092f4 <_malloc_r+0x578>
 2008e78:	32000515 	stw	r8,20(r6)
 2008e7c:	32000415 	stw	r8,16(r6)
 2008e80:	10007f0e 	bge	r2,zero,2009080 <_malloc_r+0x304>
 2008e84:	00807fc4 	movi	r2,511
 2008e88:	11c0fd36 	bltu	r2,r7,2009280 <_malloc_r+0x504>
 2008e8c:	3806d0fa 	srli	r3,r7,3
 2008e90:	01c00044 	movi	r7,1
 2008e94:	30800117 	ldw	r2,4(r6)
 2008e98:	19400044 	addi	r5,r3,1
 2008e9c:	294b883a 	add	r5,r5,r5
 2008ea0:	1807d0ba 	srai	r3,r3,2
 2008ea4:	294b883a 	add	r5,r5,r5
 2008ea8:	294b883a 	add	r5,r5,r5
 2008eac:	298b883a 	add	r5,r5,r6
 2008eb0:	38c6983a 	sll	r3,r7,r3
 2008eb4:	29c00017 	ldw	r7,0(r5)
 2008eb8:	2a7ffe04 	addi	r9,r5,-8
 2008ebc:	1886b03a 	or	r3,r3,r2
 2008ec0:	82400315 	stw	r9,12(r16)
 2008ec4:	81c00215 	stw	r7,8(r16)
 2008ec8:	30c00115 	stw	r3,4(r6)
 2008ecc:	2c000015 	stw	r16,0(r5)
 2008ed0:	3c000315 	stw	r16,12(r7)
 2008ed4:	2005d0ba 	srai	r2,r4,2
 2008ed8:	01400044 	movi	r5,1
 2008edc:	288a983a 	sll	r5,r5,r2
 2008ee0:	19406f36 	bltu	r3,r5,20090a0 <_malloc_r+0x324>
 2008ee4:	28c4703a 	and	r2,r5,r3
 2008ee8:	10000a1e 	bne	r2,zero,2008f14 <_malloc_r+0x198>
 2008eec:	00bfff04 	movi	r2,-4
 2008ef0:	294b883a 	add	r5,r5,r5
 2008ef4:	2088703a 	and	r4,r4,r2
 2008ef8:	28c4703a 	and	r2,r5,r3
 2008efc:	21000104 	addi	r4,r4,4
 2008f00:	1000041e 	bne	r2,zero,2008f14 <_malloc_r+0x198>
 2008f04:	294b883a 	add	r5,r5,r5
 2008f08:	28c4703a 	and	r2,r5,r3
 2008f0c:	21000104 	addi	r4,r4,4
 2008f10:	103ffc26 	beq	r2,zero,2008f04 <_malloc_r+0x188>
 2008f14:	02bfff04 	movi	r10,-4
 2008f18:	024003c4 	movi	r9,15
 2008f1c:	21800044 	addi	r6,r4,1
 2008f20:	318d883a 	add	r6,r6,r6
 2008f24:	318d883a 	add	r6,r6,r6
 2008f28:	318d883a 	add	r6,r6,r6
 2008f2c:	998d883a 	add	r6,r19,r6
 2008f30:	333ffe04 	addi	r12,r6,-8
 2008f34:	2017883a 	mov	r11,r4
 2008f38:	31800104 	addi	r6,r6,4
 2008f3c:	34000017 	ldw	r16,0(r6)
 2008f40:	31fffd04 	addi	r7,r6,-12
 2008f44:	81c0041e 	bne	r16,r7,2008f58 <_malloc_r+0x1dc>
 2008f48:	0000fb06 	br	2009338 <_malloc_r+0x5bc>
 2008f4c:	1801030e 	bge	r3,zero,200935c <_malloc_r+0x5e0>
 2008f50:	84000317 	ldw	r16,12(r16)
 2008f54:	81c0f826 	beq	r16,r7,2009338 <_malloc_r+0x5bc>
 2008f58:	80800117 	ldw	r2,4(r16)
 2008f5c:	1284703a 	and	r2,r2,r10
 2008f60:	1447c83a 	sub	r3,r2,r17
 2008f64:	48fff90e 	bge	r9,r3,2008f4c <_malloc_r+0x1d0>
 2008f68:	80800317 	ldw	r2,12(r16)
 2008f6c:	81000217 	ldw	r4,8(r16)
 2008f70:	89400054 	ori	r5,r17,1
 2008f74:	81400115 	stw	r5,4(r16)
 2008f78:	20800315 	stw	r2,12(r4)
 2008f7c:	11000215 	stw	r4,8(r2)
 2008f80:	8463883a 	add	r17,r16,r17
 2008f84:	9c400515 	stw	r17,20(r19)
 2008f88:	9c400415 	stw	r17,16(r19)
 2008f8c:	18800054 	ori	r2,r3,1
 2008f90:	88800115 	stw	r2,4(r17)
 2008f94:	8a000315 	stw	r8,12(r17)
 2008f98:	8a000215 	stw	r8,8(r17)
 2008f9c:	88e3883a 	add	r17,r17,r3
 2008fa0:	88c00015 	stw	r3,0(r17)
 2008fa4:	9009883a 	mov	r4,r18
 2008fa8:	200ebc40 	call	200ebc4 <__malloc_unlock>
 2008fac:	80800204 	addi	r2,r16,8
 2008fb0:	00001b06 	br	2009020 <_malloc_r+0x2a4>
 2008fb4:	04400404 	movi	r17,16
 2008fb8:	89402536 	bltu	r17,r5,2009050 <_malloc_r+0x2d4>
 2008fbc:	200eaa40 	call	200eaa4 <__malloc_lock>
 2008fc0:	00800184 	movi	r2,6
 2008fc4:	01000084 	movi	r4,2
 2008fc8:	04c080b4 	movhi	r19,514
 2008fcc:	1085883a 	add	r2,r2,r2
 2008fd0:	9ce73204 	addi	r19,r19,-25400
 2008fd4:	1085883a 	add	r2,r2,r2
 2008fd8:	9885883a 	add	r2,r19,r2
 2008fdc:	14000117 	ldw	r16,4(r2)
 2008fe0:	10fffe04 	addi	r3,r2,-8
 2008fe4:	80c0d926 	beq	r16,r3,200934c <_malloc_r+0x5d0>
 2008fe8:	80c00117 	ldw	r3,4(r16)
 2008fec:	81000317 	ldw	r4,12(r16)
 2008ff0:	00bfff04 	movi	r2,-4
 2008ff4:	1884703a 	and	r2,r3,r2
 2008ff8:	81400217 	ldw	r5,8(r16)
 2008ffc:	8085883a 	add	r2,r16,r2
 2009000:	10c00117 	ldw	r3,4(r2)
 2009004:	29000315 	stw	r4,12(r5)
 2009008:	21400215 	stw	r5,8(r4)
 200900c:	18c00054 	ori	r3,r3,1
 2009010:	10c00115 	stw	r3,4(r2)
 2009014:	9009883a 	mov	r4,r18
 2009018:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200901c:	80800204 	addi	r2,r16,8
 2009020:	dfc00a17 	ldw	ra,40(sp)
 2009024:	df000917 	ldw	fp,36(sp)
 2009028:	ddc00817 	ldw	r23,32(sp)
 200902c:	dd800717 	ldw	r22,28(sp)
 2009030:	dd400617 	ldw	r21,24(sp)
 2009034:	dd000517 	ldw	r20,20(sp)
 2009038:	dcc00417 	ldw	r19,16(sp)
 200903c:	dc800317 	ldw	r18,12(sp)
 2009040:	dc400217 	ldw	r17,8(sp)
 2009044:	dc000117 	ldw	r16,4(sp)
 2009048:	dec00b04 	addi	sp,sp,44
 200904c:	f800283a 	ret
 2009050:	00800304 	movi	r2,12
 2009054:	90800015 	stw	r2,0(r18)
 2009058:	0005883a 	mov	r2,zero
 200905c:	003ff006 	br	2009020 <_malloc_r+0x2a4>
 2009060:	01002004 	movi	r4,128
 2009064:	02001004 	movi	r8,64
 2009068:	01c00fc4 	movi	r7,63
 200906c:	003f6106 	br	2008df4 <_malloc_r+0x78>
 2009070:	4009883a 	mov	r4,r8
 2009074:	003f7506 	br	2008e4c <_malloc_r+0xd0>
 2009078:	81000317 	ldw	r4,12(r16)
 200907c:	003fde06 	br	2008ff8 <_malloc_r+0x27c>
 2009080:	81c5883a 	add	r2,r16,r7
 2009084:	11400117 	ldw	r5,4(r2)
 2009088:	9009883a 	mov	r4,r18
 200908c:	29400054 	ori	r5,r5,1
 2009090:	11400115 	stw	r5,4(r2)
 2009094:	200ebc40 	call	200ebc4 <__malloc_unlock>
 2009098:	80800204 	addi	r2,r16,8
 200909c:	003fe006 	br	2009020 <_malloc_r+0x2a4>
 20090a0:	9c000217 	ldw	r16,8(r19)
 20090a4:	00bfff04 	movi	r2,-4
 20090a8:	85800117 	ldw	r22,4(r16)
 20090ac:	b0ac703a 	and	r22,r22,r2
 20090b0:	b4400336 	bltu	r22,r17,20090c0 <_malloc_r+0x344>
 20090b4:	b445c83a 	sub	r2,r22,r17
 20090b8:	00c003c4 	movi	r3,15
 20090bc:	18805d16 	blt	r3,r2,2009234 <_malloc_r+0x4b8>
 20090c0:	05c080b4 	movhi	r23,514
 20090c4:	008080b4 	movhi	r2,514
 20090c8:	10b3cf04 	addi	r2,r2,-12484
 20090cc:	bdecbd04 	addi	r23,r23,-19724
 20090d0:	15400017 	ldw	r21,0(r2)
 20090d4:	b8c00017 	ldw	r3,0(r23)
 20090d8:	00bfffc4 	movi	r2,-1
 20090dc:	858d883a 	add	r6,r16,r22
 20090e0:	8d6b883a 	add	r21,r17,r21
 20090e4:	1880ea26 	beq	r3,r2,2009490 <_malloc_r+0x714>
 20090e8:	ad4403c4 	addi	r21,r21,4111
 20090ec:	00bc0004 	movi	r2,-4096
 20090f0:	a8aa703a 	and	r21,r21,r2
 20090f4:	a80b883a 	mov	r5,r21
 20090f8:	9009883a 	mov	r4,r18
 20090fc:	d9800015 	stw	r6,0(sp)
 2009100:	200b0540 	call	200b054 <_sbrk_r>
 2009104:	1029883a 	mov	r20,r2
 2009108:	00bfffc4 	movi	r2,-1
 200910c:	d9800017 	ldw	r6,0(sp)
 2009110:	a080e826 	beq	r20,r2,20094b4 <_malloc_r+0x738>
 2009114:	a180a636 	bltu	r20,r6,20093b0 <_malloc_r+0x634>
 2009118:	070080b4 	movhi	fp,514
 200911c:	e733f104 	addi	fp,fp,-12348
 2009120:	e0800017 	ldw	r2,0(fp)
 2009124:	a887883a 	add	r3,r21,r2
 2009128:	e0c00015 	stw	r3,0(fp)
 200912c:	3500e626 	beq	r6,r20,20094c8 <_malloc_r+0x74c>
 2009130:	b9000017 	ldw	r4,0(r23)
 2009134:	00bfffc4 	movi	r2,-1
 2009138:	2080ee26 	beq	r4,r2,20094f4 <_malloc_r+0x778>
 200913c:	a185c83a 	sub	r2,r20,r6
 2009140:	10c5883a 	add	r2,r2,r3
 2009144:	e0800015 	stw	r2,0(fp)
 2009148:	a0c001cc 	andi	r3,r20,7
 200914c:	1800bc26 	beq	r3,zero,2009440 <_malloc_r+0x6c4>
 2009150:	a0e9c83a 	sub	r20,r20,r3
 2009154:	00840204 	movi	r2,4104
 2009158:	a5000204 	addi	r20,r20,8
 200915c:	10c7c83a 	sub	r3,r2,r3
 2009160:	a545883a 	add	r2,r20,r21
 2009164:	1083ffcc 	andi	r2,r2,4095
 2009168:	18abc83a 	sub	r21,r3,r2
 200916c:	a80b883a 	mov	r5,r21
 2009170:	9009883a 	mov	r4,r18
 2009174:	200b0540 	call	200b054 <_sbrk_r>
 2009178:	00ffffc4 	movi	r3,-1
 200917c:	10c0e126 	beq	r2,r3,2009504 <_malloc_r+0x788>
 2009180:	1505c83a 	sub	r2,r2,r20
 2009184:	1545883a 	add	r2,r2,r21
 2009188:	10800054 	ori	r2,r2,1
 200918c:	e0c00017 	ldw	r3,0(fp)
 2009190:	9d000215 	stw	r20,8(r19)
 2009194:	a0800115 	stw	r2,4(r20)
 2009198:	a8c7883a 	add	r3,r21,r3
 200919c:	e0c00015 	stw	r3,0(fp)
 20091a0:	84c00e26 	beq	r16,r19,20091dc <_malloc_r+0x460>
 20091a4:	018003c4 	movi	r6,15
 20091a8:	3580a72e 	bgeu	r6,r22,2009448 <_malloc_r+0x6cc>
 20091ac:	81400117 	ldw	r5,4(r16)
 20091b0:	013ffe04 	movi	r4,-8
 20091b4:	b0bffd04 	addi	r2,r22,-12
 20091b8:	1104703a 	and	r2,r2,r4
 20091bc:	2900004c 	andi	r4,r5,1
 20091c0:	2088b03a 	or	r4,r4,r2
 20091c4:	81000115 	stw	r4,4(r16)
 20091c8:	01400144 	movi	r5,5
 20091cc:	8089883a 	add	r4,r16,r2
 20091d0:	21400115 	stw	r5,4(r4)
 20091d4:	21400215 	stw	r5,8(r4)
 20091d8:	3080cd36 	bltu	r6,r2,2009510 <_malloc_r+0x794>
 20091dc:	008080b4 	movhi	r2,514
 20091e0:	10b3ce04 	addi	r2,r2,-12488
 20091e4:	11000017 	ldw	r4,0(r2)
 20091e8:	20c0012e 	bgeu	r4,r3,20091f0 <_malloc_r+0x474>
 20091ec:	10c00015 	stw	r3,0(r2)
 20091f0:	008080b4 	movhi	r2,514
 20091f4:	10b3cd04 	addi	r2,r2,-12492
 20091f8:	11000017 	ldw	r4,0(r2)
 20091fc:	9c000217 	ldw	r16,8(r19)
 2009200:	20c0012e 	bgeu	r4,r3,2009208 <_malloc_r+0x48c>
 2009204:	10c00015 	stw	r3,0(r2)
 2009208:	80c00117 	ldw	r3,4(r16)
 200920c:	00bfff04 	movi	r2,-4
 2009210:	1886703a 	and	r3,r3,r2
 2009214:	1c45c83a 	sub	r2,r3,r17
 2009218:	1c400236 	bltu	r3,r17,2009224 <_malloc_r+0x4a8>
 200921c:	00c003c4 	movi	r3,15
 2009220:	18800416 	blt	r3,r2,2009234 <_malloc_r+0x4b8>
 2009224:	9009883a 	mov	r4,r18
 2009228:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200922c:	0005883a 	mov	r2,zero
 2009230:	003f7b06 	br	2009020 <_malloc_r+0x2a4>
 2009234:	88c00054 	ori	r3,r17,1
 2009238:	80c00115 	stw	r3,4(r16)
 200923c:	8463883a 	add	r17,r16,r17
 2009240:	10800054 	ori	r2,r2,1
 2009244:	9c400215 	stw	r17,8(r19)
 2009248:	88800115 	stw	r2,4(r17)
 200924c:	9009883a 	mov	r4,r18
 2009250:	200ebc40 	call	200ebc4 <__malloc_unlock>
 2009254:	80800204 	addi	r2,r16,8
 2009258:	003f7106 	br	2009020 <_malloc_r+0x2a4>
 200925c:	00c00504 	movi	r3,20
 2009260:	18804a2e 	bgeu	r3,r2,200938c <_malloc_r+0x610>
 2009264:	00c01504 	movi	r3,84
 2009268:	18806e36 	bltu	r3,r2,2009424 <_malloc_r+0x6a8>
 200926c:	8804d33a 	srli	r2,r17,12
 2009270:	12001bc4 	addi	r8,r2,111
 2009274:	11c01b84 	addi	r7,r2,110
 2009278:	4209883a 	add	r4,r8,r8
 200927c:	003edd06 	br	2008df4 <_malloc_r+0x78>
 2009280:	3804d27a 	srli	r2,r7,9
 2009284:	00c00104 	movi	r3,4
 2009288:	1880442e 	bgeu	r3,r2,200939c <_malloc_r+0x620>
 200928c:	00c00504 	movi	r3,20
 2009290:	18808136 	bltu	r3,r2,2009498 <_malloc_r+0x71c>
 2009294:	11401704 	addi	r5,r2,92
 2009298:	10c016c4 	addi	r3,r2,91
 200929c:	294b883a 	add	r5,r5,r5
 20092a0:	294b883a 	add	r5,r5,r5
 20092a4:	294b883a 	add	r5,r5,r5
 20092a8:	994b883a 	add	r5,r19,r5
 20092ac:	28800017 	ldw	r2,0(r5)
 20092b0:	018080b4 	movhi	r6,514
 20092b4:	297ffe04 	addi	r5,r5,-8
 20092b8:	31a73204 	addi	r6,r6,-25400
 20092bc:	28806526 	beq	r5,r2,2009454 <_malloc_r+0x6d8>
 20092c0:	01bfff04 	movi	r6,-4
 20092c4:	10c00117 	ldw	r3,4(r2)
 20092c8:	1986703a 	and	r3,r3,r6
 20092cc:	38c0022e 	bgeu	r7,r3,20092d8 <_malloc_r+0x55c>
 20092d0:	10800217 	ldw	r2,8(r2)
 20092d4:	28bffb1e 	bne	r5,r2,20092c4 <_malloc_r+0x548>
 20092d8:	11400317 	ldw	r5,12(r2)
 20092dc:	98c00117 	ldw	r3,4(r19)
 20092e0:	81400315 	stw	r5,12(r16)
 20092e4:	80800215 	stw	r2,8(r16)
 20092e8:	2c000215 	stw	r16,8(r5)
 20092ec:	14000315 	stw	r16,12(r2)
 20092f0:	003ef806 	br	2008ed4 <_malloc_r+0x158>
 20092f4:	88c00054 	ori	r3,r17,1
 20092f8:	80c00115 	stw	r3,4(r16)
 20092fc:	8463883a 	add	r17,r16,r17
 2009300:	34400515 	stw	r17,20(r6)
 2009304:	34400415 	stw	r17,16(r6)
 2009308:	10c00054 	ori	r3,r2,1
 200930c:	8a000315 	stw	r8,12(r17)
 2009310:	8a000215 	stw	r8,8(r17)
 2009314:	88c00115 	stw	r3,4(r17)
 2009318:	88a3883a 	add	r17,r17,r2
 200931c:	88800015 	stw	r2,0(r17)
 2009320:	9009883a 	mov	r4,r18
 2009324:	200ebc40 	call	200ebc4 <__malloc_unlock>
 2009328:	80800204 	addi	r2,r16,8
 200932c:	003f3c06 	br	2009020 <_malloc_r+0x2a4>
 2009330:	30c00117 	ldw	r3,4(r6)
 2009334:	003ee706 	br	2008ed4 <_malloc_r+0x158>
 2009338:	5ac00044 	addi	r11,r11,1
 200933c:	588000cc 	andi	r2,r11,3
 2009340:	31800204 	addi	r6,r6,8
 2009344:	103efd1e 	bne	r2,zero,2008f3c <_malloc_r+0x1c0>
 2009348:	00002406 	br	20093dc <_malloc_r+0x660>
 200934c:	14000317 	ldw	r16,12(r2)
 2009350:	143f251e 	bne	r2,r16,2008fe8 <_malloc_r+0x26c>
 2009354:	21000084 	addi	r4,r4,2
 2009358:	003ebc06 	br	2008e4c <_malloc_r+0xd0>
 200935c:	8085883a 	add	r2,r16,r2
 2009360:	10c00117 	ldw	r3,4(r2)
 2009364:	81000317 	ldw	r4,12(r16)
 2009368:	81400217 	ldw	r5,8(r16)
 200936c:	18c00054 	ori	r3,r3,1
 2009370:	10c00115 	stw	r3,4(r2)
 2009374:	29000315 	stw	r4,12(r5)
 2009378:	21400215 	stw	r5,8(r4)
 200937c:	9009883a 	mov	r4,r18
 2009380:	200ebc40 	call	200ebc4 <__malloc_unlock>
 2009384:	80800204 	addi	r2,r16,8
 2009388:	003f2506 	br	2009020 <_malloc_r+0x2a4>
 200938c:	12001704 	addi	r8,r2,92
 2009390:	11c016c4 	addi	r7,r2,91
 2009394:	4209883a 	add	r4,r8,r8
 2009398:	003e9606 	br	2008df4 <_malloc_r+0x78>
 200939c:	3804d1ba 	srli	r2,r7,6
 20093a0:	11400e44 	addi	r5,r2,57
 20093a4:	10c00e04 	addi	r3,r2,56
 20093a8:	294b883a 	add	r5,r5,r5
 20093ac:	003fbc06 	br	20092a0 <_malloc_r+0x524>
 20093b0:	84ff5926 	beq	r16,r19,2009118 <_malloc_r+0x39c>
 20093b4:	008080b4 	movhi	r2,514
 20093b8:	10a73204 	addi	r2,r2,-25400
 20093bc:	14000217 	ldw	r16,8(r2)
 20093c0:	00bfff04 	movi	r2,-4
 20093c4:	80c00117 	ldw	r3,4(r16)
 20093c8:	1886703a 	and	r3,r3,r2
 20093cc:	003f9106 	br	2009214 <_malloc_r+0x498>
 20093d0:	60800217 	ldw	r2,8(r12)
 20093d4:	213fffc4 	addi	r4,r4,-1
 20093d8:	1300651e 	bne	r2,r12,2009570 <_malloc_r+0x7f4>
 20093dc:	208000cc 	andi	r2,r4,3
 20093e0:	633ffe04 	addi	r12,r12,-8
 20093e4:	103ffa1e 	bne	r2,zero,20093d0 <_malloc_r+0x654>
 20093e8:	98800117 	ldw	r2,4(r19)
 20093ec:	0146303a 	nor	r3,zero,r5
 20093f0:	1884703a 	and	r2,r3,r2
 20093f4:	98800115 	stw	r2,4(r19)
 20093f8:	294b883a 	add	r5,r5,r5
 20093fc:	117f2836 	bltu	r2,r5,20090a0 <_malloc_r+0x324>
 2009400:	283f2726 	beq	r5,zero,20090a0 <_malloc_r+0x324>
 2009404:	2886703a 	and	r3,r5,r2
 2009408:	5809883a 	mov	r4,r11
 200940c:	183ec31e 	bne	r3,zero,2008f1c <_malloc_r+0x1a0>
 2009410:	294b883a 	add	r5,r5,r5
 2009414:	2886703a 	and	r3,r5,r2
 2009418:	21000104 	addi	r4,r4,4
 200941c:	183ffc26 	beq	r3,zero,2009410 <_malloc_r+0x694>
 2009420:	003ebe06 	br	2008f1c <_malloc_r+0x1a0>
 2009424:	00c05504 	movi	r3,340
 2009428:	18801236 	bltu	r3,r2,2009474 <_malloc_r+0x6f8>
 200942c:	8804d3fa 	srli	r2,r17,15
 2009430:	12001e04 	addi	r8,r2,120
 2009434:	11c01dc4 	addi	r7,r2,119
 2009438:	4209883a 	add	r4,r8,r8
 200943c:	003e6d06 	br	2008df4 <_malloc_r+0x78>
 2009440:	00c40004 	movi	r3,4096
 2009444:	003f4606 	br	2009160 <_malloc_r+0x3e4>
 2009448:	00800044 	movi	r2,1
 200944c:	a0800115 	stw	r2,4(r20)
 2009450:	003f7406 	br	2009224 <_malloc_r+0x4a8>
 2009454:	1805d0ba 	srai	r2,r3,2
 2009458:	01c00044 	movi	r7,1
 200945c:	30c00117 	ldw	r3,4(r6)
 2009460:	388e983a 	sll	r7,r7,r2
 2009464:	2805883a 	mov	r2,r5
 2009468:	38c6b03a 	or	r3,r7,r3
 200946c:	30c00115 	stw	r3,4(r6)
 2009470:	003f9b06 	br	20092e0 <_malloc_r+0x564>
 2009474:	00c15504 	movi	r3,1364
 2009478:	18801a36 	bltu	r3,r2,20094e4 <_malloc_r+0x768>
 200947c:	8804d4ba 	srli	r2,r17,18
 2009480:	12001f44 	addi	r8,r2,125
 2009484:	11c01f04 	addi	r7,r2,124
 2009488:	4209883a 	add	r4,r8,r8
 200948c:	003e5906 	br	2008df4 <_malloc_r+0x78>
 2009490:	ad400404 	addi	r21,r21,16
 2009494:	003f1706 	br	20090f4 <_malloc_r+0x378>
 2009498:	00c01504 	movi	r3,84
 200949c:	18802336 	bltu	r3,r2,200952c <_malloc_r+0x7b0>
 20094a0:	3804d33a 	srli	r2,r7,12
 20094a4:	11401bc4 	addi	r5,r2,111
 20094a8:	10c01b84 	addi	r3,r2,110
 20094ac:	294b883a 	add	r5,r5,r5
 20094b0:	003f7b06 	br	20092a0 <_malloc_r+0x524>
 20094b4:	9c000217 	ldw	r16,8(r19)
 20094b8:	00bfff04 	movi	r2,-4
 20094bc:	80c00117 	ldw	r3,4(r16)
 20094c0:	1886703a 	and	r3,r3,r2
 20094c4:	003f5306 	br	2009214 <_malloc_r+0x498>
 20094c8:	3083ffcc 	andi	r2,r6,4095
 20094cc:	103f181e 	bne	r2,zero,2009130 <_malloc_r+0x3b4>
 20094d0:	99000217 	ldw	r4,8(r19)
 20094d4:	b545883a 	add	r2,r22,r21
 20094d8:	10800054 	ori	r2,r2,1
 20094dc:	20800115 	stw	r2,4(r4)
 20094e0:	003f3e06 	br	20091dc <_malloc_r+0x460>
 20094e4:	01003f84 	movi	r4,254
 20094e8:	02001fc4 	movi	r8,127
 20094ec:	01c01f84 	movi	r7,126
 20094f0:	003e4006 	br	2008df4 <_malloc_r+0x78>
 20094f4:	008080b4 	movhi	r2,514
 20094f8:	10acbd04 	addi	r2,r2,-19724
 20094fc:	15000015 	stw	r20,0(r2)
 2009500:	003f1106 	br	2009148 <_malloc_r+0x3cc>
 2009504:	00800044 	movi	r2,1
 2009508:	002b883a 	mov	r21,zero
 200950c:	003f1f06 	br	200918c <_malloc_r+0x410>
 2009510:	81400204 	addi	r5,r16,8
 2009514:	9009883a 	mov	r4,r18
 2009518:	20081840 	call	2008184 <_free_r>
 200951c:	008080b4 	movhi	r2,514
 2009520:	10b3f104 	addi	r2,r2,-12348
 2009524:	10c00017 	ldw	r3,0(r2)
 2009528:	003f2c06 	br	20091dc <_malloc_r+0x460>
 200952c:	00c05504 	movi	r3,340
 2009530:	18800536 	bltu	r3,r2,2009548 <_malloc_r+0x7cc>
 2009534:	3804d3fa 	srli	r2,r7,15
 2009538:	11401e04 	addi	r5,r2,120
 200953c:	10c01dc4 	addi	r3,r2,119
 2009540:	294b883a 	add	r5,r5,r5
 2009544:	003f5606 	br	20092a0 <_malloc_r+0x524>
 2009548:	00c15504 	movi	r3,1364
 200954c:	18800536 	bltu	r3,r2,2009564 <_malloc_r+0x7e8>
 2009550:	3804d4ba 	srli	r2,r7,18
 2009554:	11401f44 	addi	r5,r2,125
 2009558:	10c01f04 	addi	r3,r2,124
 200955c:	294b883a 	add	r5,r5,r5
 2009560:	003f4f06 	br	20092a0 <_malloc_r+0x524>
 2009564:	01403f84 	movi	r5,254
 2009568:	00c01f84 	movi	r3,126
 200956c:	003f4c06 	br	20092a0 <_malloc_r+0x524>
 2009570:	98800117 	ldw	r2,4(r19)
 2009574:	003fa006 	br	20093f8 <_malloc_r+0x67c>
 2009578:	8808d0fa 	srli	r4,r17,3
 200957c:	20800044 	addi	r2,r4,1
 2009580:	1085883a 	add	r2,r2,r2
 2009584:	003e9006 	br	2008fc8 <_malloc_r+0x24c>

02009588 <memchr>:
 2009588:	208000cc 	andi	r2,r4,3
 200958c:	280f883a 	mov	r7,r5
 2009590:	10003426 	beq	r2,zero,2009664 <memchr+0xdc>
 2009594:	30bfffc4 	addi	r2,r6,-1
 2009598:	30001a26 	beq	r6,zero,2009604 <memchr+0x7c>
 200959c:	20c00003 	ldbu	r3,0(r4)
 20095a0:	29803fcc 	andi	r6,r5,255
 20095a4:	30c0051e 	bne	r6,r3,20095bc <memchr+0x34>
 20095a8:	00001806 	br	200960c <memchr+0x84>
 20095ac:	10001526 	beq	r2,zero,2009604 <memchr+0x7c>
 20095b0:	20c00003 	ldbu	r3,0(r4)
 20095b4:	10bfffc4 	addi	r2,r2,-1
 20095b8:	30c01426 	beq	r6,r3,200960c <memchr+0x84>
 20095bc:	21000044 	addi	r4,r4,1
 20095c0:	20c000cc 	andi	r3,r4,3
 20095c4:	183ff91e 	bne	r3,zero,20095ac <memchr+0x24>
 20095c8:	020000c4 	movi	r8,3
 20095cc:	40801136 	bltu	r8,r2,2009614 <memchr+0x8c>
 20095d0:	10000c26 	beq	r2,zero,2009604 <memchr+0x7c>
 20095d4:	20c00003 	ldbu	r3,0(r4)
 20095d8:	29403fcc 	andi	r5,r5,255
 20095dc:	28c00b26 	beq	r5,r3,200960c <memchr+0x84>
 20095e0:	20c00044 	addi	r3,r4,1
 20095e4:	39803fcc 	andi	r6,r7,255
 20095e8:	2089883a 	add	r4,r4,r2
 20095ec:	00000306 	br	20095fc <memchr+0x74>
 20095f0:	18c00044 	addi	r3,r3,1
 20095f4:	197fffc3 	ldbu	r5,-1(r3)
 20095f8:	31400526 	beq	r6,r5,2009610 <memchr+0x88>
 20095fc:	1805883a 	mov	r2,r3
 2009600:	20fffb1e 	bne	r4,r3,20095f0 <memchr+0x68>
 2009604:	0005883a 	mov	r2,zero
 2009608:	f800283a 	ret
 200960c:	2005883a 	mov	r2,r4
 2009610:	f800283a 	ret
 2009614:	28c03fcc 	andi	r3,r5,255
 2009618:	1812923a 	slli	r9,r3,8
 200961c:	02ffbff4 	movhi	r11,65279
 2009620:	02a02074 	movhi	r10,32897
 2009624:	48d2b03a 	or	r9,r9,r3
 2009628:	4806943a 	slli	r3,r9,16
 200962c:	5affbfc4 	addi	r11,r11,-257
 2009630:	52a02004 	addi	r10,r10,-32640
 2009634:	48d2b03a 	or	r9,r9,r3
 2009638:	20c00017 	ldw	r3,0(r4)
 200963c:	48c6f03a 	xor	r3,r9,r3
 2009640:	1acd883a 	add	r6,r3,r11
 2009644:	00c6303a 	nor	r3,zero,r3
 2009648:	30c6703a 	and	r3,r6,r3
 200964c:	1a86703a 	and	r3,r3,r10
 2009650:	183fe01e 	bne	r3,zero,20095d4 <memchr+0x4c>
 2009654:	10bfff04 	addi	r2,r2,-4
 2009658:	21000104 	addi	r4,r4,4
 200965c:	40bff636 	bltu	r8,r2,2009638 <memchr+0xb0>
 2009660:	003fdb06 	br	20095d0 <memchr+0x48>
 2009664:	3005883a 	mov	r2,r6
 2009668:	003fd706 	br	20095c8 <memchr+0x40>

0200966c <memcpy>:
 200966c:	defffd04 	addi	sp,sp,-12
 2009670:	dfc00215 	stw	ra,8(sp)
 2009674:	dc400115 	stw	r17,4(sp)
 2009678:	dc000015 	stw	r16,0(sp)
 200967c:	00c003c4 	movi	r3,15
 2009680:	2005883a 	mov	r2,r4
 2009684:	1980452e 	bgeu	r3,r6,200979c <memcpy+0x130>
 2009688:	2906b03a 	or	r3,r5,r4
 200968c:	18c000cc 	andi	r3,r3,3
 2009690:	1800441e 	bne	r3,zero,20097a4 <memcpy+0x138>
 2009694:	347ffc04 	addi	r17,r6,-16
 2009698:	8822d13a 	srli	r17,r17,4
 200969c:	28c00104 	addi	r3,r5,4
 20096a0:	23400104 	addi	r13,r4,4
 20096a4:	8820913a 	slli	r16,r17,4
 20096a8:	2b000204 	addi	r12,r5,8
 20096ac:	22c00204 	addi	r11,r4,8
 20096b0:	84000504 	addi	r16,r16,20
 20096b4:	2a800304 	addi	r10,r5,12
 20096b8:	22400304 	addi	r9,r4,12
 20096bc:	2c21883a 	add	r16,r5,r16
 20096c0:	2811883a 	mov	r8,r5
 20096c4:	200f883a 	mov	r7,r4
 20096c8:	41000017 	ldw	r4,0(r8)
 20096cc:	1fc00017 	ldw	ra,0(r3)
 20096d0:	63c00017 	ldw	r15,0(r12)
 20096d4:	39000015 	stw	r4,0(r7)
 20096d8:	53800017 	ldw	r14,0(r10)
 20096dc:	6fc00015 	stw	ra,0(r13)
 20096e0:	5bc00015 	stw	r15,0(r11)
 20096e4:	4b800015 	stw	r14,0(r9)
 20096e8:	18c00404 	addi	r3,r3,16
 20096ec:	39c00404 	addi	r7,r7,16
 20096f0:	42000404 	addi	r8,r8,16
 20096f4:	6b400404 	addi	r13,r13,16
 20096f8:	63000404 	addi	r12,r12,16
 20096fc:	5ac00404 	addi	r11,r11,16
 2009700:	52800404 	addi	r10,r10,16
 2009704:	4a400404 	addi	r9,r9,16
 2009708:	1c3fef1e 	bne	r3,r16,20096c8 <memcpy+0x5c>
 200970c:	89c00044 	addi	r7,r17,1
 2009710:	380e913a 	slli	r7,r7,4
 2009714:	310003cc 	andi	r4,r6,15
 2009718:	02c000c4 	movi	r11,3
 200971c:	11c7883a 	add	r3,r2,r7
 2009720:	29cb883a 	add	r5,r5,r7
 2009724:	5900212e 	bgeu	r11,r4,20097ac <memcpy+0x140>
 2009728:	1813883a 	mov	r9,r3
 200972c:	2811883a 	mov	r8,r5
 2009730:	200f883a 	mov	r7,r4
 2009734:	42800017 	ldw	r10,0(r8)
 2009738:	4a400104 	addi	r9,r9,4
 200973c:	39ffff04 	addi	r7,r7,-4
 2009740:	4abfff15 	stw	r10,-4(r9)
 2009744:	42000104 	addi	r8,r8,4
 2009748:	59fffa36 	bltu	r11,r7,2009734 <memcpy+0xc8>
 200974c:	213fff04 	addi	r4,r4,-4
 2009750:	2008d0ba 	srli	r4,r4,2
 2009754:	318000cc 	andi	r6,r6,3
 2009758:	21000044 	addi	r4,r4,1
 200975c:	2109883a 	add	r4,r4,r4
 2009760:	2109883a 	add	r4,r4,r4
 2009764:	1907883a 	add	r3,r3,r4
 2009768:	290b883a 	add	r5,r5,r4
 200976c:	30000626 	beq	r6,zero,2009788 <memcpy+0x11c>
 2009770:	198d883a 	add	r6,r3,r6
 2009774:	29c00003 	ldbu	r7,0(r5)
 2009778:	18c00044 	addi	r3,r3,1
 200977c:	29400044 	addi	r5,r5,1
 2009780:	19ffffc5 	stb	r7,-1(r3)
 2009784:	19bffb1e 	bne	r3,r6,2009774 <memcpy+0x108>
 2009788:	dfc00217 	ldw	ra,8(sp)
 200978c:	dc400117 	ldw	r17,4(sp)
 2009790:	dc000017 	ldw	r16,0(sp)
 2009794:	dec00304 	addi	sp,sp,12
 2009798:	f800283a 	ret
 200979c:	2007883a 	mov	r3,r4
 20097a0:	003ff206 	br	200976c <memcpy+0x100>
 20097a4:	2007883a 	mov	r3,r4
 20097a8:	003ff106 	br	2009770 <memcpy+0x104>
 20097ac:	200d883a 	mov	r6,r4
 20097b0:	003fee06 	br	200976c <memcpy+0x100>

020097b4 <memmove>:
 20097b4:	2005883a 	mov	r2,r4
 20097b8:	29000b2e 	bgeu	r5,r4,20097e8 <memmove+0x34>
 20097bc:	298f883a 	add	r7,r5,r6
 20097c0:	21c0092e 	bgeu	r4,r7,20097e8 <memmove+0x34>
 20097c4:	2187883a 	add	r3,r4,r6
 20097c8:	198bc83a 	sub	r5,r3,r6
 20097cc:	30004826 	beq	r6,zero,20098f0 <memmove+0x13c>
 20097d0:	39ffffc4 	addi	r7,r7,-1
 20097d4:	39000003 	ldbu	r4,0(r7)
 20097d8:	18ffffc4 	addi	r3,r3,-1
 20097dc:	19000005 	stb	r4,0(r3)
 20097e0:	28fffb1e 	bne	r5,r3,20097d0 <memmove+0x1c>
 20097e4:	f800283a 	ret
 20097e8:	00c003c4 	movi	r3,15
 20097ec:	1980412e 	bgeu	r3,r6,20098f4 <memmove+0x140>
 20097f0:	2886b03a 	or	r3,r5,r2
 20097f4:	18c000cc 	andi	r3,r3,3
 20097f8:	1800401e 	bne	r3,zero,20098fc <memmove+0x148>
 20097fc:	33fffc04 	addi	r15,r6,-16
 2009800:	781ed13a 	srli	r15,r15,4
 2009804:	28c00104 	addi	r3,r5,4
 2009808:	13400104 	addi	r13,r2,4
 200980c:	781c913a 	slli	r14,r15,4
 2009810:	2b000204 	addi	r12,r5,8
 2009814:	12c00204 	addi	r11,r2,8
 2009818:	73800504 	addi	r14,r14,20
 200981c:	2a800304 	addi	r10,r5,12
 2009820:	12400304 	addi	r9,r2,12
 2009824:	2b9d883a 	add	r14,r5,r14
 2009828:	2811883a 	mov	r8,r5
 200982c:	100f883a 	mov	r7,r2
 2009830:	41000017 	ldw	r4,0(r8)
 2009834:	39c00404 	addi	r7,r7,16
 2009838:	18c00404 	addi	r3,r3,16
 200983c:	393ffc15 	stw	r4,-16(r7)
 2009840:	193ffc17 	ldw	r4,-16(r3)
 2009844:	6b400404 	addi	r13,r13,16
 2009848:	5ac00404 	addi	r11,r11,16
 200984c:	693ffc15 	stw	r4,-16(r13)
 2009850:	61000017 	ldw	r4,0(r12)
 2009854:	4a400404 	addi	r9,r9,16
 2009858:	42000404 	addi	r8,r8,16
 200985c:	593ffc15 	stw	r4,-16(r11)
 2009860:	51000017 	ldw	r4,0(r10)
 2009864:	63000404 	addi	r12,r12,16
 2009868:	52800404 	addi	r10,r10,16
 200986c:	493ffc15 	stw	r4,-16(r9)
 2009870:	1bbfef1e 	bne	r3,r14,2009830 <memmove+0x7c>
 2009874:	79000044 	addi	r4,r15,1
 2009878:	2008913a 	slli	r4,r4,4
 200987c:	328003cc 	andi	r10,r6,15
 2009880:	02c000c4 	movi	r11,3
 2009884:	1107883a 	add	r3,r2,r4
 2009888:	290b883a 	add	r5,r5,r4
 200988c:	5a801e2e 	bgeu	r11,r10,2009908 <memmove+0x154>
 2009890:	1813883a 	mov	r9,r3
 2009894:	2811883a 	mov	r8,r5
 2009898:	500f883a 	mov	r7,r10
 200989c:	41000017 	ldw	r4,0(r8)
 20098a0:	4a400104 	addi	r9,r9,4
 20098a4:	39ffff04 	addi	r7,r7,-4
 20098a8:	493fff15 	stw	r4,-4(r9)
 20098ac:	42000104 	addi	r8,r8,4
 20098b0:	59fffa36 	bltu	r11,r7,200989c <memmove+0xe8>
 20098b4:	513fff04 	addi	r4,r10,-4
 20098b8:	2008d0ba 	srli	r4,r4,2
 20098bc:	318000cc 	andi	r6,r6,3
 20098c0:	21000044 	addi	r4,r4,1
 20098c4:	2109883a 	add	r4,r4,r4
 20098c8:	2109883a 	add	r4,r4,r4
 20098cc:	1907883a 	add	r3,r3,r4
 20098d0:	290b883a 	add	r5,r5,r4
 20098d4:	30000b26 	beq	r6,zero,2009904 <memmove+0x150>
 20098d8:	198d883a 	add	r6,r3,r6
 20098dc:	29c00003 	ldbu	r7,0(r5)
 20098e0:	18c00044 	addi	r3,r3,1
 20098e4:	29400044 	addi	r5,r5,1
 20098e8:	19ffffc5 	stb	r7,-1(r3)
 20098ec:	19bffb1e 	bne	r3,r6,20098dc <memmove+0x128>
 20098f0:	f800283a 	ret
 20098f4:	1007883a 	mov	r3,r2
 20098f8:	003ff606 	br	20098d4 <memmove+0x120>
 20098fc:	1007883a 	mov	r3,r2
 2009900:	003ff506 	br	20098d8 <memmove+0x124>
 2009904:	f800283a 	ret
 2009908:	500d883a 	mov	r6,r10
 200990c:	003ff106 	br	20098d4 <memmove+0x120>

02009910 <memset>:
 2009910:	20c000cc 	andi	r3,r4,3
 2009914:	2005883a 	mov	r2,r4
 2009918:	18004426 	beq	r3,zero,2009a2c <memset+0x11c>
 200991c:	31ffffc4 	addi	r7,r6,-1
 2009920:	30004026 	beq	r6,zero,2009a24 <memset+0x114>
 2009924:	2813883a 	mov	r9,r5
 2009928:	200d883a 	mov	r6,r4
 200992c:	2007883a 	mov	r3,r4
 2009930:	00000406 	br	2009944 <memset+0x34>
 2009934:	3a3fffc4 	addi	r8,r7,-1
 2009938:	31800044 	addi	r6,r6,1
 200993c:	38003926 	beq	r7,zero,2009a24 <memset+0x114>
 2009940:	400f883a 	mov	r7,r8
 2009944:	18c00044 	addi	r3,r3,1
 2009948:	32400005 	stb	r9,0(r6)
 200994c:	1a0000cc 	andi	r8,r3,3
 2009950:	403ff81e 	bne	r8,zero,2009934 <memset+0x24>
 2009954:	010000c4 	movi	r4,3
 2009958:	21c02d2e 	bgeu	r4,r7,2009a10 <memset+0x100>
 200995c:	29003fcc 	andi	r4,r5,255
 2009960:	200c923a 	slli	r6,r4,8
 2009964:	3108b03a 	or	r4,r6,r4
 2009968:	200c943a 	slli	r6,r4,16
 200996c:	218cb03a 	or	r6,r4,r6
 2009970:	010003c4 	movi	r4,15
 2009974:	21c0182e 	bgeu	r4,r7,20099d8 <memset+0xc8>
 2009978:	3b3ffc04 	addi	r12,r7,-16
 200997c:	6018d13a 	srli	r12,r12,4
 2009980:	1a000104 	addi	r8,r3,4
 2009984:	1ac00204 	addi	r11,r3,8
 2009988:	6008913a 	slli	r4,r12,4
 200998c:	1a800304 	addi	r10,r3,12
 2009990:	1813883a 	mov	r9,r3
 2009994:	21000504 	addi	r4,r4,20
 2009998:	1909883a 	add	r4,r3,r4
 200999c:	49800015 	stw	r6,0(r9)
 20099a0:	41800015 	stw	r6,0(r8)
 20099a4:	59800015 	stw	r6,0(r11)
 20099a8:	51800015 	stw	r6,0(r10)
 20099ac:	42000404 	addi	r8,r8,16
 20099b0:	4a400404 	addi	r9,r9,16
 20099b4:	5ac00404 	addi	r11,r11,16
 20099b8:	52800404 	addi	r10,r10,16
 20099bc:	413ff71e 	bne	r8,r4,200999c <memset+0x8c>
 20099c0:	63000044 	addi	r12,r12,1
 20099c4:	6018913a 	slli	r12,r12,4
 20099c8:	39c003cc 	andi	r7,r7,15
 20099cc:	010000c4 	movi	r4,3
 20099d0:	1b07883a 	add	r3,r3,r12
 20099d4:	21c00e2e 	bgeu	r4,r7,2009a10 <memset+0x100>
 20099d8:	1813883a 	mov	r9,r3
 20099dc:	3811883a 	mov	r8,r7
 20099e0:	010000c4 	movi	r4,3
 20099e4:	49800015 	stw	r6,0(r9)
 20099e8:	423fff04 	addi	r8,r8,-4
 20099ec:	4a400104 	addi	r9,r9,4
 20099f0:	223ffc36 	bltu	r4,r8,20099e4 <memset+0xd4>
 20099f4:	393fff04 	addi	r4,r7,-4
 20099f8:	2008d0ba 	srli	r4,r4,2
 20099fc:	39c000cc 	andi	r7,r7,3
 2009a00:	21000044 	addi	r4,r4,1
 2009a04:	2109883a 	add	r4,r4,r4
 2009a08:	2109883a 	add	r4,r4,r4
 2009a0c:	1907883a 	add	r3,r3,r4
 2009a10:	38000526 	beq	r7,zero,2009a28 <memset+0x118>
 2009a14:	19cf883a 	add	r7,r3,r7
 2009a18:	19400005 	stb	r5,0(r3)
 2009a1c:	18c00044 	addi	r3,r3,1
 2009a20:	38fffd1e 	bne	r7,r3,2009a18 <memset+0x108>
 2009a24:	f800283a 	ret
 2009a28:	f800283a 	ret
 2009a2c:	2007883a 	mov	r3,r4
 2009a30:	300f883a 	mov	r7,r6
 2009a34:	003fc706 	br	2009954 <memset+0x44>

02009a38 <_Balloc>:
 2009a38:	20801317 	ldw	r2,76(r4)
 2009a3c:	defffc04 	addi	sp,sp,-16
 2009a40:	dc400115 	stw	r17,4(sp)
 2009a44:	dc000015 	stw	r16,0(sp)
 2009a48:	dfc00315 	stw	ra,12(sp)
 2009a4c:	dc800215 	stw	r18,8(sp)
 2009a50:	2023883a 	mov	r17,r4
 2009a54:	2821883a 	mov	r16,r5
 2009a58:	10000f26 	beq	r2,zero,2009a98 <_Balloc+0x60>
 2009a5c:	8407883a 	add	r3,r16,r16
 2009a60:	18c7883a 	add	r3,r3,r3
 2009a64:	10c7883a 	add	r3,r2,r3
 2009a68:	18800017 	ldw	r2,0(r3)
 2009a6c:	10001126 	beq	r2,zero,2009ab4 <_Balloc+0x7c>
 2009a70:	11000017 	ldw	r4,0(r2)
 2009a74:	19000015 	stw	r4,0(r3)
 2009a78:	10000415 	stw	zero,16(r2)
 2009a7c:	10000315 	stw	zero,12(r2)
 2009a80:	dfc00317 	ldw	ra,12(sp)
 2009a84:	dc800217 	ldw	r18,8(sp)
 2009a88:	dc400117 	ldw	r17,4(sp)
 2009a8c:	dc000017 	ldw	r16,0(sp)
 2009a90:	dec00404 	addi	sp,sp,16
 2009a94:	f800283a 	ret
 2009a98:	01800844 	movi	r6,33
 2009a9c:	01400104 	movi	r5,4
 2009aa0:	200ca6c0 	call	200ca6c <_calloc_r>
 2009aa4:	88801315 	stw	r2,76(r17)
 2009aa8:	103fec1e 	bne	r2,zero,2009a5c <_Balloc+0x24>
 2009aac:	0005883a 	mov	r2,zero
 2009ab0:	003ff306 	br	2009a80 <_Balloc+0x48>
 2009ab4:	01400044 	movi	r5,1
 2009ab8:	2c24983a 	sll	r18,r5,r16
 2009abc:	8809883a 	mov	r4,r17
 2009ac0:	91800144 	addi	r6,r18,5
 2009ac4:	318d883a 	add	r6,r6,r6
 2009ac8:	318d883a 	add	r6,r6,r6
 2009acc:	200ca6c0 	call	200ca6c <_calloc_r>
 2009ad0:	103ff626 	beq	r2,zero,2009aac <_Balloc+0x74>
 2009ad4:	14000115 	stw	r16,4(r2)
 2009ad8:	14800215 	stw	r18,8(r2)
 2009adc:	003fe606 	br	2009a78 <_Balloc+0x40>

02009ae0 <_Bfree>:
 2009ae0:	28000826 	beq	r5,zero,2009b04 <_Bfree+0x24>
 2009ae4:	28c00117 	ldw	r3,4(r5)
 2009ae8:	20801317 	ldw	r2,76(r4)
 2009aec:	18c7883a 	add	r3,r3,r3
 2009af0:	18c7883a 	add	r3,r3,r3
 2009af4:	10c5883a 	add	r2,r2,r3
 2009af8:	10c00017 	ldw	r3,0(r2)
 2009afc:	28c00015 	stw	r3,0(r5)
 2009b00:	11400015 	stw	r5,0(r2)
 2009b04:	f800283a 	ret

02009b08 <__multadd>:
 2009b08:	defff704 	addi	sp,sp,-36
 2009b0c:	dc800215 	stw	r18,8(sp)
 2009b10:	2c800417 	ldw	r18,16(r5)
 2009b14:	dd800615 	stw	r22,24(sp)
 2009b18:	dd400515 	stw	r21,20(sp)
 2009b1c:	dd000415 	stw	r20,16(sp)
 2009b20:	dcc00315 	stw	r19,12(sp)
 2009b24:	dc400115 	stw	r17,4(sp)
 2009b28:	dc000015 	stw	r16,0(sp)
 2009b2c:	dfc00815 	stw	ra,32(sp)
 2009b30:	ddc00715 	stw	r23,28(sp)
 2009b34:	2827883a 	mov	r19,r5
 2009b38:	2029883a 	mov	r20,r4
 2009b3c:	3023883a 	mov	r17,r6
 2009b40:	3821883a 	mov	r16,r7
 2009b44:	2d400504 	addi	r21,r5,20
 2009b48:	002d883a 	mov	r22,zero
 2009b4c:	adc00017 	ldw	r23,0(r21)
 2009b50:	880b883a 	mov	r5,r17
 2009b54:	ad400104 	addi	r21,r21,4
 2009b58:	b93fffcc 	andi	r4,r23,65535
 2009b5c:	20011180 	call	2001118 <__mulsi3>
 2009b60:	b808d43a 	srli	r4,r23,16
 2009b64:	880b883a 	mov	r5,r17
 2009b68:	1421883a 	add	r16,r2,r16
 2009b6c:	20011180 	call	2001118 <__mulsi3>
 2009b70:	800ed43a 	srli	r7,r16,16
 2009b74:	80ffffcc 	andi	r3,r16,65535
 2009b78:	b5800044 	addi	r22,r22,1
 2009b7c:	11c5883a 	add	r2,r2,r7
 2009b80:	100e943a 	slli	r7,r2,16
 2009b84:	1020d43a 	srli	r16,r2,16
 2009b88:	38c7883a 	add	r3,r7,r3
 2009b8c:	a8ffff15 	stw	r3,-4(r21)
 2009b90:	b4bfee16 	blt	r22,r18,2009b4c <__multadd+0x44>
 2009b94:	80000926 	beq	r16,zero,2009bbc <__multadd+0xb4>
 2009b98:	98800217 	ldw	r2,8(r19)
 2009b9c:	9080130e 	bge	r18,r2,2009bec <__multadd+0xe4>
 2009ba0:	90800144 	addi	r2,r18,5
 2009ba4:	1085883a 	add	r2,r2,r2
 2009ba8:	1085883a 	add	r2,r2,r2
 2009bac:	9885883a 	add	r2,r19,r2
 2009bb0:	14000015 	stw	r16,0(r2)
 2009bb4:	94800044 	addi	r18,r18,1
 2009bb8:	9c800415 	stw	r18,16(r19)
 2009bbc:	9805883a 	mov	r2,r19
 2009bc0:	dfc00817 	ldw	ra,32(sp)
 2009bc4:	ddc00717 	ldw	r23,28(sp)
 2009bc8:	dd800617 	ldw	r22,24(sp)
 2009bcc:	dd400517 	ldw	r21,20(sp)
 2009bd0:	dd000417 	ldw	r20,16(sp)
 2009bd4:	dcc00317 	ldw	r19,12(sp)
 2009bd8:	dc800217 	ldw	r18,8(sp)
 2009bdc:	dc400117 	ldw	r17,4(sp)
 2009be0:	dc000017 	ldw	r16,0(sp)
 2009be4:	dec00904 	addi	sp,sp,36
 2009be8:	f800283a 	ret
 2009bec:	99400117 	ldw	r5,4(r19)
 2009bf0:	a009883a 	mov	r4,r20
 2009bf4:	29400044 	addi	r5,r5,1
 2009bf8:	2009a380 	call	2009a38 <_Balloc>
 2009bfc:	99800417 	ldw	r6,16(r19)
 2009c00:	99400304 	addi	r5,r19,12
 2009c04:	11000304 	addi	r4,r2,12
 2009c08:	31800084 	addi	r6,r6,2
 2009c0c:	318d883a 	add	r6,r6,r6
 2009c10:	318d883a 	add	r6,r6,r6
 2009c14:	1023883a 	mov	r17,r2
 2009c18:	200966c0 	call	200966c <memcpy>
 2009c1c:	98000a26 	beq	r19,zero,2009c48 <__multadd+0x140>
 2009c20:	98c00117 	ldw	r3,4(r19)
 2009c24:	a0801317 	ldw	r2,76(r20)
 2009c28:	18c7883a 	add	r3,r3,r3
 2009c2c:	18c7883a 	add	r3,r3,r3
 2009c30:	10c5883a 	add	r2,r2,r3
 2009c34:	10c00017 	ldw	r3,0(r2)
 2009c38:	98c00015 	stw	r3,0(r19)
 2009c3c:	14c00015 	stw	r19,0(r2)
 2009c40:	8827883a 	mov	r19,r17
 2009c44:	003fd606 	br	2009ba0 <__multadd+0x98>
 2009c48:	8827883a 	mov	r19,r17
 2009c4c:	003fd406 	br	2009ba0 <__multadd+0x98>

02009c50 <__s2b>:
 2009c50:	defff904 	addi	sp,sp,-28
 2009c54:	dc400115 	stw	r17,4(sp)
 2009c58:	dc000015 	stw	r16,0(sp)
 2009c5c:	2023883a 	mov	r17,r4
 2009c60:	2821883a 	mov	r16,r5
 2009c64:	39000204 	addi	r4,r7,8
 2009c68:	01400244 	movi	r5,9
 2009c6c:	dcc00315 	stw	r19,12(sp)
 2009c70:	dc800215 	stw	r18,8(sp)
 2009c74:	dfc00615 	stw	ra,24(sp)
 2009c78:	dd400515 	stw	r21,20(sp)
 2009c7c:	dd000415 	stw	r20,16(sp)
 2009c80:	3825883a 	mov	r18,r7
 2009c84:	3027883a 	mov	r19,r6
 2009c88:	20038b40 	call	20038b4 <__divsi3>
 2009c8c:	00c00044 	movi	r3,1
 2009c90:	000b883a 	mov	r5,zero
 2009c94:	1880030e 	bge	r3,r2,2009ca4 <__s2b+0x54>
 2009c98:	18c7883a 	add	r3,r3,r3
 2009c9c:	29400044 	addi	r5,r5,1
 2009ca0:	18bffd16 	blt	r3,r2,2009c98 <__s2b+0x48>
 2009ca4:	8809883a 	mov	r4,r17
 2009ca8:	2009a380 	call	2009a38 <_Balloc>
 2009cac:	d8c00717 	ldw	r3,28(sp)
 2009cb0:	10c00515 	stw	r3,20(r2)
 2009cb4:	00c00044 	movi	r3,1
 2009cb8:	10c00415 	stw	r3,16(r2)
 2009cbc:	00c00244 	movi	r3,9
 2009cc0:	1cc0210e 	bge	r3,r19,2009d48 <__s2b+0xf8>
 2009cc4:	80eb883a 	add	r21,r16,r3
 2009cc8:	a829883a 	mov	r20,r21
 2009ccc:	84e1883a 	add	r16,r16,r19
 2009cd0:	a1c00007 	ldb	r7,0(r20)
 2009cd4:	01800284 	movi	r6,10
 2009cd8:	a5000044 	addi	r20,r20,1
 2009cdc:	100b883a 	mov	r5,r2
 2009ce0:	39fff404 	addi	r7,r7,-48
 2009ce4:	8809883a 	mov	r4,r17
 2009ce8:	2009b080 	call	2009b08 <__multadd>
 2009cec:	a43ff81e 	bne	r20,r16,2009cd0 <__s2b+0x80>
 2009cf0:	ace1883a 	add	r16,r21,r19
 2009cf4:	843ffe04 	addi	r16,r16,-8
 2009cf8:	9c800a0e 	bge	r19,r18,2009d24 <__s2b+0xd4>
 2009cfc:	94e5c83a 	sub	r18,r18,r19
 2009d00:	84a5883a 	add	r18,r16,r18
 2009d04:	81c00007 	ldb	r7,0(r16)
 2009d08:	01800284 	movi	r6,10
 2009d0c:	84000044 	addi	r16,r16,1
 2009d10:	100b883a 	mov	r5,r2
 2009d14:	39fff404 	addi	r7,r7,-48
 2009d18:	8809883a 	mov	r4,r17
 2009d1c:	2009b080 	call	2009b08 <__multadd>
 2009d20:	84bff81e 	bne	r16,r18,2009d04 <__s2b+0xb4>
 2009d24:	dfc00617 	ldw	ra,24(sp)
 2009d28:	dd400517 	ldw	r21,20(sp)
 2009d2c:	dd000417 	ldw	r20,16(sp)
 2009d30:	dcc00317 	ldw	r19,12(sp)
 2009d34:	dc800217 	ldw	r18,8(sp)
 2009d38:	dc400117 	ldw	r17,4(sp)
 2009d3c:	dc000017 	ldw	r16,0(sp)
 2009d40:	dec00704 	addi	sp,sp,28
 2009d44:	f800283a 	ret
 2009d48:	84000284 	addi	r16,r16,10
 2009d4c:	1827883a 	mov	r19,r3
 2009d50:	003fe906 	br	2009cf8 <__s2b+0xa8>

02009d54 <__hi0bits>:
 2009d54:	20bfffec 	andhi	r2,r4,65535
 2009d58:	1000141e 	bne	r2,zero,2009dac <__hi0bits+0x58>
 2009d5c:	2008943a 	slli	r4,r4,16
 2009d60:	00800404 	movi	r2,16
 2009d64:	20ffc02c 	andhi	r3,r4,65280
 2009d68:	1800021e 	bne	r3,zero,2009d74 <__hi0bits+0x20>
 2009d6c:	2008923a 	slli	r4,r4,8
 2009d70:	10800204 	addi	r2,r2,8
 2009d74:	20fc002c 	andhi	r3,r4,61440
 2009d78:	1800021e 	bne	r3,zero,2009d84 <__hi0bits+0x30>
 2009d7c:	2008913a 	slli	r4,r4,4
 2009d80:	10800104 	addi	r2,r2,4
 2009d84:	20f0002c 	andhi	r3,r4,49152
 2009d88:	1800031e 	bne	r3,zero,2009d98 <__hi0bits+0x44>
 2009d8c:	2109883a 	add	r4,r4,r4
 2009d90:	10800084 	addi	r2,r2,2
 2009d94:	2109883a 	add	r4,r4,r4
 2009d98:	20000316 	blt	r4,zero,2009da8 <__hi0bits+0x54>
 2009d9c:	2110002c 	andhi	r4,r4,16384
 2009da0:	2000041e 	bne	r4,zero,2009db4 <__hi0bits+0x60>
 2009da4:	00800804 	movi	r2,32
 2009da8:	f800283a 	ret
 2009dac:	0005883a 	mov	r2,zero
 2009db0:	003fec06 	br	2009d64 <__hi0bits+0x10>
 2009db4:	10800044 	addi	r2,r2,1
 2009db8:	f800283a 	ret

02009dbc <__lo0bits>:
 2009dbc:	20c00017 	ldw	r3,0(r4)
 2009dc0:	188001cc 	andi	r2,r3,7
 2009dc4:	10000826 	beq	r2,zero,2009de8 <__lo0bits+0x2c>
 2009dc8:	1880004c 	andi	r2,r3,1
 2009dcc:	1000211e 	bne	r2,zero,2009e54 <__lo0bits+0x98>
 2009dd0:	1880008c 	andi	r2,r3,2
 2009dd4:	1000211e 	bne	r2,zero,2009e5c <__lo0bits+0xa0>
 2009dd8:	1806d0ba 	srli	r3,r3,2
 2009ddc:	00800084 	movi	r2,2
 2009de0:	20c00015 	stw	r3,0(r4)
 2009de4:	f800283a 	ret
 2009de8:	18bfffcc 	andi	r2,r3,65535
 2009dec:	10001326 	beq	r2,zero,2009e3c <__lo0bits+0x80>
 2009df0:	0005883a 	mov	r2,zero
 2009df4:	19403fcc 	andi	r5,r3,255
 2009df8:	2800021e 	bne	r5,zero,2009e04 <__lo0bits+0x48>
 2009dfc:	1806d23a 	srli	r3,r3,8
 2009e00:	10800204 	addi	r2,r2,8
 2009e04:	194003cc 	andi	r5,r3,15
 2009e08:	2800021e 	bne	r5,zero,2009e14 <__lo0bits+0x58>
 2009e0c:	1806d13a 	srli	r3,r3,4
 2009e10:	10800104 	addi	r2,r2,4
 2009e14:	194000cc 	andi	r5,r3,3
 2009e18:	2800021e 	bne	r5,zero,2009e24 <__lo0bits+0x68>
 2009e1c:	1806d0ba 	srli	r3,r3,2
 2009e20:	10800084 	addi	r2,r2,2
 2009e24:	1940004c 	andi	r5,r3,1
 2009e28:	2800081e 	bne	r5,zero,2009e4c <__lo0bits+0x90>
 2009e2c:	1806d07a 	srli	r3,r3,1
 2009e30:	1800051e 	bne	r3,zero,2009e48 <__lo0bits+0x8c>
 2009e34:	00800804 	movi	r2,32
 2009e38:	f800283a 	ret
 2009e3c:	1806d43a 	srli	r3,r3,16
 2009e40:	00800404 	movi	r2,16
 2009e44:	003feb06 	br	2009df4 <__lo0bits+0x38>
 2009e48:	10800044 	addi	r2,r2,1
 2009e4c:	20c00015 	stw	r3,0(r4)
 2009e50:	f800283a 	ret
 2009e54:	0005883a 	mov	r2,zero
 2009e58:	f800283a 	ret
 2009e5c:	1806d07a 	srli	r3,r3,1
 2009e60:	00800044 	movi	r2,1
 2009e64:	20c00015 	stw	r3,0(r4)
 2009e68:	f800283a 	ret

02009e6c <__i2b>:
 2009e6c:	defffd04 	addi	sp,sp,-12
 2009e70:	dc000015 	stw	r16,0(sp)
 2009e74:	04000044 	movi	r16,1
 2009e78:	dc400115 	stw	r17,4(sp)
 2009e7c:	2823883a 	mov	r17,r5
 2009e80:	800b883a 	mov	r5,r16
 2009e84:	dfc00215 	stw	ra,8(sp)
 2009e88:	2009a380 	call	2009a38 <_Balloc>
 2009e8c:	14400515 	stw	r17,20(r2)
 2009e90:	14000415 	stw	r16,16(r2)
 2009e94:	dfc00217 	ldw	ra,8(sp)
 2009e98:	dc400117 	ldw	r17,4(sp)
 2009e9c:	dc000017 	ldw	r16,0(sp)
 2009ea0:	dec00304 	addi	sp,sp,12
 2009ea4:	f800283a 	ret

02009ea8 <__multiply>:
 2009ea8:	deffef04 	addi	sp,sp,-68
 2009eac:	dc400815 	stw	r17,32(sp)
 2009eb0:	dc000715 	stw	r16,28(sp)
 2009eb4:	34400417 	ldw	r17,16(r6)
 2009eb8:	2c000417 	ldw	r16,16(r5)
 2009ebc:	dd800d15 	stw	r22,52(sp)
 2009ec0:	dc800915 	stw	r18,36(sp)
 2009ec4:	dfc01015 	stw	ra,64(sp)
 2009ec8:	df000f15 	stw	fp,60(sp)
 2009ecc:	ddc00e15 	stw	r23,56(sp)
 2009ed0:	dd400c15 	stw	r21,48(sp)
 2009ed4:	dd000b15 	stw	r20,44(sp)
 2009ed8:	dcc00a15 	stw	r19,40(sp)
 2009edc:	2825883a 	mov	r18,r5
 2009ee0:	302d883a 	mov	r22,r6
 2009ee4:	8440050e 	bge	r16,r17,2009efc <__multiply+0x54>
 2009ee8:	8007883a 	mov	r3,r16
 2009eec:	3025883a 	mov	r18,r6
 2009ef0:	8821883a 	mov	r16,r17
 2009ef4:	282d883a 	mov	r22,r5
 2009ef8:	1823883a 	mov	r17,r3
 2009efc:	90800217 	ldw	r2,8(r18)
 2009f00:	8447883a 	add	r3,r16,r17
 2009f04:	d8c00215 	stw	r3,8(sp)
 2009f08:	91400117 	ldw	r5,4(r18)
 2009f0c:	10c0010e 	bge	r2,r3,2009f14 <__multiply+0x6c>
 2009f10:	29400044 	addi	r5,r5,1
 2009f14:	2009a380 	call	2009a38 <_Balloc>
 2009f18:	d8c00217 	ldw	r3,8(sp)
 2009f1c:	d8800615 	stw	r2,24(sp)
 2009f20:	18eb883a 	add	r21,r3,r3
 2009f24:	ad6b883a 	add	r21,r21,r21
 2009f28:	10c00504 	addi	r3,r2,20
 2009f2c:	1d6b883a 	add	r21,r3,r21
 2009f30:	d8c00115 	stw	r3,4(sp)
 2009f34:	dd400315 	stw	r21,12(sp)
 2009f38:	1805883a 	mov	r2,r3
 2009f3c:	1d40042e 	bgeu	r3,r21,2009f50 <__multiply+0xa8>
 2009f40:	d8c00317 	ldw	r3,12(sp)
 2009f44:	10000015 	stw	zero,0(r2)
 2009f48:	10800104 	addi	r2,r2,4
 2009f4c:	10fffc36 	bltu	r2,r3,2009f40 <__multiply+0x98>
 2009f50:	8c63883a 	add	r17,r17,r17
 2009f54:	b5800504 	addi	r22,r22,20
 2009f58:	8c63883a 	add	r17,r17,r17
 2009f5c:	94800504 	addi	r18,r18,20
 2009f60:	8421883a 	add	r16,r16,r16
 2009f64:	b463883a 	add	r17,r22,r17
 2009f68:	8421883a 	add	r16,r16,r16
 2009f6c:	dd800015 	stw	r22,0(sp)
 2009f70:	dc800415 	stw	r18,16(sp)
 2009f74:	dc400515 	stw	r17,20(sp)
 2009f78:	9429883a 	add	r20,r18,r16
 2009f7c:	b4404f2e 	bgeu	r22,r17,200a0bc <__multiply+0x214>
 2009f80:	d8c00017 	ldw	r3,0(sp)
 2009f84:	1c800017 	ldw	r18,0(r3)
 2009f88:	947fffcc 	andi	r17,r18,65535
 2009f8c:	88001e26 	beq	r17,zero,200a008 <__multiply+0x160>
 2009f90:	dd800117 	ldw	r22,4(sp)
 2009f94:	dd400417 	ldw	r21,16(sp)
 2009f98:	0027883a 	mov	r19,zero
 2009f9c:	ac800017 	ldw	r18,0(r21)
 2009fa0:	b4000017 	ldw	r16,0(r22)
 2009fa4:	880b883a 	mov	r5,r17
 2009fa8:	913fffcc 	andi	r4,r18,65535
 2009fac:	20011180 	call	2001118 <__mulsi3>
 2009fb0:	9008d43a 	srli	r4,r18,16
 2009fb4:	84bfffcc 	andi	r18,r16,65535
 2009fb8:	1485883a 	add	r2,r2,r18
 2009fbc:	14e5883a 	add	r18,r2,r19
 2009fc0:	8020d43a 	srli	r16,r16,16
 2009fc4:	9026d43a 	srli	r19,r18,16
 2009fc8:	880b883a 	mov	r5,r17
 2009fcc:	20011180 	call	2001118 <__mulsi3>
 2009fd0:	1405883a 	add	r2,r2,r16
 2009fd4:	14e1883a 	add	r16,r2,r19
 2009fd8:	90ffffcc 	andi	r3,r18,65535
 2009fdc:	8024943a 	slli	r18,r16,16
 2009fe0:	ad400104 	addi	r21,r21,4
 2009fe4:	b005883a 	mov	r2,r22
 2009fe8:	90c6b03a 	or	r3,r18,r3
 2009fec:	b0c00015 	stw	r3,0(r22)
 2009ff0:	8026d43a 	srli	r19,r16,16
 2009ff4:	b5800104 	addi	r22,r22,4
 2009ff8:	ad3fe836 	bltu	r21,r20,2009f9c <__multiply+0xf4>
 2009ffc:	d8c00017 	ldw	r3,0(sp)
 200a000:	14c00115 	stw	r19,4(r2)
 200a004:	1c800017 	ldw	r18,0(r3)
 200a008:	9024d43a 	srli	r18,r18,16
 200a00c:	90002226 	beq	r18,zero,200a098 <__multiply+0x1f0>
 200a010:	d8c00117 	ldw	r3,4(sp)
 200a014:	dd800417 	ldw	r22,16(sp)
 200a018:	002f883a 	mov	r23,zero
 200a01c:	1f000017 	ldw	fp,0(r3)
 200a020:	1823883a 	mov	r17,r3
 200a024:	182b883a 	mov	r21,r3
 200a028:	e021883a 	mov	r16,fp
 200a02c:	00000106 	br	200a034 <__multiply+0x18c>
 200a030:	982b883a 	mov	r21,r19
 200a034:	b100000b 	ldhu	r4,0(r22)
 200a038:	8020d43a 	srli	r16,r16,16
 200a03c:	900b883a 	mov	r5,r18
 200a040:	20011180 	call	2001118 <__mulsi3>
 200a044:	1405883a 	add	r2,r2,r16
 200a048:	15ef883a 	add	r23,r2,r23
 200a04c:	b804943a 	slli	r2,r23,16
 200a050:	e0ffffcc 	andi	r3,fp,65535
 200a054:	8c400104 	addi	r17,r17,4
 200a058:	10c6b03a 	or	r3,r2,r3
 200a05c:	88ffff15 	stw	r3,-4(r17)
 200a060:	b5800104 	addi	r22,r22,4
 200a064:	b13fff17 	ldw	r4,-4(r22)
 200a068:	acc00104 	addi	r19,r21,4
 200a06c:	900b883a 	mov	r5,r18
 200a070:	2008d43a 	srli	r4,r4,16
 200a074:	9c000017 	ldw	r16,0(r19)
 200a078:	20011180 	call	2001118 <__mulsi3>
 200a07c:	b806d43a 	srli	r3,r23,16
 200a080:	813fffcc 	andi	r4,r16,65535
 200a084:	1105883a 	add	r2,r2,r4
 200a088:	10f9883a 	add	fp,r2,r3
 200a08c:	e02ed43a 	srli	r23,fp,16
 200a090:	b53fe736 	bltu	r22,r20,200a030 <__multiply+0x188>
 200a094:	af000115 	stw	fp,4(r21)
 200a098:	d8c00017 	ldw	r3,0(sp)
 200a09c:	d9000517 	ldw	r4,20(sp)
 200a0a0:	18c00104 	addi	r3,r3,4
 200a0a4:	d8c00015 	stw	r3,0(sp)
 200a0a8:	d8c00117 	ldw	r3,4(sp)
 200a0ac:	18c00104 	addi	r3,r3,4
 200a0b0:	d8c00115 	stw	r3,4(sp)
 200a0b4:	d8c00017 	ldw	r3,0(sp)
 200a0b8:	193fb136 	bltu	r3,r4,2009f80 <__multiply+0xd8>
 200a0bc:	d8c00217 	ldw	r3,8(sp)
 200a0c0:	00c00c0e 	bge	zero,r3,200a0f4 <__multiply+0x24c>
 200a0c4:	d8c00317 	ldw	r3,12(sp)
 200a0c8:	18bfff17 	ldw	r2,-4(r3)
 200a0cc:	1d7fff04 	addi	r21,r3,-4
 200a0d0:	10000326 	beq	r2,zero,200a0e0 <__multiply+0x238>
 200a0d4:	00000706 	br	200a0f4 <__multiply+0x24c>
 200a0d8:	a8800017 	ldw	r2,0(r21)
 200a0dc:	1000051e 	bne	r2,zero,200a0f4 <__multiply+0x24c>
 200a0e0:	d8c00217 	ldw	r3,8(sp)
 200a0e4:	ad7fff04 	addi	r21,r21,-4
 200a0e8:	18ffffc4 	addi	r3,r3,-1
 200a0ec:	d8c00215 	stw	r3,8(sp)
 200a0f0:	183ff91e 	bne	r3,zero,200a0d8 <__multiply+0x230>
 200a0f4:	d8c00617 	ldw	r3,24(sp)
 200a0f8:	d9000217 	ldw	r4,8(sp)
 200a0fc:	1805883a 	mov	r2,r3
 200a100:	19000415 	stw	r4,16(r3)
 200a104:	dfc01017 	ldw	ra,64(sp)
 200a108:	df000f17 	ldw	fp,60(sp)
 200a10c:	ddc00e17 	ldw	r23,56(sp)
 200a110:	dd800d17 	ldw	r22,52(sp)
 200a114:	dd400c17 	ldw	r21,48(sp)
 200a118:	dd000b17 	ldw	r20,44(sp)
 200a11c:	dcc00a17 	ldw	r19,40(sp)
 200a120:	dc800917 	ldw	r18,36(sp)
 200a124:	dc400817 	ldw	r17,32(sp)
 200a128:	dc000717 	ldw	r16,28(sp)
 200a12c:	dec01104 	addi	sp,sp,68
 200a130:	f800283a 	ret

0200a134 <__pow5mult>:
 200a134:	defffa04 	addi	sp,sp,-24
 200a138:	dcc00315 	stw	r19,12(sp)
 200a13c:	dc000015 	stw	r16,0(sp)
 200a140:	dfc00515 	stw	ra,20(sp)
 200a144:	dd000415 	stw	r20,16(sp)
 200a148:	dc800215 	stw	r18,8(sp)
 200a14c:	dc400115 	stw	r17,4(sp)
 200a150:	308000cc 	andi	r2,r6,3
 200a154:	3021883a 	mov	r16,r6
 200a158:	2027883a 	mov	r19,r4
 200a15c:	10002f1e 	bne	r2,zero,200a21c <__pow5mult+0xe8>
 200a160:	2825883a 	mov	r18,r5
 200a164:	8021d0ba 	srai	r16,r16,2
 200a168:	80001a26 	beq	r16,zero,200a1d4 <__pow5mult+0xa0>
 200a16c:	9c401217 	ldw	r17,72(r19)
 200a170:	8800061e 	bne	r17,zero,200a18c <__pow5mult+0x58>
 200a174:	00003406 	br	200a248 <__pow5mult+0x114>
 200a178:	8021d07a 	srai	r16,r16,1
 200a17c:	80001526 	beq	r16,zero,200a1d4 <__pow5mult+0xa0>
 200a180:	88800017 	ldw	r2,0(r17)
 200a184:	10001c26 	beq	r2,zero,200a1f8 <__pow5mult+0xc4>
 200a188:	1023883a 	mov	r17,r2
 200a18c:	8080004c 	andi	r2,r16,1
 200a190:	103ff926 	beq	r2,zero,200a178 <__pow5mult+0x44>
 200a194:	880d883a 	mov	r6,r17
 200a198:	900b883a 	mov	r5,r18
 200a19c:	9809883a 	mov	r4,r19
 200a1a0:	2009ea80 	call	2009ea8 <__multiply>
 200a1a4:	90001b26 	beq	r18,zero,200a214 <__pow5mult+0xe0>
 200a1a8:	91000117 	ldw	r4,4(r18)
 200a1ac:	98c01317 	ldw	r3,76(r19)
 200a1b0:	8021d07a 	srai	r16,r16,1
 200a1b4:	2109883a 	add	r4,r4,r4
 200a1b8:	2109883a 	add	r4,r4,r4
 200a1bc:	1907883a 	add	r3,r3,r4
 200a1c0:	19000017 	ldw	r4,0(r3)
 200a1c4:	91000015 	stw	r4,0(r18)
 200a1c8:	1c800015 	stw	r18,0(r3)
 200a1cc:	1025883a 	mov	r18,r2
 200a1d0:	803feb1e 	bne	r16,zero,200a180 <__pow5mult+0x4c>
 200a1d4:	9005883a 	mov	r2,r18
 200a1d8:	dfc00517 	ldw	ra,20(sp)
 200a1dc:	dd000417 	ldw	r20,16(sp)
 200a1e0:	dcc00317 	ldw	r19,12(sp)
 200a1e4:	dc800217 	ldw	r18,8(sp)
 200a1e8:	dc400117 	ldw	r17,4(sp)
 200a1ec:	dc000017 	ldw	r16,0(sp)
 200a1f0:	dec00604 	addi	sp,sp,24
 200a1f4:	f800283a 	ret
 200a1f8:	880d883a 	mov	r6,r17
 200a1fc:	880b883a 	mov	r5,r17
 200a200:	9809883a 	mov	r4,r19
 200a204:	2009ea80 	call	2009ea8 <__multiply>
 200a208:	88800015 	stw	r2,0(r17)
 200a20c:	10000015 	stw	zero,0(r2)
 200a210:	003fdd06 	br	200a188 <__pow5mult+0x54>
 200a214:	1025883a 	mov	r18,r2
 200a218:	003fd706 	br	200a178 <__pow5mult+0x44>
 200a21c:	10bfffc4 	addi	r2,r2,-1
 200a220:	1085883a 	add	r2,r2,r2
 200a224:	00c080b4 	movhi	r3,514
 200a228:	18e56604 	addi	r3,r3,-27240
 200a22c:	1085883a 	add	r2,r2,r2
 200a230:	1885883a 	add	r2,r3,r2
 200a234:	11800017 	ldw	r6,0(r2)
 200a238:	000f883a 	mov	r7,zero
 200a23c:	2009b080 	call	2009b08 <__multadd>
 200a240:	1025883a 	mov	r18,r2
 200a244:	003fc706 	br	200a164 <__pow5mult+0x30>
 200a248:	05000044 	movi	r20,1
 200a24c:	a00b883a 	mov	r5,r20
 200a250:	9809883a 	mov	r4,r19
 200a254:	2009a380 	call	2009a38 <_Balloc>
 200a258:	1023883a 	mov	r17,r2
 200a25c:	00809c44 	movi	r2,625
 200a260:	88800515 	stw	r2,20(r17)
 200a264:	8d000415 	stw	r20,16(r17)
 200a268:	9c401215 	stw	r17,72(r19)
 200a26c:	88000015 	stw	zero,0(r17)
 200a270:	003fc606 	br	200a18c <__pow5mult+0x58>

0200a274 <__lshift>:
 200a274:	defff904 	addi	sp,sp,-28
 200a278:	dd400515 	stw	r21,20(sp)
 200a27c:	dcc00315 	stw	r19,12(sp)
 200a280:	302bd17a 	srai	r21,r6,5
 200a284:	2cc00417 	ldw	r19,16(r5)
 200a288:	28800217 	ldw	r2,8(r5)
 200a28c:	dd000415 	stw	r20,16(sp)
 200a290:	ace7883a 	add	r19,r21,r19
 200a294:	dc800215 	stw	r18,8(sp)
 200a298:	dc400115 	stw	r17,4(sp)
 200a29c:	dc000015 	stw	r16,0(sp)
 200a2a0:	dfc00615 	stw	ra,24(sp)
 200a2a4:	9c000044 	addi	r16,r19,1
 200a2a8:	2823883a 	mov	r17,r5
 200a2ac:	3029883a 	mov	r20,r6
 200a2b0:	2025883a 	mov	r18,r4
 200a2b4:	29400117 	ldw	r5,4(r5)
 200a2b8:	1400030e 	bge	r2,r16,200a2c8 <__lshift+0x54>
 200a2bc:	1085883a 	add	r2,r2,r2
 200a2c0:	29400044 	addi	r5,r5,1
 200a2c4:	143ffd16 	blt	r2,r16,200a2bc <__lshift+0x48>
 200a2c8:	9009883a 	mov	r4,r18
 200a2cc:	2009a380 	call	2009a38 <_Balloc>
 200a2d0:	10c00504 	addi	r3,r2,20
 200a2d4:	0540070e 	bge	zero,r21,200a2f4 <__lshift+0x80>
 200a2d8:	ad6b883a 	add	r21,r21,r21
 200a2dc:	ad6b883a 	add	r21,r21,r21
 200a2e0:	1809883a 	mov	r4,r3
 200a2e4:	1d47883a 	add	r3,r3,r21
 200a2e8:	20000015 	stw	zero,0(r4)
 200a2ec:	21000104 	addi	r4,r4,4
 200a2f0:	193ffd1e 	bne	r3,r4,200a2e8 <__lshift+0x74>
 200a2f4:	8a000417 	ldw	r8,16(r17)
 200a2f8:	89000504 	addi	r4,r17,20
 200a2fc:	a18007cc 	andi	r6,r20,31
 200a300:	4211883a 	add	r8,r8,r8
 200a304:	4211883a 	add	r8,r8,r8
 200a308:	2211883a 	add	r8,r4,r8
 200a30c:	30002326 	beq	r6,zero,200a39c <__lshift+0x128>
 200a310:	02400804 	movi	r9,32
 200a314:	4993c83a 	sub	r9,r9,r6
 200a318:	000b883a 	mov	r5,zero
 200a31c:	21c00017 	ldw	r7,0(r4)
 200a320:	1815883a 	mov	r10,r3
 200a324:	18c00104 	addi	r3,r3,4
 200a328:	398e983a 	sll	r7,r7,r6
 200a32c:	21000104 	addi	r4,r4,4
 200a330:	394ab03a 	or	r5,r7,r5
 200a334:	197fff15 	stw	r5,-4(r3)
 200a338:	217fff17 	ldw	r5,-4(r4)
 200a33c:	2a4ad83a 	srl	r5,r5,r9
 200a340:	223ff636 	bltu	r4,r8,200a31c <__lshift+0xa8>
 200a344:	51400115 	stw	r5,4(r10)
 200a348:	28001a1e 	bne	r5,zero,200a3b4 <__lshift+0x140>
 200a34c:	843fffc4 	addi	r16,r16,-1
 200a350:	14000415 	stw	r16,16(r2)
 200a354:	88000826 	beq	r17,zero,200a378 <__lshift+0x104>
 200a358:	89000117 	ldw	r4,4(r17)
 200a35c:	90c01317 	ldw	r3,76(r18)
 200a360:	2109883a 	add	r4,r4,r4
 200a364:	2109883a 	add	r4,r4,r4
 200a368:	1907883a 	add	r3,r3,r4
 200a36c:	19000017 	ldw	r4,0(r3)
 200a370:	89000015 	stw	r4,0(r17)
 200a374:	1c400015 	stw	r17,0(r3)
 200a378:	dfc00617 	ldw	ra,24(sp)
 200a37c:	dd400517 	ldw	r21,20(sp)
 200a380:	dd000417 	ldw	r20,16(sp)
 200a384:	dcc00317 	ldw	r19,12(sp)
 200a388:	dc800217 	ldw	r18,8(sp)
 200a38c:	dc400117 	ldw	r17,4(sp)
 200a390:	dc000017 	ldw	r16,0(sp)
 200a394:	dec00704 	addi	sp,sp,28
 200a398:	f800283a 	ret
 200a39c:	21400017 	ldw	r5,0(r4)
 200a3a0:	18c00104 	addi	r3,r3,4
 200a3a4:	21000104 	addi	r4,r4,4
 200a3a8:	197fff15 	stw	r5,-4(r3)
 200a3ac:	223ffb36 	bltu	r4,r8,200a39c <__lshift+0x128>
 200a3b0:	003fe606 	br	200a34c <__lshift+0xd8>
 200a3b4:	9c000084 	addi	r16,r19,2
 200a3b8:	003fe406 	br	200a34c <__lshift+0xd8>

0200a3bc <__mcmp>:
 200a3bc:	20800417 	ldw	r2,16(r4)
 200a3c0:	28c00417 	ldw	r3,16(r5)
 200a3c4:	10c5c83a 	sub	r2,r2,r3
 200a3c8:	1000111e 	bne	r2,zero,200a410 <__mcmp+0x54>
 200a3cc:	18c7883a 	add	r3,r3,r3
 200a3d0:	18c7883a 	add	r3,r3,r3
 200a3d4:	21000504 	addi	r4,r4,20
 200a3d8:	29400504 	addi	r5,r5,20
 200a3dc:	20c5883a 	add	r2,r4,r3
 200a3e0:	28cb883a 	add	r5,r5,r3
 200a3e4:	00000106 	br	200a3ec <__mcmp+0x30>
 200a3e8:	20800a2e 	bgeu	r4,r2,200a414 <__mcmp+0x58>
 200a3ec:	10bfff04 	addi	r2,r2,-4
 200a3f0:	297fff04 	addi	r5,r5,-4
 200a3f4:	11800017 	ldw	r6,0(r2)
 200a3f8:	28c00017 	ldw	r3,0(r5)
 200a3fc:	30fffa26 	beq	r6,r3,200a3e8 <__mcmp+0x2c>
 200a400:	30c00236 	bltu	r6,r3,200a40c <__mcmp+0x50>
 200a404:	00800044 	movi	r2,1
 200a408:	f800283a 	ret
 200a40c:	00bfffc4 	movi	r2,-1
 200a410:	f800283a 	ret
 200a414:	0005883a 	mov	r2,zero
 200a418:	f800283a 	ret

0200a41c <__mdiff>:
 200a41c:	28c00417 	ldw	r3,16(r5)
 200a420:	30800417 	ldw	r2,16(r6)
 200a424:	defffa04 	addi	sp,sp,-24
 200a428:	dcc00315 	stw	r19,12(sp)
 200a42c:	dc800215 	stw	r18,8(sp)
 200a430:	dfc00515 	stw	ra,20(sp)
 200a434:	dd000415 	stw	r20,16(sp)
 200a438:	dc400115 	stw	r17,4(sp)
 200a43c:	dc000015 	stw	r16,0(sp)
 200a440:	1887c83a 	sub	r3,r3,r2
 200a444:	2825883a 	mov	r18,r5
 200a448:	3027883a 	mov	r19,r6
 200a44c:	1800141e 	bne	r3,zero,200a4a0 <__mdiff+0x84>
 200a450:	1085883a 	add	r2,r2,r2
 200a454:	1085883a 	add	r2,r2,r2
 200a458:	2a000504 	addi	r8,r5,20
 200a45c:	34000504 	addi	r16,r6,20
 200a460:	4087883a 	add	r3,r8,r2
 200a464:	8085883a 	add	r2,r16,r2
 200a468:	00000106 	br	200a470 <__mdiff+0x54>
 200a46c:	40c0592e 	bgeu	r8,r3,200a5d4 <__mdiff+0x1b8>
 200a470:	18ffff04 	addi	r3,r3,-4
 200a474:	10bfff04 	addi	r2,r2,-4
 200a478:	19c00017 	ldw	r7,0(r3)
 200a47c:	11400017 	ldw	r5,0(r2)
 200a480:	397ffa26 	beq	r7,r5,200a46c <__mdiff+0x50>
 200a484:	3940592e 	bgeu	r7,r5,200a5ec <__mdiff+0x1d0>
 200a488:	9005883a 	mov	r2,r18
 200a48c:	4023883a 	mov	r17,r8
 200a490:	9825883a 	mov	r18,r19
 200a494:	05000044 	movi	r20,1
 200a498:	1027883a 	mov	r19,r2
 200a49c:	00000406 	br	200a4b0 <__mdiff+0x94>
 200a4a0:	18005616 	blt	r3,zero,200a5fc <__mdiff+0x1e0>
 200a4a4:	34400504 	addi	r17,r6,20
 200a4a8:	2c000504 	addi	r16,r5,20
 200a4ac:	0029883a 	mov	r20,zero
 200a4b0:	91400117 	ldw	r5,4(r18)
 200a4b4:	2009a380 	call	2009a38 <_Balloc>
 200a4b8:	92400417 	ldw	r9,16(r18)
 200a4bc:	9b000417 	ldw	r12,16(r19)
 200a4c0:	12c00504 	addi	r11,r2,20
 200a4c4:	4a51883a 	add	r8,r9,r9
 200a4c8:	6319883a 	add	r12,r12,r12
 200a4cc:	4211883a 	add	r8,r8,r8
 200a4d0:	6319883a 	add	r12,r12,r12
 200a4d4:	15000315 	stw	r20,12(r2)
 200a4d8:	8211883a 	add	r8,r16,r8
 200a4dc:	8b19883a 	add	r12,r17,r12
 200a4e0:	0007883a 	mov	r3,zero
 200a4e4:	81400017 	ldw	r5,0(r16)
 200a4e8:	89c00017 	ldw	r7,0(r17)
 200a4ec:	59800104 	addi	r6,r11,4
 200a4f0:	293fffcc 	andi	r4,r5,65535
 200a4f4:	20c7883a 	add	r3,r4,r3
 200a4f8:	393fffcc 	andi	r4,r7,65535
 200a4fc:	1909c83a 	sub	r4,r3,r4
 200a500:	280ad43a 	srli	r5,r5,16
 200a504:	380ed43a 	srli	r7,r7,16
 200a508:	2007d43a 	srai	r3,r4,16
 200a50c:	213fffcc 	andi	r4,r4,65535
 200a510:	29cbc83a 	sub	r5,r5,r7
 200a514:	28c7883a 	add	r3,r5,r3
 200a518:	180a943a 	slli	r5,r3,16
 200a51c:	8c400104 	addi	r17,r17,4
 200a520:	84000104 	addi	r16,r16,4
 200a524:	2908b03a 	or	r4,r5,r4
 200a528:	59000015 	stw	r4,0(r11)
 200a52c:	1807d43a 	srai	r3,r3,16
 200a530:	3015883a 	mov	r10,r6
 200a534:	3017883a 	mov	r11,r6
 200a538:	8b3fea36 	bltu	r17,r12,200a4e4 <__mdiff+0xc8>
 200a53c:	8200162e 	bgeu	r16,r8,200a598 <__mdiff+0x17c>
 200a540:	8017883a 	mov	r11,r16
 200a544:	59400017 	ldw	r5,0(r11)
 200a548:	31800104 	addi	r6,r6,4
 200a54c:	5ac00104 	addi	r11,r11,4
 200a550:	293fffcc 	andi	r4,r5,65535
 200a554:	20c7883a 	add	r3,r4,r3
 200a558:	280ed43a 	srli	r7,r5,16
 200a55c:	180bd43a 	srai	r5,r3,16
 200a560:	193fffcc 	andi	r4,r3,65535
 200a564:	3947883a 	add	r3,r7,r5
 200a568:	180a943a 	slli	r5,r3,16
 200a56c:	1807d43a 	srai	r3,r3,16
 200a570:	2908b03a 	or	r4,r5,r4
 200a574:	313fff15 	stw	r4,-4(r6)
 200a578:	5a3ff236 	bltu	r11,r8,200a544 <__mdiff+0x128>
 200a57c:	0406303a 	nor	r3,zero,r16
 200a580:	1a07883a 	add	r3,r3,r8
 200a584:	1806d0ba 	srli	r3,r3,2
 200a588:	18c00044 	addi	r3,r3,1
 200a58c:	18c7883a 	add	r3,r3,r3
 200a590:	18c7883a 	add	r3,r3,r3
 200a594:	50d5883a 	add	r10,r10,r3
 200a598:	50ffff04 	addi	r3,r10,-4
 200a59c:	2000041e 	bne	r4,zero,200a5b0 <__mdiff+0x194>
 200a5a0:	18ffff04 	addi	r3,r3,-4
 200a5a4:	19000017 	ldw	r4,0(r3)
 200a5a8:	4a7fffc4 	addi	r9,r9,-1
 200a5ac:	203ffc26 	beq	r4,zero,200a5a0 <__mdiff+0x184>
 200a5b0:	12400415 	stw	r9,16(r2)
 200a5b4:	dfc00517 	ldw	ra,20(sp)
 200a5b8:	dd000417 	ldw	r20,16(sp)
 200a5bc:	dcc00317 	ldw	r19,12(sp)
 200a5c0:	dc800217 	ldw	r18,8(sp)
 200a5c4:	dc400117 	ldw	r17,4(sp)
 200a5c8:	dc000017 	ldw	r16,0(sp)
 200a5cc:	dec00604 	addi	sp,sp,24
 200a5d0:	f800283a 	ret
 200a5d4:	000b883a 	mov	r5,zero
 200a5d8:	2009a380 	call	2009a38 <_Balloc>
 200a5dc:	00c00044 	movi	r3,1
 200a5e0:	10c00415 	stw	r3,16(r2)
 200a5e4:	10000515 	stw	zero,20(r2)
 200a5e8:	003ff206 	br	200a5b4 <__mdiff+0x198>
 200a5ec:	8023883a 	mov	r17,r16
 200a5f0:	0029883a 	mov	r20,zero
 200a5f4:	4021883a 	mov	r16,r8
 200a5f8:	003fad06 	br	200a4b0 <__mdiff+0x94>
 200a5fc:	9005883a 	mov	r2,r18
 200a600:	94400504 	addi	r17,r18,20
 200a604:	9c000504 	addi	r16,r19,20
 200a608:	9825883a 	mov	r18,r19
 200a60c:	05000044 	movi	r20,1
 200a610:	1027883a 	mov	r19,r2
 200a614:	003fa606 	br	200a4b0 <__mdiff+0x94>

0200a618 <__ulp>:
 200a618:	295ffc2c 	andhi	r5,r5,32752
 200a61c:	00bf3034 	movhi	r2,64704
 200a620:	2887883a 	add	r3,r5,r2
 200a624:	00c0020e 	bge	zero,r3,200a630 <__ulp+0x18>
 200a628:	0005883a 	mov	r2,zero
 200a62c:	f800283a 	ret
 200a630:	00c7c83a 	sub	r3,zero,r3
 200a634:	1807d53a 	srai	r3,r3,20
 200a638:	008004c4 	movi	r2,19
 200a63c:	10c00b0e 	bge	r2,r3,200a66c <__ulp+0x54>
 200a640:	18bffb04 	addi	r2,r3,-20
 200a644:	01000784 	movi	r4,30
 200a648:	0007883a 	mov	r3,zero
 200a64c:	20800516 	blt	r4,r2,200a664 <__ulp+0x4c>
 200a650:	010007c4 	movi	r4,31
 200a654:	2089c83a 	sub	r4,r4,r2
 200a658:	00800044 	movi	r2,1
 200a65c:	1104983a 	sll	r2,r2,r4
 200a660:	f800283a 	ret
 200a664:	00800044 	movi	r2,1
 200a668:	f800283a 	ret
 200a66c:	01400234 	movhi	r5,8
 200a670:	28c7d83a 	sra	r3,r5,r3
 200a674:	0005883a 	mov	r2,zero
 200a678:	f800283a 	ret

0200a67c <__b2d>:
 200a67c:	defffa04 	addi	sp,sp,-24
 200a680:	dc000015 	stw	r16,0(sp)
 200a684:	24000417 	ldw	r16,16(r4)
 200a688:	dc400115 	stw	r17,4(sp)
 200a68c:	24400504 	addi	r17,r4,20
 200a690:	8421883a 	add	r16,r16,r16
 200a694:	8421883a 	add	r16,r16,r16
 200a698:	8c21883a 	add	r16,r17,r16
 200a69c:	dc800215 	stw	r18,8(sp)
 200a6a0:	84bfff17 	ldw	r18,-4(r16)
 200a6a4:	dd000415 	stw	r20,16(sp)
 200a6a8:	dcc00315 	stw	r19,12(sp)
 200a6ac:	9009883a 	mov	r4,r18
 200a6b0:	2829883a 	mov	r20,r5
 200a6b4:	dfc00515 	stw	ra,20(sp)
 200a6b8:	2009d540 	call	2009d54 <__hi0bits>
 200a6bc:	00c00804 	movi	r3,32
 200a6c0:	1889c83a 	sub	r4,r3,r2
 200a6c4:	a1000015 	stw	r4,0(r20)
 200a6c8:	01000284 	movi	r4,10
 200a6cc:	84ffff04 	addi	r19,r16,-4
 200a6d0:	20801216 	blt	r4,r2,200a71c <__b2d+0xa0>
 200a6d4:	018002c4 	movi	r6,11
 200a6d8:	308dc83a 	sub	r6,r6,r2
 200a6dc:	9186d83a 	srl	r3,r18,r6
 200a6e0:	18cffc34 	orhi	r3,r3,16368
 200a6e4:	8cc0212e 	bgeu	r17,r19,200a76c <__b2d+0xf0>
 200a6e8:	813ffe17 	ldw	r4,-8(r16)
 200a6ec:	218cd83a 	srl	r6,r4,r6
 200a6f0:	10800544 	addi	r2,r2,21
 200a6f4:	9084983a 	sll	r2,r18,r2
 200a6f8:	1184b03a 	or	r2,r2,r6
 200a6fc:	dfc00517 	ldw	ra,20(sp)
 200a700:	dd000417 	ldw	r20,16(sp)
 200a704:	dcc00317 	ldw	r19,12(sp)
 200a708:	dc800217 	ldw	r18,8(sp)
 200a70c:	dc400117 	ldw	r17,4(sp)
 200a710:	dc000017 	ldw	r16,0(sp)
 200a714:	dec00604 	addi	sp,sp,24
 200a718:	f800283a 	ret
 200a71c:	8cc00f2e 	bgeu	r17,r19,200a75c <__b2d+0xe0>
 200a720:	117ffd44 	addi	r5,r2,-11
 200a724:	80bffe17 	ldw	r2,-8(r16)
 200a728:	28000e26 	beq	r5,zero,200a764 <__b2d+0xe8>
 200a72c:	1949c83a 	sub	r4,r3,r5
 200a730:	9164983a 	sll	r18,r18,r5
 200a734:	1106d83a 	srl	r3,r2,r4
 200a738:	81bffe04 	addi	r6,r16,-8
 200a73c:	948ffc34 	orhi	r18,r18,16368
 200a740:	90c6b03a 	or	r3,r18,r3
 200a744:	89800e2e 	bgeu	r17,r6,200a780 <__b2d+0x104>
 200a748:	81bffd17 	ldw	r6,-12(r16)
 200a74c:	1144983a 	sll	r2,r2,r5
 200a750:	310ad83a 	srl	r5,r6,r4
 200a754:	2884b03a 	or	r2,r5,r2
 200a758:	003fe806 	br	200a6fc <__b2d+0x80>
 200a75c:	10bffd44 	addi	r2,r2,-11
 200a760:	1000041e 	bne	r2,zero,200a774 <__b2d+0xf8>
 200a764:	90cffc34 	orhi	r3,r18,16368
 200a768:	003fe406 	br	200a6fc <__b2d+0x80>
 200a76c:	000d883a 	mov	r6,zero
 200a770:	003fdf06 	br	200a6f0 <__b2d+0x74>
 200a774:	90a4983a 	sll	r18,r18,r2
 200a778:	0005883a 	mov	r2,zero
 200a77c:	003ff906 	br	200a764 <__b2d+0xe8>
 200a780:	1144983a 	sll	r2,r2,r5
 200a784:	003fdd06 	br	200a6fc <__b2d+0x80>

0200a788 <__d2b>:
 200a788:	defff804 	addi	sp,sp,-32
 200a78c:	dc000215 	stw	r16,8(sp)
 200a790:	3021883a 	mov	r16,r6
 200a794:	dc400315 	stw	r17,12(sp)
 200a798:	8022907a 	slli	r17,r16,1
 200a79c:	dd000615 	stw	r20,24(sp)
 200a7a0:	2829883a 	mov	r20,r5
 200a7a4:	01400044 	movi	r5,1
 200a7a8:	dcc00515 	stw	r19,20(sp)
 200a7ac:	dc800415 	stw	r18,16(sp)
 200a7b0:	dfc00715 	stw	ra,28(sp)
 200a7b4:	3825883a 	mov	r18,r7
 200a7b8:	8822d57a 	srli	r17,r17,21
 200a7bc:	2009a380 	call	2009a38 <_Balloc>
 200a7c0:	1027883a 	mov	r19,r2
 200a7c4:	00800434 	movhi	r2,16
 200a7c8:	10bfffc4 	addi	r2,r2,-1
 200a7cc:	808c703a 	and	r6,r16,r2
 200a7d0:	88000126 	beq	r17,zero,200a7d8 <__d2b+0x50>
 200a7d4:	31800434 	orhi	r6,r6,16
 200a7d8:	d9800015 	stw	r6,0(sp)
 200a7dc:	a0002426 	beq	r20,zero,200a870 <__d2b+0xe8>
 200a7e0:	d9000104 	addi	r4,sp,4
 200a7e4:	dd000115 	stw	r20,4(sp)
 200a7e8:	2009dbc0 	call	2009dbc <__lo0bits>
 200a7ec:	d8c00017 	ldw	r3,0(sp)
 200a7f0:	10002f1e 	bne	r2,zero,200a8b0 <__d2b+0x128>
 200a7f4:	d9000117 	ldw	r4,4(sp)
 200a7f8:	99000515 	stw	r4,20(r19)
 200a7fc:	1821003a 	cmpeq	r16,r3,zero
 200a800:	01000084 	movi	r4,2
 200a804:	2421c83a 	sub	r16,r4,r16
 200a808:	98c00615 	stw	r3,24(r19)
 200a80c:	9c000415 	stw	r16,16(r19)
 200a810:	88001f1e 	bne	r17,zero,200a890 <__d2b+0x108>
 200a814:	10bef384 	addi	r2,r2,-1074
 200a818:	90800015 	stw	r2,0(r18)
 200a81c:	00900034 	movhi	r2,16384
 200a820:	10bfffc4 	addi	r2,r2,-1
 200a824:	8085883a 	add	r2,r16,r2
 200a828:	1085883a 	add	r2,r2,r2
 200a82c:	1085883a 	add	r2,r2,r2
 200a830:	9885883a 	add	r2,r19,r2
 200a834:	11000517 	ldw	r4,20(r2)
 200a838:	8020917a 	slli	r16,r16,5
 200a83c:	2009d540 	call	2009d54 <__hi0bits>
 200a840:	d8c00817 	ldw	r3,32(sp)
 200a844:	8085c83a 	sub	r2,r16,r2
 200a848:	18800015 	stw	r2,0(r3)
 200a84c:	9805883a 	mov	r2,r19
 200a850:	dfc00717 	ldw	ra,28(sp)
 200a854:	dd000617 	ldw	r20,24(sp)
 200a858:	dcc00517 	ldw	r19,20(sp)
 200a85c:	dc800417 	ldw	r18,16(sp)
 200a860:	dc400317 	ldw	r17,12(sp)
 200a864:	dc000217 	ldw	r16,8(sp)
 200a868:	dec00804 	addi	sp,sp,32
 200a86c:	f800283a 	ret
 200a870:	d809883a 	mov	r4,sp
 200a874:	2009dbc0 	call	2009dbc <__lo0bits>
 200a878:	d8c00017 	ldw	r3,0(sp)
 200a87c:	04000044 	movi	r16,1
 200a880:	9c000415 	stw	r16,16(r19)
 200a884:	98c00515 	stw	r3,20(r19)
 200a888:	10800804 	addi	r2,r2,32
 200a88c:	883fe126 	beq	r17,zero,200a814 <__d2b+0x8c>
 200a890:	00c00d44 	movi	r3,53
 200a894:	8c7ef344 	addi	r17,r17,-1075
 200a898:	88a3883a 	add	r17,r17,r2
 200a89c:	1885c83a 	sub	r2,r3,r2
 200a8a0:	d8c00817 	ldw	r3,32(sp)
 200a8a4:	94400015 	stw	r17,0(r18)
 200a8a8:	18800015 	stw	r2,0(r3)
 200a8ac:	003fe706 	br	200a84c <__d2b+0xc4>
 200a8b0:	01000804 	movi	r4,32
 200a8b4:	2089c83a 	sub	r4,r4,r2
 200a8b8:	1908983a 	sll	r4,r3,r4
 200a8bc:	d9400117 	ldw	r5,4(sp)
 200a8c0:	1886d83a 	srl	r3,r3,r2
 200a8c4:	2148b03a 	or	r4,r4,r5
 200a8c8:	99000515 	stw	r4,20(r19)
 200a8cc:	d8c00015 	stw	r3,0(sp)
 200a8d0:	003fca06 	br	200a7fc <__d2b+0x74>

0200a8d4 <__ratio>:
 200a8d4:	defff904 	addi	sp,sp,-28
 200a8d8:	dc400315 	stw	r17,12(sp)
 200a8dc:	2823883a 	mov	r17,r5
 200a8e0:	d9400104 	addi	r5,sp,4
 200a8e4:	dfc00615 	stw	ra,24(sp)
 200a8e8:	dcc00515 	stw	r19,20(sp)
 200a8ec:	dc800415 	stw	r18,16(sp)
 200a8f0:	2027883a 	mov	r19,r4
 200a8f4:	dc000215 	stw	r16,8(sp)
 200a8f8:	200a67c0 	call	200a67c <__b2d>
 200a8fc:	d80b883a 	mov	r5,sp
 200a900:	8809883a 	mov	r4,r17
 200a904:	1025883a 	mov	r18,r2
 200a908:	1821883a 	mov	r16,r3
 200a90c:	200a67c0 	call	200a67c <__b2d>
 200a910:	8a000417 	ldw	r8,16(r17)
 200a914:	99000417 	ldw	r4,16(r19)
 200a918:	d9400117 	ldw	r5,4(sp)
 200a91c:	2209c83a 	sub	r4,r4,r8
 200a920:	2010917a 	slli	r8,r4,5
 200a924:	d9000017 	ldw	r4,0(sp)
 200a928:	2909c83a 	sub	r4,r5,r4
 200a92c:	4109883a 	add	r4,r8,r4
 200a930:	01000e0e 	bge	zero,r4,200a96c <__ratio+0x98>
 200a934:	2008953a 	slli	r4,r4,20
 200a938:	2421883a 	add	r16,r4,r16
 200a93c:	100d883a 	mov	r6,r2
 200a940:	180f883a 	mov	r7,r3
 200a944:	9009883a 	mov	r4,r18
 200a948:	800b883a 	mov	r5,r16
 200a94c:	20019ec0 	call	20019ec <__divdf3>
 200a950:	dfc00617 	ldw	ra,24(sp)
 200a954:	dcc00517 	ldw	r19,20(sp)
 200a958:	dc800417 	ldw	r18,16(sp)
 200a95c:	dc400317 	ldw	r17,12(sp)
 200a960:	dc000217 	ldw	r16,8(sp)
 200a964:	dec00704 	addi	sp,sp,28
 200a968:	f800283a 	ret
 200a96c:	2008953a 	slli	r4,r4,20
 200a970:	1907c83a 	sub	r3,r3,r4
 200a974:	003ff106 	br	200a93c <__ratio+0x68>

0200a978 <_mprec_log10>:
 200a978:	defffe04 	addi	sp,sp,-8
 200a97c:	dc000015 	stw	r16,0(sp)
 200a980:	dfc00115 	stw	ra,4(sp)
 200a984:	008005c4 	movi	r2,23
 200a988:	2021883a 	mov	r16,r4
 200a98c:	11000d0e 	bge	r2,r4,200a9c4 <_mprec_log10+0x4c>
 200a990:	0005883a 	mov	r2,zero
 200a994:	00cffc34 	movhi	r3,16368
 200a998:	843fffc4 	addi	r16,r16,-1
 200a99c:	000d883a 	mov	r6,zero
 200a9a0:	01d00934 	movhi	r7,16420
 200a9a4:	1009883a 	mov	r4,r2
 200a9a8:	180b883a 	mov	r5,r3
 200a9ac:	200258c0 	call	200258c <__muldf3>
 200a9b0:	803ff91e 	bne	r16,zero,200a998 <_mprec_log10+0x20>
 200a9b4:	dfc00117 	ldw	ra,4(sp)
 200a9b8:	dc000017 	ldw	r16,0(sp)
 200a9bc:	dec00204 	addi	sp,sp,8
 200a9c0:	f800283a 	ret
 200a9c4:	202090fa 	slli	r16,r4,3
 200a9c8:	008080b4 	movhi	r2,514
 200a9cc:	10a57d04 	addi	r2,r2,-27148
 200a9d0:	1421883a 	add	r16,r2,r16
 200a9d4:	80800017 	ldw	r2,0(r16)
 200a9d8:	80c00117 	ldw	r3,4(r16)
 200a9dc:	dfc00117 	ldw	ra,4(sp)
 200a9e0:	dc000017 	ldw	r16,0(sp)
 200a9e4:	dec00204 	addi	sp,sp,8
 200a9e8:	f800283a 	ret

0200a9ec <__copybits>:
 200a9ec:	297fffc4 	addi	r5,r5,-1
 200a9f0:	280fd17a 	srai	r7,r5,5
 200a9f4:	30c00417 	ldw	r3,16(r6)
 200a9f8:	30800504 	addi	r2,r6,20
 200a9fc:	39c00044 	addi	r7,r7,1
 200aa00:	18c7883a 	add	r3,r3,r3
 200aa04:	39cf883a 	add	r7,r7,r7
 200aa08:	18c7883a 	add	r3,r3,r3
 200aa0c:	39cf883a 	add	r7,r7,r7
 200aa10:	10c7883a 	add	r3,r2,r3
 200aa14:	21cf883a 	add	r7,r4,r7
 200aa18:	10c00d2e 	bgeu	r2,r3,200aa50 <__copybits+0x64>
 200aa1c:	200b883a 	mov	r5,r4
 200aa20:	12000017 	ldw	r8,0(r2)
 200aa24:	29400104 	addi	r5,r5,4
 200aa28:	10800104 	addi	r2,r2,4
 200aa2c:	2a3fff15 	stw	r8,-4(r5)
 200aa30:	10fffb36 	bltu	r2,r3,200aa20 <__copybits+0x34>
 200aa34:	1985c83a 	sub	r2,r3,r6
 200aa38:	10bffac4 	addi	r2,r2,-21
 200aa3c:	1004d0ba 	srli	r2,r2,2
 200aa40:	10800044 	addi	r2,r2,1
 200aa44:	1085883a 	add	r2,r2,r2
 200aa48:	1085883a 	add	r2,r2,r2
 200aa4c:	2089883a 	add	r4,r4,r2
 200aa50:	21c0032e 	bgeu	r4,r7,200aa60 <__copybits+0x74>
 200aa54:	20000015 	stw	zero,0(r4)
 200aa58:	21000104 	addi	r4,r4,4
 200aa5c:	21fffd36 	bltu	r4,r7,200aa54 <__copybits+0x68>
 200aa60:	f800283a 	ret

0200aa64 <__any_on>:
 200aa64:	20c00417 	ldw	r3,16(r4)
 200aa68:	2805d17a 	srai	r2,r5,5
 200aa6c:	21000504 	addi	r4,r4,20
 200aa70:	18800d0e 	bge	r3,r2,200aaa8 <__any_on+0x44>
 200aa74:	18c7883a 	add	r3,r3,r3
 200aa78:	18c7883a 	add	r3,r3,r3
 200aa7c:	20c7883a 	add	r3,r4,r3
 200aa80:	20c0192e 	bgeu	r4,r3,200aae8 <__any_on+0x84>
 200aa84:	18bfff17 	ldw	r2,-4(r3)
 200aa88:	18ffff04 	addi	r3,r3,-4
 200aa8c:	1000041e 	bne	r2,zero,200aaa0 <__any_on+0x3c>
 200aa90:	20c0142e 	bgeu	r4,r3,200aae4 <__any_on+0x80>
 200aa94:	18ffff04 	addi	r3,r3,-4
 200aa98:	19400017 	ldw	r5,0(r3)
 200aa9c:	283ffc26 	beq	r5,zero,200aa90 <__any_on+0x2c>
 200aaa0:	00800044 	movi	r2,1
 200aaa4:	f800283a 	ret
 200aaa8:	10c00a0e 	bge	r2,r3,200aad4 <__any_on+0x70>
 200aaac:	1085883a 	add	r2,r2,r2
 200aab0:	1085883a 	add	r2,r2,r2
 200aab4:	294007cc 	andi	r5,r5,31
 200aab8:	2087883a 	add	r3,r4,r2
 200aabc:	283ff026 	beq	r5,zero,200aa80 <__any_on+0x1c>
 200aac0:	19800017 	ldw	r6,0(r3)
 200aac4:	3144d83a 	srl	r2,r6,r5
 200aac8:	114a983a 	sll	r5,r2,r5
 200aacc:	317ff41e 	bne	r6,r5,200aaa0 <__any_on+0x3c>
 200aad0:	003feb06 	br	200aa80 <__any_on+0x1c>
 200aad4:	1085883a 	add	r2,r2,r2
 200aad8:	1085883a 	add	r2,r2,r2
 200aadc:	2087883a 	add	r3,r4,r2
 200aae0:	003fe706 	br	200aa80 <__any_on+0x1c>
 200aae4:	f800283a 	ret
 200aae8:	0005883a 	mov	r2,zero
 200aaec:	f800283a 	ret

0200aaf0 <_realloc_r>:
 200aaf0:	defff604 	addi	sp,sp,-40
 200aaf4:	dc800215 	stw	r18,8(sp)
 200aaf8:	dfc00915 	stw	ra,36(sp)
 200aafc:	df000815 	stw	fp,32(sp)
 200ab00:	ddc00715 	stw	r23,28(sp)
 200ab04:	dd800615 	stw	r22,24(sp)
 200ab08:	dd400515 	stw	r21,20(sp)
 200ab0c:	dd000415 	stw	r20,16(sp)
 200ab10:	dcc00315 	stw	r19,12(sp)
 200ab14:	dc400115 	stw	r17,4(sp)
 200ab18:	dc000015 	stw	r16,0(sp)
 200ab1c:	3025883a 	mov	r18,r6
 200ab20:	2800b726 	beq	r5,zero,200ae00 <_realloc_r+0x310>
 200ab24:	282b883a 	mov	r21,r5
 200ab28:	2029883a 	mov	r20,r4
 200ab2c:	200eaa40 	call	200eaa4 <__malloc_lock>
 200ab30:	a8bfff17 	ldw	r2,-4(r21)
 200ab34:	043fff04 	movi	r16,-4
 200ab38:	90c002c4 	addi	r3,r18,11
 200ab3c:	01000584 	movi	r4,22
 200ab40:	acfffe04 	addi	r19,r21,-8
 200ab44:	1420703a 	and	r16,r2,r16
 200ab48:	20c0332e 	bgeu	r4,r3,200ac18 <_realloc_r+0x128>
 200ab4c:	047ffe04 	movi	r17,-8
 200ab50:	1c62703a 	and	r17,r3,r17
 200ab54:	8807883a 	mov	r3,r17
 200ab58:	88005816 	blt	r17,zero,200acbc <_realloc_r+0x1cc>
 200ab5c:	8c805736 	bltu	r17,r18,200acbc <_realloc_r+0x1cc>
 200ab60:	80c0300e 	bge	r16,r3,200ac24 <_realloc_r+0x134>
 200ab64:	070080b4 	movhi	fp,514
 200ab68:	e7273204 	addi	fp,fp,-25400
 200ab6c:	e1c00217 	ldw	r7,8(fp)
 200ab70:	9c09883a 	add	r4,r19,r16
 200ab74:	22000117 	ldw	r8,4(r4)
 200ab78:	21c06326 	beq	r4,r7,200ad08 <_realloc_r+0x218>
 200ab7c:	017fff84 	movi	r5,-2
 200ab80:	414a703a 	and	r5,r8,r5
 200ab84:	214b883a 	add	r5,r4,r5
 200ab88:	29800117 	ldw	r6,4(r5)
 200ab8c:	3180004c 	andi	r6,r6,1
 200ab90:	30003f26 	beq	r6,zero,200ac90 <_realloc_r+0x1a0>
 200ab94:	1080004c 	andi	r2,r2,1
 200ab98:	10008326 	beq	r2,zero,200ada8 <_realloc_r+0x2b8>
 200ab9c:	900b883a 	mov	r5,r18
 200aba0:	a009883a 	mov	r4,r20
 200aba4:	2008d7c0 	call	2008d7c <_malloc_r>
 200aba8:	1025883a 	mov	r18,r2
 200abac:	10011e26 	beq	r2,zero,200b028 <_realloc_r+0x538>
 200abb0:	a93fff17 	ldw	r4,-4(r21)
 200abb4:	10fffe04 	addi	r3,r2,-8
 200abb8:	00bfff84 	movi	r2,-2
 200abbc:	2084703a 	and	r2,r4,r2
 200abc0:	9885883a 	add	r2,r19,r2
 200abc4:	1880ee26 	beq	r3,r2,200af80 <_realloc_r+0x490>
 200abc8:	81bfff04 	addi	r6,r16,-4
 200abcc:	00800904 	movi	r2,36
 200abd0:	1180b836 	bltu	r2,r6,200aeb4 <_realloc_r+0x3c4>
 200abd4:	00c004c4 	movi	r3,19
 200abd8:	19809636 	bltu	r3,r6,200ae34 <_realloc_r+0x344>
 200abdc:	9005883a 	mov	r2,r18
 200abe0:	a807883a 	mov	r3,r21
 200abe4:	19000017 	ldw	r4,0(r3)
 200abe8:	11000015 	stw	r4,0(r2)
 200abec:	19000117 	ldw	r4,4(r3)
 200abf0:	11000115 	stw	r4,4(r2)
 200abf4:	18c00217 	ldw	r3,8(r3)
 200abf8:	10c00215 	stw	r3,8(r2)
 200abfc:	a80b883a 	mov	r5,r21
 200ac00:	a009883a 	mov	r4,r20
 200ac04:	20081840 	call	2008184 <_free_r>
 200ac08:	a009883a 	mov	r4,r20
 200ac0c:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200ac10:	9005883a 	mov	r2,r18
 200ac14:	00001206 	br	200ac60 <_realloc_r+0x170>
 200ac18:	00c00404 	movi	r3,16
 200ac1c:	1823883a 	mov	r17,r3
 200ac20:	003fce06 	br	200ab5c <_realloc_r+0x6c>
 200ac24:	a825883a 	mov	r18,r21
 200ac28:	8445c83a 	sub	r2,r16,r17
 200ac2c:	00c003c4 	movi	r3,15
 200ac30:	18802636 	bltu	r3,r2,200accc <_realloc_r+0x1dc>
 200ac34:	99800117 	ldw	r6,4(r19)
 200ac38:	9c07883a 	add	r3,r19,r16
 200ac3c:	3180004c 	andi	r6,r6,1
 200ac40:	3420b03a 	or	r16,r6,r16
 200ac44:	9c000115 	stw	r16,4(r19)
 200ac48:	18800117 	ldw	r2,4(r3)
 200ac4c:	10800054 	ori	r2,r2,1
 200ac50:	18800115 	stw	r2,4(r3)
 200ac54:	a009883a 	mov	r4,r20
 200ac58:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200ac5c:	9005883a 	mov	r2,r18
 200ac60:	dfc00917 	ldw	ra,36(sp)
 200ac64:	df000817 	ldw	fp,32(sp)
 200ac68:	ddc00717 	ldw	r23,28(sp)
 200ac6c:	dd800617 	ldw	r22,24(sp)
 200ac70:	dd400517 	ldw	r21,20(sp)
 200ac74:	dd000417 	ldw	r20,16(sp)
 200ac78:	dcc00317 	ldw	r19,12(sp)
 200ac7c:	dc800217 	ldw	r18,8(sp)
 200ac80:	dc400117 	ldw	r17,4(sp)
 200ac84:	dc000017 	ldw	r16,0(sp)
 200ac88:	dec00a04 	addi	sp,sp,40
 200ac8c:	f800283a 	ret
 200ac90:	017fff04 	movi	r5,-4
 200ac94:	414a703a 	and	r5,r8,r5
 200ac98:	814d883a 	add	r6,r16,r5
 200ac9c:	30c01f16 	blt	r6,r3,200ad1c <_realloc_r+0x22c>
 200aca0:	20800317 	ldw	r2,12(r4)
 200aca4:	20c00217 	ldw	r3,8(r4)
 200aca8:	a825883a 	mov	r18,r21
 200acac:	3021883a 	mov	r16,r6
 200acb0:	18800315 	stw	r2,12(r3)
 200acb4:	10c00215 	stw	r3,8(r2)
 200acb8:	003fdb06 	br	200ac28 <_realloc_r+0x138>
 200acbc:	00800304 	movi	r2,12
 200acc0:	a0800015 	stw	r2,0(r20)
 200acc4:	0005883a 	mov	r2,zero
 200acc8:	003fe506 	br	200ac60 <_realloc_r+0x170>
 200accc:	98c00117 	ldw	r3,4(r19)
 200acd0:	9c4b883a 	add	r5,r19,r17
 200acd4:	11000054 	ori	r4,r2,1
 200acd8:	18c0004c 	andi	r3,r3,1
 200acdc:	1c62b03a 	or	r17,r3,r17
 200ace0:	9c400115 	stw	r17,4(r19)
 200ace4:	29000115 	stw	r4,4(r5)
 200ace8:	2885883a 	add	r2,r5,r2
 200acec:	10c00117 	ldw	r3,4(r2)
 200acf0:	29400204 	addi	r5,r5,8
 200acf4:	a009883a 	mov	r4,r20
 200acf8:	18c00054 	ori	r3,r3,1
 200acfc:	10c00115 	stw	r3,4(r2)
 200ad00:	20081840 	call	2008184 <_free_r>
 200ad04:	003fd306 	br	200ac54 <_realloc_r+0x164>
 200ad08:	017fff04 	movi	r5,-4
 200ad0c:	414a703a 	and	r5,r8,r5
 200ad10:	89800404 	addi	r6,r17,16
 200ad14:	8151883a 	add	r8,r16,r5
 200ad18:	4180590e 	bge	r8,r6,200ae80 <_realloc_r+0x390>
 200ad1c:	1080004c 	andi	r2,r2,1
 200ad20:	103f9e1e 	bne	r2,zero,200ab9c <_realloc_r+0xac>
 200ad24:	adbffe17 	ldw	r22,-8(r21)
 200ad28:	00bfff04 	movi	r2,-4
 200ad2c:	9dadc83a 	sub	r22,r19,r22
 200ad30:	b1800117 	ldw	r6,4(r22)
 200ad34:	3084703a 	and	r2,r6,r2
 200ad38:	20002026 	beq	r4,zero,200adbc <_realloc_r+0x2cc>
 200ad3c:	80af883a 	add	r23,r16,r2
 200ad40:	b96f883a 	add	r23,r23,r5
 200ad44:	21c05f26 	beq	r4,r7,200aec4 <_realloc_r+0x3d4>
 200ad48:	b8c01c16 	blt	r23,r3,200adbc <_realloc_r+0x2cc>
 200ad4c:	20800317 	ldw	r2,12(r4)
 200ad50:	20c00217 	ldw	r3,8(r4)
 200ad54:	81bfff04 	addi	r6,r16,-4
 200ad58:	01000904 	movi	r4,36
 200ad5c:	18800315 	stw	r2,12(r3)
 200ad60:	10c00215 	stw	r3,8(r2)
 200ad64:	b0c00217 	ldw	r3,8(r22)
 200ad68:	b0800317 	ldw	r2,12(r22)
 200ad6c:	b4800204 	addi	r18,r22,8
 200ad70:	18800315 	stw	r2,12(r3)
 200ad74:	10c00215 	stw	r3,8(r2)
 200ad78:	21801b36 	bltu	r4,r6,200ade8 <_realloc_r+0x2f8>
 200ad7c:	008004c4 	movi	r2,19
 200ad80:	1180352e 	bgeu	r2,r6,200ae58 <_realloc_r+0x368>
 200ad84:	a8800017 	ldw	r2,0(r21)
 200ad88:	b0800215 	stw	r2,8(r22)
 200ad8c:	a8800117 	ldw	r2,4(r21)
 200ad90:	b0800315 	stw	r2,12(r22)
 200ad94:	008006c4 	movi	r2,27
 200ad98:	11807f36 	bltu	r2,r6,200af98 <_realloc_r+0x4a8>
 200ad9c:	b0800404 	addi	r2,r22,16
 200ada0:	ad400204 	addi	r21,r21,8
 200ada4:	00002d06 	br	200ae5c <_realloc_r+0x36c>
 200ada8:	adbffe17 	ldw	r22,-8(r21)
 200adac:	00bfff04 	movi	r2,-4
 200adb0:	9dadc83a 	sub	r22,r19,r22
 200adb4:	b1000117 	ldw	r4,4(r22)
 200adb8:	2084703a 	and	r2,r4,r2
 200adbc:	b03f7726 	beq	r22,zero,200ab9c <_realloc_r+0xac>
 200adc0:	80af883a 	add	r23,r16,r2
 200adc4:	b8ff7516 	blt	r23,r3,200ab9c <_realloc_r+0xac>
 200adc8:	b0800317 	ldw	r2,12(r22)
 200adcc:	b0c00217 	ldw	r3,8(r22)
 200add0:	81bfff04 	addi	r6,r16,-4
 200add4:	01000904 	movi	r4,36
 200add8:	18800315 	stw	r2,12(r3)
 200addc:	10c00215 	stw	r3,8(r2)
 200ade0:	b4800204 	addi	r18,r22,8
 200ade4:	21bfe52e 	bgeu	r4,r6,200ad7c <_realloc_r+0x28c>
 200ade8:	a80b883a 	mov	r5,r21
 200adec:	9009883a 	mov	r4,r18
 200adf0:	20097b40 	call	20097b4 <memmove>
 200adf4:	b821883a 	mov	r16,r23
 200adf8:	b027883a 	mov	r19,r22
 200adfc:	003f8a06 	br	200ac28 <_realloc_r+0x138>
 200ae00:	300b883a 	mov	r5,r6
 200ae04:	dfc00917 	ldw	ra,36(sp)
 200ae08:	df000817 	ldw	fp,32(sp)
 200ae0c:	ddc00717 	ldw	r23,28(sp)
 200ae10:	dd800617 	ldw	r22,24(sp)
 200ae14:	dd400517 	ldw	r21,20(sp)
 200ae18:	dd000417 	ldw	r20,16(sp)
 200ae1c:	dcc00317 	ldw	r19,12(sp)
 200ae20:	dc800217 	ldw	r18,8(sp)
 200ae24:	dc400117 	ldw	r17,4(sp)
 200ae28:	dc000017 	ldw	r16,0(sp)
 200ae2c:	dec00a04 	addi	sp,sp,40
 200ae30:	2008d7c1 	jmpi	2008d7c <_malloc_r>
 200ae34:	a8c00017 	ldw	r3,0(r21)
 200ae38:	90c00015 	stw	r3,0(r18)
 200ae3c:	a8c00117 	ldw	r3,4(r21)
 200ae40:	90c00115 	stw	r3,4(r18)
 200ae44:	00c006c4 	movi	r3,27
 200ae48:	19804536 	bltu	r3,r6,200af60 <_realloc_r+0x470>
 200ae4c:	90800204 	addi	r2,r18,8
 200ae50:	a8c00204 	addi	r3,r21,8
 200ae54:	003f6306 	br	200abe4 <_realloc_r+0xf4>
 200ae58:	9005883a 	mov	r2,r18
 200ae5c:	a8c00017 	ldw	r3,0(r21)
 200ae60:	b821883a 	mov	r16,r23
 200ae64:	b027883a 	mov	r19,r22
 200ae68:	10c00015 	stw	r3,0(r2)
 200ae6c:	a8c00117 	ldw	r3,4(r21)
 200ae70:	10c00115 	stw	r3,4(r2)
 200ae74:	a8c00217 	ldw	r3,8(r21)
 200ae78:	10c00215 	stw	r3,8(r2)
 200ae7c:	003f6a06 	br	200ac28 <_realloc_r+0x138>
 200ae80:	9c67883a 	add	r19,r19,r17
 200ae84:	4445c83a 	sub	r2,r8,r17
 200ae88:	e4c00215 	stw	r19,8(fp)
 200ae8c:	10800054 	ori	r2,r2,1
 200ae90:	98800115 	stw	r2,4(r19)
 200ae94:	a8bfff17 	ldw	r2,-4(r21)
 200ae98:	a009883a 	mov	r4,r20
 200ae9c:	1080004c 	andi	r2,r2,1
 200aea0:	1462b03a 	or	r17,r2,r17
 200aea4:	ac7fff15 	stw	r17,-4(r21)
 200aea8:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200aeac:	a805883a 	mov	r2,r21
 200aeb0:	003f6b06 	br	200ac60 <_realloc_r+0x170>
 200aeb4:	a80b883a 	mov	r5,r21
 200aeb8:	9009883a 	mov	r4,r18
 200aebc:	20097b40 	call	20097b4 <memmove>
 200aec0:	003f4e06 	br	200abfc <_realloc_r+0x10c>
 200aec4:	89000404 	addi	r4,r17,16
 200aec8:	b93fbc16 	blt	r23,r4,200adbc <_realloc_r+0x2cc>
 200aecc:	b0800317 	ldw	r2,12(r22)
 200aed0:	b0c00217 	ldw	r3,8(r22)
 200aed4:	81bfff04 	addi	r6,r16,-4
 200aed8:	01000904 	movi	r4,36
 200aedc:	18800315 	stw	r2,12(r3)
 200aee0:	10c00215 	stw	r3,8(r2)
 200aee4:	b4800204 	addi	r18,r22,8
 200aee8:	21804336 	bltu	r4,r6,200aff8 <_realloc_r+0x508>
 200aeec:	008004c4 	movi	r2,19
 200aef0:	11803f2e 	bgeu	r2,r6,200aff0 <_realloc_r+0x500>
 200aef4:	a8800017 	ldw	r2,0(r21)
 200aef8:	b0800215 	stw	r2,8(r22)
 200aefc:	a8800117 	ldw	r2,4(r21)
 200af00:	b0800315 	stw	r2,12(r22)
 200af04:	008006c4 	movi	r2,27
 200af08:	11803f36 	bltu	r2,r6,200b008 <_realloc_r+0x518>
 200af0c:	b0800404 	addi	r2,r22,16
 200af10:	ad400204 	addi	r21,r21,8
 200af14:	a8c00017 	ldw	r3,0(r21)
 200af18:	10c00015 	stw	r3,0(r2)
 200af1c:	a8c00117 	ldw	r3,4(r21)
 200af20:	10c00115 	stw	r3,4(r2)
 200af24:	a8c00217 	ldw	r3,8(r21)
 200af28:	10c00215 	stw	r3,8(r2)
 200af2c:	b447883a 	add	r3,r22,r17
 200af30:	bc45c83a 	sub	r2,r23,r17
 200af34:	e0c00215 	stw	r3,8(fp)
 200af38:	10800054 	ori	r2,r2,1
 200af3c:	18800115 	stw	r2,4(r3)
 200af40:	b0800117 	ldw	r2,4(r22)
 200af44:	a009883a 	mov	r4,r20
 200af48:	1080004c 	andi	r2,r2,1
 200af4c:	1462b03a 	or	r17,r2,r17
 200af50:	b4400115 	stw	r17,4(r22)
 200af54:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200af58:	9005883a 	mov	r2,r18
 200af5c:	003f4006 	br	200ac60 <_realloc_r+0x170>
 200af60:	a8c00217 	ldw	r3,8(r21)
 200af64:	90c00215 	stw	r3,8(r18)
 200af68:	a8c00317 	ldw	r3,12(r21)
 200af6c:	90c00315 	stw	r3,12(r18)
 200af70:	30801126 	beq	r6,r2,200afb8 <_realloc_r+0x4c8>
 200af74:	90800404 	addi	r2,r18,16
 200af78:	a8c00404 	addi	r3,r21,16
 200af7c:	003f1906 	br	200abe4 <_realloc_r+0xf4>
 200af80:	90ffff17 	ldw	r3,-4(r18)
 200af84:	00bfff04 	movi	r2,-4
 200af88:	a825883a 	mov	r18,r21
 200af8c:	1884703a 	and	r2,r3,r2
 200af90:	80a1883a 	add	r16,r16,r2
 200af94:	003f2406 	br	200ac28 <_realloc_r+0x138>
 200af98:	a8800217 	ldw	r2,8(r21)
 200af9c:	b0800415 	stw	r2,16(r22)
 200afa0:	a8800317 	ldw	r2,12(r21)
 200afa4:	b0800515 	stw	r2,20(r22)
 200afa8:	31000a26 	beq	r6,r4,200afd4 <_realloc_r+0x4e4>
 200afac:	b0800604 	addi	r2,r22,24
 200afb0:	ad400404 	addi	r21,r21,16
 200afb4:	003fa906 	br	200ae5c <_realloc_r+0x36c>
 200afb8:	a9000417 	ldw	r4,16(r21)
 200afbc:	90800604 	addi	r2,r18,24
 200afc0:	a8c00604 	addi	r3,r21,24
 200afc4:	91000415 	stw	r4,16(r18)
 200afc8:	a9000517 	ldw	r4,20(r21)
 200afcc:	91000515 	stw	r4,20(r18)
 200afd0:	003f0406 	br	200abe4 <_realloc_r+0xf4>
 200afd4:	a8c00417 	ldw	r3,16(r21)
 200afd8:	ad400604 	addi	r21,r21,24
 200afdc:	b0800804 	addi	r2,r22,32
 200afe0:	b0c00615 	stw	r3,24(r22)
 200afe4:	a8ffff17 	ldw	r3,-4(r21)
 200afe8:	b0c00715 	stw	r3,28(r22)
 200afec:	003f9b06 	br	200ae5c <_realloc_r+0x36c>
 200aff0:	9005883a 	mov	r2,r18
 200aff4:	003fc706 	br	200af14 <_realloc_r+0x424>
 200aff8:	a80b883a 	mov	r5,r21
 200affc:	9009883a 	mov	r4,r18
 200b000:	20097b40 	call	20097b4 <memmove>
 200b004:	003fc906 	br	200af2c <_realloc_r+0x43c>
 200b008:	a8800217 	ldw	r2,8(r21)
 200b00c:	b0800415 	stw	r2,16(r22)
 200b010:	a8800317 	ldw	r2,12(r21)
 200b014:	b0800515 	stw	r2,20(r22)
 200b018:	31000726 	beq	r6,r4,200b038 <_realloc_r+0x548>
 200b01c:	b0800604 	addi	r2,r22,24
 200b020:	ad400404 	addi	r21,r21,16
 200b024:	003fbb06 	br	200af14 <_realloc_r+0x424>
 200b028:	a009883a 	mov	r4,r20
 200b02c:	200ebc40 	call	200ebc4 <__malloc_unlock>
 200b030:	0005883a 	mov	r2,zero
 200b034:	003f0a06 	br	200ac60 <_realloc_r+0x170>
 200b038:	a8c00417 	ldw	r3,16(r21)
 200b03c:	ad400604 	addi	r21,r21,24
 200b040:	b0800804 	addi	r2,r22,32
 200b044:	b0c00615 	stw	r3,24(r22)
 200b048:	a8ffff17 	ldw	r3,-4(r21)
 200b04c:	b0c00715 	stw	r3,28(r22)
 200b050:	003fb006 	br	200af14 <_realloc_r+0x424>

0200b054 <_sbrk_r>:
 200b054:	defffd04 	addi	sp,sp,-12
 200b058:	dc000015 	stw	r16,0(sp)
 200b05c:	040080b4 	movhi	r16,514
 200b060:	dc400115 	stw	r17,4(sp)
 200b064:	8433d004 	addi	r16,r16,-12480
 200b068:	2023883a 	mov	r17,r4
 200b06c:	2809883a 	mov	r4,r5
 200b070:	dfc00215 	stw	ra,8(sp)
 200b074:	80000015 	stw	zero,0(r16)
 200b078:	200e7940 	call	200e794 <sbrk>
 200b07c:	00ffffc4 	movi	r3,-1
 200b080:	10c00526 	beq	r2,r3,200b098 <_sbrk_r+0x44>
 200b084:	dfc00217 	ldw	ra,8(sp)
 200b088:	dc400117 	ldw	r17,4(sp)
 200b08c:	dc000017 	ldw	r16,0(sp)
 200b090:	dec00304 	addi	sp,sp,12
 200b094:	f800283a 	ret
 200b098:	80c00017 	ldw	r3,0(r16)
 200b09c:	183ff926 	beq	r3,zero,200b084 <_sbrk_r+0x30>
 200b0a0:	88c00015 	stw	r3,0(r17)
 200b0a4:	003ff706 	br	200b084 <_sbrk_r+0x30>

0200b0a8 <__sread>:
 200b0a8:	defffe04 	addi	sp,sp,-8
 200b0ac:	dc000015 	stw	r16,0(sp)
 200b0b0:	2821883a 	mov	r16,r5
 200b0b4:	2940038f 	ldh	r5,14(r5)
 200b0b8:	dfc00115 	stw	ra,4(sp)
 200b0bc:	200cf640 	call	200cf64 <_read_r>
 200b0c0:	10000716 	blt	r2,zero,200b0e0 <__sread+0x38>
 200b0c4:	80c01417 	ldw	r3,80(r16)
 200b0c8:	1887883a 	add	r3,r3,r2
 200b0cc:	80c01415 	stw	r3,80(r16)
 200b0d0:	dfc00117 	ldw	ra,4(sp)
 200b0d4:	dc000017 	ldw	r16,0(sp)
 200b0d8:	dec00204 	addi	sp,sp,8
 200b0dc:	f800283a 	ret
 200b0e0:	80c0030b 	ldhu	r3,12(r16)
 200b0e4:	18fbffcc 	andi	r3,r3,61439
 200b0e8:	80c0030d 	sth	r3,12(r16)
 200b0ec:	dfc00117 	ldw	ra,4(sp)
 200b0f0:	dc000017 	ldw	r16,0(sp)
 200b0f4:	dec00204 	addi	sp,sp,8
 200b0f8:	f800283a 	ret

0200b0fc <__seofread>:
 200b0fc:	0005883a 	mov	r2,zero
 200b100:	f800283a 	ret

0200b104 <__swrite>:
 200b104:	2880030b 	ldhu	r2,12(r5)
 200b108:	defffb04 	addi	sp,sp,-20
 200b10c:	dcc00315 	stw	r19,12(sp)
 200b110:	dc800215 	stw	r18,8(sp)
 200b114:	dc400115 	stw	r17,4(sp)
 200b118:	dc000015 	stw	r16,0(sp)
 200b11c:	dfc00415 	stw	ra,16(sp)
 200b120:	10c0400c 	andi	r3,r2,256
 200b124:	2821883a 	mov	r16,r5
 200b128:	2023883a 	mov	r17,r4
 200b12c:	3025883a 	mov	r18,r6
 200b130:	3827883a 	mov	r19,r7
 200b134:	18000526 	beq	r3,zero,200b14c <__swrite+0x48>
 200b138:	2940038f 	ldh	r5,14(r5)
 200b13c:	01c00084 	movi	r7,2
 200b140:	000d883a 	mov	r6,zero
 200b144:	200cf040 	call	200cf04 <_lseek_r>
 200b148:	8080030b 	ldhu	r2,12(r16)
 200b14c:	8140038f 	ldh	r5,14(r16)
 200b150:	10bbffcc 	andi	r2,r2,61439
 200b154:	980f883a 	mov	r7,r19
 200b158:	900d883a 	mov	r6,r18
 200b15c:	8809883a 	mov	r4,r17
 200b160:	8080030d 	sth	r2,12(r16)
 200b164:	dfc00417 	ldw	ra,16(sp)
 200b168:	dcc00317 	ldw	r19,12(sp)
 200b16c:	dc800217 	ldw	r18,8(sp)
 200b170:	dc400117 	ldw	r17,4(sp)
 200b174:	dc000017 	ldw	r16,0(sp)
 200b178:	dec00504 	addi	sp,sp,20
 200b17c:	200c9b81 	jmpi	200c9b8 <_write_r>

0200b180 <__sseek>:
 200b180:	defffe04 	addi	sp,sp,-8
 200b184:	dc000015 	stw	r16,0(sp)
 200b188:	2821883a 	mov	r16,r5
 200b18c:	2940038f 	ldh	r5,14(r5)
 200b190:	dfc00115 	stw	ra,4(sp)
 200b194:	200cf040 	call	200cf04 <_lseek_r>
 200b198:	00ffffc4 	movi	r3,-1
 200b19c:	10c00826 	beq	r2,r3,200b1c0 <__sseek+0x40>
 200b1a0:	80c0030b 	ldhu	r3,12(r16)
 200b1a4:	80801415 	stw	r2,80(r16)
 200b1a8:	18c40014 	ori	r3,r3,4096
 200b1ac:	80c0030d 	sth	r3,12(r16)
 200b1b0:	dfc00117 	ldw	ra,4(sp)
 200b1b4:	dc000017 	ldw	r16,0(sp)
 200b1b8:	dec00204 	addi	sp,sp,8
 200b1bc:	f800283a 	ret
 200b1c0:	80c0030b 	ldhu	r3,12(r16)
 200b1c4:	18fbffcc 	andi	r3,r3,61439
 200b1c8:	80c0030d 	sth	r3,12(r16)
 200b1cc:	dfc00117 	ldw	ra,4(sp)
 200b1d0:	dc000017 	ldw	r16,0(sp)
 200b1d4:	dec00204 	addi	sp,sp,8
 200b1d8:	f800283a 	ret

0200b1dc <__sclose>:
 200b1dc:	2940038f 	ldh	r5,14(r5)
 200b1e0:	200ca181 	jmpi	200ca18 <_close_r>

0200b1e4 <strcmp>:
 200b1e4:	2144b03a 	or	r2,r4,r5
 200b1e8:	108000cc 	andi	r2,r2,3
 200b1ec:	1000171e 	bne	r2,zero,200b24c <strcmp+0x68>
 200b1f0:	20800017 	ldw	r2,0(r4)
 200b1f4:	28c00017 	ldw	r3,0(r5)
 200b1f8:	10c0141e 	bne	r2,r3,200b24c <strcmp+0x68>
 200b1fc:	027fbff4 	movhi	r9,65279
 200b200:	4a7fbfc4 	addi	r9,r9,-257
 200b204:	0086303a 	nor	r3,zero,r2
 200b208:	02202074 	movhi	r8,32897
 200b20c:	1245883a 	add	r2,r2,r9
 200b210:	42202004 	addi	r8,r8,-32640
 200b214:	10c4703a 	and	r2,r2,r3
 200b218:	1204703a 	and	r2,r2,r8
 200b21c:	10000226 	beq	r2,zero,200b228 <strcmp+0x44>
 200b220:	00002306 	br	200b2b0 <strcmp+0xcc>
 200b224:	1000221e 	bne	r2,zero,200b2b0 <strcmp+0xcc>
 200b228:	21000104 	addi	r4,r4,4
 200b22c:	20c00017 	ldw	r3,0(r4)
 200b230:	29400104 	addi	r5,r5,4
 200b234:	29800017 	ldw	r6,0(r5)
 200b238:	1a4f883a 	add	r7,r3,r9
 200b23c:	00c4303a 	nor	r2,zero,r3
 200b240:	3884703a 	and	r2,r7,r2
 200b244:	1204703a 	and	r2,r2,r8
 200b248:	19bff626 	beq	r3,r6,200b224 <strcmp+0x40>
 200b24c:	20800003 	ldbu	r2,0(r4)
 200b250:	10c03fcc 	andi	r3,r2,255
 200b254:	18c0201c 	xori	r3,r3,128
 200b258:	18ffe004 	addi	r3,r3,-128
 200b25c:	18000c26 	beq	r3,zero,200b290 <strcmp+0xac>
 200b260:	29800007 	ldb	r6,0(r5)
 200b264:	19800326 	beq	r3,r6,200b274 <strcmp+0x90>
 200b268:	00001306 	br	200b2b8 <strcmp+0xd4>
 200b26c:	29800007 	ldb	r6,0(r5)
 200b270:	11800b1e 	bne	r2,r6,200b2a0 <strcmp+0xbc>
 200b274:	21000044 	addi	r4,r4,1
 200b278:	20c00003 	ldbu	r3,0(r4)
 200b27c:	29400044 	addi	r5,r5,1
 200b280:	18803fcc 	andi	r2,r3,255
 200b284:	1080201c 	xori	r2,r2,128
 200b288:	10bfe004 	addi	r2,r2,-128
 200b28c:	103ff71e 	bne	r2,zero,200b26c <strcmp+0x88>
 200b290:	0007883a 	mov	r3,zero
 200b294:	28800003 	ldbu	r2,0(r5)
 200b298:	1885c83a 	sub	r2,r3,r2
 200b29c:	f800283a 	ret
 200b2a0:	28800003 	ldbu	r2,0(r5)
 200b2a4:	18c03fcc 	andi	r3,r3,255
 200b2a8:	1885c83a 	sub	r2,r3,r2
 200b2ac:	f800283a 	ret
 200b2b0:	0005883a 	mov	r2,zero
 200b2b4:	f800283a 	ret
 200b2b8:	10c03fcc 	andi	r3,r2,255
 200b2bc:	003ff506 	br	200b294 <strcmp+0xb0>

0200b2c0 <__sprint_r.part.0>:
 200b2c0:	28801917 	ldw	r2,100(r5)
 200b2c4:	defff604 	addi	sp,sp,-40
 200b2c8:	dd400515 	stw	r21,20(sp)
 200b2cc:	dfc00915 	stw	ra,36(sp)
 200b2d0:	df000815 	stw	fp,32(sp)
 200b2d4:	ddc00715 	stw	r23,28(sp)
 200b2d8:	dd800615 	stw	r22,24(sp)
 200b2dc:	dd000415 	stw	r20,16(sp)
 200b2e0:	dcc00315 	stw	r19,12(sp)
 200b2e4:	dc800215 	stw	r18,8(sp)
 200b2e8:	dc400115 	stw	r17,4(sp)
 200b2ec:	dc000015 	stw	r16,0(sp)
 200b2f0:	1088000c 	andi	r2,r2,8192
 200b2f4:	302b883a 	mov	r21,r6
 200b2f8:	10002e26 	beq	r2,zero,200b3b4 <__sprint_r.part.0+0xf4>
 200b2fc:	30800217 	ldw	r2,8(r6)
 200b300:	35800017 	ldw	r22,0(r6)
 200b304:	10002926 	beq	r2,zero,200b3ac <__sprint_r.part.0+0xec>
 200b308:	2827883a 	mov	r19,r5
 200b30c:	2029883a 	mov	r20,r4
 200b310:	b5c00104 	addi	r23,r22,4
 200b314:	04bfffc4 	movi	r18,-1
 200b318:	bc400017 	ldw	r17,0(r23)
 200b31c:	b4000017 	ldw	r16,0(r22)
 200b320:	0039883a 	mov	fp,zero
 200b324:	8822d0ba 	srli	r17,r17,2
 200b328:	8800031e 	bne	r17,zero,200b338 <__sprint_r.part.0+0x78>
 200b32c:	00001806 	br	200b390 <__sprint_r.part.0+0xd0>
 200b330:	84000104 	addi	r16,r16,4
 200b334:	8f001526 	beq	r17,fp,200b38c <__sprint_r.part.0+0xcc>
 200b338:	81400017 	ldw	r5,0(r16)
 200b33c:	980d883a 	mov	r6,r19
 200b340:	a009883a 	mov	r4,r20
 200b344:	200cdb00 	call	200cdb0 <_fputwc_r>
 200b348:	e7000044 	addi	fp,fp,1
 200b34c:	14bff81e 	bne	r2,r18,200b330 <__sprint_r.part.0+0x70>
 200b350:	9005883a 	mov	r2,r18
 200b354:	a8000215 	stw	zero,8(r21)
 200b358:	a8000115 	stw	zero,4(r21)
 200b35c:	dfc00917 	ldw	ra,36(sp)
 200b360:	df000817 	ldw	fp,32(sp)
 200b364:	ddc00717 	ldw	r23,28(sp)
 200b368:	dd800617 	ldw	r22,24(sp)
 200b36c:	dd400517 	ldw	r21,20(sp)
 200b370:	dd000417 	ldw	r20,16(sp)
 200b374:	dcc00317 	ldw	r19,12(sp)
 200b378:	dc800217 	ldw	r18,8(sp)
 200b37c:	dc400117 	ldw	r17,4(sp)
 200b380:	dc000017 	ldw	r16,0(sp)
 200b384:	dec00a04 	addi	sp,sp,40
 200b388:	f800283a 	ret
 200b38c:	a8800217 	ldw	r2,8(r21)
 200b390:	8c63883a 	add	r17,r17,r17
 200b394:	8c63883a 	add	r17,r17,r17
 200b398:	1445c83a 	sub	r2,r2,r17
 200b39c:	a8800215 	stw	r2,8(r21)
 200b3a0:	b5800204 	addi	r22,r22,8
 200b3a4:	bdc00204 	addi	r23,r23,8
 200b3a8:	103fdb1e 	bne	r2,zero,200b318 <__sprint_r.part.0+0x58>
 200b3ac:	0005883a 	mov	r2,zero
 200b3b0:	003fe806 	br	200b354 <__sprint_r.part.0+0x94>
 200b3b4:	20084940 	call	2008494 <__sfvwrite_r>
 200b3b8:	003fe606 	br	200b354 <__sprint_r.part.0+0x94>

0200b3bc <__sprint_r>:
 200b3bc:	30c00217 	ldw	r3,8(r6)
 200b3c0:	18000126 	beq	r3,zero,200b3c8 <__sprint_r+0xc>
 200b3c4:	200b2c01 	jmpi	200b2c0 <__sprint_r.part.0>
 200b3c8:	30000115 	stw	zero,4(r6)
 200b3cc:	0005883a 	mov	r2,zero
 200b3d0:	f800283a 	ret

0200b3d4 <___vfiprintf_internal_r>:
 200b3d4:	deffca04 	addi	sp,sp,-216
 200b3d8:	dd403115 	stw	r21,196(sp)
 200b3dc:	dfc03515 	stw	ra,212(sp)
 200b3e0:	df003415 	stw	fp,208(sp)
 200b3e4:	ddc03315 	stw	r23,204(sp)
 200b3e8:	dd803215 	stw	r22,200(sp)
 200b3ec:	dd003015 	stw	r20,192(sp)
 200b3f0:	dcc02f15 	stw	r19,188(sp)
 200b3f4:	dc802e15 	stw	r18,184(sp)
 200b3f8:	dc402d15 	stw	r17,180(sp)
 200b3fc:	dc002c15 	stw	r16,176(sp)
 200b400:	d9002115 	stw	r4,132(sp)
 200b404:	d9402015 	stw	r5,128(sp)
 200b408:	d9c02215 	stw	r7,136(sp)
 200b40c:	302b883a 	mov	r21,r6
 200b410:	20000226 	beq	r4,zero,200b41c <___vfiprintf_internal_r+0x48>
 200b414:	20800e17 	ldw	r2,56(r4)
 200b418:	1000cf26 	beq	r2,zero,200b758 <___vfiprintf_internal_r+0x384>
 200b41c:	d8c02017 	ldw	r3,128(sp)
 200b420:	1880030b 	ldhu	r2,12(r3)
 200b424:	10c8000c 	andi	r3,r2,8192
 200b428:	1800071e 	bne	r3,zero,200b448 <___vfiprintf_internal_r+0x74>
 200b42c:	d9402017 	ldw	r5,128(sp)
 200b430:	00f7ffc4 	movi	r3,-8193
 200b434:	10880014 	ori	r2,r2,8192
 200b438:	29001917 	ldw	r4,100(r5)
 200b43c:	2880030d 	sth	r2,12(r5)
 200b440:	20c6703a 	and	r3,r4,r3
 200b444:	28c01915 	stw	r3,100(r5)
 200b448:	10c0020c 	andi	r3,r2,8
 200b44c:	1800a526 	beq	r3,zero,200b6e4 <___vfiprintf_internal_r+0x310>
 200b450:	d9002017 	ldw	r4,128(sp)
 200b454:	20c00417 	ldw	r3,16(r4)
 200b458:	1800a226 	beq	r3,zero,200b6e4 <___vfiprintf_internal_r+0x310>
 200b45c:	1080068c 	andi	r2,r2,26
 200b460:	00c00284 	movi	r3,10
 200b464:	10c0a826 	beq	r2,r3,200b708 <___vfiprintf_internal_r+0x334>
 200b468:	d9001a04 	addi	r4,sp,104
 200b46c:	d94019c4 	addi	r5,sp,103
 200b470:	048080b4 	movhi	r18,514
 200b474:	2145c83a 	sub	r2,r4,r5
 200b478:	94a5af04 	addi	r18,r18,-26948
 200b47c:	d9001e15 	stw	r4,120(sp)
 200b480:	d9401f15 	stw	r5,124(sp)
 200b484:	dec01a15 	stw	sp,104(sp)
 200b488:	d8001c15 	stw	zero,112(sp)
 200b48c:	d8001b15 	stw	zero,108(sp)
 200b490:	d811883a 	mov	r8,sp
 200b494:	d8002615 	stw	zero,152(sp)
 200b498:	d8002415 	stw	zero,144(sp)
 200b49c:	d8802815 	stw	r2,160(sp)
 200b4a0:	a82d883a 	mov	r22,r21
 200b4a4:	b0800007 	ldb	r2,0(r22)
 200b4a8:	10040d26 	beq	r2,zero,200c4e0 <___vfiprintf_internal_r+0x110c>
 200b4ac:	00c00944 	movi	r3,37
 200b4b0:	b029883a 	mov	r20,r22
 200b4b4:	10c0021e 	bne	r2,r3,200b4c0 <___vfiprintf_internal_r+0xec>
 200b4b8:	00001606 	br	200b514 <___vfiprintf_internal_r+0x140>
 200b4bc:	10c00326 	beq	r2,r3,200b4cc <___vfiprintf_internal_r+0xf8>
 200b4c0:	a5000044 	addi	r20,r20,1
 200b4c4:	a0800007 	ldb	r2,0(r20)
 200b4c8:	103ffc1e 	bne	r2,zero,200b4bc <___vfiprintf_internal_r+0xe8>
 200b4cc:	a5a1c83a 	sub	r16,r20,r22
 200b4d0:	80001026 	beq	r16,zero,200b514 <___vfiprintf_internal_r+0x140>
 200b4d4:	d8c01c17 	ldw	r3,112(sp)
 200b4d8:	d8801b17 	ldw	r2,108(sp)
 200b4dc:	45800015 	stw	r22,0(r8)
 200b4e0:	80c7883a 	add	r3,r16,r3
 200b4e4:	10800044 	addi	r2,r2,1
 200b4e8:	44000115 	stw	r16,4(r8)
 200b4ec:	d8c01c15 	stw	r3,112(sp)
 200b4f0:	d8801b15 	stw	r2,108(sp)
 200b4f4:	010001c4 	movi	r4,7
 200b4f8:	2080750e 	bge	r4,r2,200b6d0 <___vfiprintf_internal_r+0x2fc>
 200b4fc:	1803951e 	bne	r3,zero,200c354 <___vfiprintf_internal_r+0xf80>
 200b500:	d8c02417 	ldw	r3,144(sp)
 200b504:	d8001b15 	stw	zero,108(sp)
 200b508:	d811883a 	mov	r8,sp
 200b50c:	1c07883a 	add	r3,r3,r16
 200b510:	d8c02415 	stw	r3,144(sp)
 200b514:	a0800007 	ldb	r2,0(r20)
 200b518:	1002e026 	beq	r2,zero,200c09c <___vfiprintf_internal_r+0xcc8>
 200b51c:	a5800044 	addi	r22,r20,1
 200b520:	a0c00047 	ldb	r3,1(r20)
 200b524:	d8001d85 	stb	zero,118(sp)
 200b528:	0027883a 	mov	r19,zero
 200b52c:	d8002305 	stb	zero,140(sp)
 200b530:	043fffc4 	movi	r16,-1
 200b534:	d8002515 	stw	zero,148(sp)
 200b538:	0023883a 	mov	r17,zero
 200b53c:	05001604 	movi	r20,88
 200b540:	05400244 	movi	r21,9
 200b544:	402f883a 	mov	r23,r8
 200b548:	b5800044 	addi	r22,r22,1
 200b54c:	18bff804 	addi	r2,r3,-32
 200b550:	a0827736 	bltu	r20,r2,200bf30 <___vfiprintf_internal_r+0xb5c>
 200b554:	100490ba 	slli	r2,r2,2
 200b558:	01008074 	movhi	r4,513
 200b55c:	212d5b04 	addi	r4,r4,-19092
 200b560:	1105883a 	add	r2,r2,r4
 200b564:	10800017 	ldw	r2,0(r2)
 200b568:	1000683a 	jmp	r2
 200b56c:	0200bc30 	cmpltui	r8,zero,752
 200b570:	0200bf30 	cmpltui	r8,zero,764
 200b574:	0200bf30 	cmpltui	r8,zero,764
 200b578:	0200bc4c 	andi	r8,zero,753
 200b57c:	0200bf30 	cmpltui	r8,zero,764
 200b580:	0200bf30 	cmpltui	r8,zero,764
 200b584:	0200bf30 	cmpltui	r8,zero,764
 200b588:	0200bf30 	cmpltui	r8,zero,764
 200b58c:	0200bf30 	cmpltui	r8,zero,764
 200b590:	0200bf30 	cmpltui	r8,zero,764
 200b594:	0200be54 	movui	r8,761
 200b598:	0200be78 	rdprs	r8,zero,761
 200b59c:	0200bf30 	cmpltui	r8,zero,764
 200b5a0:	0200b770 	cmpltui	r8,zero,733
 200b5a4:	0200be8c 	andi	r8,zero,762
 200b5a8:	0200bf30 	cmpltui	r8,zero,764
 200b5ac:	0200bc58 	cmpnei	r8,zero,753
 200b5b0:	0200bc64 	muli	r8,zero,753
 200b5b4:	0200bc64 	muli	r8,zero,753
 200b5b8:	0200bc64 	muli	r8,zero,753
 200b5bc:	0200bc64 	muli	r8,zero,753
 200b5c0:	0200bc64 	muli	r8,zero,753
 200b5c4:	0200bc64 	muli	r8,zero,753
 200b5c8:	0200bc64 	muli	r8,zero,753
 200b5cc:	0200bc64 	muli	r8,zero,753
 200b5d0:	0200bc64 	muli	r8,zero,753
 200b5d4:	0200bf30 	cmpltui	r8,zero,764
 200b5d8:	0200bf30 	cmpltui	r8,zero,764
 200b5dc:	0200bf30 	cmpltui	r8,zero,764
 200b5e0:	0200bf30 	cmpltui	r8,zero,764
 200b5e4:	0200bf30 	cmpltui	r8,zero,764
 200b5e8:	0200bf30 	cmpltui	r8,zero,764
 200b5ec:	0200bf30 	cmpltui	r8,zero,764
 200b5f0:	0200bf30 	cmpltui	r8,zero,764
 200b5f4:	0200bf30 	cmpltui	r8,zero,764
 200b5f8:	0200bf30 	cmpltui	r8,zero,764
 200b5fc:	0200bca4 	muli	r8,zero,754
 200b600:	0200bf30 	cmpltui	r8,zero,764
 200b604:	0200bf30 	cmpltui	r8,zero,764
 200b608:	0200bf30 	cmpltui	r8,zero,764
 200b60c:	0200bf30 	cmpltui	r8,zero,764
 200b610:	0200bf30 	cmpltui	r8,zero,764
 200b614:	0200bf30 	cmpltui	r8,zero,764
 200b618:	0200bf30 	cmpltui	r8,zero,764
 200b61c:	0200bf30 	cmpltui	r8,zero,764
 200b620:	0200bf30 	cmpltui	r8,zero,764
 200b624:	0200bf30 	cmpltui	r8,zero,764
 200b628:	0200bce0 	cmpeqi	r8,zero,755
 200b62c:	0200bf30 	cmpltui	r8,zero,764
 200b630:	0200bf30 	cmpltui	r8,zero,764
 200b634:	0200bf30 	cmpltui	r8,zero,764
 200b638:	0200bf30 	cmpltui	r8,zero,764
 200b63c:	0200bf30 	cmpltui	r8,zero,764
 200b640:	0200bd3c 	xorhi	r8,zero,756
 200b644:	0200bf30 	cmpltui	r8,zero,764
 200b648:	0200bf30 	cmpltui	r8,zero,764
 200b64c:	0200bdb0 	cmpltui	r8,zero,758
 200b650:	0200bf30 	cmpltui	r8,zero,764
 200b654:	0200bf30 	cmpltui	r8,zero,764
 200b658:	0200bf30 	cmpltui	r8,zero,764
 200b65c:	0200bf30 	cmpltui	r8,zero,764
 200b660:	0200bf30 	cmpltui	r8,zero,764
 200b664:	0200bf30 	cmpltui	r8,zero,764
 200b668:	0200bf30 	cmpltui	r8,zero,764
 200b66c:	0200bf30 	cmpltui	r8,zero,764
 200b670:	0200bf30 	cmpltui	r8,zero,764
 200b674:	0200bf30 	cmpltui	r8,zero,764
 200b678:	0200bb58 	cmpnei	r8,zero,749
 200b67c:	0200bb88 	cmpgei	r8,zero,750
 200b680:	0200bf30 	cmpltui	r8,zero,764
 200b684:	0200bf30 	cmpltui	r8,zero,764
 200b688:	0200bf30 	cmpltui	r8,zero,764
 200b68c:	0200bed8 	cmpnei	r8,zero,763
 200b690:	0200bb88 	cmpgei	r8,zero,750
 200b694:	0200bf30 	cmpltui	r8,zero,764
 200b698:	0200bf30 	cmpltui	r8,zero,764
 200b69c:	0200ba30 	cmpltui	r8,zero,744
 200b6a0:	0200bf30 	cmpltui	r8,zero,764
 200b6a4:	0200ba44 	movi	r8,745
 200b6a8:	0200ba7c 	xorhi	r8,zero,745
 200b6ac:	0200b77c 	xorhi	r8,zero,733
 200b6b0:	0200ba24 	muli	r8,zero,744
 200b6b4:	0200bf30 	cmpltui	r8,zero,764
 200b6b8:	0200bdf0 	cmpltui	r8,zero,759
 200b6bc:	0200bf30 	cmpltui	r8,zero,764
 200b6c0:	0200be3c 	xorhi	r8,zero,760
 200b6c4:	0200bf30 	cmpltui	r8,zero,764
 200b6c8:	0200bf30 	cmpltui	r8,zero,764
 200b6cc:	0200bb00 	call	200bb0 <__alt_mem_mem_Nios_PI+0xbb0>
 200b6d0:	42000204 	addi	r8,r8,8
 200b6d4:	d8c02417 	ldw	r3,144(sp)
 200b6d8:	1c07883a 	add	r3,r3,r16
 200b6dc:	d8c02415 	stw	r3,144(sp)
 200b6e0:	003f8c06 	br	200b514 <___vfiprintf_internal_r+0x140>
 200b6e4:	d9402017 	ldw	r5,128(sp)
 200b6e8:	d9002117 	ldw	r4,132(sp)
 200b6ec:	20060040 	call	2006004 <__swsetup_r>
 200b6f0:	1003c11e 	bne	r2,zero,200c5f8 <___vfiprintf_internal_r+0x1224>
 200b6f4:	d9402017 	ldw	r5,128(sp)
 200b6f8:	00c00284 	movi	r3,10
 200b6fc:	2880030b 	ldhu	r2,12(r5)
 200b700:	1080068c 	andi	r2,r2,26
 200b704:	10ff581e 	bne	r2,r3,200b468 <___vfiprintf_internal_r+0x94>
 200b708:	d8c02017 	ldw	r3,128(sp)
 200b70c:	1880038f 	ldh	r2,14(r3)
 200b710:	103f5516 	blt	r2,zero,200b468 <___vfiprintf_internal_r+0x94>
 200b714:	d9c02217 	ldw	r7,136(sp)
 200b718:	d9002117 	ldw	r4,132(sp)
 200b71c:	a80d883a 	mov	r6,r21
 200b720:	180b883a 	mov	r5,r3
 200b724:	200c8fc0 	call	200c8fc <__sbprintf>
 200b728:	dfc03517 	ldw	ra,212(sp)
 200b72c:	df003417 	ldw	fp,208(sp)
 200b730:	ddc03317 	ldw	r23,204(sp)
 200b734:	dd803217 	ldw	r22,200(sp)
 200b738:	dd403117 	ldw	r21,196(sp)
 200b73c:	dd003017 	ldw	r20,192(sp)
 200b740:	dcc02f17 	ldw	r19,188(sp)
 200b744:	dc802e17 	ldw	r18,184(sp)
 200b748:	dc402d17 	ldw	r17,180(sp)
 200b74c:	dc002c17 	ldw	r16,176(sp)
 200b750:	dec03604 	addi	sp,sp,216
 200b754:	f800283a 	ret
 200b758:	20080100 	call	2008010 <__sinit>
 200b75c:	003f2f06 	br	200b41c <___vfiprintf_internal_r+0x48>
 200b760:	d8c02517 	ldw	r3,148(sp)
 200b764:	d8802215 	stw	r2,136(sp)
 200b768:	00c7c83a 	sub	r3,zero,r3
 200b76c:	d8c02515 	stw	r3,148(sp)
 200b770:	8c400114 	ori	r17,r17,4
 200b774:	b0c00007 	ldb	r3,0(r22)
 200b778:	003f7306 	br	200b548 <___vfiprintf_internal_r+0x174>
 200b77c:	00800c04 	movi	r2,48
 200b780:	d9402217 	ldw	r5,136(sp)
 200b784:	d8801d05 	stb	r2,116(sp)
 200b788:	00801e04 	movi	r2,120
 200b78c:	d8801d45 	stb	r2,117(sp)
 200b790:	d8001d85 	stb	zero,118(sp)
 200b794:	b811883a 	mov	r8,r23
 200b798:	28c00104 	addi	r3,r5,4
 200b79c:	2cc00017 	ldw	r19,0(r5)
 200b7a0:	0029883a 	mov	r20,zero
 200b7a4:	88800094 	ori	r2,r17,2
 200b7a8:	80032516 	blt	r16,zero,200c440 <___vfiprintf_internal_r+0x106c>
 200b7ac:	00bfdfc4 	movi	r2,-129
 200b7b0:	88a2703a 	and	r17,r17,r2
 200b7b4:	d8c02215 	stw	r3,136(sp)
 200b7b8:	8c400094 	ori	r17,r17,2
 200b7bc:	98032a1e 	bne	r19,zero,200c468 <___vfiprintf_internal_r+0x1094>
 200b7c0:	008080b4 	movhi	r2,514
 200b7c4:	10a54f04 	addi	r2,r2,-27332
 200b7c8:	d8802615 	stw	r2,152(sp)
 200b7cc:	002b883a 	mov	r21,zero
 200b7d0:	8001741e 	bne	r16,zero,200bda4 <___vfiprintf_internal_r+0x9d0>
 200b7d4:	0021883a 	mov	r16,zero
 200b7d8:	0029883a 	mov	r20,zero
 200b7dc:	ddc01a04 	addi	r23,sp,104
 200b7e0:	8027883a 	mov	r19,r16
 200b7e4:	8500010e 	bge	r16,r20,200b7ec <___vfiprintf_internal_r+0x418>
 200b7e8:	a027883a 	mov	r19,r20
 200b7ec:	ad403fcc 	andi	r21,r21,255
 200b7f0:	ad40201c 	xori	r21,r21,128
 200b7f4:	ad7fe004 	addi	r21,r21,-128
 200b7f8:	a8000126 	beq	r21,zero,200b800 <___vfiprintf_internal_r+0x42c>
 200b7fc:	9cc00044 	addi	r19,r19,1
 200b800:	89c0008c 	andi	r7,r17,2
 200b804:	38000126 	beq	r7,zero,200b80c <___vfiprintf_internal_r+0x438>
 200b808:	9cc00084 	addi	r19,r19,2
 200b80c:	88c0210c 	andi	r3,r17,132
 200b810:	1801dd1e 	bne	r3,zero,200bf88 <___vfiprintf_internal_r+0xbb4>
 200b814:	d9402517 	ldw	r5,148(sp)
 200b818:	2cebc83a 	sub	r21,r5,r19
 200b81c:	0541da0e 	bge	zero,r21,200bf88 <___vfiprintf_internal_r+0xbb4>
 200b820:	07000404 	movi	fp,16
 200b824:	d8801c17 	ldw	r2,112(sp)
 200b828:	e543be0e 	bge	fp,r21,200c724 <___vfiprintf_internal_r+0x1350>
 200b82c:	014080b4 	movhi	r5,514
 200b830:	2965b304 	addi	r5,r5,-26932
 200b834:	dc002715 	stw	r16,156(sp)
 200b838:	d9801b17 	ldw	r6,108(sp)
 200b83c:	a821883a 	mov	r16,r21
 200b840:	d9402315 	stw	r5,140(sp)
 200b844:	028001c4 	movi	r10,7
 200b848:	d9c02915 	stw	r7,164(sp)
 200b84c:	182b883a 	mov	r21,r3
 200b850:	00000506 	br	200b868 <___vfiprintf_internal_r+0x494>
 200b854:	31000084 	addi	r4,r6,2
 200b858:	42000204 	addi	r8,r8,8
 200b85c:	180d883a 	mov	r6,r3
 200b860:	843ffc04 	addi	r16,r16,-16
 200b864:	e4000f0e 	bge	fp,r16,200b8a4 <___vfiprintf_internal_r+0x4d0>
 200b868:	010080b4 	movhi	r4,514
 200b86c:	10800404 	addi	r2,r2,16
 200b870:	30c00044 	addi	r3,r6,1
 200b874:	2125b304 	addi	r4,r4,-26932
 200b878:	41000015 	stw	r4,0(r8)
 200b87c:	47000115 	stw	fp,4(r8)
 200b880:	d8801c15 	stw	r2,112(sp)
 200b884:	d8c01b15 	stw	r3,108(sp)
 200b888:	50fff20e 	bge	r10,r3,200b854 <___vfiprintf_internal_r+0x480>
 200b88c:	1001b21e 	bne	r2,zero,200bf58 <___vfiprintf_internal_r+0xb84>
 200b890:	843ffc04 	addi	r16,r16,-16
 200b894:	000d883a 	mov	r6,zero
 200b898:	01000044 	movi	r4,1
 200b89c:	d811883a 	mov	r8,sp
 200b8a0:	e43ff116 	blt	fp,r16,200b868 <___vfiprintf_internal_r+0x494>
 200b8a4:	a807883a 	mov	r3,r21
 200b8a8:	d9c02917 	ldw	r7,164(sp)
 200b8ac:	802b883a 	mov	r21,r16
 200b8b0:	dc002717 	ldw	r16,156(sp)
 200b8b4:	d9402317 	ldw	r5,140(sp)
 200b8b8:	a885883a 	add	r2,r21,r2
 200b8bc:	45400115 	stw	r21,4(r8)
 200b8c0:	41400015 	stw	r5,0(r8)
 200b8c4:	d8801c15 	stw	r2,112(sp)
 200b8c8:	d9001b15 	stw	r4,108(sp)
 200b8cc:	014001c4 	movi	r5,7
 200b8d0:	29026216 	blt	r5,r4,200c25c <___vfiprintf_internal_r+0xe88>
 200b8d4:	d9801d87 	ldb	r6,118(sp)
 200b8d8:	42000204 	addi	r8,r8,8
 200b8dc:	21400044 	addi	r5,r4,1
 200b8e0:	3001ae1e 	bne	r6,zero,200bf9c <___vfiprintf_internal_r+0xbc8>
 200b8e4:	3801bb26 	beq	r7,zero,200bfd4 <___vfiprintf_internal_r+0xc00>
 200b8e8:	d9001d04 	addi	r4,sp,116
 200b8ec:	10800084 	addi	r2,r2,2
 200b8f0:	41000015 	stw	r4,0(r8)
 200b8f4:	01000084 	movi	r4,2
 200b8f8:	41000115 	stw	r4,4(r8)
 200b8fc:	d8801c15 	stw	r2,112(sp)
 200b900:	d9401b15 	stw	r5,108(sp)
 200b904:	010001c4 	movi	r4,7
 200b908:	2142680e 	bge	r4,r5,200c2ac <___vfiprintf_internal_r+0xed8>
 200b90c:	1002b11e 	bne	r2,zero,200c3d4 <___vfiprintf_internal_r+0x1000>
 200b910:	01802004 	movi	r6,128
 200b914:	01400044 	movi	r5,1
 200b918:	0009883a 	mov	r4,zero
 200b91c:	d811883a 	mov	r8,sp
 200b920:	1981ae1e 	bne	r3,r6,200bfdc <___vfiprintf_internal_r+0xc08>
 200b924:	d8c02517 	ldw	r3,148(sp)
 200b928:	1cf9c83a 	sub	fp,r3,r19
 200b92c:	0701ab0e 	bge	zero,fp,200bfdc <___vfiprintf_internal_r+0xc08>
 200b930:	05400404 	movi	r21,16
 200b934:	af03a90e 	bge	r21,fp,200c7dc <___vfiprintf_internal_r+0x1408>
 200b938:	014080b4 	movhi	r5,514
 200b93c:	2965af04 	addi	r5,r5,-26948
 200b940:	d9402315 	stw	r5,140(sp)
 200b944:	01c001c4 	movi	r7,7
 200b948:	00000506 	br	200b960 <___vfiprintf_internal_r+0x58c>
 200b94c:	21800084 	addi	r6,r4,2
 200b950:	42000204 	addi	r8,r8,8
 200b954:	1809883a 	mov	r4,r3
 200b958:	e73ffc04 	addi	fp,fp,-16
 200b95c:	af000d0e 	bge	r21,fp,200b994 <___vfiprintf_internal_r+0x5c0>
 200b960:	10800404 	addi	r2,r2,16
 200b964:	20c00044 	addi	r3,r4,1
 200b968:	44800015 	stw	r18,0(r8)
 200b96c:	45400115 	stw	r21,4(r8)
 200b970:	d8801c15 	stw	r2,112(sp)
 200b974:	d8c01b15 	stw	r3,108(sp)
 200b978:	38fff40e 	bge	r7,r3,200b94c <___vfiprintf_internal_r+0x578>
 200b97c:	10022b1e 	bne	r2,zero,200c22c <___vfiprintf_internal_r+0xe58>
 200b980:	e73ffc04 	addi	fp,fp,-16
 200b984:	01800044 	movi	r6,1
 200b988:	0009883a 	mov	r4,zero
 200b98c:	d811883a 	mov	r8,sp
 200b990:	af3ff316 	blt	r21,fp,200b960 <___vfiprintf_internal_r+0x58c>
 200b994:	d8c02317 	ldw	r3,140(sp)
 200b998:	1705883a 	add	r2,r2,fp
 200b99c:	47000115 	stw	fp,4(r8)
 200b9a0:	40c00015 	stw	r3,0(r8)
 200b9a4:	d8801c15 	stw	r2,112(sp)
 200b9a8:	d9801b15 	stw	r6,108(sp)
 200b9ac:	00c001c4 	movi	r3,7
 200b9b0:	19829416 	blt	r3,r6,200c404 <___vfiprintf_internal_r+0x1030>
 200b9b4:	8521c83a 	sub	r16,r16,r20
 200b9b8:	42000204 	addi	r8,r8,8
 200b9bc:	31400044 	addi	r5,r6,1
 200b9c0:	3009883a 	mov	r4,r6
 200b9c4:	04018716 	blt	zero,r16,200bfe4 <___vfiprintf_internal_r+0xc10>
 200b9c8:	a085883a 	add	r2,r20,r2
 200b9cc:	45c00015 	stw	r23,0(r8)
 200b9d0:	45000115 	stw	r20,4(r8)
 200b9d4:	d8801c15 	stw	r2,112(sp)
 200b9d8:	d9401b15 	stw	r5,108(sp)
 200b9dc:	00c001c4 	movi	r3,7
 200b9e0:	1941c20e 	bge	r3,r5,200c0ec <___vfiprintf_internal_r+0xd18>
 200b9e4:	1002531e 	bne	r2,zero,200c334 <___vfiprintf_internal_r+0xf60>
 200b9e8:	d8001b15 	stw	zero,108(sp)
 200b9ec:	8c40010c 	andi	r17,r17,4
 200b9f0:	88023226 	beq	r17,zero,200c2bc <___vfiprintf_internal_r+0xee8>
 200b9f4:	d9002517 	ldw	r4,148(sp)
 200b9f8:	24e3c83a 	sub	r17,r4,r19
 200b9fc:	04432916 	blt	zero,r17,200c6a4 <___vfiprintf_internal_r+0x12d0>
 200ba00:	d8802517 	ldw	r2,148(sp)
 200ba04:	14c0010e 	bge	r2,r19,200ba0c <___vfiprintf_internal_r+0x638>
 200ba08:	9805883a 	mov	r2,r19
 200ba0c:	d8c02417 	ldw	r3,144(sp)
 200ba10:	1887883a 	add	r3,r3,r2
 200ba14:	d8c02415 	stw	r3,144(sp)
 200ba18:	d8001b15 	stw	zero,108(sp)
 200ba1c:	d811883a 	mov	r8,sp
 200ba20:	003ea006 	br	200b4a4 <___vfiprintf_internal_r+0xd0>
 200ba24:	8c400814 	ori	r17,r17,32
 200ba28:	b0c00007 	ldb	r3,0(r22)
 200ba2c:	003ec606 	br	200b548 <___vfiprintf_internal_r+0x174>
 200ba30:	b0c00007 	ldb	r3,0(r22)
 200ba34:	00801b04 	movi	r2,108
 200ba38:	18832026 	beq	r3,r2,200c6bc <___vfiprintf_internal_r+0x12e8>
 200ba3c:	8c400414 	ori	r17,r17,16
 200ba40:	003ec106 	br	200b548 <___vfiprintf_internal_r+0x174>
 200ba44:	9cc03fcc 	andi	r19,r19,255
 200ba48:	b811883a 	mov	r8,r23
 200ba4c:	9803981e 	bne	r19,zero,200c8b0 <___vfiprintf_internal_r+0x14dc>
 200ba50:	8880080c 	andi	r2,r17,32
 200ba54:	1002be26 	beq	r2,zero,200c550 <___vfiprintf_internal_r+0x117c>
 200ba58:	d9002217 	ldw	r4,136(sp)
 200ba5c:	d9402417 	ldw	r5,144(sp)
 200ba60:	20800017 	ldw	r2,0(r4)
 200ba64:	2807d7fa 	srai	r3,r5,31
 200ba68:	21000104 	addi	r4,r4,4
 200ba6c:	d9002215 	stw	r4,136(sp)
 200ba70:	11400015 	stw	r5,0(r2)
 200ba74:	10c00115 	stw	r3,4(r2)
 200ba78:	003e8a06 	br	200b4a4 <___vfiprintf_internal_r+0xd0>
 200ba7c:	9cc03fcc 	andi	r19,r19,255
 200ba80:	b811883a 	mov	r8,r23
 200ba84:	9803871e 	bne	r19,zero,200c8a4 <___vfiprintf_internal_r+0x14d0>
 200ba88:	8880080c 	andi	r2,r17,32
 200ba8c:	10009a26 	beq	r2,zero,200bcf8 <___vfiprintf_internal_r+0x924>
 200ba90:	d9002217 	ldw	r4,136(sp)
 200ba94:	d8001d85 	stb	zero,118(sp)
 200ba98:	20800204 	addi	r2,r4,8
 200ba9c:	24c00017 	ldw	r19,0(r4)
 200baa0:	25000117 	ldw	r20,4(r4)
 200baa4:	8002a416 	blt	r16,zero,200c538 <___vfiprintf_internal_r+0x1164>
 200baa8:	013fdfc4 	movi	r4,-129
 200baac:	9d06b03a 	or	r3,r19,r20
 200bab0:	d8802215 	stw	r2,136(sp)
 200bab4:	8922703a 	and	r17,r17,r4
 200bab8:	18009b26 	beq	r3,zero,200bd28 <___vfiprintf_internal_r+0x954>
 200babc:	002b883a 	mov	r21,zero
 200bac0:	ddc01a04 	addi	r23,sp,104
 200bac4:	9806d0fa 	srli	r3,r19,3
 200bac8:	a008977a 	slli	r4,r20,29
 200bacc:	a028d0fa 	srli	r20,r20,3
 200bad0:	9cc001cc 	andi	r19,r19,7
 200bad4:	98800c04 	addi	r2,r19,48
 200bad8:	bdffffc4 	addi	r23,r23,-1
 200badc:	20e6b03a 	or	r19,r4,r3
 200bae0:	b8800005 	stb	r2,0(r23)
 200bae4:	9d06b03a 	or	r3,r19,r20
 200bae8:	183ff61e 	bne	r3,zero,200bac4 <___vfiprintf_internal_r+0x6f0>
 200baec:	88c0004c 	andi	r3,r17,1
 200baf0:	18021f1e 	bne	r3,zero,200c370 <___vfiprintf_internal_r+0xf9c>
 200baf4:	d9401e17 	ldw	r5,120(sp)
 200baf8:	2de9c83a 	sub	r20,r5,r23
 200bafc:	003f3806 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200bb00:	9cc03fcc 	andi	r19,r19,255
 200bb04:	b811883a 	mov	r8,r23
 200bb08:	98034f1e 	bne	r19,zero,200c848 <___vfiprintf_internal_r+0x1474>
 200bb0c:	008080b4 	movhi	r2,514
 200bb10:	10a54f04 	addi	r2,r2,-27332
 200bb14:	d8802615 	stw	r2,152(sp)
 200bb18:	8880080c 	andi	r2,r17,32
 200bb1c:	1000ac26 	beq	r2,zero,200bdd0 <___vfiprintf_internal_r+0x9fc>
 200bb20:	d9002217 	ldw	r4,136(sp)
 200bb24:	24c00017 	ldw	r19,0(r4)
 200bb28:	25000117 	ldw	r20,4(r4)
 200bb2c:	21000204 	addi	r4,r4,8
 200bb30:	d9002215 	stw	r4,136(sp)
 200bb34:	8880004c 	andi	r2,r17,1
 200bb38:	1001e726 	beq	r2,zero,200c2d8 <___vfiprintf_internal_r+0xf04>
 200bb3c:	9d04b03a 	or	r2,r19,r20
 200bb40:	10025c1e 	bne	r2,zero,200c4b4 <___vfiprintf_internal_r+0x10e0>
 200bb44:	d8001d85 	stb	zero,118(sp)
 200bb48:	80024416 	blt	r16,zero,200c45c <___vfiprintf_internal_r+0x1088>
 200bb4c:	00bfdfc4 	movi	r2,-129
 200bb50:	88a2703a 	and	r17,r17,r2
 200bb54:	003f1d06 	br	200b7cc <___vfiprintf_internal_r+0x3f8>
 200bb58:	d8c02217 	ldw	r3,136(sp)
 200bb5c:	04c00044 	movi	r19,1
 200bb60:	b811883a 	mov	r8,r23
 200bb64:	18800017 	ldw	r2,0(r3)
 200bb68:	18c00104 	addi	r3,r3,4
 200bb6c:	d8001d85 	stb	zero,118(sp)
 200bb70:	d8801005 	stb	r2,64(sp)
 200bb74:	d8c02215 	stw	r3,136(sp)
 200bb78:	9829883a 	mov	r20,r19
 200bb7c:	ddc01004 	addi	r23,sp,64
 200bb80:	0021883a 	mov	r16,zero
 200bb84:	003f1e06 	br	200b800 <___vfiprintf_internal_r+0x42c>
 200bb88:	9cc03fcc 	andi	r19,r19,255
 200bb8c:	b811883a 	mov	r8,r23
 200bb90:	9803331e 	bne	r19,zero,200c860 <___vfiprintf_internal_r+0x148c>
 200bb94:	8880080c 	andi	r2,r17,32
 200bb98:	10004826 	beq	r2,zero,200bcbc <___vfiprintf_internal_r+0x8e8>
 200bb9c:	d9002217 	ldw	r4,136(sp)
 200bba0:	20800117 	ldw	r2,4(r4)
 200bba4:	24c00017 	ldw	r19,0(r4)
 200bba8:	21000204 	addi	r4,r4,8
 200bbac:	d9002215 	stw	r4,136(sp)
 200bbb0:	1029883a 	mov	r20,r2
 200bbb4:	10024c16 	blt	r2,zero,200c4e8 <___vfiprintf_internal_r+0x1114>
 200bbb8:	dd401d83 	ldbu	r21,118(sp)
 200bbbc:	80007116 	blt	r16,zero,200bd84 <___vfiprintf_internal_r+0x9b0>
 200bbc0:	00ffdfc4 	movi	r3,-129
 200bbc4:	9d04b03a 	or	r2,r19,r20
 200bbc8:	88e2703a 	and	r17,r17,r3
 200bbcc:	1000d126 	beq	r2,zero,200bf14 <___vfiprintf_internal_r+0xb40>
 200bbd0:	a0023526 	beq	r20,zero,200c4a8 <___vfiprintf_internal_r+0x10d4>
 200bbd4:	ddc01a04 	addi	r23,sp,104
 200bbd8:	4039883a 	mov	fp,r8
 200bbdc:	9809883a 	mov	r4,r19
 200bbe0:	a00b883a 	mov	r5,r20
 200bbe4:	01800284 	movi	r6,10
 200bbe8:	000f883a 	mov	r7,zero
 200bbec:	200d9000 	call	200d900 <__umoddi3>
 200bbf0:	10800c04 	addi	r2,r2,48
 200bbf4:	bdffffc4 	addi	r23,r23,-1
 200bbf8:	9809883a 	mov	r4,r19
 200bbfc:	a00b883a 	mov	r5,r20
 200bc00:	b8800005 	stb	r2,0(r23)
 200bc04:	01800284 	movi	r6,10
 200bc08:	000f883a 	mov	r7,zero
 200bc0c:	200d3040 	call	200d304 <__udivdi3>
 200bc10:	1027883a 	mov	r19,r2
 200bc14:	10c4b03a 	or	r2,r2,r3
 200bc18:	1829883a 	mov	r20,r3
 200bc1c:	103fef1e 	bne	r2,zero,200bbdc <___vfiprintf_internal_r+0x808>
 200bc20:	d9001e17 	ldw	r4,120(sp)
 200bc24:	e011883a 	mov	r8,fp
 200bc28:	25e9c83a 	sub	r20,r4,r23
 200bc2c:	003eec06 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200bc30:	d8802307 	ldb	r2,140(sp)
 200bc34:	1002361e 	bne	r2,zero,200c510 <___vfiprintf_internal_r+0x113c>
 200bc38:	00c00804 	movi	r3,32
 200bc3c:	d8c02305 	stb	r3,140(sp)
 200bc40:	04c00044 	movi	r19,1
 200bc44:	b0c00007 	ldb	r3,0(r22)
 200bc48:	003e3f06 	br	200b548 <___vfiprintf_internal_r+0x174>
 200bc4c:	8c400054 	ori	r17,r17,1
 200bc50:	b0c00007 	ldb	r3,0(r22)
 200bc54:	003e3c06 	br	200b548 <___vfiprintf_internal_r+0x174>
 200bc58:	8c402014 	ori	r17,r17,128
 200bc5c:	b0c00007 	ldb	r3,0(r22)
 200bc60:	003e3906 	br	200b548 <___vfiprintf_internal_r+0x174>
 200bc64:	dc002715 	stw	r16,156(sp)
 200bc68:	d8002515 	stw	zero,148(sp)
 200bc6c:	1f3ff404 	addi	fp,r3,-48
 200bc70:	0009883a 	mov	r4,zero
 200bc74:	b021883a 	mov	r16,r22
 200bc78:	01400284 	movi	r5,10
 200bc7c:	20011180 	call	2001118 <__mulsi3>
 200bc80:	80c00007 	ldb	r3,0(r16)
 200bc84:	e089883a 	add	r4,fp,r2
 200bc88:	b5800044 	addi	r22,r22,1
 200bc8c:	1f3ff404 	addi	fp,r3,-48
 200bc90:	b021883a 	mov	r16,r22
 200bc94:	af3ff82e 	bgeu	r21,fp,200bc78 <___vfiprintf_internal_r+0x8a4>
 200bc98:	d9002515 	stw	r4,148(sp)
 200bc9c:	dc002717 	ldw	r16,156(sp)
 200bca0:	003e2a06 	br	200b54c <___vfiprintf_internal_r+0x178>
 200bca4:	9cc03fcc 	andi	r19,r19,255
 200bca8:	b811883a 	mov	r8,r23
 200bcac:	9802e91e 	bne	r19,zero,200c854 <___vfiprintf_internal_r+0x1480>
 200bcb0:	8c400414 	ori	r17,r17,16
 200bcb4:	8880080c 	andi	r2,r17,32
 200bcb8:	103fb81e 	bne	r2,zero,200bb9c <___vfiprintf_internal_r+0x7c8>
 200bcbc:	8880040c 	andi	r2,r17,16
 200bcc0:	10022e26 	beq	r2,zero,200c57c <___vfiprintf_internal_r+0x11a8>
 200bcc4:	d9402217 	ldw	r5,136(sp)
 200bcc8:	2cc00017 	ldw	r19,0(r5)
 200bccc:	29400104 	addi	r5,r5,4
 200bcd0:	d9402215 	stw	r5,136(sp)
 200bcd4:	9829d7fa 	srai	r20,r19,31
 200bcd8:	a005883a 	mov	r2,r20
 200bcdc:	003fb506 	br	200bbb4 <___vfiprintf_internal_r+0x7e0>
 200bce0:	9cc03fcc 	andi	r19,r19,255
 200bce4:	b811883a 	mov	r8,r23
 200bce8:	9802fa1e 	bne	r19,zero,200c8d4 <___vfiprintf_internal_r+0x1500>
 200bcec:	8c400414 	ori	r17,r17,16
 200bcf0:	8880080c 	andi	r2,r17,32
 200bcf4:	103f661e 	bne	r2,zero,200ba90 <___vfiprintf_internal_r+0x6bc>
 200bcf8:	8880040c 	andi	r2,r17,16
 200bcfc:	10020626 	beq	r2,zero,200c518 <___vfiprintf_internal_r+0x1144>
 200bd00:	d9402217 	ldw	r5,136(sp)
 200bd04:	d8001d85 	stb	zero,118(sp)
 200bd08:	0029883a 	mov	r20,zero
 200bd0c:	28800104 	addi	r2,r5,4
 200bd10:	2cc00017 	ldw	r19,0(r5)
 200bd14:	80020816 	blt	r16,zero,200c538 <___vfiprintf_internal_r+0x1164>
 200bd18:	00ffdfc4 	movi	r3,-129
 200bd1c:	d8802215 	stw	r2,136(sp)
 200bd20:	88e2703a 	and	r17,r17,r3
 200bd24:	983f651e 	bne	r19,zero,200babc <___vfiprintf_internal_r+0x6e8>
 200bd28:	002b883a 	mov	r21,zero
 200bd2c:	8002cf26 	beq	r16,zero,200c86c <___vfiprintf_internal_r+0x1498>
 200bd30:	0027883a 	mov	r19,zero
 200bd34:	0029883a 	mov	r20,zero
 200bd38:	003f6106 	br	200bac0 <___vfiprintf_internal_r+0x6ec>
 200bd3c:	9cc03fcc 	andi	r19,r19,255
 200bd40:	b811883a 	mov	r8,r23
 200bd44:	9802e01e 	bne	r19,zero,200c8c8 <___vfiprintf_internal_r+0x14f4>
 200bd48:	8c400414 	ori	r17,r17,16
 200bd4c:	8880080c 	andi	r2,r17,32
 200bd50:	1000641e 	bne	r2,zero,200bee4 <___vfiprintf_internal_r+0xb10>
 200bd54:	8880040c 	andi	r2,r17,16
 200bd58:	1001c81e 	bne	r2,zero,200c47c <___vfiprintf_internal_r+0x10a8>
 200bd5c:	8880100c 	andi	r2,r17,64
 200bd60:	d8001d85 	stb	zero,118(sp)
 200bd64:	1002281e 	bne	r2,zero,200c608 <___vfiprintf_internal_r+0x1234>
 200bd68:	d9002217 	ldw	r4,136(sp)
 200bd6c:	0029883a 	mov	r20,zero
 200bd70:	20800104 	addi	r2,r4,4
 200bd74:	24c00017 	ldw	r19,0(r4)
 200bd78:	8001c60e 	bge	r16,zero,200c494 <___vfiprintf_internal_r+0x10c0>
 200bd7c:	d8802215 	stw	r2,136(sp)
 200bd80:	002b883a 	mov	r21,zero
 200bd84:	9d04b03a 	or	r2,r19,r20
 200bd88:	103f911e 	bne	r2,zero,200bbd0 <___vfiprintf_internal_r+0x7fc>
 200bd8c:	00800044 	movi	r2,1
 200bd90:	10803fcc 	andi	r2,r2,255
 200bd94:	00c00044 	movi	r3,1
 200bd98:	10c05f26 	beq	r2,r3,200bf18 <___vfiprintf_internal_r+0xb44>
 200bd9c:	00c00084 	movi	r3,2
 200bda0:	10ffe31e 	bne	r2,r3,200bd30 <___vfiprintf_internal_r+0x95c>
 200bda4:	0027883a 	mov	r19,zero
 200bda8:	0029883a 	mov	r20,zero
 200bdac:	00015106 	br	200c2f4 <___vfiprintf_internal_r+0xf20>
 200bdb0:	9cc03fcc 	andi	r19,r19,255
 200bdb4:	b811883a 	mov	r8,r23
 200bdb8:	9802c01e 	bne	r19,zero,200c8bc <___vfiprintf_internal_r+0x14e8>
 200bdbc:	014080b4 	movhi	r5,514
 200bdc0:	29654a04 	addi	r5,r5,-27352
 200bdc4:	d9402615 	stw	r5,152(sp)
 200bdc8:	8880080c 	andi	r2,r17,32
 200bdcc:	103f541e 	bne	r2,zero,200bb20 <___vfiprintf_internal_r+0x74c>
 200bdd0:	8880040c 	andi	r2,r17,16
 200bdd4:	1001f226 	beq	r2,zero,200c5a0 <___vfiprintf_internal_r+0x11cc>
 200bdd8:	d9402217 	ldw	r5,136(sp)
 200bddc:	0029883a 	mov	r20,zero
 200bde0:	2cc00017 	ldw	r19,0(r5)
 200bde4:	29400104 	addi	r5,r5,4
 200bde8:	d9402215 	stw	r5,136(sp)
 200bdec:	003f5106 	br	200bb34 <___vfiprintf_internal_r+0x760>
 200bdf0:	d8c02217 	ldw	r3,136(sp)
 200bdf4:	b811883a 	mov	r8,r23
 200bdf8:	d8001d85 	stb	zero,118(sp)
 200bdfc:	1dc00017 	ldw	r23,0(r3)
 200be00:	1f000104 	addi	fp,r3,4
 200be04:	b8025926 	beq	r23,zero,200c76c <___vfiprintf_internal_r+0x1398>
 200be08:	80023316 	blt	r16,zero,200c6d8 <___vfiprintf_internal_r+0x1304>
 200be0c:	800d883a 	mov	r6,r16
 200be10:	000b883a 	mov	r5,zero
 200be14:	b809883a 	mov	r4,r23
 200be18:	da002a15 	stw	r8,168(sp)
 200be1c:	20095880 	call	2009588 <memchr>
 200be20:	da002a17 	ldw	r8,168(sp)
 200be24:	10026826 	beq	r2,zero,200c7c8 <___vfiprintf_internal_r+0x13f4>
 200be28:	15e9c83a 	sub	r20,r2,r23
 200be2c:	dd401d83 	ldbu	r21,118(sp)
 200be30:	df002215 	stw	fp,136(sp)
 200be34:	0021883a 	mov	r16,zero
 200be38:	003e6906 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200be3c:	9cc03fcc 	andi	r19,r19,255
 200be40:	b811883a 	mov	r8,r23
 200be44:	983fc126 	beq	r19,zero,200bd4c <___vfiprintf_internal_r+0x978>
 200be48:	d8c02303 	ldbu	r3,140(sp)
 200be4c:	d8c01d85 	stb	r3,118(sp)
 200be50:	003fbe06 	br	200bd4c <___vfiprintf_internal_r+0x978>
 200be54:	d9002217 	ldw	r4,136(sp)
 200be58:	d9402217 	ldw	r5,136(sp)
 200be5c:	21000017 	ldw	r4,0(r4)
 200be60:	28800104 	addi	r2,r5,4
 200be64:	d9002515 	stw	r4,148(sp)
 200be68:	203e3d16 	blt	r4,zero,200b760 <___vfiprintf_internal_r+0x38c>
 200be6c:	d8802215 	stw	r2,136(sp)
 200be70:	b0c00007 	ldb	r3,0(r22)
 200be74:	003db406 	br	200b548 <___vfiprintf_internal_r+0x174>
 200be78:	00c00ac4 	movi	r3,43
 200be7c:	d8c02305 	stb	r3,140(sp)
 200be80:	04c00044 	movi	r19,1
 200be84:	b0c00007 	ldb	r3,0(r22)
 200be88:	003daf06 	br	200b548 <___vfiprintf_internal_r+0x174>
 200be8c:	b0c00007 	ldb	r3,0(r22)
 200be90:	01000a84 	movi	r4,42
 200be94:	b4000044 	addi	r16,r22,1
 200be98:	19025e26 	beq	r3,r4,200c814 <___vfiprintf_internal_r+0x1440>
 200be9c:	1f3ff404 	addi	fp,r3,-48
 200bea0:	0009883a 	mov	r4,zero
 200bea4:	af025236 	bltu	r21,fp,200c7f0 <___vfiprintf_internal_r+0x141c>
 200bea8:	01400284 	movi	r5,10
 200beac:	20011180 	call	2001118 <__mulsi3>
 200beb0:	80c00007 	ldb	r3,0(r16)
 200beb4:	1709883a 	add	r4,r2,fp
 200beb8:	85800044 	addi	r22,r16,1
 200bebc:	1f3ff404 	addi	fp,r3,-48
 200bec0:	b021883a 	mov	r16,r22
 200bec4:	af3ff82e 	bgeu	r21,fp,200bea8 <___vfiprintf_internal_r+0xad4>
 200bec8:	2021883a 	mov	r16,r4
 200becc:	203d9f0e 	bge	r4,zero,200b54c <___vfiprintf_internal_r+0x178>
 200bed0:	043fffc4 	movi	r16,-1
 200bed4:	003d9d06 	br	200b54c <___vfiprintf_internal_r+0x178>
 200bed8:	8c401014 	ori	r17,r17,64
 200bedc:	b0c00007 	ldb	r3,0(r22)
 200bee0:	003d9906 	br	200b548 <___vfiprintf_internal_r+0x174>
 200bee4:	d9002217 	ldw	r4,136(sp)
 200bee8:	d8001d85 	stb	zero,118(sp)
 200beec:	20c00204 	addi	r3,r4,8
 200bef0:	24c00017 	ldw	r19,0(r4)
 200bef4:	25000117 	ldw	r20,4(r4)
 200bef8:	8001e716 	blt	r16,zero,200c698 <___vfiprintf_internal_r+0x12c4>
 200befc:	013fdfc4 	movi	r4,-129
 200bf00:	9d04b03a 	or	r2,r19,r20
 200bf04:	d8c02215 	stw	r3,136(sp)
 200bf08:	8922703a 	and	r17,r17,r4
 200bf0c:	002b883a 	mov	r21,zero
 200bf10:	103f2f1e 	bne	r2,zero,200bbd0 <___vfiprintf_internal_r+0x7fc>
 200bf14:	803e2f26 	beq	r16,zero,200b7d4 <___vfiprintf_internal_r+0x400>
 200bf18:	0027883a 	mov	r19,zero
 200bf1c:	9cc00c04 	addi	r19,r19,48
 200bf20:	dcc019c5 	stb	r19,103(sp)
 200bf24:	dd002817 	ldw	r20,160(sp)
 200bf28:	ddc019c4 	addi	r23,sp,103
 200bf2c:	003e2c06 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200bf30:	9cc03fcc 	andi	r19,r19,255
 200bf34:	b811883a 	mov	r8,r23
 200bf38:	9802571e 	bne	r19,zero,200c898 <___vfiprintf_internal_r+0x14c4>
 200bf3c:	18005726 	beq	r3,zero,200c09c <___vfiprintf_internal_r+0xcc8>
 200bf40:	04c00044 	movi	r19,1
 200bf44:	d8c01005 	stb	r3,64(sp)
 200bf48:	d8001d85 	stb	zero,118(sp)
 200bf4c:	9829883a 	mov	r20,r19
 200bf50:	ddc01004 	addi	r23,sp,64
 200bf54:	003f0a06 	br	200bb80 <___vfiprintf_internal_r+0x7ac>
 200bf58:	d9402017 	ldw	r5,128(sp)
 200bf5c:	d9002117 	ldw	r4,132(sp)
 200bf60:	d9801a04 	addi	r6,sp,104
 200bf64:	da802a15 	stw	r10,168(sp)
 200bf68:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200bf6c:	da802a17 	ldw	r10,168(sp)
 200bf70:	1000501e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200bf74:	d9801b17 	ldw	r6,108(sp)
 200bf78:	d8801c17 	ldw	r2,112(sp)
 200bf7c:	d811883a 	mov	r8,sp
 200bf80:	31000044 	addi	r4,r6,1
 200bf84:	003e3606 	br	200b860 <___vfiprintf_internal_r+0x48c>
 200bf88:	d9001b17 	ldw	r4,108(sp)
 200bf8c:	d8801c17 	ldw	r2,112(sp)
 200bf90:	21400044 	addi	r5,r4,1
 200bf94:	d9801d87 	ldb	r6,118(sp)
 200bf98:	303e5226 	beq	r6,zero,200b8e4 <___vfiprintf_internal_r+0x510>
 200bf9c:	01800044 	movi	r6,1
 200bfa0:	d9001d84 	addi	r4,sp,118
 200bfa4:	1185883a 	add	r2,r2,r6
 200bfa8:	41000015 	stw	r4,0(r8)
 200bfac:	41800115 	stw	r6,4(r8)
 200bfb0:	d8801c15 	stw	r2,112(sp)
 200bfb4:	d9401b15 	stw	r5,108(sp)
 200bfb8:	010001c4 	movi	r4,7
 200bfbc:	2140b00e 	bge	r4,r5,200c280 <___vfiprintf_internal_r+0xeac>
 200bfc0:	1000f61e 	bne	r2,zero,200c39c <___vfiprintf_internal_r+0xfc8>
 200bfc4:	3800b31e 	bne	r7,zero,200c294 <___vfiprintf_internal_r+0xec0>
 200bfc8:	0009883a 	mov	r4,zero
 200bfcc:	300b883a 	mov	r5,r6
 200bfd0:	d811883a 	mov	r8,sp
 200bfd4:	01802004 	movi	r6,128
 200bfd8:	19be5226 	beq	r3,r6,200b924 <___vfiprintf_internal_r+0x550>
 200bfdc:	8521c83a 	sub	r16,r16,r20
 200bfe0:	043e790e 	bge	zero,r16,200b9c8 <___vfiprintf_internal_r+0x5f4>
 200bfe4:	05400404 	movi	r21,16
 200bfe8:	ac01b00e 	bge	r21,r16,200c6ac <___vfiprintf_internal_r+0x12d8>
 200bfec:	014080b4 	movhi	r5,514
 200bff0:	2965af04 	addi	r5,r5,-26948
 200bff4:	d9402315 	stw	r5,140(sp)
 200bff8:	070001c4 	movi	fp,7
 200bffc:	00000506 	br	200c014 <___vfiprintf_internal_r+0xc40>
 200c000:	21400084 	addi	r5,r4,2
 200c004:	42000204 	addi	r8,r8,8
 200c008:	1809883a 	mov	r4,r3
 200c00c:	843ffc04 	addi	r16,r16,-16
 200c010:	ac000d0e 	bge	r21,r16,200c048 <___vfiprintf_internal_r+0xc74>
 200c014:	10800404 	addi	r2,r2,16
 200c018:	20c00044 	addi	r3,r4,1
 200c01c:	44800015 	stw	r18,0(r8)
 200c020:	45400115 	stw	r21,4(r8)
 200c024:	d8801c15 	stw	r2,112(sp)
 200c028:	d8c01b15 	stw	r3,108(sp)
 200c02c:	e0fff40e 	bge	fp,r3,200c000 <___vfiprintf_internal_r+0xc2c>
 200c030:	1000101e 	bne	r2,zero,200c074 <___vfiprintf_internal_r+0xca0>
 200c034:	843ffc04 	addi	r16,r16,-16
 200c038:	01400044 	movi	r5,1
 200c03c:	0009883a 	mov	r4,zero
 200c040:	d811883a 	mov	r8,sp
 200c044:	ac3ff316 	blt	r21,r16,200c014 <___vfiprintf_internal_r+0xc40>
 200c048:	d8c02317 	ldw	r3,140(sp)
 200c04c:	1405883a 	add	r2,r2,r16
 200c050:	44000115 	stw	r16,4(r8)
 200c054:	40c00015 	stw	r3,0(r8)
 200c058:	d8801c15 	stw	r2,112(sp)
 200c05c:	d9401b15 	stw	r5,108(sp)
 200c060:	00c001c4 	movi	r3,7
 200c064:	19401916 	blt	r3,r5,200c0cc <___vfiprintf_internal_r+0xcf8>
 200c068:	42000204 	addi	r8,r8,8
 200c06c:	29400044 	addi	r5,r5,1
 200c070:	003e5506 	br	200b9c8 <___vfiprintf_internal_r+0x5f4>
 200c074:	d9402017 	ldw	r5,128(sp)
 200c078:	d9002117 	ldw	r4,132(sp)
 200c07c:	d9801a04 	addi	r6,sp,104
 200c080:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c084:	10000b1e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c088:	d9001b17 	ldw	r4,108(sp)
 200c08c:	d8801c17 	ldw	r2,112(sp)
 200c090:	d811883a 	mov	r8,sp
 200c094:	21400044 	addi	r5,r4,1
 200c098:	003fdc06 	br	200c00c <___vfiprintf_internal_r+0xc38>
 200c09c:	d8801c17 	ldw	r2,112(sp)
 200c0a0:	10000426 	beq	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c0a4:	d9402017 	ldw	r5,128(sp)
 200c0a8:	d9002117 	ldw	r4,132(sp)
 200c0ac:	d9801a04 	addi	r6,sp,104
 200c0b0:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c0b4:	d9402017 	ldw	r5,128(sp)
 200c0b8:	2880030b 	ldhu	r2,12(r5)
 200c0bc:	1080100c 	andi	r2,r2,64
 200c0c0:	10014d1e 	bne	r2,zero,200c5f8 <___vfiprintf_internal_r+0x1224>
 200c0c4:	d8802417 	ldw	r2,144(sp)
 200c0c8:	003d9706 	br	200b728 <___vfiprintf_internal_r+0x354>
 200c0cc:	1000d21e 	bne	r2,zero,200c418 <___vfiprintf_internal_r+0x1044>
 200c0d0:	00c00044 	movi	r3,1
 200c0d4:	a005883a 	mov	r2,r20
 200c0d8:	ddc00015 	stw	r23,0(sp)
 200c0dc:	dd000115 	stw	r20,4(sp)
 200c0e0:	dd001c15 	stw	r20,112(sp)
 200c0e4:	d8c01b15 	stw	r3,108(sp)
 200c0e8:	d811883a 	mov	r8,sp
 200c0ec:	42000204 	addi	r8,r8,8
 200c0f0:	8c40010c 	andi	r17,r17,4
 200c0f4:	88004026 	beq	r17,zero,200c1f8 <___vfiprintf_internal_r+0xe24>
 200c0f8:	d9002517 	ldw	r4,148(sp)
 200c0fc:	24e3c83a 	sub	r17,r4,r19
 200c100:	04403d0e 	bge	zero,r17,200c1f8 <___vfiprintf_internal_r+0xe24>
 200c104:	04000404 	movi	r16,16
 200c108:	8441a90e 	bge	r16,r17,200c7b0 <___vfiprintf_internal_r+0x13dc>
 200c10c:	00c080b4 	movhi	r3,514
 200c110:	18e5b304 	addi	r3,r3,-26932
 200c114:	d9001b17 	ldw	r4,108(sp)
 200c118:	d8c02315 	stw	r3,140(sp)
 200c11c:	050001c4 	movi	r20,7
 200c120:	dd402117 	ldw	r21,132(sp)
 200c124:	ddc02017 	ldw	r23,128(sp)
 200c128:	00000506 	br	200c140 <___vfiprintf_internal_r+0xd6c>
 200c12c:	21400084 	addi	r5,r4,2
 200c130:	42000204 	addi	r8,r8,8
 200c134:	1809883a 	mov	r4,r3
 200c138:	8c7ffc04 	addi	r17,r17,-16
 200c13c:	84400f0e 	bge	r16,r17,200c17c <___vfiprintf_internal_r+0xda8>
 200c140:	014080b4 	movhi	r5,514
 200c144:	10800404 	addi	r2,r2,16
 200c148:	20c00044 	addi	r3,r4,1
 200c14c:	2965b304 	addi	r5,r5,-26932
 200c150:	41400015 	stw	r5,0(r8)
 200c154:	44000115 	stw	r16,4(r8)
 200c158:	d8801c15 	stw	r2,112(sp)
 200c15c:	d8c01b15 	stw	r3,108(sp)
 200c160:	a0fff20e 	bge	r20,r3,200c12c <___vfiprintf_internal_r+0xd58>
 200c164:	1000141e 	bne	r2,zero,200c1b8 <___vfiprintf_internal_r+0xde4>
 200c168:	8c7ffc04 	addi	r17,r17,-16
 200c16c:	01400044 	movi	r5,1
 200c170:	0009883a 	mov	r4,zero
 200c174:	d811883a 	mov	r8,sp
 200c178:	847ff116 	blt	r16,r17,200c140 <___vfiprintf_internal_r+0xd6c>
 200c17c:	d8c02317 	ldw	r3,140(sp)
 200c180:	1445883a 	add	r2,r2,r17
 200c184:	44400115 	stw	r17,4(r8)
 200c188:	40c00015 	stw	r3,0(r8)
 200c18c:	d8801c15 	stw	r2,112(sp)
 200c190:	d9401b15 	stw	r5,108(sp)
 200c194:	00c001c4 	movi	r3,7
 200c198:	1940170e 	bge	r3,r5,200c1f8 <___vfiprintf_internal_r+0xe24>
 200c19c:	1000101e 	bne	r2,zero,200c1e0 <___vfiprintf_internal_r+0xe0c>
 200c1a0:	d8802517 	ldw	r2,148(sp)
 200c1a4:	14c11616 	blt	r2,r19,200c600 <___vfiprintf_internal_r+0x122c>
 200c1a8:	d9002417 	ldw	r4,144(sp)
 200c1ac:	2089883a 	add	r4,r4,r2
 200c1b0:	d9002415 	stw	r4,144(sp)
 200c1b4:	003e1806 	br	200ba18 <___vfiprintf_internal_r+0x644>
 200c1b8:	d9801a04 	addi	r6,sp,104
 200c1bc:	b80b883a 	mov	r5,r23
 200c1c0:	a809883a 	mov	r4,r21
 200c1c4:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c1c8:	103fba1e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c1cc:	d9001b17 	ldw	r4,108(sp)
 200c1d0:	d8801c17 	ldw	r2,112(sp)
 200c1d4:	d811883a 	mov	r8,sp
 200c1d8:	21400044 	addi	r5,r4,1
 200c1dc:	003fd606 	br	200c138 <___vfiprintf_internal_r+0xd64>
 200c1e0:	d9402017 	ldw	r5,128(sp)
 200c1e4:	d9002117 	ldw	r4,132(sp)
 200c1e8:	d9801a04 	addi	r6,sp,104
 200c1ec:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c1f0:	103fb01e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c1f4:	d8801c17 	ldw	r2,112(sp)
 200c1f8:	d8c02517 	ldw	r3,148(sp)
 200c1fc:	1cc0010e 	bge	r3,r19,200c204 <___vfiprintf_internal_r+0xe30>
 200c200:	9807883a 	mov	r3,r19
 200c204:	d9002417 	ldw	r4,144(sp)
 200c208:	20c9883a 	add	r4,r4,r3
 200c20c:	d9002415 	stw	r4,144(sp)
 200c210:	103e0126 	beq	r2,zero,200ba18 <___vfiprintf_internal_r+0x644>
 200c214:	d9402017 	ldw	r5,128(sp)
 200c218:	d9002117 	ldw	r4,132(sp)
 200c21c:	d9801a04 	addi	r6,sp,104
 200c220:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c224:	103dfc26 	beq	r2,zero,200ba18 <___vfiprintf_internal_r+0x644>
 200c228:	003fa206 	br	200c0b4 <___vfiprintf_internal_r+0xce0>
 200c22c:	d9402017 	ldw	r5,128(sp)
 200c230:	d9002117 	ldw	r4,132(sp)
 200c234:	d9801a04 	addi	r6,sp,104
 200c238:	d9c02b15 	stw	r7,172(sp)
 200c23c:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c240:	d9c02b17 	ldw	r7,172(sp)
 200c244:	103f9b1e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c248:	d9001b17 	ldw	r4,108(sp)
 200c24c:	d8801c17 	ldw	r2,112(sp)
 200c250:	d811883a 	mov	r8,sp
 200c254:	21800044 	addi	r6,r4,1
 200c258:	003dbf06 	br	200b958 <___vfiprintf_internal_r+0x584>
 200c25c:	1000d81e 	bne	r2,zero,200c5c0 <___vfiprintf_internal_r+0x11ec>
 200c260:	d9001d87 	ldb	r4,118(sp)
 200c264:	20000a26 	beq	r4,zero,200c290 <___vfiprintf_internal_r+0xebc>
 200c268:	00800044 	movi	r2,1
 200c26c:	d9001d84 	addi	r4,sp,118
 200c270:	100b883a 	mov	r5,r2
 200c274:	d9000015 	stw	r4,0(sp)
 200c278:	d8800115 	stw	r2,4(sp)
 200c27c:	d811883a 	mov	r8,sp
 200c280:	2809883a 	mov	r4,r5
 200c284:	42000204 	addi	r8,r8,8
 200c288:	29400044 	addi	r5,r5,1
 200c28c:	003d9506 	br	200b8e4 <___vfiprintf_internal_r+0x510>
 200c290:	3800fd26 	beq	r7,zero,200c688 <___vfiprintf_internal_r+0x12b4>
 200c294:	00800084 	movi	r2,2
 200c298:	d9001d04 	addi	r4,sp,116
 200c29c:	d9000015 	stw	r4,0(sp)
 200c2a0:	d8800115 	stw	r2,4(sp)
 200c2a4:	01400044 	movi	r5,1
 200c2a8:	d811883a 	mov	r8,sp
 200c2ac:	2809883a 	mov	r4,r5
 200c2b0:	42000204 	addi	r8,r8,8
 200c2b4:	29400044 	addi	r5,r5,1
 200c2b8:	003f4606 	br	200bfd4 <___vfiprintf_internal_r+0xc00>
 200c2bc:	d8802517 	ldw	r2,148(sp)
 200c2c0:	14c0010e 	bge	r2,r19,200c2c8 <___vfiprintf_internal_r+0xef4>
 200c2c4:	9805883a 	mov	r2,r19
 200c2c8:	d9402417 	ldw	r5,144(sp)
 200c2cc:	288b883a 	add	r5,r5,r2
 200c2d0:	d9402415 	stw	r5,144(sp)
 200c2d4:	003dd006 	br	200ba18 <___vfiprintf_internal_r+0x644>
 200c2d8:	d8001d85 	stb	zero,118(sp)
 200c2dc:	80005d16 	blt	r16,zero,200c454 <___vfiprintf_internal_r+0x1080>
 200c2e0:	00ffdfc4 	movi	r3,-129
 200c2e4:	9d04b03a 	or	r2,r19,r20
 200c2e8:	88e2703a 	and	r17,r17,r3
 200c2ec:	103d3726 	beq	r2,zero,200b7cc <___vfiprintf_internal_r+0x3f8>
 200c2f0:	002b883a 	mov	r21,zero
 200c2f4:	d9002617 	ldw	r4,152(sp)
 200c2f8:	ddc01a04 	addi	r23,sp,104
 200c2fc:	988003cc 	andi	r2,r19,15
 200c300:	a006973a 	slli	r3,r20,28
 200c304:	2085883a 	add	r2,r4,r2
 200c308:	9826d13a 	srli	r19,r19,4
 200c30c:	10800003 	ldbu	r2,0(r2)
 200c310:	a028d13a 	srli	r20,r20,4
 200c314:	bdffffc4 	addi	r23,r23,-1
 200c318:	1ce6b03a 	or	r19,r3,r19
 200c31c:	b8800005 	stb	r2,0(r23)
 200c320:	9d04b03a 	or	r2,r19,r20
 200c324:	103ff51e 	bne	r2,zero,200c2fc <___vfiprintf_internal_r+0xf28>
 200c328:	d8801e17 	ldw	r2,120(sp)
 200c32c:	15e9c83a 	sub	r20,r2,r23
 200c330:	003d2b06 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200c334:	d9402017 	ldw	r5,128(sp)
 200c338:	d9002117 	ldw	r4,132(sp)
 200c33c:	d9801a04 	addi	r6,sp,104
 200c340:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c344:	103f5b1e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c348:	d8801c17 	ldw	r2,112(sp)
 200c34c:	d811883a 	mov	r8,sp
 200c350:	003f6706 	br	200c0f0 <___vfiprintf_internal_r+0xd1c>
 200c354:	d9402017 	ldw	r5,128(sp)
 200c358:	d9002117 	ldw	r4,132(sp)
 200c35c:	d9801a04 	addi	r6,sp,104
 200c360:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c364:	103f531e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c368:	d811883a 	mov	r8,sp
 200c36c:	003cd906 	br	200b6d4 <___vfiprintf_internal_r+0x300>
 200c370:	10803fcc 	andi	r2,r2,255
 200c374:	1080201c 	xori	r2,r2,128
 200c378:	10bfe004 	addi	r2,r2,-128
 200c37c:	00c00c04 	movi	r3,48
 200c380:	10ffe926 	beq	r2,r3,200c328 <___vfiprintf_internal_r+0xf54>
 200c384:	b8ffffc5 	stb	r3,-1(r23)
 200c388:	d8c01e17 	ldw	r3,120(sp)
 200c38c:	b8bfffc4 	addi	r2,r23,-1
 200c390:	102f883a 	mov	r23,r2
 200c394:	18a9c83a 	sub	r20,r3,r2
 200c398:	003d1106 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200c39c:	d9402017 	ldw	r5,128(sp)
 200c3a0:	d9002117 	ldw	r4,132(sp)
 200c3a4:	d9801a04 	addi	r6,sp,104
 200c3a8:	d8c02a15 	stw	r3,168(sp)
 200c3ac:	d9c02b15 	stw	r7,172(sp)
 200c3b0:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c3b4:	d8c02a17 	ldw	r3,168(sp)
 200c3b8:	d9c02b17 	ldw	r7,172(sp)
 200c3bc:	103f3d1e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c3c0:	d9001b17 	ldw	r4,108(sp)
 200c3c4:	d8801c17 	ldw	r2,112(sp)
 200c3c8:	d811883a 	mov	r8,sp
 200c3cc:	21400044 	addi	r5,r4,1
 200c3d0:	003d4406 	br	200b8e4 <___vfiprintf_internal_r+0x510>
 200c3d4:	d9402017 	ldw	r5,128(sp)
 200c3d8:	d9002117 	ldw	r4,132(sp)
 200c3dc:	d9801a04 	addi	r6,sp,104
 200c3e0:	d8c02a15 	stw	r3,168(sp)
 200c3e4:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c3e8:	d8c02a17 	ldw	r3,168(sp)
 200c3ec:	103f311e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c3f0:	d9001b17 	ldw	r4,108(sp)
 200c3f4:	d8801c17 	ldw	r2,112(sp)
 200c3f8:	d811883a 	mov	r8,sp
 200c3fc:	21400044 	addi	r5,r4,1
 200c400:	003ef406 	br	200bfd4 <___vfiprintf_internal_r+0xc00>
 200c404:	1000bd1e 	bne	r2,zero,200c6fc <___vfiprintf_internal_r+0x1328>
 200c408:	01400044 	movi	r5,1
 200c40c:	0009883a 	mov	r4,zero
 200c410:	d811883a 	mov	r8,sp
 200c414:	003ef106 	br	200bfdc <___vfiprintf_internal_r+0xc08>
 200c418:	d9402017 	ldw	r5,128(sp)
 200c41c:	d9002117 	ldw	r4,132(sp)
 200c420:	d9801a04 	addi	r6,sp,104
 200c424:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c428:	103f221e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c42c:	d9401b17 	ldw	r5,108(sp)
 200c430:	d8801c17 	ldw	r2,112(sp)
 200c434:	d811883a 	mov	r8,sp
 200c438:	29400044 	addi	r5,r5,1
 200c43c:	003d6206 	br	200b9c8 <___vfiprintf_internal_r+0x5f4>
 200c440:	014080b4 	movhi	r5,514
 200c444:	29654f04 	addi	r5,r5,-27332
 200c448:	d9402615 	stw	r5,152(sp)
 200c44c:	d8c02215 	stw	r3,136(sp)
 200c450:	1023883a 	mov	r17,r2
 200c454:	9d04b03a 	or	r2,r19,r20
 200c458:	103fa51e 	bne	r2,zero,200c2f0 <___vfiprintf_internal_r+0xf1c>
 200c45c:	002b883a 	mov	r21,zero
 200c460:	00800084 	movi	r2,2
 200c464:	003e4a06 	br	200bd90 <___vfiprintf_internal_r+0x9bc>
 200c468:	014080b4 	movhi	r5,514
 200c46c:	29654f04 	addi	r5,r5,-27332
 200c470:	002b883a 	mov	r21,zero
 200c474:	d9402615 	stw	r5,152(sp)
 200c478:	003f9e06 	br	200c2f4 <___vfiprintf_internal_r+0xf20>
 200c47c:	d9402217 	ldw	r5,136(sp)
 200c480:	d8001d85 	stb	zero,118(sp)
 200c484:	0029883a 	mov	r20,zero
 200c488:	28800104 	addi	r2,r5,4
 200c48c:	2cc00017 	ldw	r19,0(r5)
 200c490:	803e3a16 	blt	r16,zero,200bd7c <___vfiprintf_internal_r+0x9a8>
 200c494:	00ffdfc4 	movi	r3,-129
 200c498:	d8802215 	stw	r2,136(sp)
 200c49c:	88e2703a 	and	r17,r17,r3
 200c4a0:	002b883a 	mov	r21,zero
 200c4a4:	983e9b26 	beq	r19,zero,200bf14 <___vfiprintf_internal_r+0xb40>
 200c4a8:	00800244 	movi	r2,9
 200c4ac:	14fdc936 	bltu	r2,r19,200bbd4 <___vfiprintf_internal_r+0x800>
 200c4b0:	003e9a06 	br	200bf1c <___vfiprintf_internal_r+0xb48>
 200c4b4:	00800c04 	movi	r2,48
 200c4b8:	d8c01d45 	stb	r3,117(sp)
 200c4bc:	d8801d05 	stb	r2,116(sp)
 200c4c0:	d8001d85 	stb	zero,118(sp)
 200c4c4:	88c00094 	ori	r3,r17,2
 200c4c8:	80009c16 	blt	r16,zero,200c73c <___vfiprintf_internal_r+0x1368>
 200c4cc:	00bfdfc4 	movi	r2,-129
 200c4d0:	88a2703a 	and	r17,r17,r2
 200c4d4:	8c400094 	ori	r17,r17,2
 200c4d8:	002b883a 	mov	r21,zero
 200c4dc:	003f8506 	br	200c2f4 <___vfiprintf_internal_r+0xf20>
 200c4e0:	b029883a 	mov	r20,r22
 200c4e4:	003c0b06 	br	200b514 <___vfiprintf_internal_r+0x140>
 200c4e8:	04e7c83a 	sub	r19,zero,r19
 200c4ec:	05400b44 	movi	r21,45
 200c4f0:	9804c03a 	cmpne	r2,r19,zero
 200c4f4:	0529c83a 	sub	r20,zero,r20
 200c4f8:	dd401d85 	stb	r21,118(sp)
 200c4fc:	a0a9c83a 	sub	r20,r20,r2
 200c500:	80009716 	blt	r16,zero,200c760 <___vfiprintf_internal_r+0x138c>
 200c504:	00bfdfc4 	movi	r2,-129
 200c508:	88a2703a 	and	r17,r17,r2
 200c50c:	003db006 	br	200bbd0 <___vfiprintf_internal_r+0x7fc>
 200c510:	b0c00007 	ldb	r3,0(r22)
 200c514:	003c0c06 	br	200b548 <___vfiprintf_internal_r+0x174>
 200c518:	8880100c 	andi	r2,r17,64
 200c51c:	d8001d85 	stb	zero,118(sp)
 200c520:	1000461e 	bne	r2,zero,200c63c <___vfiprintf_internal_r+0x1268>
 200c524:	d9002217 	ldw	r4,136(sp)
 200c528:	0029883a 	mov	r20,zero
 200c52c:	20800104 	addi	r2,r4,4
 200c530:	24c00017 	ldw	r19,0(r4)
 200c534:	803df80e 	bge	r16,zero,200bd18 <___vfiprintf_internal_r+0x944>
 200c538:	9d06b03a 	or	r3,r19,r20
 200c53c:	d8802215 	stw	r2,136(sp)
 200c540:	183d5e1e 	bne	r3,zero,200babc <___vfiprintf_internal_r+0x6e8>
 200c544:	002b883a 	mov	r21,zero
 200c548:	0005883a 	mov	r2,zero
 200c54c:	003e1006 	br	200bd90 <___vfiprintf_internal_r+0x9bc>
 200c550:	8880040c 	andi	r2,r17,16
 200c554:	1000321e 	bne	r2,zero,200c620 <___vfiprintf_internal_r+0x124c>
 200c558:	8c40100c 	andi	r17,r17,64
 200c55c:	88008d26 	beq	r17,zero,200c794 <___vfiprintf_internal_r+0x13c0>
 200c560:	d9402217 	ldw	r5,136(sp)
 200c564:	d8c02417 	ldw	r3,144(sp)
 200c568:	28800017 	ldw	r2,0(r5)
 200c56c:	29400104 	addi	r5,r5,4
 200c570:	d9402215 	stw	r5,136(sp)
 200c574:	10c0000d 	sth	r3,0(r2)
 200c578:	003bca06 	br	200b4a4 <___vfiprintf_internal_r+0xd0>
 200c57c:	8880100c 	andi	r2,r17,64
 200c580:	10003a26 	beq	r2,zero,200c66c <___vfiprintf_internal_r+0x1298>
 200c584:	d8802217 	ldw	r2,136(sp)
 200c588:	14c0000f 	ldh	r19,0(r2)
 200c58c:	10800104 	addi	r2,r2,4
 200c590:	d8802215 	stw	r2,136(sp)
 200c594:	9829d7fa 	srai	r20,r19,31
 200c598:	a005883a 	mov	r2,r20
 200c59c:	003d8506 	br	200bbb4 <___vfiprintf_internal_r+0x7e0>
 200c5a0:	8880100c 	andi	r2,r17,64
 200c5a4:	10002b26 	beq	r2,zero,200c654 <___vfiprintf_internal_r+0x1280>
 200c5a8:	d8802217 	ldw	r2,136(sp)
 200c5ac:	0029883a 	mov	r20,zero
 200c5b0:	14c0000b 	ldhu	r19,0(r2)
 200c5b4:	10800104 	addi	r2,r2,4
 200c5b8:	d8802215 	stw	r2,136(sp)
 200c5bc:	003d5d06 	br	200bb34 <___vfiprintf_internal_r+0x760>
 200c5c0:	d9402017 	ldw	r5,128(sp)
 200c5c4:	d9002117 	ldw	r4,132(sp)
 200c5c8:	d9801a04 	addi	r6,sp,104
 200c5cc:	d8c02a15 	stw	r3,168(sp)
 200c5d0:	d9c02b15 	stw	r7,172(sp)
 200c5d4:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c5d8:	d8c02a17 	ldw	r3,168(sp)
 200c5dc:	d9c02b17 	ldw	r7,172(sp)
 200c5e0:	103eb41e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c5e4:	d9001b17 	ldw	r4,108(sp)
 200c5e8:	d8801c17 	ldw	r2,112(sp)
 200c5ec:	d811883a 	mov	r8,sp
 200c5f0:	21400044 	addi	r5,r4,1
 200c5f4:	003e6706 	br	200bf94 <___vfiprintf_internal_r+0xbc0>
 200c5f8:	00bfffc4 	movi	r2,-1
 200c5fc:	003c4a06 	br	200b728 <___vfiprintf_internal_r+0x354>
 200c600:	9805883a 	mov	r2,r19
 200c604:	003ee806 	br	200c1a8 <___vfiprintf_internal_r+0xdd4>
 200c608:	d8c02217 	ldw	r3,136(sp)
 200c60c:	0029883a 	mov	r20,zero
 200c610:	18800104 	addi	r2,r3,4
 200c614:	1cc0000b 	ldhu	r19,0(r3)
 200c618:	803f9e0e 	bge	r16,zero,200c494 <___vfiprintf_internal_r+0x10c0>
 200c61c:	003dd706 	br	200bd7c <___vfiprintf_internal_r+0x9a8>
 200c620:	d8c02217 	ldw	r3,136(sp)
 200c624:	d9002417 	ldw	r4,144(sp)
 200c628:	18800017 	ldw	r2,0(r3)
 200c62c:	18c00104 	addi	r3,r3,4
 200c630:	d8c02215 	stw	r3,136(sp)
 200c634:	11000015 	stw	r4,0(r2)
 200c638:	003b9a06 	br	200b4a4 <___vfiprintf_internal_r+0xd0>
 200c63c:	d8c02217 	ldw	r3,136(sp)
 200c640:	0029883a 	mov	r20,zero
 200c644:	18800104 	addi	r2,r3,4
 200c648:	1cc0000b 	ldhu	r19,0(r3)
 200c64c:	803db20e 	bge	r16,zero,200bd18 <___vfiprintf_internal_r+0x944>
 200c650:	003fb906 	br	200c538 <___vfiprintf_internal_r+0x1164>
 200c654:	d9002217 	ldw	r4,136(sp)
 200c658:	0029883a 	mov	r20,zero
 200c65c:	24c00017 	ldw	r19,0(r4)
 200c660:	21000104 	addi	r4,r4,4
 200c664:	d9002215 	stw	r4,136(sp)
 200c668:	003d3206 	br	200bb34 <___vfiprintf_internal_r+0x760>
 200c66c:	d8c02217 	ldw	r3,136(sp)
 200c670:	1cc00017 	ldw	r19,0(r3)
 200c674:	18c00104 	addi	r3,r3,4
 200c678:	d8c02215 	stw	r3,136(sp)
 200c67c:	9829d7fa 	srai	r20,r19,31
 200c680:	a005883a 	mov	r2,r20
 200c684:	003d4b06 	br	200bbb4 <___vfiprintf_internal_r+0x7e0>
 200c688:	0009883a 	mov	r4,zero
 200c68c:	01400044 	movi	r5,1
 200c690:	d811883a 	mov	r8,sp
 200c694:	003e4f06 	br	200bfd4 <___vfiprintf_internal_r+0xc00>
 200c698:	d8c02215 	stw	r3,136(sp)
 200c69c:	002b883a 	mov	r21,zero
 200c6a0:	003db806 	br	200bd84 <___vfiprintf_internal_r+0x9b0>
 200c6a4:	d811883a 	mov	r8,sp
 200c6a8:	003e9606 	br	200c104 <___vfiprintf_internal_r+0xd30>
 200c6ac:	010080b4 	movhi	r4,514
 200c6b0:	2125af04 	addi	r4,r4,-26948
 200c6b4:	d9002315 	stw	r4,140(sp)
 200c6b8:	003e6306 	br	200c048 <___vfiprintf_internal_r+0xc74>
 200c6bc:	b0c00043 	ldbu	r3,1(r22)
 200c6c0:	8c400814 	ori	r17,r17,32
 200c6c4:	b5800044 	addi	r22,r22,1
 200c6c8:	18c03fcc 	andi	r3,r3,255
 200c6cc:	18c0201c 	xori	r3,r3,128
 200c6d0:	18ffe004 	addi	r3,r3,-128
 200c6d4:	003b9c06 	br	200b548 <___vfiprintf_internal_r+0x174>
 200c6d8:	b809883a 	mov	r4,r23
 200c6dc:	da002a15 	stw	r8,168(sp)
 200c6e0:	2003bb80 	call	2003bb8 <strlen>
 200c6e4:	1029883a 	mov	r20,r2
 200c6e8:	dd401d83 	ldbu	r21,118(sp)
 200c6ec:	df002215 	stw	fp,136(sp)
 200c6f0:	0021883a 	mov	r16,zero
 200c6f4:	da002a17 	ldw	r8,168(sp)
 200c6f8:	003c3906 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200c6fc:	d9402017 	ldw	r5,128(sp)
 200c700:	d9002117 	ldw	r4,132(sp)
 200c704:	d9801a04 	addi	r6,sp,104
 200c708:	200b2c00 	call	200b2c0 <__sprint_r.part.0>
 200c70c:	103e691e 	bne	r2,zero,200c0b4 <___vfiprintf_internal_r+0xce0>
 200c710:	d9001b17 	ldw	r4,108(sp)
 200c714:	d8801c17 	ldw	r2,112(sp)
 200c718:	d811883a 	mov	r8,sp
 200c71c:	21400044 	addi	r5,r4,1
 200c720:	003e2e06 	br	200bfdc <___vfiprintf_internal_r+0xc08>
 200c724:	010080b4 	movhi	r4,514
 200c728:	2125b304 	addi	r4,r4,-26932
 200c72c:	d9002315 	stw	r4,140(sp)
 200c730:	d9001b17 	ldw	r4,108(sp)
 200c734:	21000044 	addi	r4,r4,1
 200c738:	003c5e06 	br	200b8b4 <___vfiprintf_internal_r+0x4e0>
 200c73c:	002b883a 	mov	r21,zero
 200c740:	00800084 	movi	r2,2
 200c744:	10803fcc 	andi	r2,r2,255
 200c748:	01000044 	movi	r4,1
 200c74c:	11002b26 	beq	r2,r4,200c7fc <___vfiprintf_internal_r+0x1428>
 200c750:	01000084 	movi	r4,2
 200c754:	11002b1e 	bne	r2,r4,200c804 <___vfiprintf_internal_r+0x1430>
 200c758:	1823883a 	mov	r17,r3
 200c75c:	003ee506 	br	200c2f4 <___vfiprintf_internal_r+0xf20>
 200c760:	8807883a 	mov	r3,r17
 200c764:	00800044 	movi	r2,1
 200c768:	003ff606 	br	200c744 <___vfiprintf_internal_r+0x1370>
 200c76c:	00800184 	movi	r2,6
 200c770:	1400012e 	bgeu	r2,r16,200c778 <___vfiprintf_internal_r+0x13a4>
 200c774:	1021883a 	mov	r16,r2
 200c778:	8029883a 	mov	r20,r16
 200c77c:	8027883a 	mov	r19,r16
 200c780:	80002216 	blt	r16,zero,200c80c <___vfiprintf_internal_r+0x1438>
 200c784:	05c080b4 	movhi	r23,514
 200c788:	df002215 	stw	fp,136(sp)
 200c78c:	bde55404 	addi	r23,r23,-27312
 200c790:	003cfb06 	br	200bb80 <___vfiprintf_internal_r+0x7ac>
 200c794:	d9002217 	ldw	r4,136(sp)
 200c798:	d9402417 	ldw	r5,144(sp)
 200c79c:	20800017 	ldw	r2,0(r4)
 200c7a0:	21000104 	addi	r4,r4,4
 200c7a4:	d9002215 	stw	r4,136(sp)
 200c7a8:	11400015 	stw	r5,0(r2)
 200c7ac:	003b3d06 	br	200b4a4 <___vfiprintf_internal_r+0xd0>
 200c7b0:	014080b4 	movhi	r5,514
 200c7b4:	2965b304 	addi	r5,r5,-26932
 200c7b8:	d9402315 	stw	r5,140(sp)
 200c7bc:	d9401b17 	ldw	r5,108(sp)
 200c7c0:	29400044 	addi	r5,r5,1
 200c7c4:	003e6d06 	br	200c17c <___vfiprintf_internal_r+0xda8>
 200c7c8:	8029883a 	mov	r20,r16
 200c7cc:	dd401d83 	ldbu	r21,118(sp)
 200c7d0:	df002215 	stw	fp,136(sp)
 200c7d4:	0021883a 	mov	r16,zero
 200c7d8:	003c0106 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200c7dc:	00c080b4 	movhi	r3,514
 200c7e0:	18e5af04 	addi	r3,r3,-26948
 200c7e4:	d8c02315 	stw	r3,140(sp)
 200c7e8:	280d883a 	mov	r6,r5
 200c7ec:	003c6906 	br	200b994 <___vfiprintf_internal_r+0x5c0>
 200c7f0:	802d883a 	mov	r22,r16
 200c7f4:	0021883a 	mov	r16,zero
 200c7f8:	003b5406 	br	200b54c <___vfiprintf_internal_r+0x178>
 200c7fc:	1823883a 	mov	r17,r3
 200c800:	003cf306 	br	200bbd0 <___vfiprintf_internal_r+0x7fc>
 200c804:	1823883a 	mov	r17,r3
 200c808:	003cad06 	br	200bac0 <___vfiprintf_internal_r+0x6ec>
 200c80c:	0027883a 	mov	r19,zero
 200c810:	003fdc06 	br	200c784 <___vfiprintf_internal_r+0x13b0>
 200c814:	d9402217 	ldw	r5,136(sp)
 200c818:	8005883a 	mov	r2,r16
 200c81c:	b0c00043 	ldbu	r3,1(r22)
 200c820:	2c000017 	ldw	r16,0(r5)
 200c824:	29000104 	addi	r4,r5,4
 200c828:	d9002215 	stw	r4,136(sp)
 200c82c:	102d883a 	mov	r22,r2
 200c830:	803fa50e 	bge	r16,zero,200c6c8 <___vfiprintf_internal_r+0x12f4>
 200c834:	18c03fcc 	andi	r3,r3,255
 200c838:	18c0201c 	xori	r3,r3,128
 200c83c:	043fffc4 	movi	r16,-1
 200c840:	18ffe004 	addi	r3,r3,-128
 200c844:	003b4006 	br	200b548 <___vfiprintf_internal_r+0x174>
 200c848:	d9402303 	ldbu	r5,140(sp)
 200c84c:	d9401d85 	stb	r5,118(sp)
 200c850:	003cae06 	br	200bb0c <___vfiprintf_internal_r+0x738>
 200c854:	d8c02303 	ldbu	r3,140(sp)
 200c858:	d8c01d85 	stb	r3,118(sp)
 200c85c:	003d1406 	br	200bcb0 <___vfiprintf_internal_r+0x8dc>
 200c860:	d8c02303 	ldbu	r3,140(sp)
 200c864:	d8c01d85 	stb	r3,118(sp)
 200c868:	003cca06 	br	200bb94 <___vfiprintf_internal_r+0x7c0>
 200c86c:	8880004c 	andi	r2,r17,1
 200c870:	002b883a 	mov	r21,zero
 200c874:	10000526 	beq	r2,zero,200c88c <___vfiprintf_internal_r+0x14b8>
 200c878:	00800c04 	movi	r2,48
 200c87c:	d88019c5 	stb	r2,103(sp)
 200c880:	dd002817 	ldw	r20,160(sp)
 200c884:	ddc019c4 	addi	r23,sp,103
 200c888:	003bd506 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200c88c:	0029883a 	mov	r20,zero
 200c890:	ddc01a04 	addi	r23,sp,104
 200c894:	003bd206 	br	200b7e0 <___vfiprintf_internal_r+0x40c>
 200c898:	d9002303 	ldbu	r4,140(sp)
 200c89c:	d9001d85 	stb	r4,118(sp)
 200c8a0:	003da606 	br	200bf3c <___vfiprintf_internal_r+0xb68>
 200c8a4:	d8c02303 	ldbu	r3,140(sp)
 200c8a8:	d8c01d85 	stb	r3,118(sp)
 200c8ac:	003c7606 	br	200ba88 <___vfiprintf_internal_r+0x6b4>
 200c8b0:	d8c02303 	ldbu	r3,140(sp)
 200c8b4:	d8c01d85 	stb	r3,118(sp)
 200c8b8:	003c6506 	br	200ba50 <___vfiprintf_internal_r+0x67c>
 200c8bc:	d9002303 	ldbu	r4,140(sp)
 200c8c0:	d9001d85 	stb	r4,118(sp)
 200c8c4:	003d3d06 	br	200bdbc <___vfiprintf_internal_r+0x9e8>
 200c8c8:	d8c02303 	ldbu	r3,140(sp)
 200c8cc:	d8c01d85 	stb	r3,118(sp)
 200c8d0:	003d1d06 	br	200bd48 <___vfiprintf_internal_r+0x974>
 200c8d4:	d8c02303 	ldbu	r3,140(sp)
 200c8d8:	d8c01d85 	stb	r3,118(sp)
 200c8dc:	003d0306 	br	200bcec <___vfiprintf_internal_r+0x918>

0200c8e0 <__vfiprintf_internal>:
 200c8e0:	008080b4 	movhi	r2,514
 200c8e4:	10acbb04 	addi	r2,r2,-19732
 200c8e8:	300f883a 	mov	r7,r6
 200c8ec:	280d883a 	mov	r6,r5
 200c8f0:	200b883a 	mov	r5,r4
 200c8f4:	11000017 	ldw	r4,0(r2)
 200c8f8:	200b3d41 	jmpi	200b3d4 <___vfiprintf_internal_r>

0200c8fc <__sbprintf>:
 200c8fc:	2880030b 	ldhu	r2,12(r5)
 200c900:	2ac01917 	ldw	r11,100(r5)
 200c904:	2a80038b 	ldhu	r10,14(r5)
 200c908:	2a400717 	ldw	r9,28(r5)
 200c90c:	2a000917 	ldw	r8,36(r5)
 200c910:	defee204 	addi	sp,sp,-1144
 200c914:	00c10004 	movi	r3,1024
 200c918:	dc011a15 	stw	r16,1128(sp)
 200c91c:	10bfff4c 	andi	r2,r2,65533
 200c920:	2821883a 	mov	r16,r5
 200c924:	d8cb883a 	add	r5,sp,r3
 200c928:	dc811c15 	stw	r18,1136(sp)
 200c92c:	dc411b15 	stw	r17,1132(sp)
 200c930:	dfc11d15 	stw	ra,1140(sp)
 200c934:	2025883a 	mov	r18,r4
 200c938:	d881030d 	sth	r2,1036(sp)
 200c93c:	dac11915 	stw	r11,1124(sp)
 200c940:	da81038d 	sth	r10,1038(sp)
 200c944:	da410715 	stw	r9,1052(sp)
 200c948:	da010915 	stw	r8,1060(sp)
 200c94c:	dec10015 	stw	sp,1024(sp)
 200c950:	dec10415 	stw	sp,1040(sp)
 200c954:	d8c10215 	stw	r3,1032(sp)
 200c958:	d8c10515 	stw	r3,1044(sp)
 200c95c:	d8010615 	stw	zero,1048(sp)
 200c960:	200b3d40 	call	200b3d4 <___vfiprintf_internal_r>
 200c964:	1023883a 	mov	r17,r2
 200c968:	10000416 	blt	r2,zero,200c97c <__sbprintf+0x80>
 200c96c:	d9410004 	addi	r5,sp,1024
 200c970:	9009883a 	mov	r4,r18
 200c974:	2007c240 	call	2007c24 <_fflush_r>
 200c978:	10000d1e 	bne	r2,zero,200c9b0 <__sbprintf+0xb4>
 200c97c:	d881030b 	ldhu	r2,1036(sp)
 200c980:	1080100c 	andi	r2,r2,64
 200c984:	10000326 	beq	r2,zero,200c994 <__sbprintf+0x98>
 200c988:	8080030b 	ldhu	r2,12(r16)
 200c98c:	10801014 	ori	r2,r2,64
 200c990:	8080030d 	sth	r2,12(r16)
 200c994:	8805883a 	mov	r2,r17
 200c998:	dfc11d17 	ldw	ra,1140(sp)
 200c99c:	dc811c17 	ldw	r18,1136(sp)
 200c9a0:	dc411b17 	ldw	r17,1132(sp)
 200c9a4:	dc011a17 	ldw	r16,1128(sp)
 200c9a8:	dec11e04 	addi	sp,sp,1144
 200c9ac:	f800283a 	ret
 200c9b0:	047fffc4 	movi	r17,-1
 200c9b4:	003ff106 	br	200c97c <__sbprintf+0x80>

0200c9b8 <_write_r>:
 200c9b8:	defffd04 	addi	sp,sp,-12
 200c9bc:	2805883a 	mov	r2,r5
 200c9c0:	dc000015 	stw	r16,0(sp)
 200c9c4:	040080b4 	movhi	r16,514
 200c9c8:	dc400115 	stw	r17,4(sp)
 200c9cc:	300b883a 	mov	r5,r6
 200c9d0:	8433d004 	addi	r16,r16,-12480
 200c9d4:	2023883a 	mov	r17,r4
 200c9d8:	380d883a 	mov	r6,r7
 200c9dc:	1009883a 	mov	r4,r2
 200c9e0:	dfc00215 	stw	ra,8(sp)
 200c9e4:	80000015 	stw	zero,0(r16)
 200c9e8:	200e8800 	call	200e880 <write>
 200c9ec:	00ffffc4 	movi	r3,-1
 200c9f0:	10c00526 	beq	r2,r3,200ca08 <_write_r+0x50>
 200c9f4:	dfc00217 	ldw	ra,8(sp)
 200c9f8:	dc400117 	ldw	r17,4(sp)
 200c9fc:	dc000017 	ldw	r16,0(sp)
 200ca00:	dec00304 	addi	sp,sp,12
 200ca04:	f800283a 	ret
 200ca08:	80c00017 	ldw	r3,0(r16)
 200ca0c:	183ff926 	beq	r3,zero,200c9f4 <_write_r+0x3c>
 200ca10:	88c00015 	stw	r3,0(r17)
 200ca14:	003ff706 	br	200c9f4 <_write_r+0x3c>

0200ca18 <_close_r>:
 200ca18:	defffd04 	addi	sp,sp,-12
 200ca1c:	dc000015 	stw	r16,0(sp)
 200ca20:	040080b4 	movhi	r16,514
 200ca24:	dc400115 	stw	r17,4(sp)
 200ca28:	8433d004 	addi	r16,r16,-12480
 200ca2c:	2023883a 	mov	r17,r4
 200ca30:	2809883a 	mov	r4,r5
 200ca34:	dfc00215 	stw	ra,8(sp)
 200ca38:	80000015 	stw	zero,0(r16)
 200ca3c:	200e0300 	call	200e030 <close>
 200ca40:	00ffffc4 	movi	r3,-1
 200ca44:	10c00526 	beq	r2,r3,200ca5c <_close_r+0x44>
 200ca48:	dfc00217 	ldw	ra,8(sp)
 200ca4c:	dc400117 	ldw	r17,4(sp)
 200ca50:	dc000017 	ldw	r16,0(sp)
 200ca54:	dec00304 	addi	sp,sp,12
 200ca58:	f800283a 	ret
 200ca5c:	80c00017 	ldw	r3,0(r16)
 200ca60:	183ff926 	beq	r3,zero,200ca48 <_close_r+0x30>
 200ca64:	88c00015 	stw	r3,0(r17)
 200ca68:	003ff706 	br	200ca48 <_close_r+0x30>

0200ca6c <_calloc_r>:
 200ca6c:	defffe04 	addi	sp,sp,-8
 200ca70:	2805883a 	mov	r2,r5
 200ca74:	dc000015 	stw	r16,0(sp)
 200ca78:	300b883a 	mov	r5,r6
 200ca7c:	2021883a 	mov	r16,r4
 200ca80:	1009883a 	mov	r4,r2
 200ca84:	dfc00115 	stw	ra,4(sp)
 200ca88:	20011180 	call	2001118 <__mulsi3>
 200ca8c:	100b883a 	mov	r5,r2
 200ca90:	8009883a 	mov	r4,r16
 200ca94:	2008d7c0 	call	2008d7c <_malloc_r>
 200ca98:	10002926 	beq	r2,zero,200cb40 <_calloc_r+0xd4>
 200ca9c:	11bfff17 	ldw	r6,-4(r2)
 200caa0:	1021883a 	mov	r16,r2
 200caa4:	00bfff04 	movi	r2,-4
 200caa8:	308c703a 	and	r6,r6,r2
 200caac:	00c00904 	movi	r3,36
 200cab0:	308d883a 	add	r6,r6,r2
 200cab4:	19801636 	bltu	r3,r6,200cb10 <_calloc_r+0xa4>
 200cab8:	008004c4 	movi	r2,19
 200cabc:	11800b2e 	bgeu	r2,r6,200caec <_calloc_r+0x80>
 200cac0:	80000015 	stw	zero,0(r16)
 200cac4:	80000115 	stw	zero,4(r16)
 200cac8:	008006c4 	movi	r2,27
 200cacc:	11801a2e 	bgeu	r2,r6,200cb38 <_calloc_r+0xcc>
 200cad0:	80000215 	stw	zero,8(r16)
 200cad4:	80000315 	stw	zero,12(r16)
 200cad8:	30c0151e 	bne	r6,r3,200cb30 <_calloc_r+0xc4>
 200cadc:	80000415 	stw	zero,16(r16)
 200cae0:	80800604 	addi	r2,r16,24
 200cae4:	80000515 	stw	zero,20(r16)
 200cae8:	00000106 	br	200caf0 <_calloc_r+0x84>
 200caec:	8005883a 	mov	r2,r16
 200caf0:	10000015 	stw	zero,0(r2)
 200caf4:	10000115 	stw	zero,4(r2)
 200caf8:	10000215 	stw	zero,8(r2)
 200cafc:	8005883a 	mov	r2,r16
 200cb00:	dfc00117 	ldw	ra,4(sp)
 200cb04:	dc000017 	ldw	r16,0(sp)
 200cb08:	dec00204 	addi	sp,sp,8
 200cb0c:	f800283a 	ret
 200cb10:	000b883a 	mov	r5,zero
 200cb14:	8009883a 	mov	r4,r16
 200cb18:	20099100 	call	2009910 <memset>
 200cb1c:	8005883a 	mov	r2,r16
 200cb20:	dfc00117 	ldw	ra,4(sp)
 200cb24:	dc000017 	ldw	r16,0(sp)
 200cb28:	dec00204 	addi	sp,sp,8
 200cb2c:	f800283a 	ret
 200cb30:	80800404 	addi	r2,r16,16
 200cb34:	003fee06 	br	200caf0 <_calloc_r+0x84>
 200cb38:	80800204 	addi	r2,r16,8
 200cb3c:	003fec06 	br	200caf0 <_calloc_r+0x84>
 200cb40:	0005883a 	mov	r2,zero
 200cb44:	003fee06 	br	200cb00 <_calloc_r+0x94>

0200cb48 <_fclose_r>:
 200cb48:	28003926 	beq	r5,zero,200cc30 <_fclose_r+0xe8>
 200cb4c:	defffc04 	addi	sp,sp,-16
 200cb50:	dc400115 	stw	r17,4(sp)
 200cb54:	dc000015 	stw	r16,0(sp)
 200cb58:	dfc00315 	stw	ra,12(sp)
 200cb5c:	dc800215 	stw	r18,8(sp)
 200cb60:	2023883a 	mov	r17,r4
 200cb64:	2821883a 	mov	r16,r5
 200cb68:	20000226 	beq	r4,zero,200cb74 <_fclose_r+0x2c>
 200cb6c:	20800e17 	ldw	r2,56(r4)
 200cb70:	10002726 	beq	r2,zero,200cc10 <_fclose_r+0xc8>
 200cb74:	8080030f 	ldh	r2,12(r16)
 200cb78:	1000071e 	bne	r2,zero,200cb98 <_fclose_r+0x50>
 200cb7c:	0005883a 	mov	r2,zero
 200cb80:	dfc00317 	ldw	ra,12(sp)
 200cb84:	dc800217 	ldw	r18,8(sp)
 200cb88:	dc400117 	ldw	r17,4(sp)
 200cb8c:	dc000017 	ldw	r16,0(sp)
 200cb90:	dec00404 	addi	sp,sp,16
 200cb94:	f800283a 	ret
 200cb98:	800b883a 	mov	r5,r16
 200cb9c:	8809883a 	mov	r4,r17
 200cba0:	2007a080 	call	2007a08 <__sflush_r>
 200cba4:	1025883a 	mov	r18,r2
 200cba8:	80800b17 	ldw	r2,44(r16)
 200cbac:	10000426 	beq	r2,zero,200cbc0 <_fclose_r+0x78>
 200cbb0:	81400717 	ldw	r5,28(r16)
 200cbb4:	8809883a 	mov	r4,r17
 200cbb8:	103ee83a 	callr	r2
 200cbbc:	10001616 	blt	r2,zero,200cc18 <_fclose_r+0xd0>
 200cbc0:	8080030b 	ldhu	r2,12(r16)
 200cbc4:	1080200c 	andi	r2,r2,128
 200cbc8:	1000151e 	bne	r2,zero,200cc20 <_fclose_r+0xd8>
 200cbcc:	81400c17 	ldw	r5,48(r16)
 200cbd0:	28000526 	beq	r5,zero,200cbe8 <_fclose_r+0xa0>
 200cbd4:	80801004 	addi	r2,r16,64
 200cbd8:	28800226 	beq	r5,r2,200cbe4 <_fclose_r+0x9c>
 200cbdc:	8809883a 	mov	r4,r17
 200cbe0:	20081840 	call	2008184 <_free_r>
 200cbe4:	80000c15 	stw	zero,48(r16)
 200cbe8:	81401117 	ldw	r5,68(r16)
 200cbec:	28000326 	beq	r5,zero,200cbfc <_fclose_r+0xb4>
 200cbf0:	8809883a 	mov	r4,r17
 200cbf4:	20081840 	call	2008184 <_free_r>
 200cbf8:	80001115 	stw	zero,68(r16)
 200cbfc:	20080200 	call	2008020 <__sfp_lock_acquire>
 200cc00:	8000030d 	sth	zero,12(r16)
 200cc04:	20080240 	call	2008024 <__sfp_lock_release>
 200cc08:	9005883a 	mov	r2,r18
 200cc0c:	003fdc06 	br	200cb80 <_fclose_r+0x38>
 200cc10:	20080100 	call	2008010 <__sinit>
 200cc14:	003fd706 	br	200cb74 <_fclose_r+0x2c>
 200cc18:	04bfffc4 	movi	r18,-1
 200cc1c:	003fe806 	br	200cbc0 <_fclose_r+0x78>
 200cc20:	81400417 	ldw	r5,16(r16)
 200cc24:	8809883a 	mov	r4,r17
 200cc28:	20081840 	call	2008184 <_free_r>
 200cc2c:	003fe706 	br	200cbcc <_fclose_r+0x84>
 200cc30:	0005883a 	mov	r2,zero
 200cc34:	f800283a 	ret

0200cc38 <fclose>:
 200cc38:	008080b4 	movhi	r2,514
 200cc3c:	10acbb04 	addi	r2,r2,-19732
 200cc40:	200b883a 	mov	r5,r4
 200cc44:	11000017 	ldw	r4,0(r2)
 200cc48:	200cb481 	jmpi	200cb48 <_fclose_r>

0200cc4c <__fputwc>:
 200cc4c:	defff804 	addi	sp,sp,-32
 200cc50:	dcc00415 	stw	r19,16(sp)
 200cc54:	dc800315 	stw	r18,12(sp)
 200cc58:	dc000115 	stw	r16,4(sp)
 200cc5c:	dfc00715 	stw	ra,28(sp)
 200cc60:	dd400615 	stw	r21,24(sp)
 200cc64:	dd000515 	stw	r20,20(sp)
 200cc68:	dc400215 	stw	r17,8(sp)
 200cc6c:	2027883a 	mov	r19,r4
 200cc70:	2825883a 	mov	r18,r5
 200cc74:	3021883a 	mov	r16,r6
 200cc78:	2008b6c0 	call	2008b6c <__locale_mb_cur_max>
 200cc7c:	00c00044 	movi	r3,1
 200cc80:	10c03e26 	beq	r2,r3,200cd7c <__fputwc+0x130>
 200cc84:	81c01704 	addi	r7,r16,92
 200cc88:	900d883a 	mov	r6,r18
 200cc8c:	d80b883a 	mov	r5,sp
 200cc90:	9809883a 	mov	r4,r19
 200cc94:	200d11c0 	call	200d11c <_wcrtomb_r>
 200cc98:	1029883a 	mov	r20,r2
 200cc9c:	00bfffc4 	movi	r2,-1
 200cca0:	a0802026 	beq	r20,r2,200cd24 <__fputwc+0xd8>
 200cca4:	d9400003 	ldbu	r5,0(sp)
 200cca8:	a0001c26 	beq	r20,zero,200cd1c <__fputwc+0xd0>
 200ccac:	0023883a 	mov	r17,zero
 200ccb0:	05400284 	movi	r21,10
 200ccb4:	00000906 	br	200ccdc <__fputwc+0x90>
 200ccb8:	80800017 	ldw	r2,0(r16)
 200ccbc:	11400005 	stb	r5,0(r2)
 200ccc0:	80c00017 	ldw	r3,0(r16)
 200ccc4:	18c00044 	addi	r3,r3,1
 200ccc8:	80c00015 	stw	r3,0(r16)
 200cccc:	8c400044 	addi	r17,r17,1
 200ccd0:	dc45883a 	add	r2,sp,r17
 200ccd4:	8d00112e 	bgeu	r17,r20,200cd1c <__fputwc+0xd0>
 200ccd8:	11400003 	ldbu	r5,0(r2)
 200ccdc:	80c00217 	ldw	r3,8(r16)
 200cce0:	18ffffc4 	addi	r3,r3,-1
 200cce4:	80c00215 	stw	r3,8(r16)
 200cce8:	183ff30e 	bge	r3,zero,200ccb8 <__fputwc+0x6c>
 200ccec:	80800617 	ldw	r2,24(r16)
 200ccf0:	18801916 	blt	r3,r2,200cd58 <__fputwc+0x10c>
 200ccf4:	80800017 	ldw	r2,0(r16)
 200ccf8:	11400005 	stb	r5,0(r2)
 200ccfc:	80800017 	ldw	r2,0(r16)
 200cd00:	10c00003 	ldbu	r3,0(r2)
 200cd04:	10800044 	addi	r2,r2,1
 200cd08:	1d402326 	beq	r3,r21,200cd98 <__fputwc+0x14c>
 200cd0c:	80800015 	stw	r2,0(r16)
 200cd10:	8c400044 	addi	r17,r17,1
 200cd14:	dc45883a 	add	r2,sp,r17
 200cd18:	8d3fef36 	bltu	r17,r20,200ccd8 <__fputwc+0x8c>
 200cd1c:	9005883a 	mov	r2,r18
 200cd20:	00000406 	br	200cd34 <__fputwc+0xe8>
 200cd24:	80c0030b 	ldhu	r3,12(r16)
 200cd28:	a005883a 	mov	r2,r20
 200cd2c:	18c01014 	ori	r3,r3,64
 200cd30:	80c0030d 	sth	r3,12(r16)
 200cd34:	dfc00717 	ldw	ra,28(sp)
 200cd38:	dd400617 	ldw	r21,24(sp)
 200cd3c:	dd000517 	ldw	r20,20(sp)
 200cd40:	dcc00417 	ldw	r19,16(sp)
 200cd44:	dc800317 	ldw	r18,12(sp)
 200cd48:	dc400217 	ldw	r17,8(sp)
 200cd4c:	dc000117 	ldw	r16,4(sp)
 200cd50:	dec00804 	addi	sp,sp,32
 200cd54:	f800283a 	ret
 200cd58:	800d883a 	mov	r6,r16
 200cd5c:	29403fcc 	andi	r5,r5,255
 200cd60:	9809883a 	mov	r4,r19
 200cd64:	200cfc40 	call	200cfc4 <__swbuf_r>
 200cd68:	10bfffe0 	cmpeqi	r2,r2,-1
 200cd6c:	10803fcc 	andi	r2,r2,255
 200cd70:	103fd626 	beq	r2,zero,200cccc <__fputwc+0x80>
 200cd74:	00bfffc4 	movi	r2,-1
 200cd78:	003fee06 	br	200cd34 <__fputwc+0xe8>
 200cd7c:	90ffffc4 	addi	r3,r18,-1
 200cd80:	01003f84 	movi	r4,254
 200cd84:	20ffbf36 	bltu	r4,r3,200cc84 <__fputwc+0x38>
 200cd88:	900b883a 	mov	r5,r18
 200cd8c:	dc800005 	stb	r18,0(sp)
 200cd90:	1029883a 	mov	r20,r2
 200cd94:	003fc506 	br	200ccac <__fputwc+0x60>
 200cd98:	800d883a 	mov	r6,r16
 200cd9c:	a80b883a 	mov	r5,r21
 200cda0:	9809883a 	mov	r4,r19
 200cda4:	200cfc40 	call	200cfc4 <__swbuf_r>
 200cda8:	10bfffe0 	cmpeqi	r2,r2,-1
 200cdac:	003fef06 	br	200cd6c <__fputwc+0x120>

0200cdb0 <_fputwc_r>:
 200cdb0:	3080030b 	ldhu	r2,12(r6)
 200cdb4:	10c8000c 	andi	r3,r2,8192
 200cdb8:	1800051e 	bne	r3,zero,200cdd0 <_fputwc_r+0x20>
 200cdbc:	30c01917 	ldw	r3,100(r6)
 200cdc0:	10880014 	ori	r2,r2,8192
 200cdc4:	3080030d 	sth	r2,12(r6)
 200cdc8:	18880014 	ori	r2,r3,8192
 200cdcc:	30801915 	stw	r2,100(r6)
 200cdd0:	200cc4c1 	jmpi	200cc4c <__fputwc>

0200cdd4 <fputwc>:
 200cdd4:	008080b4 	movhi	r2,514
 200cdd8:	defffc04 	addi	sp,sp,-16
 200cddc:	10acbb04 	addi	r2,r2,-19732
 200cde0:	dc000115 	stw	r16,4(sp)
 200cde4:	14000017 	ldw	r16,0(r2)
 200cde8:	dc400215 	stw	r17,8(sp)
 200cdec:	dfc00315 	stw	ra,12(sp)
 200cdf0:	2023883a 	mov	r17,r4
 200cdf4:	80000226 	beq	r16,zero,200ce00 <fputwc+0x2c>
 200cdf8:	80800e17 	ldw	r2,56(r16)
 200cdfc:	10001026 	beq	r2,zero,200ce40 <fputwc+0x6c>
 200ce00:	2880030b 	ldhu	r2,12(r5)
 200ce04:	10c8000c 	andi	r3,r2,8192
 200ce08:	1800051e 	bne	r3,zero,200ce20 <fputwc+0x4c>
 200ce0c:	28c01917 	ldw	r3,100(r5)
 200ce10:	10880014 	ori	r2,r2,8192
 200ce14:	2880030d 	sth	r2,12(r5)
 200ce18:	18880014 	ori	r2,r3,8192
 200ce1c:	28801915 	stw	r2,100(r5)
 200ce20:	280d883a 	mov	r6,r5
 200ce24:	8009883a 	mov	r4,r16
 200ce28:	880b883a 	mov	r5,r17
 200ce2c:	dfc00317 	ldw	ra,12(sp)
 200ce30:	dc400217 	ldw	r17,8(sp)
 200ce34:	dc000117 	ldw	r16,4(sp)
 200ce38:	dec00404 	addi	sp,sp,16
 200ce3c:	200cc4c1 	jmpi	200cc4c <__fputwc>
 200ce40:	8009883a 	mov	r4,r16
 200ce44:	d9400015 	stw	r5,0(sp)
 200ce48:	20080100 	call	2008010 <__sinit>
 200ce4c:	d9400017 	ldw	r5,0(sp)
 200ce50:	003feb06 	br	200ce00 <fputwc+0x2c>

0200ce54 <_fstat_r>:
 200ce54:	defffd04 	addi	sp,sp,-12
 200ce58:	2805883a 	mov	r2,r5
 200ce5c:	dc000015 	stw	r16,0(sp)
 200ce60:	040080b4 	movhi	r16,514
 200ce64:	dc400115 	stw	r17,4(sp)
 200ce68:	8433d004 	addi	r16,r16,-12480
 200ce6c:	2023883a 	mov	r17,r4
 200ce70:	300b883a 	mov	r5,r6
 200ce74:	1009883a 	mov	r4,r2
 200ce78:	dfc00215 	stw	ra,8(sp)
 200ce7c:	80000015 	stw	zero,0(r16)
 200ce80:	200e1700 	call	200e170 <fstat>
 200ce84:	00ffffc4 	movi	r3,-1
 200ce88:	10c00526 	beq	r2,r3,200cea0 <_fstat_r+0x4c>
 200ce8c:	dfc00217 	ldw	ra,8(sp)
 200ce90:	dc400117 	ldw	r17,4(sp)
 200ce94:	dc000017 	ldw	r16,0(sp)
 200ce98:	dec00304 	addi	sp,sp,12
 200ce9c:	f800283a 	ret
 200cea0:	80c00017 	ldw	r3,0(r16)
 200cea4:	183ff926 	beq	r3,zero,200ce8c <_fstat_r+0x38>
 200cea8:	88c00015 	stw	r3,0(r17)
 200ceac:	003ff706 	br	200ce8c <_fstat_r+0x38>

0200ceb0 <_isatty_r>:
 200ceb0:	defffd04 	addi	sp,sp,-12
 200ceb4:	dc000015 	stw	r16,0(sp)
 200ceb8:	040080b4 	movhi	r16,514
 200cebc:	dc400115 	stw	r17,4(sp)
 200cec0:	8433d004 	addi	r16,r16,-12480
 200cec4:	2023883a 	mov	r17,r4
 200cec8:	2809883a 	mov	r4,r5
 200cecc:	dfc00215 	stw	ra,8(sp)
 200ced0:	80000015 	stw	zero,0(r16)
 200ced4:	200e2640 	call	200e264 <isatty>
 200ced8:	00ffffc4 	movi	r3,-1
 200cedc:	10c00526 	beq	r2,r3,200cef4 <_isatty_r+0x44>
 200cee0:	dfc00217 	ldw	ra,8(sp)
 200cee4:	dc400117 	ldw	r17,4(sp)
 200cee8:	dc000017 	ldw	r16,0(sp)
 200ceec:	dec00304 	addi	sp,sp,12
 200cef0:	f800283a 	ret
 200cef4:	80c00017 	ldw	r3,0(r16)
 200cef8:	183ff926 	beq	r3,zero,200cee0 <_isatty_r+0x30>
 200cefc:	88c00015 	stw	r3,0(r17)
 200cf00:	003ff706 	br	200cee0 <_isatty_r+0x30>

0200cf04 <_lseek_r>:
 200cf04:	defffd04 	addi	sp,sp,-12
 200cf08:	2805883a 	mov	r2,r5
 200cf0c:	dc000015 	stw	r16,0(sp)
 200cf10:	040080b4 	movhi	r16,514
 200cf14:	dc400115 	stw	r17,4(sp)
 200cf18:	300b883a 	mov	r5,r6
 200cf1c:	8433d004 	addi	r16,r16,-12480
 200cf20:	2023883a 	mov	r17,r4
 200cf24:	380d883a 	mov	r6,r7
 200cf28:	1009883a 	mov	r4,r2
 200cf2c:	dfc00215 	stw	ra,8(sp)
 200cf30:	80000015 	stw	zero,0(r16)
 200cf34:	200e4380 	call	200e438 <lseek>
 200cf38:	00ffffc4 	movi	r3,-1
 200cf3c:	10c00526 	beq	r2,r3,200cf54 <_lseek_r+0x50>
 200cf40:	dfc00217 	ldw	ra,8(sp)
 200cf44:	dc400117 	ldw	r17,4(sp)
 200cf48:	dc000017 	ldw	r16,0(sp)
 200cf4c:	dec00304 	addi	sp,sp,12
 200cf50:	f800283a 	ret
 200cf54:	80c00017 	ldw	r3,0(r16)
 200cf58:	183ff926 	beq	r3,zero,200cf40 <_lseek_r+0x3c>
 200cf5c:	88c00015 	stw	r3,0(r17)
 200cf60:	003ff706 	br	200cf40 <_lseek_r+0x3c>

0200cf64 <_read_r>:
 200cf64:	defffd04 	addi	sp,sp,-12
 200cf68:	2805883a 	mov	r2,r5
 200cf6c:	dc000015 	stw	r16,0(sp)
 200cf70:	040080b4 	movhi	r16,514
 200cf74:	dc400115 	stw	r17,4(sp)
 200cf78:	300b883a 	mov	r5,r6
 200cf7c:	8433d004 	addi	r16,r16,-12480
 200cf80:	2023883a 	mov	r17,r4
 200cf84:	380d883a 	mov	r6,r7
 200cf88:	1009883a 	mov	r4,r2
 200cf8c:	dfc00215 	stw	ra,8(sp)
 200cf90:	80000015 	stw	zero,0(r16)
 200cf94:	200e60c0 	call	200e60c <read>
 200cf98:	00ffffc4 	movi	r3,-1
 200cf9c:	10c00526 	beq	r2,r3,200cfb4 <_read_r+0x50>
 200cfa0:	dfc00217 	ldw	ra,8(sp)
 200cfa4:	dc400117 	ldw	r17,4(sp)
 200cfa8:	dc000017 	ldw	r16,0(sp)
 200cfac:	dec00304 	addi	sp,sp,12
 200cfb0:	f800283a 	ret
 200cfb4:	80c00017 	ldw	r3,0(r16)
 200cfb8:	183ff926 	beq	r3,zero,200cfa0 <_read_r+0x3c>
 200cfbc:	88c00015 	stw	r3,0(r17)
 200cfc0:	003ff706 	br	200cfa0 <_read_r+0x3c>

0200cfc4 <__swbuf_r>:
 200cfc4:	defffb04 	addi	sp,sp,-20
 200cfc8:	dcc00315 	stw	r19,12(sp)
 200cfcc:	dc800215 	stw	r18,8(sp)
 200cfd0:	dc000015 	stw	r16,0(sp)
 200cfd4:	dfc00415 	stw	ra,16(sp)
 200cfd8:	dc400115 	stw	r17,4(sp)
 200cfdc:	2025883a 	mov	r18,r4
 200cfe0:	2827883a 	mov	r19,r5
 200cfe4:	3021883a 	mov	r16,r6
 200cfe8:	20000226 	beq	r4,zero,200cff4 <__swbuf_r+0x30>
 200cfec:	20800e17 	ldw	r2,56(r4)
 200cff0:	10004226 	beq	r2,zero,200d0fc <__swbuf_r+0x138>
 200cff4:	80800617 	ldw	r2,24(r16)
 200cff8:	8100030b 	ldhu	r4,12(r16)
 200cffc:	80800215 	stw	r2,8(r16)
 200d000:	2080020c 	andi	r2,r4,8
 200d004:	10003626 	beq	r2,zero,200d0e0 <__swbuf_r+0x11c>
 200d008:	80c00417 	ldw	r3,16(r16)
 200d00c:	18003426 	beq	r3,zero,200d0e0 <__swbuf_r+0x11c>
 200d010:	2088000c 	andi	r2,r4,8192
 200d014:	9c403fcc 	andi	r17,r19,255
 200d018:	10001a26 	beq	r2,zero,200d084 <__swbuf_r+0xc0>
 200d01c:	80800017 	ldw	r2,0(r16)
 200d020:	81000517 	ldw	r4,20(r16)
 200d024:	10c7c83a 	sub	r3,r2,r3
 200d028:	1900200e 	bge	r3,r4,200d0ac <__swbuf_r+0xe8>
 200d02c:	18c00044 	addi	r3,r3,1
 200d030:	81000217 	ldw	r4,8(r16)
 200d034:	11400044 	addi	r5,r2,1
 200d038:	81400015 	stw	r5,0(r16)
 200d03c:	213fffc4 	addi	r4,r4,-1
 200d040:	81000215 	stw	r4,8(r16)
 200d044:	14c00005 	stb	r19,0(r2)
 200d048:	80800517 	ldw	r2,20(r16)
 200d04c:	10c01e26 	beq	r2,r3,200d0c8 <__swbuf_r+0x104>
 200d050:	8080030b 	ldhu	r2,12(r16)
 200d054:	1080004c 	andi	r2,r2,1
 200d058:	10000226 	beq	r2,zero,200d064 <__swbuf_r+0xa0>
 200d05c:	00800284 	movi	r2,10
 200d060:	88801926 	beq	r17,r2,200d0c8 <__swbuf_r+0x104>
 200d064:	8805883a 	mov	r2,r17
 200d068:	dfc00417 	ldw	ra,16(sp)
 200d06c:	dcc00317 	ldw	r19,12(sp)
 200d070:	dc800217 	ldw	r18,8(sp)
 200d074:	dc400117 	ldw	r17,4(sp)
 200d078:	dc000017 	ldw	r16,0(sp)
 200d07c:	dec00504 	addi	sp,sp,20
 200d080:	f800283a 	ret
 200d084:	81401917 	ldw	r5,100(r16)
 200d088:	00b7ffc4 	movi	r2,-8193
 200d08c:	21080014 	ori	r4,r4,8192
 200d090:	2884703a 	and	r2,r5,r2
 200d094:	80801915 	stw	r2,100(r16)
 200d098:	80800017 	ldw	r2,0(r16)
 200d09c:	8100030d 	sth	r4,12(r16)
 200d0a0:	81000517 	ldw	r4,20(r16)
 200d0a4:	10c7c83a 	sub	r3,r2,r3
 200d0a8:	193fe016 	blt	r3,r4,200d02c <__swbuf_r+0x68>
 200d0ac:	800b883a 	mov	r5,r16
 200d0b0:	9009883a 	mov	r4,r18
 200d0b4:	2007c240 	call	2007c24 <_fflush_r>
 200d0b8:	1000071e 	bne	r2,zero,200d0d8 <__swbuf_r+0x114>
 200d0bc:	80800017 	ldw	r2,0(r16)
 200d0c0:	00c00044 	movi	r3,1
 200d0c4:	003fda06 	br	200d030 <__swbuf_r+0x6c>
 200d0c8:	800b883a 	mov	r5,r16
 200d0cc:	9009883a 	mov	r4,r18
 200d0d0:	2007c240 	call	2007c24 <_fflush_r>
 200d0d4:	103fe326 	beq	r2,zero,200d064 <__swbuf_r+0xa0>
 200d0d8:	00bfffc4 	movi	r2,-1
 200d0dc:	003fe206 	br	200d068 <__swbuf_r+0xa4>
 200d0e0:	800b883a 	mov	r5,r16
 200d0e4:	9009883a 	mov	r4,r18
 200d0e8:	20060040 	call	2006004 <__swsetup_r>
 200d0ec:	103ffa1e 	bne	r2,zero,200d0d8 <__swbuf_r+0x114>
 200d0f0:	8100030b 	ldhu	r4,12(r16)
 200d0f4:	80c00417 	ldw	r3,16(r16)
 200d0f8:	003fc506 	br	200d010 <__swbuf_r+0x4c>
 200d0fc:	20080100 	call	2008010 <__sinit>
 200d100:	003fbc06 	br	200cff4 <__swbuf_r+0x30>

0200d104 <__swbuf>:
 200d104:	008080b4 	movhi	r2,514
 200d108:	10acbb04 	addi	r2,r2,-19732
 200d10c:	280d883a 	mov	r6,r5
 200d110:	200b883a 	mov	r5,r4
 200d114:	11000017 	ldw	r4,0(r2)
 200d118:	200cfc41 	jmpi	200cfc4 <__swbuf_r>

0200d11c <_wcrtomb_r>:
 200d11c:	defff604 	addi	sp,sp,-40
 200d120:	008080b4 	movhi	r2,514
 200d124:	dc800815 	stw	r18,32(sp)
 200d128:	dc400715 	stw	r17,28(sp)
 200d12c:	dc000615 	stw	r16,24(sp)
 200d130:	10acbf04 	addi	r2,r2,-19716
 200d134:	dfc00915 	stw	ra,36(sp)
 200d138:	2021883a 	mov	r16,r4
 200d13c:	3823883a 	mov	r17,r7
 200d140:	14800017 	ldw	r18,0(r2)
 200d144:	28001426 	beq	r5,zero,200d198 <_wcrtomb_r+0x7c>
 200d148:	d9400415 	stw	r5,16(sp)
 200d14c:	d9800515 	stw	r6,20(sp)
 200d150:	2008b600 	call	2008b60 <__locale_charset>
 200d154:	d9800517 	ldw	r6,20(sp)
 200d158:	d9400417 	ldw	r5,16(sp)
 200d15c:	100f883a 	mov	r7,r2
 200d160:	dc400015 	stw	r17,0(sp)
 200d164:	8009883a 	mov	r4,r16
 200d168:	903ee83a 	callr	r18
 200d16c:	00ffffc4 	movi	r3,-1
 200d170:	10c0031e 	bne	r2,r3,200d180 <_wcrtomb_r+0x64>
 200d174:	88000015 	stw	zero,0(r17)
 200d178:	00c02284 	movi	r3,138
 200d17c:	80c00015 	stw	r3,0(r16)
 200d180:	dfc00917 	ldw	ra,36(sp)
 200d184:	dc800817 	ldw	r18,32(sp)
 200d188:	dc400717 	ldw	r17,28(sp)
 200d18c:	dc000617 	ldw	r16,24(sp)
 200d190:	dec00a04 	addi	sp,sp,40
 200d194:	f800283a 	ret
 200d198:	2008b600 	call	2008b60 <__locale_charset>
 200d19c:	100f883a 	mov	r7,r2
 200d1a0:	dc400015 	stw	r17,0(sp)
 200d1a4:	000d883a 	mov	r6,zero
 200d1a8:	d9400104 	addi	r5,sp,4
 200d1ac:	8009883a 	mov	r4,r16
 200d1b0:	903ee83a 	callr	r18
 200d1b4:	003fed06 	br	200d16c <_wcrtomb_r+0x50>

0200d1b8 <wcrtomb>:
 200d1b8:	defff604 	addi	sp,sp,-40
 200d1bc:	008080b4 	movhi	r2,514
 200d1c0:	dc800615 	stw	r18,24(sp)
 200d1c4:	dc400515 	stw	r17,20(sp)
 200d1c8:	10acbb04 	addi	r2,r2,-19732
 200d1cc:	dfc00915 	stw	ra,36(sp)
 200d1d0:	dd000815 	stw	r20,32(sp)
 200d1d4:	dcc00715 	stw	r19,28(sp)
 200d1d8:	dc000415 	stw	r16,16(sp)
 200d1dc:	3025883a 	mov	r18,r6
 200d1e0:	14400017 	ldw	r17,0(r2)
 200d1e4:	20001926 	beq	r4,zero,200d24c <wcrtomb+0x94>
 200d1e8:	008080b4 	movhi	r2,514
 200d1ec:	10acbf04 	addi	r2,r2,-19716
 200d1f0:	15000017 	ldw	r20,0(r2)
 200d1f4:	2021883a 	mov	r16,r4
 200d1f8:	2827883a 	mov	r19,r5
 200d1fc:	2008b600 	call	2008b60 <__locale_charset>
 200d200:	100f883a 	mov	r7,r2
 200d204:	dc800015 	stw	r18,0(sp)
 200d208:	980d883a 	mov	r6,r19
 200d20c:	800b883a 	mov	r5,r16
 200d210:	8809883a 	mov	r4,r17
 200d214:	a03ee83a 	callr	r20
 200d218:	00ffffc4 	movi	r3,-1
 200d21c:	10c0031e 	bne	r2,r3,200d22c <wcrtomb+0x74>
 200d220:	90000015 	stw	zero,0(r18)
 200d224:	00c02284 	movi	r3,138
 200d228:	88c00015 	stw	r3,0(r17)
 200d22c:	dfc00917 	ldw	ra,36(sp)
 200d230:	dd000817 	ldw	r20,32(sp)
 200d234:	dcc00717 	ldw	r19,28(sp)
 200d238:	dc800617 	ldw	r18,24(sp)
 200d23c:	dc400517 	ldw	r17,20(sp)
 200d240:	dc000417 	ldw	r16,16(sp)
 200d244:	dec00a04 	addi	sp,sp,40
 200d248:	f800283a 	ret
 200d24c:	008080b4 	movhi	r2,514
 200d250:	10acbf04 	addi	r2,r2,-19716
 200d254:	14000017 	ldw	r16,0(r2)
 200d258:	2008b600 	call	2008b60 <__locale_charset>
 200d25c:	100f883a 	mov	r7,r2
 200d260:	dc800015 	stw	r18,0(sp)
 200d264:	000d883a 	mov	r6,zero
 200d268:	d9400104 	addi	r5,sp,4
 200d26c:	8809883a 	mov	r4,r17
 200d270:	803ee83a 	callr	r16
 200d274:	003fe806 	br	200d218 <wcrtomb+0x60>

0200d278 <__ascii_wctomb>:
 200d278:	28000526 	beq	r5,zero,200d290 <__ascii_wctomb+0x18>
 200d27c:	00803fc4 	movi	r2,255
 200d280:	11800536 	bltu	r2,r6,200d298 <__ascii_wctomb+0x20>
 200d284:	29800005 	stb	r6,0(r5)
 200d288:	00800044 	movi	r2,1
 200d28c:	f800283a 	ret
 200d290:	0005883a 	mov	r2,zero
 200d294:	f800283a 	ret
 200d298:	00802284 	movi	r2,138
 200d29c:	20800015 	stw	r2,0(r4)
 200d2a0:	00bfffc4 	movi	r2,-1
 200d2a4:	f800283a 	ret

0200d2a8 <_wctomb_r>:
 200d2a8:	008080b4 	movhi	r2,514
 200d2ac:	defff904 	addi	sp,sp,-28
 200d2b0:	10acbf04 	addi	r2,r2,-19716
 200d2b4:	dfc00615 	stw	ra,24(sp)
 200d2b8:	dc400515 	stw	r17,20(sp)
 200d2bc:	dc000415 	stw	r16,16(sp)
 200d2c0:	3823883a 	mov	r17,r7
 200d2c4:	14000017 	ldw	r16,0(r2)
 200d2c8:	d9000115 	stw	r4,4(sp)
 200d2cc:	d9400215 	stw	r5,8(sp)
 200d2d0:	d9800315 	stw	r6,12(sp)
 200d2d4:	2008b600 	call	2008b60 <__locale_charset>
 200d2d8:	d9800317 	ldw	r6,12(sp)
 200d2dc:	d9400217 	ldw	r5,8(sp)
 200d2e0:	d9000117 	ldw	r4,4(sp)
 200d2e4:	100f883a 	mov	r7,r2
 200d2e8:	dc400015 	stw	r17,0(sp)
 200d2ec:	803ee83a 	callr	r16
 200d2f0:	dfc00617 	ldw	ra,24(sp)
 200d2f4:	dc400517 	ldw	r17,20(sp)
 200d2f8:	dc000417 	ldw	r16,16(sp)
 200d2fc:	dec00704 	addi	sp,sp,28
 200d300:	f800283a 	ret

0200d304 <__udivdi3>:
 200d304:	defff404 	addi	sp,sp,-48
 200d308:	dcc00515 	stw	r19,20(sp)
 200d30c:	dc000215 	stw	r16,8(sp)
 200d310:	dfc00b15 	stw	ra,44(sp)
 200d314:	df000a15 	stw	fp,40(sp)
 200d318:	ddc00915 	stw	r23,36(sp)
 200d31c:	dd800815 	stw	r22,32(sp)
 200d320:	dd400715 	stw	r21,28(sp)
 200d324:	dd000615 	stw	r20,24(sp)
 200d328:	dc800415 	stw	r18,16(sp)
 200d32c:	dc400315 	stw	r17,12(sp)
 200d330:	2027883a 	mov	r19,r4
 200d334:	2821883a 	mov	r16,r5
 200d338:	3800461e 	bne	r7,zero,200d454 <__udivdi3+0x150>
 200d33c:	3023883a 	mov	r17,r6
 200d340:	2025883a 	mov	r18,r4
 200d344:	2980572e 	bgeu	r5,r6,200d4a4 <__udivdi3+0x1a0>
 200d348:	00bfffd4 	movui	r2,65535
 200d34c:	282d883a 	mov	r22,r5
 200d350:	1180b236 	bltu	r2,r6,200d61c <__udivdi3+0x318>
 200d354:	00803fc4 	movi	r2,255
 200d358:	1185803a 	cmpltu	r2,r2,r6
 200d35c:	100490fa 	slli	r2,r2,3
 200d360:	3086d83a 	srl	r3,r6,r2
 200d364:	010080b4 	movhi	r4,514
 200d368:	21250344 	addi	r4,r4,-27635
 200d36c:	20c7883a 	add	r3,r4,r3
 200d370:	18c00003 	ldbu	r3,0(r3)
 200d374:	1885883a 	add	r2,r3,r2
 200d378:	00c00804 	movi	r3,32
 200d37c:	1887c83a 	sub	r3,r3,r2
 200d380:	18000526 	beq	r3,zero,200d398 <__udivdi3+0x94>
 200d384:	80e0983a 	sll	r16,r16,r3
 200d388:	9884d83a 	srl	r2,r19,r2
 200d38c:	30e2983a 	sll	r17,r6,r3
 200d390:	98e4983a 	sll	r18,r19,r3
 200d394:	142cb03a 	or	r22,r2,r16
 200d398:	882ad43a 	srli	r21,r17,16
 200d39c:	b009883a 	mov	r4,r22
 200d3a0:	8d3fffcc 	andi	r20,r17,65535
 200d3a4:	a80b883a 	mov	r5,r21
 200d3a8:	2003a100 	call	2003a10 <__umodsi3>
 200d3ac:	b009883a 	mov	r4,r22
 200d3b0:	a80b883a 	mov	r5,r21
 200d3b4:	1027883a 	mov	r19,r2
 200d3b8:	20039ac0 	call	20039ac <__udivsi3>
 200d3bc:	100b883a 	mov	r5,r2
 200d3c0:	a009883a 	mov	r4,r20
 200d3c4:	102d883a 	mov	r22,r2
 200d3c8:	20011180 	call	2001118 <__mulsi3>
 200d3cc:	9826943a 	slli	r19,r19,16
 200d3d0:	9006d43a 	srli	r3,r18,16
 200d3d4:	1cc6b03a 	or	r3,r3,r19
 200d3d8:	1880052e 	bgeu	r3,r2,200d3f0 <__udivdi3+0xec>
 200d3dc:	1c47883a 	add	r3,r3,r17
 200d3e0:	b13fffc4 	addi	r4,r22,-1
 200d3e4:	1c400136 	bltu	r3,r17,200d3ec <__udivdi3+0xe8>
 200d3e8:	18814236 	bltu	r3,r2,200d8f4 <__udivdi3+0x5f0>
 200d3ec:	202d883a 	mov	r22,r4
 200d3f0:	18a1c83a 	sub	r16,r3,r2
 200d3f4:	8009883a 	mov	r4,r16
 200d3f8:	a80b883a 	mov	r5,r21
 200d3fc:	2003a100 	call	2003a10 <__umodsi3>
 200d400:	1027883a 	mov	r19,r2
 200d404:	8009883a 	mov	r4,r16
 200d408:	a80b883a 	mov	r5,r21
 200d40c:	9826943a 	slli	r19,r19,16
 200d410:	20039ac0 	call	20039ac <__udivsi3>
 200d414:	100b883a 	mov	r5,r2
 200d418:	a009883a 	mov	r4,r20
 200d41c:	94bfffcc 	andi	r18,r18,65535
 200d420:	1021883a 	mov	r16,r2
 200d424:	94e4b03a 	or	r18,r18,r19
 200d428:	20011180 	call	2001118 <__mulsi3>
 200d42c:	9080052e 	bgeu	r18,r2,200d444 <__udivdi3+0x140>
 200d430:	8ca5883a 	add	r18,r17,r18
 200d434:	80ffffc4 	addi	r3,r16,-1
 200d438:	94410c36 	bltu	r18,r17,200d86c <__udivdi3+0x568>
 200d43c:	90810b2e 	bgeu	r18,r2,200d86c <__udivdi3+0x568>
 200d440:	843fff84 	addi	r16,r16,-2
 200d444:	b004943a 	slli	r2,r22,16
 200d448:	0007883a 	mov	r3,zero
 200d44c:	1404b03a 	or	r2,r2,r16
 200d450:	00005e06 	br	200d5cc <__udivdi3+0x2c8>
 200d454:	29c05b36 	bltu	r5,r7,200d5c4 <__udivdi3+0x2c0>
 200d458:	00bfffd4 	movui	r2,65535
 200d45c:	11c0672e 	bgeu	r2,r7,200d5fc <__udivdi3+0x2f8>
 200d460:	00804034 	movhi	r2,256
 200d464:	10bfffc4 	addi	r2,r2,-1
 200d468:	11c10a36 	bltu	r2,r7,200d894 <__udivdi3+0x590>
 200d46c:	00800404 	movi	r2,16
 200d470:	3886d83a 	srl	r3,r7,r2
 200d474:	010080b4 	movhi	r4,514
 200d478:	21250344 	addi	r4,r4,-27635
 200d47c:	20c7883a 	add	r3,r4,r3
 200d480:	18c00003 	ldbu	r3,0(r3)
 200d484:	05c00804 	movi	r23,32
 200d488:	1885883a 	add	r2,r3,r2
 200d48c:	b8afc83a 	sub	r23,r23,r2
 200d490:	b800671e 	bne	r23,zero,200d630 <__udivdi3+0x32c>
 200d494:	3c010536 	bltu	r7,r16,200d8ac <__udivdi3+0x5a8>
 200d498:	9985403a 	cmpgeu	r2,r19,r6
 200d49c:	0007883a 	mov	r3,zero
 200d4a0:	00004a06 	br	200d5cc <__udivdi3+0x2c8>
 200d4a4:	3000041e 	bne	r6,zero,200d4b8 <__udivdi3+0x1b4>
 200d4a8:	000b883a 	mov	r5,zero
 200d4ac:	01000044 	movi	r4,1
 200d4b0:	20039ac0 	call	20039ac <__udivsi3>
 200d4b4:	1023883a 	mov	r17,r2
 200d4b8:	00bfffd4 	movui	r2,65535
 200d4bc:	1440532e 	bgeu	r2,r17,200d60c <__udivdi3+0x308>
 200d4c0:	00804034 	movhi	r2,256
 200d4c4:	10bfffc4 	addi	r2,r2,-1
 200d4c8:	1440f436 	bltu	r2,r17,200d89c <__udivdi3+0x598>
 200d4cc:	00800404 	movi	r2,16
 200d4d0:	8886d83a 	srl	r3,r17,r2
 200d4d4:	010080b4 	movhi	r4,514
 200d4d8:	21250344 	addi	r4,r4,-27635
 200d4dc:	20c7883a 	add	r3,r4,r3
 200d4e0:	18c00003 	ldbu	r3,0(r3)
 200d4e4:	1885883a 	add	r2,r3,r2
 200d4e8:	00c00804 	movi	r3,32
 200d4ec:	1887c83a 	sub	r3,r3,r2
 200d4f0:	1800a51e 	bne	r3,zero,200d788 <__udivdi3+0x484>
 200d4f4:	882ad43a 	srli	r21,r17,16
 200d4f8:	8461c83a 	sub	r16,r16,r17
 200d4fc:	8d3fffcc 	andi	r20,r17,65535
 200d500:	00c00044 	movi	r3,1
 200d504:	a80b883a 	mov	r5,r21
 200d508:	8009883a 	mov	r4,r16
 200d50c:	d8c00115 	stw	r3,4(sp)
 200d510:	2003a100 	call	2003a10 <__umodsi3>
 200d514:	a80b883a 	mov	r5,r21
 200d518:	8009883a 	mov	r4,r16
 200d51c:	1027883a 	mov	r19,r2
 200d520:	20039ac0 	call	20039ac <__udivsi3>
 200d524:	a00b883a 	mov	r5,r20
 200d528:	1009883a 	mov	r4,r2
 200d52c:	102d883a 	mov	r22,r2
 200d530:	20011180 	call	2001118 <__mulsi3>
 200d534:	9826943a 	slli	r19,r19,16
 200d538:	900ed43a 	srli	r7,r18,16
 200d53c:	d8c00117 	ldw	r3,4(sp)
 200d540:	3cceb03a 	or	r7,r7,r19
 200d544:	3880052e 	bgeu	r7,r2,200d55c <__udivdi3+0x258>
 200d548:	3c4f883a 	add	r7,r7,r17
 200d54c:	b13fffc4 	addi	r4,r22,-1
 200d550:	3c400136 	bltu	r7,r17,200d558 <__udivdi3+0x254>
 200d554:	3880e436 	bltu	r7,r2,200d8e8 <__udivdi3+0x5e4>
 200d558:	202d883a 	mov	r22,r4
 200d55c:	38a1c83a 	sub	r16,r7,r2
 200d560:	8009883a 	mov	r4,r16
 200d564:	a80b883a 	mov	r5,r21
 200d568:	d8c00115 	stw	r3,4(sp)
 200d56c:	2003a100 	call	2003a10 <__umodsi3>
 200d570:	1027883a 	mov	r19,r2
 200d574:	8009883a 	mov	r4,r16
 200d578:	a80b883a 	mov	r5,r21
 200d57c:	9826943a 	slli	r19,r19,16
 200d580:	20039ac0 	call	20039ac <__udivsi3>
 200d584:	a00b883a 	mov	r5,r20
 200d588:	1009883a 	mov	r4,r2
 200d58c:	94bfffcc 	andi	r18,r18,65535
 200d590:	1021883a 	mov	r16,r2
 200d594:	94e4b03a 	or	r18,r18,r19
 200d598:	20011180 	call	2001118 <__mulsi3>
 200d59c:	d8c00117 	ldw	r3,4(sp)
 200d5a0:	9080052e 	bgeu	r18,r2,200d5b8 <__udivdi3+0x2b4>
 200d5a4:	8ca5883a 	add	r18,r17,r18
 200d5a8:	813fffc4 	addi	r4,r16,-1
 200d5ac:	9440ad36 	bltu	r18,r17,200d864 <__udivdi3+0x560>
 200d5b0:	9080ac2e 	bgeu	r18,r2,200d864 <__udivdi3+0x560>
 200d5b4:	843fff84 	addi	r16,r16,-2
 200d5b8:	b004943a 	slli	r2,r22,16
 200d5bc:	1404b03a 	or	r2,r2,r16
 200d5c0:	00000206 	br	200d5cc <__udivdi3+0x2c8>
 200d5c4:	0007883a 	mov	r3,zero
 200d5c8:	0005883a 	mov	r2,zero
 200d5cc:	dfc00b17 	ldw	ra,44(sp)
 200d5d0:	df000a17 	ldw	fp,40(sp)
 200d5d4:	ddc00917 	ldw	r23,36(sp)
 200d5d8:	dd800817 	ldw	r22,32(sp)
 200d5dc:	dd400717 	ldw	r21,28(sp)
 200d5e0:	dd000617 	ldw	r20,24(sp)
 200d5e4:	dcc00517 	ldw	r19,20(sp)
 200d5e8:	dc800417 	ldw	r18,16(sp)
 200d5ec:	dc400317 	ldw	r17,12(sp)
 200d5f0:	dc000217 	ldw	r16,8(sp)
 200d5f4:	dec00c04 	addi	sp,sp,48
 200d5f8:	f800283a 	ret
 200d5fc:	00803fc4 	movi	r2,255
 200d600:	11c5803a 	cmpltu	r2,r2,r7
 200d604:	100490fa 	slli	r2,r2,3
 200d608:	003f9906 	br	200d470 <__udivdi3+0x16c>
 200d60c:	00803fc4 	movi	r2,255
 200d610:	1445803a 	cmpltu	r2,r2,r17
 200d614:	100490fa 	slli	r2,r2,3
 200d618:	003fad06 	br	200d4d0 <__udivdi3+0x1cc>
 200d61c:	00804034 	movhi	r2,256
 200d620:	10bfffc4 	addi	r2,r2,-1
 200d624:	11809f36 	bltu	r2,r6,200d8a4 <__udivdi3+0x5a0>
 200d628:	00800404 	movi	r2,16
 200d62c:	003f4c06 	br	200d360 <__udivdi3+0x5c>
 200d630:	3dce983a 	sll	r7,r7,r23
 200d634:	30b8d83a 	srl	fp,r6,r2
 200d638:	80a2d83a 	srl	r17,r16,r2
 200d63c:	35cc983a 	sll	r6,r6,r23
 200d640:	3f38b03a 	or	fp,r7,fp
 200d644:	e024d43a 	srli	r18,fp,16
 200d648:	9884d83a 	srl	r2,r19,r2
 200d64c:	85e0983a 	sll	r16,r16,r23
 200d650:	8809883a 	mov	r4,r17
 200d654:	900b883a 	mov	r5,r18
 200d658:	d9800015 	stw	r6,0(sp)
 200d65c:	1420b03a 	or	r16,r2,r16
 200d660:	2003a100 	call	2003a10 <__umodsi3>
 200d664:	900b883a 	mov	r5,r18
 200d668:	8809883a 	mov	r4,r17
 200d66c:	1029883a 	mov	r20,r2
 200d670:	e5bfffcc 	andi	r22,fp,65535
 200d674:	20039ac0 	call	20039ac <__udivsi3>
 200d678:	100b883a 	mov	r5,r2
 200d67c:	b009883a 	mov	r4,r22
 200d680:	102b883a 	mov	r21,r2
 200d684:	20011180 	call	2001118 <__mulsi3>
 200d688:	a028943a 	slli	r20,r20,16
 200d68c:	8006d43a 	srli	r3,r16,16
 200d690:	1d06b03a 	or	r3,r3,r20
 200d694:	1880042e 	bgeu	r3,r2,200d6a8 <__udivdi3+0x3a4>
 200d698:	1f07883a 	add	r3,r3,fp
 200d69c:	a93fffc4 	addi	r4,r21,-1
 200d6a0:	1f00892e 	bgeu	r3,fp,200d8c8 <__udivdi3+0x5c4>
 200d6a4:	202b883a 	mov	r21,r4
 200d6a8:	18a3c83a 	sub	r17,r3,r2
 200d6ac:	8809883a 	mov	r4,r17
 200d6b0:	900b883a 	mov	r5,r18
 200d6b4:	2003a100 	call	2003a10 <__umodsi3>
 200d6b8:	1029883a 	mov	r20,r2
 200d6bc:	8809883a 	mov	r4,r17
 200d6c0:	900b883a 	mov	r5,r18
 200d6c4:	a028943a 	slli	r20,r20,16
 200d6c8:	20039ac0 	call	20039ac <__udivsi3>
 200d6cc:	100b883a 	mov	r5,r2
 200d6d0:	b009883a 	mov	r4,r22
 200d6d4:	843fffcc 	andi	r16,r16,65535
 200d6d8:	1023883a 	mov	r17,r2
 200d6dc:	8520b03a 	or	r16,r16,r20
 200d6e0:	20011180 	call	2001118 <__mulsi3>
 200d6e4:	8080042e 	bgeu	r16,r2,200d6f8 <__udivdi3+0x3f4>
 200d6e8:	8721883a 	add	r16,r16,fp
 200d6ec:	88ffffc4 	addi	r3,r17,-1
 200d6f0:	8700712e 	bgeu	r16,fp,200d8b8 <__udivdi3+0x5b4>
 200d6f4:	1823883a 	mov	r17,r3
 200d6f8:	a80e943a 	slli	r7,r21,16
 200d6fc:	d8c00017 	ldw	r3,0(sp)
 200d700:	80a1c83a 	sub	r16,r16,r2
 200d704:	3c64b03a 	or	r18,r7,r17
 200d708:	1d3fffcc 	andi	r20,r3,65535
 200d70c:	9022d43a 	srli	r17,r18,16
 200d710:	95bfffcc 	andi	r22,r18,65535
 200d714:	a00b883a 	mov	r5,r20
 200d718:	b009883a 	mov	r4,r22
 200d71c:	182ad43a 	srli	r21,r3,16
 200d720:	20011180 	call	2001118 <__mulsi3>
 200d724:	a00b883a 	mov	r5,r20
 200d728:	8809883a 	mov	r4,r17
 200d72c:	1039883a 	mov	fp,r2
 200d730:	20011180 	call	2001118 <__mulsi3>
 200d734:	8809883a 	mov	r4,r17
 200d738:	a80b883a 	mov	r5,r21
 200d73c:	1029883a 	mov	r20,r2
 200d740:	20011180 	call	2001118 <__mulsi3>
 200d744:	a80b883a 	mov	r5,r21
 200d748:	b009883a 	mov	r4,r22
 200d74c:	1023883a 	mov	r17,r2
 200d750:	20011180 	call	2001118 <__mulsi3>
 200d754:	e006d43a 	srli	r3,fp,16
 200d758:	1505883a 	add	r2,r2,r20
 200d75c:	1887883a 	add	r3,r3,r2
 200d760:	1d00022e 	bgeu	r3,r20,200d76c <__udivdi3+0x468>
 200d764:	00800074 	movhi	r2,1
 200d768:	88a3883a 	add	r17,r17,r2
 200d76c:	1804d43a 	srli	r2,r3,16
 200d770:	1463883a 	add	r17,r2,r17
 200d774:	84404436 	bltu	r16,r17,200d888 <__udivdi3+0x584>
 200d778:	84403e26 	beq	r16,r17,200d874 <__udivdi3+0x570>
 200d77c:	9005883a 	mov	r2,r18
 200d780:	0007883a 	mov	r3,zero
 200d784:	003f9106 	br	200d5cc <__udivdi3+0x2c8>
 200d788:	88e2983a 	sll	r17,r17,r3
 200d78c:	80aed83a 	srl	r23,r16,r2
 200d790:	80e0983a 	sll	r16,r16,r3
 200d794:	882ad43a 	srli	r21,r17,16
 200d798:	9884d83a 	srl	r2,r19,r2
 200d79c:	b809883a 	mov	r4,r23
 200d7a0:	a80b883a 	mov	r5,r21
 200d7a4:	98e4983a 	sll	r18,r19,r3
 200d7a8:	142cb03a 	or	r22,r2,r16
 200d7ac:	2003a100 	call	2003a10 <__umodsi3>
 200d7b0:	b809883a 	mov	r4,r23
 200d7b4:	a80b883a 	mov	r5,r21
 200d7b8:	1027883a 	mov	r19,r2
 200d7bc:	8d3fffcc 	andi	r20,r17,65535
 200d7c0:	20039ac0 	call	20039ac <__udivsi3>
 200d7c4:	a009883a 	mov	r4,r20
 200d7c8:	100b883a 	mov	r5,r2
 200d7cc:	102f883a 	mov	r23,r2
 200d7d0:	20011180 	call	2001118 <__mulsi3>
 200d7d4:	9826943a 	slli	r19,r19,16
 200d7d8:	b008d43a 	srli	r4,r22,16
 200d7dc:	24c8b03a 	or	r4,r4,r19
 200d7e0:	2080062e 	bgeu	r4,r2,200d7fc <__udivdi3+0x4f8>
 200d7e4:	2449883a 	add	r4,r4,r17
 200d7e8:	b8ffffc4 	addi	r3,r23,-1
 200d7ec:	24403c36 	bltu	r4,r17,200d8e0 <__udivdi3+0x5dc>
 200d7f0:	20803b2e 	bgeu	r4,r2,200d8e0 <__udivdi3+0x5dc>
 200d7f4:	bdffff84 	addi	r23,r23,-2
 200d7f8:	2449883a 	add	r4,r4,r17
 200d7fc:	20a1c83a 	sub	r16,r4,r2
 200d800:	a80b883a 	mov	r5,r21
 200d804:	8009883a 	mov	r4,r16
 200d808:	2003a100 	call	2003a10 <__umodsi3>
 200d80c:	a80b883a 	mov	r5,r21
 200d810:	8009883a 	mov	r4,r16
 200d814:	1027883a 	mov	r19,r2
 200d818:	20039ac0 	call	20039ac <__udivsi3>
 200d81c:	a009883a 	mov	r4,r20
 200d820:	100b883a 	mov	r5,r2
 200d824:	9826943a 	slli	r19,r19,16
 200d828:	1039883a 	mov	fp,r2
 200d82c:	20011180 	call	2001118 <__mulsi3>
 200d830:	b13fffcc 	andi	r4,r22,65535
 200d834:	24c8b03a 	or	r4,r4,r19
 200d838:	2080062e 	bgeu	r4,r2,200d854 <__udivdi3+0x550>
 200d83c:	2449883a 	add	r4,r4,r17
 200d840:	e0ffffc4 	addi	r3,fp,-1
 200d844:	24402436 	bltu	r4,r17,200d8d8 <__udivdi3+0x5d4>
 200d848:	2080232e 	bgeu	r4,r2,200d8d8 <__udivdi3+0x5d4>
 200d84c:	e73fff84 	addi	fp,fp,-2
 200d850:	2449883a 	add	r4,r4,r17
 200d854:	b82e943a 	slli	r23,r23,16
 200d858:	20a1c83a 	sub	r16,r4,r2
 200d85c:	bf06b03a 	or	r3,r23,fp
 200d860:	003f2806 	br	200d504 <__udivdi3+0x200>
 200d864:	2021883a 	mov	r16,r4
 200d868:	003f5306 	br	200d5b8 <__udivdi3+0x2b4>
 200d86c:	1821883a 	mov	r16,r3
 200d870:	003ef406 	br	200d444 <__udivdi3+0x140>
 200d874:	1806943a 	slli	r3,r3,16
 200d878:	9de6983a 	sll	r19,r19,r23
 200d87c:	e73fffcc 	andi	fp,fp,65535
 200d880:	1f07883a 	add	r3,r3,fp
 200d884:	98ffbd2e 	bgeu	r19,r3,200d77c <__udivdi3+0x478>
 200d888:	90bfffc4 	addi	r2,r18,-1
 200d88c:	0007883a 	mov	r3,zero
 200d890:	003f4e06 	br	200d5cc <__udivdi3+0x2c8>
 200d894:	00800604 	movi	r2,24
 200d898:	003ef506 	br	200d470 <__udivdi3+0x16c>
 200d89c:	00800604 	movi	r2,24
 200d8a0:	003f0b06 	br	200d4d0 <__udivdi3+0x1cc>
 200d8a4:	00800604 	movi	r2,24
 200d8a8:	003ead06 	br	200d360 <__udivdi3+0x5c>
 200d8ac:	0007883a 	mov	r3,zero
 200d8b0:	00800044 	movi	r2,1
 200d8b4:	003f4506 	br	200d5cc <__udivdi3+0x2c8>
 200d8b8:	80bf8e2e 	bgeu	r16,r2,200d6f4 <__udivdi3+0x3f0>
 200d8bc:	8c7fff84 	addi	r17,r17,-2
 200d8c0:	8721883a 	add	r16,r16,fp
 200d8c4:	003f8c06 	br	200d6f8 <__udivdi3+0x3f4>
 200d8c8:	18bf762e 	bgeu	r3,r2,200d6a4 <__udivdi3+0x3a0>
 200d8cc:	ad7fff84 	addi	r21,r21,-2
 200d8d0:	1f07883a 	add	r3,r3,fp
 200d8d4:	003f7406 	br	200d6a8 <__udivdi3+0x3a4>
 200d8d8:	1839883a 	mov	fp,r3
 200d8dc:	003fdd06 	br	200d854 <__udivdi3+0x550>
 200d8e0:	182f883a 	mov	r23,r3
 200d8e4:	003fc506 	br	200d7fc <__udivdi3+0x4f8>
 200d8e8:	b5bfff84 	addi	r22,r22,-2
 200d8ec:	3c4f883a 	add	r7,r7,r17
 200d8f0:	003f1a06 	br	200d55c <__udivdi3+0x258>
 200d8f4:	b5bfff84 	addi	r22,r22,-2
 200d8f8:	1c47883a 	add	r3,r3,r17
 200d8fc:	003ebc06 	br	200d3f0 <__udivdi3+0xec>

0200d900 <__umoddi3>:
 200d900:	defff304 	addi	sp,sp,-52
 200d904:	df000b15 	stw	fp,44(sp)
 200d908:	dc400415 	stw	r17,16(sp)
 200d90c:	dc000315 	stw	r16,12(sp)
 200d910:	dfc00c15 	stw	ra,48(sp)
 200d914:	ddc00a15 	stw	r23,40(sp)
 200d918:	dd800915 	stw	r22,36(sp)
 200d91c:	dd400815 	stw	r21,32(sp)
 200d920:	dd000715 	stw	r20,28(sp)
 200d924:	dcc00615 	stw	r19,24(sp)
 200d928:	dc800515 	stw	r18,20(sp)
 200d92c:	2021883a 	mov	r16,r4
 200d930:	2823883a 	mov	r17,r5
 200d934:	2839883a 	mov	fp,r5
 200d938:	3800401e 	bne	r7,zero,200da3c <__umoddi3+0x13c>
 200d93c:	3027883a 	mov	r19,r6
 200d940:	2029883a 	mov	r20,r4
 200d944:	2980552e 	bgeu	r5,r6,200da9c <__umoddi3+0x19c>
 200d948:	00bfffd4 	movui	r2,65535
 200d94c:	1180a236 	bltu	r2,r6,200dbd8 <__umoddi3+0x2d8>
 200d950:	01003fc4 	movi	r4,255
 200d954:	2189803a 	cmpltu	r4,r4,r6
 200d958:	200890fa 	slli	r4,r4,3
 200d95c:	3104d83a 	srl	r2,r6,r4
 200d960:	00c080b4 	movhi	r3,514
 200d964:	18e50344 	addi	r3,r3,-27635
 200d968:	1885883a 	add	r2,r3,r2
 200d96c:	10c00003 	ldbu	r3,0(r2)
 200d970:	00800804 	movi	r2,32
 200d974:	1909883a 	add	r4,r3,r4
 200d978:	1125c83a 	sub	r18,r2,r4
 200d97c:	90000526 	beq	r18,zero,200d994 <__umoddi3+0x94>
 200d980:	8ca2983a 	sll	r17,r17,r18
 200d984:	8108d83a 	srl	r4,r16,r4
 200d988:	34a6983a 	sll	r19,r6,r18
 200d98c:	84a8983a 	sll	r20,r16,r18
 200d990:	2478b03a 	or	fp,r4,r17
 200d994:	982cd43a 	srli	r22,r19,16
 200d998:	e009883a 	mov	r4,fp
 200d99c:	9dffffcc 	andi	r23,r19,65535
 200d9a0:	b00b883a 	mov	r5,r22
 200d9a4:	2003a100 	call	2003a10 <__umodsi3>
 200d9a8:	b00b883a 	mov	r5,r22
 200d9ac:	e009883a 	mov	r4,fp
 200d9b0:	102b883a 	mov	r21,r2
 200d9b4:	20039ac0 	call	20039ac <__udivsi3>
 200d9b8:	100b883a 	mov	r5,r2
 200d9bc:	b809883a 	mov	r4,r23
 200d9c0:	20011180 	call	2001118 <__mulsi3>
 200d9c4:	a82a943a 	slli	r21,r21,16
 200d9c8:	a006d43a 	srli	r3,r20,16
 200d9cc:	1d46b03a 	or	r3,r3,r21
 200d9d0:	1880032e 	bgeu	r3,r2,200d9e0 <__umoddi3+0xe0>
 200d9d4:	1cc7883a 	add	r3,r3,r19
 200d9d8:	1cc00136 	bltu	r3,r19,200d9e0 <__umoddi3+0xe0>
 200d9dc:	18813136 	bltu	r3,r2,200dea4 <__umoddi3+0x5a4>
 200d9e0:	18a1c83a 	sub	r16,r3,r2
 200d9e4:	b00b883a 	mov	r5,r22
 200d9e8:	8009883a 	mov	r4,r16
 200d9ec:	2003a100 	call	2003a10 <__umodsi3>
 200d9f0:	b00b883a 	mov	r5,r22
 200d9f4:	8009883a 	mov	r4,r16
 200d9f8:	1023883a 	mov	r17,r2
 200d9fc:	20039ac0 	call	20039ac <__udivsi3>
 200da00:	100b883a 	mov	r5,r2
 200da04:	b809883a 	mov	r4,r23
 200da08:	8822943a 	slli	r17,r17,16
 200da0c:	20011180 	call	2001118 <__mulsi3>
 200da10:	a0ffffcc 	andi	r3,r20,65535
 200da14:	1c46b03a 	or	r3,r3,r17
 200da18:	1880042e 	bgeu	r3,r2,200da2c <__umoddi3+0x12c>
 200da1c:	1cc7883a 	add	r3,r3,r19
 200da20:	1cc00236 	bltu	r3,r19,200da2c <__umoddi3+0x12c>
 200da24:	1880012e 	bgeu	r3,r2,200da2c <__umoddi3+0x12c>
 200da28:	1cc7883a 	add	r3,r3,r19
 200da2c:	1885c83a 	sub	r2,r3,r2
 200da30:	1484d83a 	srl	r2,r2,r18
 200da34:	0007883a 	mov	r3,zero
 200da38:	00005306 	br	200db88 <__umoddi3+0x288>
 200da3c:	29c05036 	bltu	r5,r7,200db80 <__umoddi3+0x280>
 200da40:	00bfffd4 	movui	r2,65535
 200da44:	11c05c2e 	bgeu	r2,r7,200dbb8 <__umoddi3+0x2b8>
 200da48:	00804034 	movhi	r2,256
 200da4c:	10bfffc4 	addi	r2,r2,-1
 200da50:	11c10636 	bltu	r2,r7,200de6c <__umoddi3+0x56c>
 200da54:	01000404 	movi	r4,16
 200da58:	3904d83a 	srl	r2,r7,r4
 200da5c:	00c080b4 	movhi	r3,514
 200da60:	18e50344 	addi	r3,r3,-27635
 200da64:	1885883a 	add	r2,r3,r2
 200da68:	14c00003 	ldbu	r19,0(r2)
 200da6c:	00c00804 	movi	r3,32
 200da70:	9927883a 	add	r19,r19,r4
 200da74:	1ce9c83a 	sub	r20,r3,r19
 200da78:	a0005c1e 	bne	r20,zero,200dbec <__umoddi3+0x2ec>
 200da7c:	3c400136 	bltu	r7,r17,200da84 <__umoddi3+0x184>
 200da80:	81810a36 	bltu	r16,r6,200deac <__umoddi3+0x5ac>
 200da84:	8185c83a 	sub	r2,r16,r6
 200da88:	89e3c83a 	sub	r17,r17,r7
 200da8c:	8089803a 	cmpltu	r4,r16,r2
 200da90:	8939c83a 	sub	fp,r17,r4
 200da94:	e007883a 	mov	r3,fp
 200da98:	00003b06 	br	200db88 <__umoddi3+0x288>
 200da9c:	3000041e 	bne	r6,zero,200dab0 <__umoddi3+0x1b0>
 200daa0:	000b883a 	mov	r5,zero
 200daa4:	01000044 	movi	r4,1
 200daa8:	20039ac0 	call	20039ac <__udivsi3>
 200daac:	1027883a 	mov	r19,r2
 200dab0:	00bfffd4 	movui	r2,65535
 200dab4:	14c0442e 	bgeu	r2,r19,200dbc8 <__umoddi3+0x2c8>
 200dab8:	00804034 	movhi	r2,256
 200dabc:	10bfffc4 	addi	r2,r2,-1
 200dac0:	14c0ec36 	bltu	r2,r19,200de74 <__umoddi3+0x574>
 200dac4:	00800404 	movi	r2,16
 200dac8:	9886d83a 	srl	r3,r19,r2
 200dacc:	010080b4 	movhi	r4,514
 200dad0:	21250344 	addi	r4,r4,-27635
 200dad4:	20c7883a 	add	r3,r4,r3
 200dad8:	18c00003 	ldbu	r3,0(r3)
 200dadc:	1887883a 	add	r3,r3,r2
 200dae0:	00800804 	movi	r2,32
 200dae4:	10e5c83a 	sub	r18,r2,r3
 200dae8:	9000ab1e 	bne	r18,zero,200dd98 <__umoddi3+0x498>
 200daec:	982cd43a 	srli	r22,r19,16
 200daf0:	8ce3c83a 	sub	r17,r17,r19
 200daf4:	9dffffcc 	andi	r23,r19,65535
 200daf8:	b00b883a 	mov	r5,r22
 200dafc:	8809883a 	mov	r4,r17
 200db00:	2003a100 	call	2003a10 <__umodsi3>
 200db04:	b00b883a 	mov	r5,r22
 200db08:	8809883a 	mov	r4,r17
 200db0c:	102b883a 	mov	r21,r2
 200db10:	20039ac0 	call	20039ac <__udivsi3>
 200db14:	b80b883a 	mov	r5,r23
 200db18:	1009883a 	mov	r4,r2
 200db1c:	20011180 	call	2001118 <__mulsi3>
 200db20:	a82a943a 	slli	r21,r21,16
 200db24:	a006d43a 	srli	r3,r20,16
 200db28:	1d46b03a 	or	r3,r3,r21
 200db2c:	1880042e 	bgeu	r3,r2,200db40 <__umoddi3+0x240>
 200db30:	1cc7883a 	add	r3,r3,r19
 200db34:	1cc00236 	bltu	r3,r19,200db40 <__umoddi3+0x240>
 200db38:	1880012e 	bgeu	r3,r2,200db40 <__umoddi3+0x240>
 200db3c:	1cc7883a 	add	r3,r3,r19
 200db40:	18a1c83a 	sub	r16,r3,r2
 200db44:	b00b883a 	mov	r5,r22
 200db48:	8009883a 	mov	r4,r16
 200db4c:	2003a100 	call	2003a10 <__umodsi3>
 200db50:	1023883a 	mov	r17,r2
 200db54:	b00b883a 	mov	r5,r22
 200db58:	8009883a 	mov	r4,r16
 200db5c:	20039ac0 	call	20039ac <__udivsi3>
 200db60:	8822943a 	slli	r17,r17,16
 200db64:	b80b883a 	mov	r5,r23
 200db68:	1009883a 	mov	r4,r2
 200db6c:	20011180 	call	2001118 <__mulsi3>
 200db70:	a53fffcc 	andi	r20,r20,65535
 200db74:	a446b03a 	or	r3,r20,r17
 200db78:	18bfac2e 	bgeu	r3,r2,200da2c <__umoddi3+0x12c>
 200db7c:	003fa706 	br	200da1c <__umoddi3+0x11c>
 200db80:	2005883a 	mov	r2,r4
 200db84:	2807883a 	mov	r3,r5
 200db88:	dfc00c17 	ldw	ra,48(sp)
 200db8c:	df000b17 	ldw	fp,44(sp)
 200db90:	ddc00a17 	ldw	r23,40(sp)
 200db94:	dd800917 	ldw	r22,36(sp)
 200db98:	dd400817 	ldw	r21,32(sp)
 200db9c:	dd000717 	ldw	r20,28(sp)
 200dba0:	dcc00617 	ldw	r19,24(sp)
 200dba4:	dc800517 	ldw	r18,20(sp)
 200dba8:	dc400417 	ldw	r17,16(sp)
 200dbac:	dc000317 	ldw	r16,12(sp)
 200dbb0:	dec00d04 	addi	sp,sp,52
 200dbb4:	f800283a 	ret
 200dbb8:	04c03fc4 	movi	r19,255
 200dbbc:	99c9803a 	cmpltu	r4,r19,r7
 200dbc0:	200890fa 	slli	r4,r4,3
 200dbc4:	003fa406 	br	200da58 <__umoddi3+0x158>
 200dbc8:	00803fc4 	movi	r2,255
 200dbcc:	14c5803a 	cmpltu	r2,r2,r19
 200dbd0:	100490fa 	slli	r2,r2,3
 200dbd4:	003fbc06 	br	200dac8 <__umoddi3+0x1c8>
 200dbd8:	00804034 	movhi	r2,256
 200dbdc:	10bfffc4 	addi	r2,r2,-1
 200dbe0:	1180a636 	bltu	r2,r6,200de7c <__umoddi3+0x57c>
 200dbe4:	01000404 	movi	r4,16
 200dbe8:	003f5c06 	br	200d95c <__umoddi3+0x5c>
 200dbec:	3d0e983a 	sll	r7,r7,r20
 200dbf0:	34ead83a 	srl	r21,r6,r19
 200dbf4:	8cc6d83a 	srl	r3,r17,r19
 200dbf8:	8d10983a 	sll	r8,r17,r20
 200dbfc:	3d6ab03a 	or	r21,r7,r21
 200dc00:	a82cd43a 	srli	r22,r21,16
 200dc04:	84e2d83a 	srl	r17,r16,r19
 200dc08:	1809883a 	mov	r4,r3
 200dc0c:	b00b883a 	mov	r5,r22
 200dc10:	8a22b03a 	or	r17,r17,r8
 200dc14:	3524983a 	sll	r18,r6,r20
 200dc18:	dc400015 	stw	r17,0(sp)
 200dc1c:	d8c00115 	stw	r3,4(sp)
 200dc20:	2003a100 	call	2003a10 <__umodsi3>
 200dc24:	d8c00117 	ldw	r3,4(sp)
 200dc28:	b00b883a 	mov	r5,r22
 200dc2c:	1039883a 	mov	fp,r2
 200dc30:	1809883a 	mov	r4,r3
 200dc34:	20039ac0 	call	20039ac <__udivsi3>
 200dc38:	adffffcc 	andi	r23,r21,65535
 200dc3c:	100b883a 	mov	r5,r2
 200dc40:	b809883a 	mov	r4,r23
 200dc44:	1023883a 	mov	r17,r2
 200dc48:	20011180 	call	2001118 <__mulsi3>
 200dc4c:	d9400017 	ldw	r5,0(sp)
 200dc50:	e008943a 	slli	r4,fp,16
 200dc54:	8520983a 	sll	r16,r16,r20
 200dc58:	2806d43a 	srli	r3,r5,16
 200dc5c:	1906b03a 	or	r3,r3,r4
 200dc60:	1880042e 	bgeu	r3,r2,200dc74 <__umoddi3+0x374>
 200dc64:	1d47883a 	add	r3,r3,r21
 200dc68:	893fffc4 	addi	r4,r17,-1
 200dc6c:	1d40892e 	bgeu	r3,r21,200de94 <__umoddi3+0x594>
 200dc70:	2023883a 	mov	r17,r4
 200dc74:	18b9c83a 	sub	fp,r3,r2
 200dc78:	b00b883a 	mov	r5,r22
 200dc7c:	e009883a 	mov	r4,fp
 200dc80:	2003a100 	call	2003a10 <__umodsi3>
 200dc84:	b00b883a 	mov	r5,r22
 200dc88:	e009883a 	mov	r4,fp
 200dc8c:	d8800215 	stw	r2,8(sp)
 200dc90:	20039ac0 	call	20039ac <__udivsi3>
 200dc94:	100b883a 	mov	r5,r2
 200dc98:	b809883a 	mov	r4,r23
 200dc9c:	102d883a 	mov	r22,r2
 200dca0:	20011180 	call	2001118 <__mulsi3>
 200dca4:	d9800217 	ldw	r6,8(sp)
 200dca8:	d8c00017 	ldw	r3,0(sp)
 200dcac:	300c943a 	slli	r6,r6,16
 200dcb0:	1a3fffcc 	andi	r8,r3,65535
 200dcb4:	4190b03a 	or	r8,r8,r6
 200dcb8:	4080042e 	bgeu	r8,r2,200dccc <__umoddi3+0x3cc>
 200dcbc:	4551883a 	add	r8,r8,r21
 200dcc0:	b0ffffc4 	addi	r3,r22,-1
 200dcc4:	45406f2e 	bgeu	r8,r21,200de84 <__umoddi3+0x584>
 200dcc8:	182d883a 	mov	r22,r3
 200dccc:	880e943a 	slli	r7,r17,16
 200dcd0:	9006d43a 	srli	r3,r18,16
 200dcd4:	91bfffcc 	andi	r6,r18,65535
 200dcd8:	3dacb03a 	or	r22,r7,r22
 200dcdc:	b02ed43a 	srli	r23,r22,16
 200dce0:	b5bfffcc 	andi	r22,r22,65535
 200dce4:	300b883a 	mov	r5,r6
 200dce8:	b009883a 	mov	r4,r22
 200dcec:	40a3c83a 	sub	r17,r8,r2
 200dcf0:	d8c00115 	stw	r3,4(sp)
 200dcf4:	d9800215 	stw	r6,8(sp)
 200dcf8:	20011180 	call	2001118 <__mulsi3>
 200dcfc:	d9800217 	ldw	r6,8(sp)
 200dd00:	b809883a 	mov	r4,r23
 200dd04:	1039883a 	mov	fp,r2
 200dd08:	300b883a 	mov	r5,r6
 200dd0c:	20011180 	call	2001118 <__mulsi3>
 200dd10:	d8c00117 	ldw	r3,4(sp)
 200dd14:	b809883a 	mov	r4,r23
 200dd18:	d8800215 	stw	r2,8(sp)
 200dd1c:	180b883a 	mov	r5,r3
 200dd20:	20011180 	call	2001118 <__mulsi3>
 200dd24:	d8c00117 	ldw	r3,4(sp)
 200dd28:	b009883a 	mov	r4,r22
 200dd2c:	102f883a 	mov	r23,r2
 200dd30:	180b883a 	mov	r5,r3
 200dd34:	20011180 	call	2001118 <__mulsi3>
 200dd38:	d9800217 	ldw	r6,8(sp)
 200dd3c:	e006d43a 	srli	r3,fp,16
 200dd40:	1185883a 	add	r2,r2,r6
 200dd44:	1885883a 	add	r2,r3,r2
 200dd48:	1180022e 	bgeu	r2,r6,200dd54 <__umoddi3+0x454>
 200dd4c:	00c00074 	movhi	r3,1
 200dd50:	b8ef883a 	add	r23,r23,r3
 200dd54:	1006d43a 	srli	r3,r2,16
 200dd58:	1004943a 	slli	r2,r2,16
 200dd5c:	e73fffcc 	andi	fp,fp,65535
 200dd60:	1dc7883a 	add	r3,r3,r23
 200dd64:	1739883a 	add	fp,r2,fp
 200dd68:	88c03a36 	bltu	r17,r3,200de54 <__umoddi3+0x554>
 200dd6c:	88c05126 	beq	r17,r3,200deb4 <__umoddi3+0x5b4>
 200dd70:	88c9c83a 	sub	r4,r17,r3
 200dd74:	e00f883a 	mov	r7,fp
 200dd78:	81cfc83a 	sub	r7,r16,r7
 200dd7c:	81c7803a 	cmpltu	r3,r16,r7
 200dd80:	20c7c83a 	sub	r3,r4,r3
 200dd84:	1cc4983a 	sll	r2,r3,r19
 200dd88:	3d0ed83a 	srl	r7,r7,r20
 200dd8c:	1d06d83a 	srl	r3,r3,r20
 200dd90:	11c4b03a 	or	r2,r2,r7
 200dd94:	003f7c06 	br	200db88 <__umoddi3+0x288>
 200dd98:	9ca6983a 	sll	r19,r19,r18
 200dd9c:	88f8d83a 	srl	fp,r17,r3
 200dda0:	80c4d83a 	srl	r2,r16,r3
 200dda4:	982cd43a 	srli	r22,r19,16
 200dda8:	8ca2983a 	sll	r17,r17,r18
 200ddac:	e009883a 	mov	r4,fp
 200ddb0:	b00b883a 	mov	r5,r22
 200ddb4:	146ab03a 	or	r21,r2,r17
 200ddb8:	2003a100 	call	2003a10 <__umodsi3>
 200ddbc:	b00b883a 	mov	r5,r22
 200ddc0:	e009883a 	mov	r4,fp
 200ddc4:	1029883a 	mov	r20,r2
 200ddc8:	9dffffcc 	andi	r23,r19,65535
 200ddcc:	20039ac0 	call	20039ac <__udivsi3>
 200ddd0:	b809883a 	mov	r4,r23
 200ddd4:	100b883a 	mov	r5,r2
 200ddd8:	20011180 	call	2001118 <__mulsi3>
 200dddc:	a008943a 	slli	r4,r20,16
 200dde0:	a806d43a 	srli	r3,r21,16
 200dde4:	84a8983a 	sll	r20,r16,r18
 200dde8:	1906b03a 	or	r3,r3,r4
 200ddec:	1880042e 	bgeu	r3,r2,200de00 <__umoddi3+0x500>
 200ddf0:	1cc7883a 	add	r3,r3,r19
 200ddf4:	1cc00236 	bltu	r3,r19,200de00 <__umoddi3+0x500>
 200ddf8:	1880012e 	bgeu	r3,r2,200de00 <__umoddi3+0x500>
 200ddfc:	1cc7883a 	add	r3,r3,r19
 200de00:	18a3c83a 	sub	r17,r3,r2
 200de04:	b00b883a 	mov	r5,r22
 200de08:	8809883a 	mov	r4,r17
 200de0c:	2003a100 	call	2003a10 <__umodsi3>
 200de10:	b00b883a 	mov	r5,r22
 200de14:	8809883a 	mov	r4,r17
 200de18:	1021883a 	mov	r16,r2
 200de1c:	20039ac0 	call	20039ac <__udivsi3>
 200de20:	100b883a 	mov	r5,r2
 200de24:	b809883a 	mov	r4,r23
 200de28:	8020943a 	slli	r16,r16,16
 200de2c:	20011180 	call	2001118 <__mulsi3>
 200de30:	a8ffffcc 	andi	r3,r21,65535
 200de34:	1c06b03a 	or	r3,r3,r16
 200de38:	1880042e 	bgeu	r3,r2,200de4c <__umoddi3+0x54c>
 200de3c:	1cc7883a 	add	r3,r3,r19
 200de40:	1cc00236 	bltu	r3,r19,200de4c <__umoddi3+0x54c>
 200de44:	1880012e 	bgeu	r3,r2,200de4c <__umoddi3+0x54c>
 200de48:	1cc7883a 	add	r3,r3,r19
 200de4c:	18a3c83a 	sub	r17,r3,r2
 200de50:	003f2906 	br	200daf8 <__umoddi3+0x1f8>
 200de54:	e48fc83a 	sub	r7,fp,r18
 200de58:	1d49c83a 	sub	r4,r3,r21
 200de5c:	e1f9803a 	cmpltu	fp,fp,r7
 200de60:	2739c83a 	sub	fp,r4,fp
 200de64:	8f09c83a 	sub	r4,r17,fp
 200de68:	003fc306 	br	200dd78 <__umoddi3+0x478>
 200de6c:	01000604 	movi	r4,24
 200de70:	003ef906 	br	200da58 <__umoddi3+0x158>
 200de74:	00800604 	movi	r2,24
 200de78:	003f1306 	br	200dac8 <__umoddi3+0x1c8>
 200de7c:	01000604 	movi	r4,24
 200de80:	003eb606 	br	200d95c <__umoddi3+0x5c>
 200de84:	40bf902e 	bgeu	r8,r2,200dcc8 <__umoddi3+0x3c8>
 200de88:	b5bfff84 	addi	r22,r22,-2
 200de8c:	4551883a 	add	r8,r8,r21
 200de90:	003f8e06 	br	200dccc <__umoddi3+0x3cc>
 200de94:	18bf762e 	bgeu	r3,r2,200dc70 <__umoddi3+0x370>
 200de98:	8c7fff84 	addi	r17,r17,-2
 200de9c:	1d47883a 	add	r3,r3,r21
 200dea0:	003f7406 	br	200dc74 <__umoddi3+0x374>
 200dea4:	1cc7883a 	add	r3,r3,r19
 200dea8:	003ecd06 	br	200d9e0 <__umoddi3+0xe0>
 200deac:	8005883a 	mov	r2,r16
 200deb0:	003ef806 	br	200da94 <__umoddi3+0x194>
 200deb4:	873fe736 	bltu	r16,fp,200de54 <__umoddi3+0x554>
 200deb8:	e00f883a 	mov	r7,fp
 200debc:	0009883a 	mov	r4,zero
 200dec0:	003fad06 	br	200dd78 <__umoddi3+0x478>

0200dec4 <__eqdf2>:
 200dec4:	2804d53a 	srli	r2,r5,20
 200dec8:	3806d53a 	srli	r3,r7,20
 200decc:	02000434 	movhi	r8,16
 200ded0:	423fffc4 	addi	r8,r8,-1
 200ded4:	1081ffcc 	andi	r2,r2,2047
 200ded8:	0281ffc4 	movi	r10,2047
 200dedc:	2a12703a 	and	r9,r5,r8
 200dee0:	18c1ffcc 	andi	r3,r3,2047
 200dee4:	3a10703a 	and	r8,r7,r8
 200dee8:	280ad7fa 	srli	r5,r5,31
 200deec:	380ed7fa 	srli	r7,r7,31
 200def0:	12801026 	beq	r2,r10,200df34 <__eqdf2+0x70>
 200def4:	0281ffc4 	movi	r10,2047
 200def8:	1a800a26 	beq	r3,r10,200df24 <__eqdf2+0x60>
 200defc:	10c00226 	beq	r2,r3,200df08 <__eqdf2+0x44>
 200df00:	00800044 	movi	r2,1
 200df04:	f800283a 	ret
 200df08:	4a3ffd1e 	bne	r9,r8,200df00 <__eqdf2+0x3c>
 200df0c:	21bffc1e 	bne	r4,r6,200df00 <__eqdf2+0x3c>
 200df10:	29c00c26 	beq	r5,r7,200df44 <__eqdf2+0x80>
 200df14:	103ffa1e 	bne	r2,zero,200df00 <__eqdf2+0x3c>
 200df18:	2244b03a 	or	r2,r4,r9
 200df1c:	1004c03a 	cmpne	r2,r2,zero
 200df20:	f800283a 	ret
 200df24:	3214b03a 	or	r10,r6,r8
 200df28:	503ff426 	beq	r10,zero,200defc <__eqdf2+0x38>
 200df2c:	00800044 	movi	r2,1
 200df30:	f800283a 	ret
 200df34:	2254b03a 	or	r10,r4,r9
 200df38:	503fee26 	beq	r10,zero,200def4 <__eqdf2+0x30>
 200df3c:	00800044 	movi	r2,1
 200df40:	f800283a 	ret
 200df44:	0005883a 	mov	r2,zero
 200df48:	f800283a 	ret

0200df4c <__floatunsidf>:
 200df4c:	defffe04 	addi	sp,sp,-8
 200df50:	dc000015 	stw	r16,0(sp)
 200df54:	dfc00115 	stw	ra,4(sp)
 200df58:	2021883a 	mov	r16,r4
 200df5c:	20002226 	beq	r4,zero,200dfe8 <__floatunsidf+0x9c>
 200df60:	20038500 	call	2003850 <__clzsi2>
 200df64:	01010784 	movi	r4,1054
 200df68:	2089c83a 	sub	r4,r4,r2
 200df6c:	01810cc4 	movi	r6,1075
 200df70:	310dc83a 	sub	r6,r6,r4
 200df74:	00c007c4 	movi	r3,31
 200df78:	1980120e 	bge	r3,r6,200dfc4 <__floatunsidf+0x78>
 200df7c:	00c104c4 	movi	r3,1043
 200df80:	1907c83a 	sub	r3,r3,r4
 200df84:	80ca983a 	sll	r5,r16,r3
 200df88:	00800434 	movhi	r2,16
 200df8c:	10bfffc4 	addi	r2,r2,-1
 200df90:	2101ffcc 	andi	r4,r4,2047
 200df94:	0021883a 	mov	r16,zero
 200df98:	288a703a 	and	r5,r5,r2
 200df9c:	2008953a 	slli	r4,r4,20
 200dfa0:	00c00434 	movhi	r3,16
 200dfa4:	18ffffc4 	addi	r3,r3,-1
 200dfa8:	28c6703a 	and	r3,r5,r3
 200dfac:	8005883a 	mov	r2,r16
 200dfb0:	1906b03a 	or	r3,r3,r4
 200dfb4:	dfc00117 	ldw	ra,4(sp)
 200dfb8:	dc000017 	ldw	r16,0(sp)
 200dfbc:	dec00204 	addi	sp,sp,8
 200dfc0:	f800283a 	ret
 200dfc4:	00c002c4 	movi	r3,11
 200dfc8:	188bc83a 	sub	r5,r3,r2
 200dfcc:	814ad83a 	srl	r5,r16,r5
 200dfd0:	00c00434 	movhi	r3,16
 200dfd4:	18ffffc4 	addi	r3,r3,-1
 200dfd8:	81a0983a 	sll	r16,r16,r6
 200dfdc:	2101ffcc 	andi	r4,r4,2047
 200dfe0:	28ca703a 	and	r5,r5,r3
 200dfe4:	003fed06 	br	200df9c <__floatunsidf+0x50>
 200dfe8:	0009883a 	mov	r4,zero
 200dfec:	000b883a 	mov	r5,zero
 200dff0:	003fea06 	br	200df9c <__floatunsidf+0x50>

0200dff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200dff4:	defffe04 	addi	sp,sp,-8
 200dff8:	dfc00115 	stw	ra,4(sp)
 200dffc:	df000015 	stw	fp,0(sp)
 200e000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e004:	d0a00c17 	ldw	r2,-32720(gp)
 200e008:	10000326 	beq	r2,zero,200e018 <alt_get_errno+0x24>
 200e00c:	d0a00c17 	ldw	r2,-32720(gp)
 200e010:	103ee83a 	callr	r2
 200e014:	00000106 	br	200e01c <alt_get_errno+0x28>
 200e018:	d0a71704 	addi	r2,gp,-25508
}
 200e01c:	e037883a 	mov	sp,fp
 200e020:	dfc00117 	ldw	ra,4(sp)
 200e024:	df000017 	ldw	fp,0(sp)
 200e028:	dec00204 	addi	sp,sp,8
 200e02c:	f800283a 	ret

0200e030 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200e030:	defffb04 	addi	sp,sp,-20
 200e034:	dfc00415 	stw	ra,16(sp)
 200e038:	df000315 	stw	fp,12(sp)
 200e03c:	df000304 	addi	fp,sp,12
 200e040:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200e044:	e0bfff17 	ldw	r2,-4(fp)
 200e048:	10000816 	blt	r2,zero,200e06c <close+0x3c>
 200e04c:	01400304 	movi	r5,12
 200e050:	e13fff17 	ldw	r4,-4(fp)
 200e054:	20011180 	call	2001118 <__mulsi3>
 200e058:	1007883a 	mov	r3,r2
 200e05c:	008080b4 	movhi	r2,514
 200e060:	10a83e04 	addi	r2,r2,-24328
 200e064:	1885883a 	add	r2,r3,r2
 200e068:	00000106 	br	200e070 <close+0x40>
 200e06c:	0005883a 	mov	r2,zero
 200e070:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200e074:	e0bffd17 	ldw	r2,-12(fp)
 200e078:	10001926 	beq	r2,zero,200e0e0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200e07c:	e0bffd17 	ldw	r2,-12(fp)
 200e080:	10800017 	ldw	r2,0(r2)
 200e084:	10800417 	ldw	r2,16(r2)
 200e088:	10000626 	beq	r2,zero,200e0a4 <close+0x74>
 200e08c:	e0bffd17 	ldw	r2,-12(fp)
 200e090:	10800017 	ldw	r2,0(r2)
 200e094:	10800417 	ldw	r2,16(r2)
 200e098:	e13ffd17 	ldw	r4,-12(fp)
 200e09c:	103ee83a 	callr	r2
 200e0a0:	00000106 	br	200e0a8 <close+0x78>
 200e0a4:	0005883a 	mov	r2,zero
 200e0a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200e0ac:	e13fff17 	ldw	r4,-4(fp)
 200e0b0:	200e7100 	call	200e710 <alt_release_fd>
    if (rval < 0)
 200e0b4:	e0bffe17 	ldw	r2,-8(fp)
 200e0b8:	1000070e 	bge	r2,zero,200e0d8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200e0bc:	200dff40 	call	200dff4 <alt_get_errno>
 200e0c0:	1007883a 	mov	r3,r2
 200e0c4:	e0bffe17 	ldw	r2,-8(fp)
 200e0c8:	0085c83a 	sub	r2,zero,r2
 200e0cc:	18800015 	stw	r2,0(r3)
      return -1;
 200e0d0:	00bfffc4 	movi	r2,-1
 200e0d4:	00000706 	br	200e0f4 <close+0xc4>
    }
    return 0;
 200e0d8:	0005883a 	mov	r2,zero
 200e0dc:	00000506 	br	200e0f4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e0e0:	200dff40 	call	200dff4 <alt_get_errno>
 200e0e4:	1007883a 	mov	r3,r2
 200e0e8:	00801444 	movi	r2,81
 200e0ec:	18800015 	stw	r2,0(r3)
    return -1;
 200e0f0:	00bfffc4 	movi	r2,-1
  }
}
 200e0f4:	e037883a 	mov	sp,fp
 200e0f8:	dfc00117 	ldw	ra,4(sp)
 200e0fc:	df000017 	ldw	fp,0(sp)
 200e100:	dec00204 	addi	sp,sp,8
 200e104:	f800283a 	ret

0200e108 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200e108:	defffc04 	addi	sp,sp,-16
 200e10c:	df000315 	stw	fp,12(sp)
 200e110:	df000304 	addi	fp,sp,12
 200e114:	e13ffd15 	stw	r4,-12(fp)
 200e118:	e17ffe15 	stw	r5,-8(fp)
 200e11c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200e120:	e0bfff17 	ldw	r2,-4(fp)
}
 200e124:	e037883a 	mov	sp,fp
 200e128:	df000017 	ldw	fp,0(sp)
 200e12c:	dec00104 	addi	sp,sp,4
 200e130:	f800283a 	ret

0200e134 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e134:	defffe04 	addi	sp,sp,-8
 200e138:	dfc00115 	stw	ra,4(sp)
 200e13c:	df000015 	stw	fp,0(sp)
 200e140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e144:	d0a00c17 	ldw	r2,-32720(gp)
 200e148:	10000326 	beq	r2,zero,200e158 <alt_get_errno+0x24>
 200e14c:	d0a00c17 	ldw	r2,-32720(gp)
 200e150:	103ee83a 	callr	r2
 200e154:	00000106 	br	200e15c <alt_get_errno+0x28>
 200e158:	d0a71704 	addi	r2,gp,-25508
}
 200e15c:	e037883a 	mov	sp,fp
 200e160:	dfc00117 	ldw	ra,4(sp)
 200e164:	df000017 	ldw	fp,0(sp)
 200e168:	dec00204 	addi	sp,sp,8
 200e16c:	f800283a 	ret

0200e170 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200e170:	defffb04 	addi	sp,sp,-20
 200e174:	dfc00415 	stw	ra,16(sp)
 200e178:	df000315 	stw	fp,12(sp)
 200e17c:	df000304 	addi	fp,sp,12
 200e180:	e13ffe15 	stw	r4,-8(fp)
 200e184:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e188:	e0bffe17 	ldw	r2,-8(fp)
 200e18c:	10000816 	blt	r2,zero,200e1b0 <fstat+0x40>
 200e190:	01400304 	movi	r5,12
 200e194:	e13ffe17 	ldw	r4,-8(fp)
 200e198:	20011180 	call	2001118 <__mulsi3>
 200e19c:	1007883a 	mov	r3,r2
 200e1a0:	008080b4 	movhi	r2,514
 200e1a4:	10a83e04 	addi	r2,r2,-24328
 200e1a8:	1885883a 	add	r2,r3,r2
 200e1ac:	00000106 	br	200e1b4 <fstat+0x44>
 200e1b0:	0005883a 	mov	r2,zero
 200e1b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200e1b8:	e0bffd17 	ldw	r2,-12(fp)
 200e1bc:	10001026 	beq	r2,zero,200e200 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200e1c0:	e0bffd17 	ldw	r2,-12(fp)
 200e1c4:	10800017 	ldw	r2,0(r2)
 200e1c8:	10800817 	ldw	r2,32(r2)
 200e1cc:	10000726 	beq	r2,zero,200e1ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200e1d0:	e0bffd17 	ldw	r2,-12(fp)
 200e1d4:	10800017 	ldw	r2,0(r2)
 200e1d8:	10800817 	ldw	r2,32(r2)
 200e1dc:	e17fff17 	ldw	r5,-4(fp)
 200e1e0:	e13ffd17 	ldw	r4,-12(fp)
 200e1e4:	103ee83a 	callr	r2
 200e1e8:	00000a06 	br	200e214 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200e1ec:	e0bfff17 	ldw	r2,-4(fp)
 200e1f0:	00c80004 	movi	r3,8192
 200e1f4:	10c00115 	stw	r3,4(r2)
      return 0;
 200e1f8:	0005883a 	mov	r2,zero
 200e1fc:	00000506 	br	200e214 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e200:	200e1340 	call	200e134 <alt_get_errno>
 200e204:	1007883a 	mov	r3,r2
 200e208:	00801444 	movi	r2,81
 200e20c:	18800015 	stw	r2,0(r3)
    return -1;
 200e210:	00bfffc4 	movi	r2,-1
  }
}
 200e214:	e037883a 	mov	sp,fp
 200e218:	dfc00117 	ldw	ra,4(sp)
 200e21c:	df000017 	ldw	fp,0(sp)
 200e220:	dec00204 	addi	sp,sp,8
 200e224:	f800283a 	ret

0200e228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e228:	defffe04 	addi	sp,sp,-8
 200e22c:	dfc00115 	stw	ra,4(sp)
 200e230:	df000015 	stw	fp,0(sp)
 200e234:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e238:	d0a00c17 	ldw	r2,-32720(gp)
 200e23c:	10000326 	beq	r2,zero,200e24c <alt_get_errno+0x24>
 200e240:	d0a00c17 	ldw	r2,-32720(gp)
 200e244:	103ee83a 	callr	r2
 200e248:	00000106 	br	200e250 <alt_get_errno+0x28>
 200e24c:	d0a71704 	addi	r2,gp,-25508
}
 200e250:	e037883a 	mov	sp,fp
 200e254:	dfc00117 	ldw	ra,4(sp)
 200e258:	df000017 	ldw	fp,0(sp)
 200e25c:	dec00204 	addi	sp,sp,8
 200e260:	f800283a 	ret

0200e264 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200e264:	deffed04 	addi	sp,sp,-76
 200e268:	dfc01215 	stw	ra,72(sp)
 200e26c:	df001115 	stw	fp,68(sp)
 200e270:	df001104 	addi	fp,sp,68
 200e274:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e278:	e0bfff17 	ldw	r2,-4(fp)
 200e27c:	10000816 	blt	r2,zero,200e2a0 <isatty+0x3c>
 200e280:	01400304 	movi	r5,12
 200e284:	e13fff17 	ldw	r4,-4(fp)
 200e288:	20011180 	call	2001118 <__mulsi3>
 200e28c:	1007883a 	mov	r3,r2
 200e290:	008080b4 	movhi	r2,514
 200e294:	10a83e04 	addi	r2,r2,-24328
 200e298:	1885883a 	add	r2,r3,r2
 200e29c:	00000106 	br	200e2a4 <isatty+0x40>
 200e2a0:	0005883a 	mov	r2,zero
 200e2a4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200e2a8:	e0bfef17 	ldw	r2,-68(fp)
 200e2ac:	10000e26 	beq	r2,zero,200e2e8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200e2b0:	e0bfef17 	ldw	r2,-68(fp)
 200e2b4:	10800017 	ldw	r2,0(r2)
 200e2b8:	10800817 	ldw	r2,32(r2)
 200e2bc:	1000021e 	bne	r2,zero,200e2c8 <isatty+0x64>
    {
      return 1;
 200e2c0:	00800044 	movi	r2,1
 200e2c4:	00000d06 	br	200e2fc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200e2c8:	e0bff004 	addi	r2,fp,-64
 200e2cc:	100b883a 	mov	r5,r2
 200e2d0:	e13fff17 	ldw	r4,-4(fp)
 200e2d4:	200e1700 	call	200e170 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200e2d8:	e0bff117 	ldw	r2,-60(fp)
 200e2dc:	10880020 	cmpeqi	r2,r2,8192
 200e2e0:	10803fcc 	andi	r2,r2,255
 200e2e4:	00000506 	br	200e2fc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e2e8:	200e2280 	call	200e228 <alt_get_errno>
 200e2ec:	1007883a 	mov	r3,r2
 200e2f0:	00801444 	movi	r2,81
 200e2f4:	18800015 	stw	r2,0(r3)
    return 0;
 200e2f8:	0005883a 	mov	r2,zero
  }
}
 200e2fc:	e037883a 	mov	sp,fp
 200e300:	dfc00117 	ldw	ra,4(sp)
 200e304:	df000017 	ldw	fp,0(sp)
 200e308:	dec00204 	addi	sp,sp,8
 200e30c:	f800283a 	ret

0200e310 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200e310:	defffc04 	addi	sp,sp,-16
 200e314:	df000315 	stw	fp,12(sp)
 200e318:	df000304 	addi	fp,sp,12
 200e31c:	e13ffd15 	stw	r4,-12(fp)
 200e320:	e17ffe15 	stw	r5,-8(fp)
 200e324:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200e328:	e0fffe17 	ldw	r3,-8(fp)
 200e32c:	e0bffd17 	ldw	r2,-12(fp)
 200e330:	18800c26 	beq	r3,r2,200e364 <alt_load_section+0x54>
  {
    while( to != end )
 200e334:	00000806 	br	200e358 <alt_load_section+0x48>
    {
      *to++ = *from++;
 200e338:	e0bffe17 	ldw	r2,-8(fp)
 200e33c:	10c00104 	addi	r3,r2,4
 200e340:	e0fffe15 	stw	r3,-8(fp)
 200e344:	e0fffd17 	ldw	r3,-12(fp)
 200e348:	19000104 	addi	r4,r3,4
 200e34c:	e13ffd15 	stw	r4,-12(fp)
 200e350:	18c00017 	ldw	r3,0(r3)
 200e354:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200e358:	e0fffe17 	ldw	r3,-8(fp)
 200e35c:	e0bfff17 	ldw	r2,-4(fp)
 200e360:	18bff51e 	bne	r3,r2,200e338 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200e364:	0001883a 	nop
 200e368:	e037883a 	mov	sp,fp
 200e36c:	df000017 	ldw	fp,0(sp)
 200e370:	dec00104 	addi	sp,sp,4
 200e374:	f800283a 	ret

0200e378 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200e378:	defffe04 	addi	sp,sp,-8
 200e37c:	dfc00115 	stw	ra,4(sp)
 200e380:	df000015 	stw	fp,0(sp)
 200e384:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200e388:	018080b4 	movhi	r6,514
 200e38c:	31ace904 	addi	r6,r6,-19548
 200e390:	014080b4 	movhi	r5,514
 200e394:	29660b04 	addi	r5,r5,-26580
 200e398:	010080b4 	movhi	r4,514
 200e39c:	212ce904 	addi	r4,r4,-19548
 200e3a0:	200e3100 	call	200e310 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200e3a4:	01808034 	movhi	r6,512
 200e3a8:	31808c04 	addi	r6,r6,560
 200e3ac:	01408034 	movhi	r5,512
 200e3b0:	29400804 	addi	r5,r5,32
 200e3b4:	01008034 	movhi	r4,512
 200e3b8:	21000804 	addi	r4,r4,32
 200e3bc:	200e3100 	call	200e310 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200e3c0:	018080b4 	movhi	r6,514
 200e3c4:	31a60b04 	addi	r6,r6,-26580
 200e3c8:	014080b4 	movhi	r5,514
 200e3cc:	2964ea04 	addi	r5,r5,-27736
 200e3d0:	010080b4 	movhi	r4,514
 200e3d4:	2124ea04 	addi	r4,r4,-27736
 200e3d8:	200e3100 	call	200e310 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200e3dc:	2017f680 	call	2017f68 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200e3e0:	20181280 	call	2018128 <alt_icache_flush_all>
}
 200e3e4:	0001883a 	nop
 200e3e8:	e037883a 	mov	sp,fp
 200e3ec:	dfc00117 	ldw	ra,4(sp)
 200e3f0:	df000017 	ldw	fp,0(sp)
 200e3f4:	dec00204 	addi	sp,sp,8
 200e3f8:	f800283a 	ret

0200e3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e3fc:	defffe04 	addi	sp,sp,-8
 200e400:	dfc00115 	stw	ra,4(sp)
 200e404:	df000015 	stw	fp,0(sp)
 200e408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e40c:	d0a00c17 	ldw	r2,-32720(gp)
 200e410:	10000326 	beq	r2,zero,200e420 <alt_get_errno+0x24>
 200e414:	d0a00c17 	ldw	r2,-32720(gp)
 200e418:	103ee83a 	callr	r2
 200e41c:	00000106 	br	200e424 <alt_get_errno+0x28>
 200e420:	d0a71704 	addi	r2,gp,-25508
}
 200e424:	e037883a 	mov	sp,fp
 200e428:	dfc00117 	ldw	ra,4(sp)
 200e42c:	df000017 	ldw	fp,0(sp)
 200e430:	dec00204 	addi	sp,sp,8
 200e434:	f800283a 	ret

0200e438 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200e438:	defff904 	addi	sp,sp,-28
 200e43c:	dfc00615 	stw	ra,24(sp)
 200e440:	df000515 	stw	fp,20(sp)
 200e444:	df000504 	addi	fp,sp,20
 200e448:	e13ffd15 	stw	r4,-12(fp)
 200e44c:	e17ffe15 	stw	r5,-8(fp)
 200e450:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200e454:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e458:	e0bffd17 	ldw	r2,-12(fp)
 200e45c:	10000816 	blt	r2,zero,200e480 <lseek+0x48>
 200e460:	01400304 	movi	r5,12
 200e464:	e13ffd17 	ldw	r4,-12(fp)
 200e468:	20011180 	call	2001118 <__mulsi3>
 200e46c:	1007883a 	mov	r3,r2
 200e470:	008080b4 	movhi	r2,514
 200e474:	10a83e04 	addi	r2,r2,-24328
 200e478:	1885883a 	add	r2,r3,r2
 200e47c:	00000106 	br	200e484 <lseek+0x4c>
 200e480:	0005883a 	mov	r2,zero
 200e484:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200e488:	e0bffc17 	ldw	r2,-16(fp)
 200e48c:	10001026 	beq	r2,zero,200e4d0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200e490:	e0bffc17 	ldw	r2,-16(fp)
 200e494:	10800017 	ldw	r2,0(r2)
 200e498:	10800717 	ldw	r2,28(r2)
 200e49c:	10000926 	beq	r2,zero,200e4c4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200e4a0:	e0bffc17 	ldw	r2,-16(fp)
 200e4a4:	10800017 	ldw	r2,0(r2)
 200e4a8:	10800717 	ldw	r2,28(r2)
 200e4ac:	e1bfff17 	ldw	r6,-4(fp)
 200e4b0:	e17ffe17 	ldw	r5,-8(fp)
 200e4b4:	e13ffc17 	ldw	r4,-16(fp)
 200e4b8:	103ee83a 	callr	r2
 200e4bc:	e0bffb15 	stw	r2,-20(fp)
 200e4c0:	00000506 	br	200e4d8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200e4c4:	00bfde84 	movi	r2,-134
 200e4c8:	e0bffb15 	stw	r2,-20(fp)
 200e4cc:	00000206 	br	200e4d8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200e4d0:	00bfebc4 	movi	r2,-81
 200e4d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200e4d8:	e0bffb17 	ldw	r2,-20(fp)
 200e4dc:	1000070e 	bge	r2,zero,200e4fc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 200e4e0:	200e3fc0 	call	200e3fc <alt_get_errno>
 200e4e4:	1007883a 	mov	r3,r2
 200e4e8:	e0bffb17 	ldw	r2,-20(fp)
 200e4ec:	0085c83a 	sub	r2,zero,r2
 200e4f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 200e4f4:	00bfffc4 	movi	r2,-1
 200e4f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200e4fc:	e0bffb17 	ldw	r2,-20(fp)
}
 200e500:	e037883a 	mov	sp,fp
 200e504:	dfc00117 	ldw	ra,4(sp)
 200e508:	df000017 	ldw	fp,0(sp)
 200e50c:	dec00204 	addi	sp,sp,8
 200e510:	f800283a 	ret

0200e514 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200e514:	defff904 	addi	sp,sp,-28
 200e518:	dfc00615 	stw	ra,24(sp)
 200e51c:	df000515 	stw	fp,20(sp)
 200e520:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200e524:	0009883a 	mov	r4,zero
 200e528:	2016f840 	call	2016f84 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200e52c:	200f5000 	call	200f500 <OSInit>
 200e530:	01000044 	movi	r4,1
 200e534:	20149240 	call	2014924 <OSSemCreate>
 200e538:	d0a71d15 	stw	r2,-25484(gp)
 200e53c:	01000044 	movi	r4,1
 200e540:	20149240 	call	2014924 <OSSemCreate>
 200e544:	d0a71f15 	stw	r2,-25476(gp)
 200e548:	d0a71804 	addi	r2,gp,-25504
 200e54c:	e0bffc15 	stw	r2,-16(fp)
 200e550:	00800044 	movi	r2,1
 200e554:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 200e558:	e0bffd0b 	ldhu	r2,-12(fp)
 200e55c:	1009883a 	mov	r4,r2
 200e560:	20149240 	call	2014924 <OSSemCreate>
 200e564:	1007883a 	mov	r3,r2
 200e568:	e0bffc17 	ldw	r2,-16(fp)
 200e56c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200e570:	2016fbc0 	call	2016fbc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200e574:	018080b4 	movhi	r6,514
 200e578:	31a5ba04 	addi	r6,r6,-26904
 200e57c:	014080b4 	movhi	r5,514
 200e580:	2965ba04 	addi	r5,r5,-26904
 200e584:	010080b4 	movhi	r4,514
 200e588:	2125ba04 	addi	r4,r4,-26904
 200e58c:	20184cc0 	call	20184cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200e590:	20180680 	call	2018068 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200e594:	010080b4 	movhi	r4,514
 200e598:	21203204 	addi	r4,r4,-32568
 200e59c:	20190140 	call	2019014 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200e5a0:	d0a71917 	ldw	r2,-25500(gp)
 200e5a4:	d0e71a17 	ldw	r3,-25496(gp)
 200e5a8:	d1271b17 	ldw	r4,-25492(gp)
 200e5ac:	200d883a 	mov	r6,r4
 200e5b0:	180b883a 	mov	r5,r3
 200e5b4:	1009883a 	mov	r4,r2
 200e5b8:	2000c100 	call	2000c10 <main>
 200e5bc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 200e5c0:	01000044 	movi	r4,1
 200e5c4:	200e0300 	call	200e030 <close>
  exit (result);
 200e5c8:	e13ffb17 	ldw	r4,-20(fp)
 200e5cc:	20190280 	call	2019028 <exit>

0200e5d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e5d0:	defffe04 	addi	sp,sp,-8
 200e5d4:	dfc00115 	stw	ra,4(sp)
 200e5d8:	df000015 	stw	fp,0(sp)
 200e5dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e5e0:	d0a00c17 	ldw	r2,-32720(gp)
 200e5e4:	10000326 	beq	r2,zero,200e5f4 <alt_get_errno+0x24>
 200e5e8:	d0a00c17 	ldw	r2,-32720(gp)
 200e5ec:	103ee83a 	callr	r2
 200e5f0:	00000106 	br	200e5f8 <alt_get_errno+0x28>
 200e5f4:	d0a71704 	addi	r2,gp,-25508
}
 200e5f8:	e037883a 	mov	sp,fp
 200e5fc:	dfc00117 	ldw	ra,4(sp)
 200e600:	df000017 	ldw	fp,0(sp)
 200e604:	dec00204 	addi	sp,sp,8
 200e608:	f800283a 	ret

0200e60c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200e60c:	defff904 	addi	sp,sp,-28
 200e610:	dfc00615 	stw	ra,24(sp)
 200e614:	df000515 	stw	fp,20(sp)
 200e618:	df000504 	addi	fp,sp,20
 200e61c:	e13ffd15 	stw	r4,-12(fp)
 200e620:	e17ffe15 	stw	r5,-8(fp)
 200e624:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e628:	e0bffd17 	ldw	r2,-12(fp)
 200e62c:	10000816 	blt	r2,zero,200e650 <read+0x44>
 200e630:	01400304 	movi	r5,12
 200e634:	e13ffd17 	ldw	r4,-12(fp)
 200e638:	20011180 	call	2001118 <__mulsi3>
 200e63c:	1007883a 	mov	r3,r2
 200e640:	008080b4 	movhi	r2,514
 200e644:	10a83e04 	addi	r2,r2,-24328
 200e648:	1885883a 	add	r2,r3,r2
 200e64c:	00000106 	br	200e654 <read+0x48>
 200e650:	0005883a 	mov	r2,zero
 200e654:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e658:	e0bffb17 	ldw	r2,-20(fp)
 200e65c:	10002226 	beq	r2,zero,200e6e8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200e660:	e0bffb17 	ldw	r2,-20(fp)
 200e664:	10800217 	ldw	r2,8(r2)
 200e668:	108000cc 	andi	r2,r2,3
 200e66c:	10800060 	cmpeqi	r2,r2,1
 200e670:	1000181e 	bne	r2,zero,200e6d4 <read+0xc8>
        (fd->dev->read))
 200e674:	e0bffb17 	ldw	r2,-20(fp)
 200e678:	10800017 	ldw	r2,0(r2)
 200e67c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200e680:	10001426 	beq	r2,zero,200e6d4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200e684:	e0bffb17 	ldw	r2,-20(fp)
 200e688:	10800017 	ldw	r2,0(r2)
 200e68c:	10800517 	ldw	r2,20(r2)
 200e690:	e0ffff17 	ldw	r3,-4(fp)
 200e694:	180d883a 	mov	r6,r3
 200e698:	e17ffe17 	ldw	r5,-8(fp)
 200e69c:	e13ffb17 	ldw	r4,-20(fp)
 200e6a0:	103ee83a 	callr	r2
 200e6a4:	e0bffc15 	stw	r2,-16(fp)
 200e6a8:	e0bffc17 	ldw	r2,-16(fp)
 200e6ac:	1000070e 	bge	r2,zero,200e6cc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200e6b0:	200e5d00 	call	200e5d0 <alt_get_errno>
 200e6b4:	1007883a 	mov	r3,r2
 200e6b8:	e0bffc17 	ldw	r2,-16(fp)
 200e6bc:	0085c83a 	sub	r2,zero,r2
 200e6c0:	18800015 	stw	r2,0(r3)
          return -1;
 200e6c4:	00bfffc4 	movi	r2,-1
 200e6c8:	00000c06 	br	200e6fc <read+0xf0>
        }
        return rval;
 200e6cc:	e0bffc17 	ldw	r2,-16(fp)
 200e6d0:	00000a06 	br	200e6fc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200e6d4:	200e5d00 	call	200e5d0 <alt_get_errno>
 200e6d8:	1007883a 	mov	r3,r2
 200e6dc:	00800344 	movi	r2,13
 200e6e0:	18800015 	stw	r2,0(r3)
 200e6e4:	00000406 	br	200e6f8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200e6e8:	200e5d00 	call	200e5d0 <alt_get_errno>
 200e6ec:	1007883a 	mov	r3,r2
 200e6f0:	00801444 	movi	r2,81
 200e6f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200e6f8:	00bfffc4 	movi	r2,-1
}
 200e6fc:	e037883a 	mov	sp,fp
 200e700:	dfc00117 	ldw	ra,4(sp)
 200e704:	df000017 	ldw	fp,0(sp)
 200e708:	dec00204 	addi	sp,sp,8
 200e70c:	f800283a 	ret

0200e710 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200e710:	defffc04 	addi	sp,sp,-16
 200e714:	dfc00315 	stw	ra,12(sp)
 200e718:	df000215 	stw	fp,8(sp)
 200e71c:	dc000115 	stw	r16,4(sp)
 200e720:	df000204 	addi	fp,sp,8
 200e724:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200e728:	e0bffe17 	ldw	r2,-8(fp)
 200e72c:	108000d0 	cmplti	r2,r2,3
 200e730:	1000111e 	bne	r2,zero,200e778 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200e734:	040080b4 	movhi	r16,514
 200e738:	84283e04 	addi	r16,r16,-24328
 200e73c:	e0bffe17 	ldw	r2,-8(fp)
 200e740:	01400304 	movi	r5,12
 200e744:	1009883a 	mov	r4,r2
 200e748:	20011180 	call	2001118 <__mulsi3>
 200e74c:	8085883a 	add	r2,r16,r2
 200e750:	10800204 	addi	r2,r2,8
 200e754:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200e758:	040080b4 	movhi	r16,514
 200e75c:	84283e04 	addi	r16,r16,-24328
 200e760:	e0bffe17 	ldw	r2,-8(fp)
 200e764:	01400304 	movi	r5,12
 200e768:	1009883a 	mov	r4,r2
 200e76c:	20011180 	call	2001118 <__mulsi3>
 200e770:	8085883a 	add	r2,r16,r2
 200e774:	10000015 	stw	zero,0(r2)
  }
}
 200e778:	0001883a 	nop
 200e77c:	e6ffff04 	addi	sp,fp,-4
 200e780:	dfc00217 	ldw	ra,8(sp)
 200e784:	df000117 	ldw	fp,4(sp)
 200e788:	dc000017 	ldw	r16,0(sp)
 200e78c:	dec00304 	addi	sp,sp,12
 200e790:	f800283a 	ret

0200e794 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200e794:	defff904 	addi	sp,sp,-28
 200e798:	df000615 	stw	fp,24(sp)
 200e79c:	df000604 	addi	fp,sp,24
 200e7a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e7a4:	0005303a 	rdctl	r2,status
 200e7a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e7ac:	e0fffe17 	ldw	r3,-8(fp)
 200e7b0:	00bfff84 	movi	r2,-2
 200e7b4:	1884703a 	and	r2,r3,r2
 200e7b8:	1001703a 	wrctl	status,r2
  
  return context;
 200e7bc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200e7c0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200e7c4:	d0a00d17 	ldw	r2,-32716(gp)
 200e7c8:	10c000c4 	addi	r3,r2,3
 200e7cc:	00bfff04 	movi	r2,-4
 200e7d0:	1884703a 	and	r2,r3,r2
 200e7d4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200e7d8:	d0e00d17 	ldw	r3,-32716(gp)
 200e7dc:	e0bfff17 	ldw	r2,-4(fp)
 200e7e0:	1887883a 	add	r3,r3,r2
 200e7e4:	00810034 	movhi	r2,1024
 200e7e8:	10800004 	addi	r2,r2,0
 200e7ec:	10c0062e 	bgeu	r2,r3,200e808 <sbrk+0x74>
 200e7f0:	e0bffb17 	ldw	r2,-20(fp)
 200e7f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e7f8:	e0bffa17 	ldw	r2,-24(fp)
 200e7fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200e800:	00bfffc4 	movi	r2,-1
 200e804:	00000b06 	br	200e834 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200e808:	d0a00d17 	ldw	r2,-32716(gp)
 200e80c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 200e810:	d0e00d17 	ldw	r3,-32716(gp)
 200e814:	e0bfff17 	ldw	r2,-4(fp)
 200e818:	1885883a 	add	r2,r3,r2
 200e81c:	d0a00d15 	stw	r2,-32716(gp)
 200e820:	e0bffb17 	ldw	r2,-20(fp)
 200e824:	e0bffc15 	stw	r2,-16(fp)
 200e828:	e0bffc17 	ldw	r2,-16(fp)
 200e82c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200e830:	e0bffd17 	ldw	r2,-12(fp)
} 
 200e834:	e037883a 	mov	sp,fp
 200e838:	df000017 	ldw	fp,0(sp)
 200e83c:	dec00104 	addi	sp,sp,4
 200e840:	f800283a 	ret

0200e844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e844:	defffe04 	addi	sp,sp,-8
 200e848:	dfc00115 	stw	ra,4(sp)
 200e84c:	df000015 	stw	fp,0(sp)
 200e850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e854:	d0a00c17 	ldw	r2,-32720(gp)
 200e858:	10000326 	beq	r2,zero,200e868 <alt_get_errno+0x24>
 200e85c:	d0a00c17 	ldw	r2,-32720(gp)
 200e860:	103ee83a 	callr	r2
 200e864:	00000106 	br	200e86c <alt_get_errno+0x28>
 200e868:	d0a71704 	addi	r2,gp,-25508
}
 200e86c:	e037883a 	mov	sp,fp
 200e870:	dfc00117 	ldw	ra,4(sp)
 200e874:	df000017 	ldw	fp,0(sp)
 200e878:	dec00204 	addi	sp,sp,8
 200e87c:	f800283a 	ret

0200e880 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200e880:	defff904 	addi	sp,sp,-28
 200e884:	dfc00615 	stw	ra,24(sp)
 200e888:	df000515 	stw	fp,20(sp)
 200e88c:	df000504 	addi	fp,sp,20
 200e890:	e13ffd15 	stw	r4,-12(fp)
 200e894:	e17ffe15 	stw	r5,-8(fp)
 200e898:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e89c:	e0bffd17 	ldw	r2,-12(fp)
 200e8a0:	10000816 	blt	r2,zero,200e8c4 <write+0x44>
 200e8a4:	01400304 	movi	r5,12
 200e8a8:	e13ffd17 	ldw	r4,-12(fp)
 200e8ac:	20011180 	call	2001118 <__mulsi3>
 200e8b0:	1007883a 	mov	r3,r2
 200e8b4:	008080b4 	movhi	r2,514
 200e8b8:	10a83e04 	addi	r2,r2,-24328
 200e8bc:	1885883a 	add	r2,r3,r2
 200e8c0:	00000106 	br	200e8c8 <write+0x48>
 200e8c4:	0005883a 	mov	r2,zero
 200e8c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e8cc:	e0bffb17 	ldw	r2,-20(fp)
 200e8d0:	10002126 	beq	r2,zero,200e958 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200e8d4:	e0bffb17 	ldw	r2,-20(fp)
 200e8d8:	10800217 	ldw	r2,8(r2)
 200e8dc:	108000cc 	andi	r2,r2,3
 200e8e0:	10001826 	beq	r2,zero,200e944 <write+0xc4>
 200e8e4:	e0bffb17 	ldw	r2,-20(fp)
 200e8e8:	10800017 	ldw	r2,0(r2)
 200e8ec:	10800617 	ldw	r2,24(r2)
 200e8f0:	10001426 	beq	r2,zero,200e944 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200e8f4:	e0bffb17 	ldw	r2,-20(fp)
 200e8f8:	10800017 	ldw	r2,0(r2)
 200e8fc:	10800617 	ldw	r2,24(r2)
 200e900:	e0ffff17 	ldw	r3,-4(fp)
 200e904:	180d883a 	mov	r6,r3
 200e908:	e17ffe17 	ldw	r5,-8(fp)
 200e90c:	e13ffb17 	ldw	r4,-20(fp)
 200e910:	103ee83a 	callr	r2
 200e914:	e0bffc15 	stw	r2,-16(fp)
 200e918:	e0bffc17 	ldw	r2,-16(fp)
 200e91c:	1000070e 	bge	r2,zero,200e93c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200e920:	200e8440 	call	200e844 <alt_get_errno>
 200e924:	1007883a 	mov	r3,r2
 200e928:	e0bffc17 	ldw	r2,-16(fp)
 200e92c:	0085c83a 	sub	r2,zero,r2
 200e930:	18800015 	stw	r2,0(r3)
        return -1;
 200e934:	00bfffc4 	movi	r2,-1
 200e938:	00000c06 	br	200e96c <write+0xec>
      }
      return rval;
 200e93c:	e0bffc17 	ldw	r2,-16(fp)
 200e940:	00000a06 	br	200e96c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200e944:	200e8440 	call	200e844 <alt_get_errno>
 200e948:	1007883a 	mov	r3,r2
 200e94c:	00800344 	movi	r2,13
 200e950:	18800015 	stw	r2,0(r3)
 200e954:	00000406 	br	200e968 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200e958:	200e8440 	call	200e844 <alt_get_errno>
 200e95c:	1007883a 	mov	r3,r2
 200e960:	00801444 	movi	r2,81
 200e964:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200e968:	00bfffc4 	movi	r2,-1
}
 200e96c:	e037883a 	mov	sp,fp
 200e970:	dfc00117 	ldw	ra,4(sp)
 200e974:	df000017 	ldw	fp,0(sp)
 200e978:	dec00204 	addi	sp,sp,8
 200e97c:	f800283a 	ret

0200e980 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 200e980:	deffdf04 	addi	sp,sp,-132
 200e984:	dfc02015 	stw	ra,128(sp)
 200e988:	df001f15 	stw	fp,124(sp)
 200e98c:	df001f04 	addi	fp,sp,124
 200e990:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200e994:	e0bfe204 	addi	r2,fp,-120
 200e998:	100b883a 	mov	r5,r2
 200e99c:	01003fc4 	movi	r4,255
 200e9a0:	20168ac0 	call	20168ac <OSTaskQuery>
 200e9a4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200e9a8:	e0bffe83 	ldbu	r2,-6(fp)
 200e9ac:	10803fcc 	andi	r2,r2,255
 200e9b0:	10001e1e 	bne	r2,zero,200ea2c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 200e9b4:	e0bfee83 	ldbu	r2,-70(fp)
 200e9b8:	10803fcc 	andi	r2,r2,255
 200e9bc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 200e9c0:	d0a71d17 	ldw	r2,-25484(gp)
 200e9c4:	e0fffd04 	addi	r3,fp,-12
 200e9c8:	180b883a 	mov	r5,r3
 200e9cc:	1009883a 	mov	r4,r2
 200e9d0:	20150c40 	call	20150c4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 200e9d4:	e0bffe43 	ldbu	r2,-7(fp)
 200e9d8:	10803fcc 	andi	r2,r2,255
 200e9dc:	10000726 	beq	r2,zero,200e9fc <__env_lock+0x7c>
 200e9e0:	d0a00e17 	ldw	r2,-32712(gp)
 200e9e4:	e0ffe117 	ldw	r3,-124(fp)
 200e9e8:	1880041e 	bne	r3,r2,200e9fc <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 200e9ec:	d0a71c17 	ldw	r2,-25488(gp)
 200e9f0:	10800044 	addi	r2,r2,1
 200e9f4:	d0a71c15 	stw	r2,-25488(gp)
 200e9f8:	00000a06 	br	200ea24 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 200e9fc:	d0a71d17 	ldw	r2,-25484(gp)
 200ea00:	e0fffe84 	addi	r3,fp,-6
 200ea04:	180d883a 	mov	r6,r3
 200ea08:	000b883a 	mov	r5,zero
 200ea0c:	1009883a 	mov	r4,r2
 200ea10:	2014c3c0 	call	2014c3c <OSSemPend>
    locks  = 1;
 200ea14:	00800044 	movi	r2,1
 200ea18:	d0a71c15 	stw	r2,-25488(gp)
    lockid = id;
 200ea1c:	e0bfe117 	ldw	r2,-124(fp)
 200ea20:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 200ea24:	0001883a 	nop
 200ea28:	00000106 	br	200ea30 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 200ea2c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200ea30:	e037883a 	mov	sp,fp
 200ea34:	dfc00117 	ldw	ra,4(sp)
 200ea38:	df000017 	ldw	fp,0(sp)
 200ea3c:	dec00204 	addi	sp,sp,8
 200ea40:	f800283a 	ret

0200ea44 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 200ea44:	defffd04 	addi	sp,sp,-12
 200ea48:	dfc00215 	stw	ra,8(sp)
 200ea4c:	df000115 	stw	fp,4(sp)
 200ea50:	df000104 	addi	fp,sp,4
 200ea54:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 200ea58:	d0a71c17 	ldw	r2,-25488(gp)
 200ea5c:	10000b26 	beq	r2,zero,200ea8c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 200ea60:	d0a71c17 	ldw	r2,-25488(gp)
 200ea64:	10bfffc4 	addi	r2,r2,-1
 200ea68:	d0a71c15 	stw	r2,-25488(gp)
 200ea6c:	d0a71c17 	ldw	r2,-25488(gp)
 200ea70:	1000071e 	bne	r2,zero,200ea90 <__env_unlock+0x4c>
  {
    lockid = -1;
 200ea74:	00bfffc4 	movi	r2,-1
 200ea78:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
 200ea7c:	d0a71d17 	ldw	r2,-25484(gp)
 200ea80:	1009883a 	mov	r4,r2
 200ea84:	2014fb40 	call	2014fb4 <OSSemPost>
 200ea88:	00000106 	br	200ea90 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 200ea8c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200ea90:	e037883a 	mov	sp,fp
 200ea94:	dfc00117 	ldw	ra,4(sp)
 200ea98:	df000017 	ldw	fp,0(sp)
 200ea9c:	dec00204 	addi	sp,sp,8
 200eaa0:	f800283a 	ret

0200eaa4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 200eaa4:	deffdb04 	addi	sp,sp,-148
 200eaa8:	dfc02415 	stw	ra,144(sp)
 200eaac:	df002315 	stw	fp,140(sp)
 200eab0:	df002304 	addi	fp,sp,140
 200eab4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200eab8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 200eabc:	d0a72043 	ldbu	r2,-25471(gp)
 200eac0:	10803fcc 	andi	r2,r2,255
 200eac4:	10800060 	cmpeqi	r2,r2,1
 200eac8:	10003626 	beq	r2,zero,200eba4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200eacc:	e0bfe204 	addi	r2,fp,-120
 200ead0:	100b883a 	mov	r5,r2
 200ead4:	01003fc4 	movi	r4,255
 200ead8:	20168ac0 	call	20168ac <OSTaskQuery>
 200eadc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200eae0:	e0bffe83 	ldbu	r2,-6(fp)
 200eae4:	10803fcc 	andi	r2,r2,255
 200eae8:	1000301e 	bne	r2,zero,200ebac <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 200eaec:	e0bfee83 	ldbu	r2,-70(fp)
 200eaf0:	10803fcc 	andi	r2,r2,255
 200eaf4:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 200eaf8:	d0a71f17 	ldw	r2,-25476(gp)
 200eafc:	e0fffd04 	addi	r3,fp,-12
 200eb00:	180b883a 	mov	r5,r3
 200eb04:	1009883a 	mov	r4,r2
 200eb08:	20150c40 	call	20150c4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200eb0c:	0005303a 	rdctl	r2,status
 200eb10:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200eb14:	e0ffe117 	ldw	r3,-124(fp)
 200eb18:	00bfff84 	movi	r2,-2
 200eb1c:	1884703a 	and	r2,r3,r2
 200eb20:	1001703a 	wrctl	status,r2
  
  return context;
 200eb24:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 200eb28:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 200eb2c:	e0bffd0b 	ldhu	r2,-12(fp)
 200eb30:	10bfffcc 	andi	r2,r2,65535
 200eb34:	10000b1e 	bne	r2,zero,200eb64 <__malloc_lock+0xc0>
 200eb38:	d0a00f17 	ldw	r2,-32708(gp)
 200eb3c:	e0ffde17 	ldw	r3,-136(fp)
 200eb40:	1880081e 	bne	r3,r2,200eb64 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 200eb44:	d0a71e17 	ldw	r2,-25480(gp)
 200eb48:	10800044 	addi	r2,r2,1
 200eb4c:	d0a71e15 	stw	r2,-25480(gp)
 200eb50:	e0bfdd17 	ldw	r2,-140(fp)
 200eb54:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200eb58:	e0bfdf17 	ldw	r2,-132(fp)
 200eb5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 200eb60:	00000e06 	br	200eb9c <__malloc_lock+0xf8>
 200eb64:	e0bfdd17 	ldw	r2,-140(fp)
 200eb68:	e0bfe015 	stw	r2,-128(fp)
 200eb6c:	e0bfe017 	ldw	r2,-128(fp)
 200eb70:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 200eb74:	d0a71f17 	ldw	r2,-25476(gp)
 200eb78:	e0fffe84 	addi	r3,fp,-6
 200eb7c:	180d883a 	mov	r6,r3
 200eb80:	000b883a 	mov	r5,zero
 200eb84:	1009883a 	mov	r4,r2
 200eb88:	2014c3c0 	call	2014c3c <OSSemPend>
    locks  = 1;
 200eb8c:	00800044 	movi	r2,1
 200eb90:	d0a71e15 	stw	r2,-25480(gp)
    lockid = id;
 200eb94:	e0bfde17 	ldw	r2,-136(fp)
 200eb98:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 200eb9c:	0001883a 	nop
 200eba0:	00000306 	br	200ebb0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 200eba4:	0001883a 	nop
 200eba8:	00000106 	br	200ebb0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 200ebac:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200ebb0:	e037883a 	mov	sp,fp
 200ebb4:	dfc00117 	ldw	ra,4(sp)
 200ebb8:	df000017 	ldw	fp,0(sp)
 200ebbc:	dec00204 	addi	sp,sp,8
 200ebc0:	f800283a 	ret

0200ebc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200ebc4:	defff804 	addi	sp,sp,-32
 200ebc8:	dfc00715 	stw	ra,28(sp)
 200ebcc:	df000615 	stw	fp,24(sp)
 200ebd0:	df000604 	addi	fp,sp,24
 200ebd4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200ebd8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 200ebdc:	d0a72043 	ldbu	r2,-25471(gp)
 200ebe0:	10803fcc 	andi	r2,r2,255
 200ebe4:	10800060 	cmpeqi	r2,r2,1
 200ebe8:	10002326 	beq	r2,zero,200ec78 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ebec:	0005303a 	rdctl	r2,status
 200ebf0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ebf4:	e0fffe17 	ldw	r3,-8(fp)
 200ebf8:	00bfff84 	movi	r2,-2
 200ebfc:	1884703a 	and	r2,r3,r2
 200ec00:	1001703a 	wrctl	status,r2
  
  return context;
 200ec04:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 200ec08:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 200ec0c:	d0a71e17 	ldw	r2,-25480(gp)
 200ec10:	1000051e 	bne	r2,zero,200ec28 <__malloc_unlock+0x64>
 200ec14:	e0bffa17 	ldw	r2,-24(fp)
 200ec18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ec1c:	e0bffb17 	ldw	r2,-20(fp)
 200ec20:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 200ec24:	00001506 	br	200ec7c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 200ec28:	d0a71e17 	ldw	r2,-25480(gp)
 200ec2c:	10bfffc4 	addi	r2,r2,-1
 200ec30:	d0a71e15 	stw	r2,-25480(gp)
 200ec34:	d0a71e17 	ldw	r2,-25480(gp)
 200ec38:	10000a1e 	bne	r2,zero,200ec64 <__malloc_unlock+0xa0>
  {
    lockid = -1;
 200ec3c:	00bfffc4 	movi	r2,-1
 200ec40:	d0a00f15 	stw	r2,-32708(gp)
 200ec44:	e0bffa17 	ldw	r2,-24(fp)
 200ec48:	e0bffc15 	stw	r2,-16(fp)
 200ec4c:	e0bffc17 	ldw	r2,-16(fp)
 200ec50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 200ec54:	d0a71f17 	ldw	r2,-25476(gp)
 200ec58:	1009883a 	mov	r4,r2
 200ec5c:	2014fb40 	call	2014fb4 <OSSemPost>
 200ec60:	00000606 	br	200ec7c <__malloc_unlock+0xb8>
 200ec64:	e0bffa17 	ldw	r2,-24(fp)
 200ec68:	e0bffd15 	stw	r2,-12(fp)
 200ec6c:	e0bffd17 	ldw	r2,-12(fp)
 200ec70:	1001703a 	wrctl	status,r2
 200ec74:	00000106 	br	200ec7c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 200ec78:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200ec7c:	e037883a 	mov	sp,fp
 200ec80:	dfc00117 	ldw	ra,4(sp)
 200ec84:	df000017 	ldw	fp,0(sp)
 200ec88:	dec00204 	addi	sp,sp,8
 200ec8c:	f800283a 	ret

0200ec90 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 200ec90:	defff704 	addi	sp,sp,-36
 200ec94:	dfc00815 	stw	ra,32(sp)
 200ec98:	df000715 	stw	fp,28(sp)
 200ec9c:	df000704 	addi	fp,sp,28
 200eca0:	e13ffd15 	stw	r4,-12(fp)
 200eca4:	e17ffe15 	stw	r5,-8(fp)
 200eca8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200ecac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200ecb0:	e0bfff17 	ldw	r2,-4(fp)
 200ecb4:	1000021e 	bne	r2,zero,200ecc0 <OSEventNameGet+0x30>
        return (0);
 200ecb8:	0005883a 	mov	r2,zero
 200ecbc:	00003706 	br	200ed9c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 200ecc0:	e0bffd17 	ldw	r2,-12(fp)
 200ecc4:	1000051e 	bne	r2,zero,200ecdc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 200ecc8:	e0bfff17 	ldw	r2,-4(fp)
 200eccc:	00c00104 	movi	r3,4
 200ecd0:	10c00005 	stb	r3,0(r2)
        return (0);
 200ecd4:	0005883a 	mov	r2,zero
 200ecd8:	00003006 	br	200ed9c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200ecdc:	e0bffe17 	ldw	r2,-8(fp)
 200ece0:	1000051e 	bne	r2,zero,200ecf8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 200ece4:	e0bfff17 	ldw	r2,-4(fp)
 200ece8:	00c00304 	movi	r3,12
 200ecec:	10c00005 	stb	r3,0(r2)
        return (0);
 200ecf0:	0005883a 	mov	r2,zero
 200ecf4:	00002906 	br	200ed9c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200ecf8:	d0a72e03 	ldbu	r2,-25416(gp)
 200ecfc:	10803fcc 	andi	r2,r2,255
 200ed00:	10000526 	beq	r2,zero,200ed18 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 200ed04:	e0bfff17 	ldw	r2,-4(fp)
 200ed08:	00c00444 	movi	r3,17
 200ed0c:	10c00005 	stb	r3,0(r2)
        return (0);
 200ed10:	0005883a 	mov	r2,zero
 200ed14:	00002106 	br	200ed9c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 200ed18:	e0bffd17 	ldw	r2,-12(fp)
 200ed1c:	10800003 	ldbu	r2,0(r2)
 200ed20:	10803fcc 	andi	r2,r2,255
 200ed24:	10bfffc4 	addi	r2,r2,-1
 200ed28:	10800128 	cmpgeui	r2,r2,4
 200ed2c:	10000526 	beq	r2,zero,200ed44 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 200ed30:	e0bfff17 	ldw	r2,-4(fp)
 200ed34:	00c00044 	movi	r3,1
 200ed38:	10c00005 	stb	r3,0(r2)
             return (0);
 200ed3c:	0005883a 	mov	r2,zero
 200ed40:	00001606 	br	200ed9c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 200ed44:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ed48:	0005303a 	rdctl	r2,status
 200ed4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ed50:	e0fffb17 	ldw	r3,-20(fp)
 200ed54:	00bfff84 	movi	r2,-2
 200ed58:	1884703a 	and	r2,r3,r2
 200ed5c:	1001703a 	wrctl	status,r2
  
  return context;
 200ed60:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 200ed64:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 200ed68:	e0bffd17 	ldw	r2,-12(fp)
 200ed6c:	10800384 	addi	r2,r2,14
 200ed70:	100b883a 	mov	r5,r2
 200ed74:	e13ffe17 	ldw	r4,-8(fp)
 200ed78:	20107140 	call	2010714 <OS_StrCopy>
 200ed7c:	e0bffa05 	stb	r2,-24(fp)
 200ed80:	e0bff917 	ldw	r2,-28(fp)
 200ed84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ed88:	e0bffc17 	ldw	r2,-16(fp)
 200ed8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200ed90:	e0bfff17 	ldw	r2,-4(fp)
 200ed94:	10000005 	stb	zero,0(r2)
    return (len);
 200ed98:	e0bffa03 	ldbu	r2,-24(fp)
}
 200ed9c:	e037883a 	mov	sp,fp
 200eda0:	dfc00117 	ldw	ra,4(sp)
 200eda4:	df000017 	ldw	fp,0(sp)
 200eda8:	dec00204 	addi	sp,sp,8
 200edac:	f800283a 	ret

0200edb0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 200edb0:	defff604 	addi	sp,sp,-40
 200edb4:	dfc00915 	stw	ra,36(sp)
 200edb8:	df000815 	stw	fp,32(sp)
 200edbc:	df000804 	addi	fp,sp,32
 200edc0:	e13ffd15 	stw	r4,-12(fp)
 200edc4:	e17ffe15 	stw	r5,-8(fp)
 200edc8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200edcc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200edd0:	e0bfff17 	ldw	r2,-4(fp)
 200edd4:	10004026 	beq	r2,zero,200eed8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 200edd8:	e0bffd17 	ldw	r2,-12(fp)
 200eddc:	1000041e 	bne	r2,zero,200edf0 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 200ede0:	e0bfff17 	ldw	r2,-4(fp)
 200ede4:	00c00104 	movi	r3,4
 200ede8:	10c00005 	stb	r3,0(r2)
        return;
 200edec:	00003b06 	br	200eedc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200edf0:	e0bffe17 	ldw	r2,-8(fp)
 200edf4:	1000041e 	bne	r2,zero,200ee08 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 200edf8:	e0bfff17 	ldw	r2,-4(fp)
 200edfc:	00c00304 	movi	r3,12
 200ee00:	10c00005 	stb	r3,0(r2)
        return;
 200ee04:	00003506 	br	200eedc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200ee08:	d0a72e03 	ldbu	r2,-25416(gp)
 200ee0c:	10803fcc 	andi	r2,r2,255
 200ee10:	10000426 	beq	r2,zero,200ee24 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 200ee14:	e0bfff17 	ldw	r2,-4(fp)
 200ee18:	00c00484 	movi	r3,18
 200ee1c:	10c00005 	stb	r3,0(r2)
        return;
 200ee20:	00002e06 	br	200eedc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 200ee24:	e0bffd17 	ldw	r2,-12(fp)
 200ee28:	10800003 	ldbu	r2,0(r2)
 200ee2c:	10803fcc 	andi	r2,r2,255
 200ee30:	10bfffc4 	addi	r2,r2,-1
 200ee34:	10800128 	cmpgeui	r2,r2,4
 200ee38:	10000426 	beq	r2,zero,200ee4c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 200ee3c:	e0bfff17 	ldw	r2,-4(fp)
 200ee40:	00c00044 	movi	r3,1
 200ee44:	10c00005 	stb	r3,0(r2)
             return;
 200ee48:	00002406 	br	200eedc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 200ee4c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ee50:	0005303a 	rdctl	r2,status
 200ee54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ee58:	e0fffc17 	ldw	r3,-16(fp)
 200ee5c:	00bfff84 	movi	r2,-2
 200ee60:	1884703a 	and	r2,r3,r2
 200ee64:	1001703a 	wrctl	status,r2
  
  return context;
 200ee68:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 200ee6c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 200ee70:	e13ffe17 	ldw	r4,-8(fp)
 200ee74:	20107880 	call	2010788 <OS_StrLen>
 200ee78:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 200ee7c:	e0bffa03 	ldbu	r2,-24(fp)
 200ee80:	10800830 	cmpltui	r2,r2,32
 200ee84:	1000081e 	bne	r2,zero,200eea8 <OSEventNameSet+0xf8>
 200ee88:	e0bff817 	ldw	r2,-32(fp)
 200ee8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ee90:	e0bff917 	ldw	r2,-28(fp)
 200ee94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 200ee98:	e0bfff17 	ldw	r2,-4(fp)
 200ee9c:	00c002c4 	movi	r3,11
 200eea0:	10c00005 	stb	r3,0(r2)
        return;
 200eea4:	00000d06 	br	200eedc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 200eea8:	e0bffd17 	ldw	r2,-12(fp)
 200eeac:	10800384 	addi	r2,r2,14
 200eeb0:	e17ffe17 	ldw	r5,-8(fp)
 200eeb4:	1009883a 	mov	r4,r2
 200eeb8:	20107140 	call	2010714 <OS_StrCopy>
 200eebc:	e0bff817 	ldw	r2,-32(fp)
 200eec0:	e0bffb15 	stw	r2,-20(fp)
 200eec4:	e0bffb17 	ldw	r2,-20(fp)
 200eec8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200eecc:	e0bfff17 	ldw	r2,-4(fp)
 200eed0:	10000005 	stb	zero,0(r2)
 200eed4:	00000106 	br	200eedc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 200eed8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 200eedc:	e037883a 	mov	sp,fp
 200eee0:	dfc00117 	ldw	ra,4(sp)
 200eee4:	df000017 	ldw	fp,0(sp)
 200eee8:	dec00204 	addi	sp,sp,8
 200eeec:	f800283a 	ret

0200eef0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 200eef0:	deffed04 	addi	sp,sp,-76
 200eef4:	dfc01215 	stw	ra,72(sp)
 200eef8:	df001115 	stw	fp,68(sp)
 200eefc:	df001104 	addi	fp,sp,68
 200ef00:	e13ffc15 	stw	r4,-16(fp)
 200ef04:	e17ffd15 	stw	r5,-12(fp)
 200ef08:	e1bffe15 	stw	r6,-8(fp)
 200ef0c:	3805883a 	mov	r2,r7
 200ef10:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 200ef14:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 200ef18:	e0800217 	ldw	r2,8(fp)
 200ef1c:	1000021e 	bne	r2,zero,200ef28 <OSEventPendMulti+0x38>
        return (0);
 200ef20:	0005883a 	mov	r2,zero
 200ef24:	00017106 	br	200f4ec <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 200ef28:	e0bffc17 	ldw	r2,-16(fp)
 200ef2c:	1000051e 	bne	r2,zero,200ef44 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 200ef30:	e0800217 	ldw	r2,8(fp)
 200ef34:	00c00104 	movi	r3,4
 200ef38:	10c00005 	stb	r3,0(r2)
        return (0);
 200ef3c:	0005883a 	mov	r2,zero
 200ef40:	00016a06 	br	200f4ec <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 200ef44:	e0bffd17 	ldw	r2,-12(fp)
 200ef48:	1000051e 	bne	r2,zero,200ef60 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 200ef4c:	e0800217 	ldw	r2,8(fp)
 200ef50:	00c00104 	movi	r3,4
 200ef54:	10c00005 	stb	r3,0(r2)
        return (0);
 200ef58:	0005883a 	mov	r2,zero
 200ef5c:	00016306 	br	200f4ec <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 200ef60:	e0bffe17 	ldw	r2,-8(fp)
 200ef64:	1000051e 	bne	r2,zero,200ef7c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 200ef68:	e0800217 	ldw	r2,8(fp)
 200ef6c:	00c00104 	movi	r3,4
 200ef70:	10c00005 	stb	r3,0(r2)
        return (0);
 200ef74:	0005883a 	mov	r2,zero
 200ef78:	00015c06 	br	200f4ec <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 200ef7c:	e0bffd17 	ldw	r2,-12(fp)
 200ef80:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 200ef84:	e0bffc17 	ldw	r2,-16(fp)
 200ef88:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 200ef8c:	e0bfef17 	ldw	r2,-68(fp)
 200ef90:	10800017 	ldw	r2,0(r2)
 200ef94:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 200ef98:	00001906 	br	200f000 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 200ef9c:	e0bff017 	ldw	r2,-64(fp)
 200efa0:	10800003 	ldbu	r2,0(r2)
 200efa4:	10803fcc 	andi	r2,r2,255
 200efa8:	10c000a0 	cmpeqi	r3,r2,2
 200efac:	1800091e 	bne	r3,zero,200efd4 <OSEventPendMulti+0xe4>
 200efb0:	10c000e0 	cmpeqi	r3,r2,3
 200efb4:	1800091e 	bne	r3,zero,200efdc <OSEventPendMulti+0xec>
 200efb8:	10800060 	cmpeqi	r2,r2,1
 200efbc:	1000091e 	bne	r2,zero,200efe4 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 200efc0:	e0800217 	ldw	r2,8(fp)
 200efc4:	00c00044 	movi	r3,1
 200efc8:	10c00005 	stb	r3,0(r2)
                 return (0);
 200efcc:	0005883a 	mov	r2,zero
 200efd0:	00014606 	br	200f4ec <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 200efd4:	0001883a 	nop
 200efd8:	00000306 	br	200efe8 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 200efdc:	0001883a 	nop
 200efe0:	00000106 	br	200efe8 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 200efe4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 200efe8:	e0bfef17 	ldw	r2,-68(fp)
 200efec:	10800104 	addi	r2,r2,4
 200eff0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 200eff4:	e0bfef17 	ldw	r2,-68(fp)
 200eff8:	10800017 	ldw	r2,0(r2)
 200effc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 200f000:	e0bff017 	ldw	r2,-64(fp)
 200f004:	103fe51e 	bne	r2,zero,200ef9c <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 200f008:	d0a72e03 	ldbu	r2,-25416(gp)
 200f00c:	10803fcc 	andi	r2,r2,255
 200f010:	10000526 	beq	r2,zero,200f028 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 200f014:	e0800217 	ldw	r2,8(fp)
 200f018:	00c00084 	movi	r3,2
 200f01c:	10c00005 	stb	r3,0(r2)
        return (0);
 200f020:	0005883a 	mov	r2,zero
 200f024:	00013106 	br	200f4ec <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 200f028:	d0a72003 	ldbu	r2,-25472(gp)
 200f02c:	10803fcc 	andi	r2,r2,255
 200f030:	10000526 	beq	r2,zero,200f048 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 200f034:	e0800217 	ldw	r2,8(fp)
 200f038:	00c00344 	movi	r3,13
 200f03c:	10c00005 	stb	r3,0(r2)
        return (0);
 200f040:	0005883a 	mov	r2,zero
 200f044:	00012906 	br	200f4ec <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f048:	0005303a 	rdctl	r2,status
 200f04c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f050:	e0fffb17 	ldw	r3,-20(fp)
 200f054:	00bfff84 	movi	r2,-2
 200f058:	1884703a 	and	r2,r3,r2
 200f05c:	1001703a 	wrctl	status,r2
  
  return context;
 200f060:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 200f064:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 200f068:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 200f06c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 200f070:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 200f074:	e0bffc17 	ldw	r2,-16(fp)
 200f078:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 200f07c:	e0bfef17 	ldw	r2,-68(fp)
 200f080:	10800017 	ldw	r2,0(r2)
 200f084:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 200f088:	00008106 	br	200f290 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 200f08c:	e0bff017 	ldw	r2,-64(fp)
 200f090:	10800003 	ldbu	r2,0(r2)
 200f094:	10803fcc 	andi	r2,r2,255
 200f098:	10c000a0 	cmpeqi	r3,r2,2
 200f09c:	18003c1e 	bne	r3,zero,200f190 <OSEventPendMulti+0x2a0>
 200f0a0:	10c000e0 	cmpeqi	r3,r2,3
 200f0a4:	1800031e 	bne	r3,zero,200f0b4 <OSEventPendMulti+0x1c4>
 200f0a8:	10800060 	cmpeqi	r2,r2,1
 200f0ac:	10001e1e 	bne	r2,zero,200f128 <OSEventPendMulti+0x238>
 200f0b0:	00006606 	br	200f24c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 200f0b4:	e0bff017 	ldw	r2,-64(fp)
 200f0b8:	1080020b 	ldhu	r2,8(r2)
 200f0bc:	10bfffcc 	andi	r2,r2,65535
 200f0c0:	10001526 	beq	r2,zero,200f118 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 200f0c4:	e0bff017 	ldw	r2,-64(fp)
 200f0c8:	1080020b 	ldhu	r2,8(r2)
 200f0cc:	10bfffc4 	addi	r2,r2,-1
 200f0d0:	1007883a 	mov	r3,r2
 200f0d4:	e0bff017 	ldw	r2,-64(fp)
 200f0d8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 200f0dc:	e0bffd17 	ldw	r2,-12(fp)
 200f0e0:	10c00104 	addi	r3,r2,4
 200f0e4:	e0fffd15 	stw	r3,-12(fp)
 200f0e8:	e0fff017 	ldw	r3,-64(fp)
 200f0ec:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 200f0f0:	00800044 	movi	r2,1
 200f0f4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 200f0f8:	e0bffe17 	ldw	r2,-8(fp)
 200f0fc:	10c00104 	addi	r3,r2,4
 200f100:	e0fffe15 	stw	r3,-8(fp)
 200f104:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 200f108:	e0bff18b 	ldhu	r2,-58(fp)
 200f10c:	10800044 	addi	r2,r2,1
 200f110:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 200f114:	00005806 	br	200f278 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 200f118:	e0bff203 	ldbu	r2,-56(fp)
 200f11c:	10800054 	ori	r2,r2,1
 200f120:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200f124:	00005406 	br	200f278 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 200f128:	e0bff017 	ldw	r2,-64(fp)
 200f12c:	10800117 	ldw	r2,4(r2)
 200f130:	10001326 	beq	r2,zero,200f180 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 200f134:	e0bffe17 	ldw	r2,-8(fp)
 200f138:	10c00104 	addi	r3,r2,4
 200f13c:	e0fffe15 	stw	r3,-8(fp)
 200f140:	e0fff017 	ldw	r3,-64(fp)
 200f144:	18c00117 	ldw	r3,4(r3)
 200f148:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 200f14c:	e0bff017 	ldw	r2,-64(fp)
 200f150:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 200f154:	e0bffd17 	ldw	r2,-12(fp)
 200f158:	10c00104 	addi	r3,r2,4
 200f15c:	e0fffd15 	stw	r3,-12(fp)
 200f160:	e0fff017 	ldw	r3,-64(fp)
 200f164:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 200f168:	00800044 	movi	r2,1
 200f16c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 200f170:	e0bff18b 	ldhu	r2,-58(fp)
 200f174:	10800044 	addi	r2,r2,1
 200f178:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 200f17c:	00003e06 	br	200f278 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 200f180:	e0bff203 	ldbu	r2,-56(fp)
 200f184:	10800094 	ori	r2,r2,2
 200f188:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200f18c:	00003a06 	br	200f278 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 200f190:	e0bff017 	ldw	r2,-64(fp)
 200f194:	10800117 	ldw	r2,4(r2)
 200f198:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 200f19c:	e0bff517 	ldw	r2,-44(fp)
 200f1a0:	1080058b 	ldhu	r2,22(r2)
 200f1a4:	10bfffcc 	andi	r2,r2,65535
 200f1a8:	10002426 	beq	r2,zero,200f23c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 200f1ac:	e0bffe17 	ldw	r2,-8(fp)
 200f1b0:	10c00104 	addi	r3,r2,4
 200f1b4:	e0fffe15 	stw	r3,-8(fp)
 200f1b8:	e0fff517 	ldw	r3,-44(fp)
 200f1bc:	18c00417 	ldw	r3,16(r3)
 200f1c0:	19400104 	addi	r5,r3,4
 200f1c4:	e13ff517 	ldw	r4,-44(fp)
 200f1c8:	21400415 	stw	r5,16(r4)
 200f1cc:	18c00017 	ldw	r3,0(r3)
 200f1d0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 200f1d4:	e0bff517 	ldw	r2,-44(fp)
 200f1d8:	10c00417 	ldw	r3,16(r2)
 200f1dc:	e0bff517 	ldw	r2,-44(fp)
 200f1e0:	10800217 	ldw	r2,8(r2)
 200f1e4:	1880041e 	bne	r3,r2,200f1f8 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 200f1e8:	e0bff517 	ldw	r2,-44(fp)
 200f1ec:	10c00117 	ldw	r3,4(r2)
 200f1f0:	e0bff517 	ldw	r2,-44(fp)
 200f1f4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 200f1f8:	e0bff517 	ldw	r2,-44(fp)
 200f1fc:	1080058b 	ldhu	r2,22(r2)
 200f200:	10bfffc4 	addi	r2,r2,-1
 200f204:	1007883a 	mov	r3,r2
 200f208:	e0bff517 	ldw	r2,-44(fp)
 200f20c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 200f210:	e0bffd17 	ldw	r2,-12(fp)
 200f214:	10c00104 	addi	r3,r2,4
 200f218:	e0fffd15 	stw	r3,-12(fp)
 200f21c:	e0fff017 	ldw	r3,-64(fp)
 200f220:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 200f224:	00800044 	movi	r2,1
 200f228:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 200f22c:	e0bff18b 	ldhu	r2,-58(fp)
 200f230:	10800044 	addi	r2,r2,1
 200f234:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 200f238:	00000f06 	br	200f278 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 200f23c:	e0bff203 	ldbu	r2,-56(fp)
 200f240:	10800114 	ori	r2,r2,4
 200f244:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 200f248:	00000b06 	br	200f278 <OSEventPendMulti+0x388>
 200f24c:	e0bff317 	ldw	r2,-52(fp)
 200f250:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f254:	e0bff417 	ldw	r2,-48(fp)
 200f258:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 200f25c:	e0bffd17 	ldw	r2,-12(fp)
 200f260:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 200f264:	e0800217 	ldw	r2,8(fp)
 200f268:	00c00044 	movi	r3,1
 200f26c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 200f270:	e0bff18b 	ldhu	r2,-58(fp)
 200f274:	00009d06 	br	200f4ec <OSEventPendMulti+0x5fc>
        }
        pevents++;
 200f278:	e0bfef17 	ldw	r2,-68(fp)
 200f27c:	10800104 	addi	r2,r2,4
 200f280:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 200f284:	e0bfef17 	ldw	r2,-68(fp)
 200f288:	10800017 	ldw	r2,0(r2)
 200f28c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 200f290:	e0bff017 	ldw	r2,-64(fp)
 200f294:	103f7d1e 	bne	r2,zero,200f08c <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 200f298:	e0bff103 	ldbu	r2,-60(fp)
 200f29c:	10800058 	cmpnei	r2,r2,1
 200f2a0:	10000a1e 	bne	r2,zero,200f2cc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 200f2a4:	e0bffd17 	ldw	r2,-12(fp)
 200f2a8:	10000015 	stw	zero,0(r2)
 200f2ac:	e0bff317 	ldw	r2,-52(fp)
 200f2b0:	e0bff615 	stw	r2,-40(fp)
 200f2b4:	e0bff617 	ldw	r2,-40(fp)
 200f2b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 200f2bc:	e0800217 	ldw	r2,8(fp)
 200f2c0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 200f2c4:	e0bff18b 	ldhu	r2,-58(fp)
 200f2c8:	00008806 	br	200f4ec <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 200f2cc:	d0a72f17 	ldw	r2,-25412(gp)
 200f2d0:	d0e72f17 	ldw	r3,-25412(gp)
 200f2d4:	19000c03 	ldbu	r4,48(r3)
 200f2d8:	e0fff203 	ldbu	r3,-56(fp)
 200f2dc:	20c6b03a 	or	r3,r4,r3
 200f2e0:	1809883a 	mov	r4,r3
 200f2e4:	00ffe004 	movi	r3,-128
 200f2e8:	20c6b03a 	or	r3,r4,r3
 200f2ec:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 200f2f0:	d0a72f17 	ldw	r2,-25412(gp)
 200f2f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 200f2f8:	d0a72f17 	ldw	r2,-25412(gp)
 200f2fc:	e0ffff0b 	ldhu	r3,-4(fp)
 200f300:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 200f304:	e13ffc17 	ldw	r4,-16(fp)
 200f308:	200fe2c0 	call	200fe2c <OS_EventTaskWaitMulti>
 200f30c:	e0bff317 	ldw	r2,-52(fp)
 200f310:	e0bff915 	stw	r2,-28(fp)
 200f314:	e0bff917 	ldw	r2,-28(fp)
 200f318:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 200f31c:	20105d00 	call	20105d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f320:	0005303a 	rdctl	r2,status
 200f324:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f328:	e0fff717 	ldw	r3,-36(fp)
 200f32c:	00bfff84 	movi	r2,-2
 200f330:	1884703a 	and	r2,r3,r2
 200f334:	1001703a 	wrctl	status,r2
  
  return context;
 200f338:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 200f33c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 200f340:	d0a72f17 	ldw	r2,-25412(gp)
 200f344:	10800c43 	ldbu	r2,49(r2)
 200f348:	10803fcc 	andi	r2,r2,255
 200f34c:	10000226 	beq	r2,zero,200f358 <OSEventPendMulti+0x468>
 200f350:	108000a0 	cmpeqi	r2,r2,2
 200f354:	10001826 	beq	r2,zero,200f3b8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 200f358:	d0a72f17 	ldw	r2,-25412(gp)
 200f35c:	10800717 	ldw	r2,28(r2)
 200f360:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 200f364:	e0bff017 	ldw	r2,-64(fp)
 200f368:	10000b26 	beq	r2,zero,200f398 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 200f36c:	e0bffd17 	ldw	r2,-12(fp)
 200f370:	10c00104 	addi	r3,r2,4
 200f374:	e0fffd15 	stw	r3,-12(fp)
 200f378:	e0fff017 	ldw	r3,-64(fp)
 200f37c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 200f380:	e0bffd17 	ldw	r2,-12(fp)
 200f384:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 200f388:	e0bff18b 	ldhu	r2,-58(fp)
 200f38c:	10800044 	addi	r2,r2,1
 200f390:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 200f394:	00000d06 	br	200f3cc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 200f398:	d0a72f17 	ldw	r2,-25412(gp)
 200f39c:	00c00044 	movi	r3,1
 200f3a0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 200f3a4:	d0a72f17 	ldw	r2,-25412(gp)
 200f3a8:	e17ffc17 	ldw	r5,-16(fp)
 200f3ac:	1009883a 	mov	r4,r2
 200f3b0:	20100340 	call	2010034 <OS_EventTaskRemoveMulti>
             }
			 break;
 200f3b4:	00000506 	br	200f3cc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 200f3b8:	d0a72f17 	ldw	r2,-25412(gp)
 200f3bc:	e17ffc17 	ldw	r5,-16(fp)
 200f3c0:	1009883a 	mov	r4,r2
 200f3c4:	20100340 	call	2010034 <OS_EventTaskRemoveMulti>
             break;
 200f3c8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 200f3cc:	d0a72f17 	ldw	r2,-25412(gp)
 200f3d0:	10800c43 	ldbu	r2,49(r2)
 200f3d4:	10803fcc 	andi	r2,r2,255
 200f3d8:	10000326 	beq	r2,zero,200f3e8 <OSEventPendMulti+0x4f8>
 200f3dc:	108000a0 	cmpeqi	r2,r2,2
 200f3e0:	1000231e 	bne	r2,zero,200f470 <OSEventPendMulti+0x580>
 200f3e4:	00002a06 	br	200f490 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 200f3e8:	e0bff017 	ldw	r2,-64(fp)
 200f3ec:	10800003 	ldbu	r2,0(r2)
 200f3f0:	10803fcc 	andi	r2,r2,255
 200f3f4:	0080100e 	bge	zero,r2,200f438 <OSEventPendMulti+0x548>
 200f3f8:	10c000d0 	cmplti	r3,r2,3
 200f3fc:	1800071e 	bne	r3,zero,200f41c <OSEventPendMulti+0x52c>
 200f400:	108000e0 	cmpeqi	r2,r2,3
 200f404:	10000c26 	beq	r2,zero,200f438 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 200f408:	e0bffe17 	ldw	r2,-8(fp)
 200f40c:	10c00104 	addi	r3,r2,4
 200f410:	e0fffe15 	stw	r3,-8(fp)
 200f414:	10000015 	stw	zero,0(r2)
                      break;
 200f418:	00001206 	br	200f464 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 200f41c:	e0bffe17 	ldw	r2,-8(fp)
 200f420:	10c00104 	addi	r3,r2,4
 200f424:	e0fffe15 	stw	r3,-8(fp)
 200f428:	d0e72f17 	ldw	r3,-25412(gp)
 200f42c:	18c00917 	ldw	r3,36(r3)
 200f430:	10c00015 	stw	r3,0(r2)
                      break;
 200f434:	00000b06 	br	200f464 <OSEventPendMulti+0x574>
 200f438:	e0bff317 	ldw	r2,-52(fp)
 200f43c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f440:	e0bff817 	ldw	r2,-32(fp)
 200f444:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 200f448:	e0bffd17 	ldw	r2,-12(fp)
 200f44c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 200f450:	e0800217 	ldw	r2,8(fp)
 200f454:	00c00044 	movi	r3,1
 200f458:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 200f45c:	e0bff18b 	ldhu	r2,-58(fp)
 200f460:	00002206 	br	200f4ec <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 200f464:	e0800217 	ldw	r2,8(fp)
 200f468:	10000005 	stb	zero,0(r2)
             break;
 200f46c:	00001006 	br	200f4b0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 200f470:	e0bffe17 	ldw	r2,-8(fp)
 200f474:	10c00104 	addi	r3,r2,4
 200f478:	e0fffe15 	stw	r3,-8(fp)
 200f47c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 200f480:	e0800217 	ldw	r2,8(fp)
 200f484:	00c00384 	movi	r3,14
 200f488:	10c00005 	stb	r3,0(r2)
             break;
 200f48c:	00000806 	br	200f4b0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 200f490:	e0bffe17 	ldw	r2,-8(fp)
 200f494:	10c00104 	addi	r3,r2,4
 200f498:	e0fffe15 	stw	r3,-8(fp)
 200f49c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 200f4a0:	e0800217 	ldw	r2,8(fp)
 200f4a4:	00c00284 	movi	r3,10
 200f4a8:	10c00005 	stb	r3,0(r2)
             break;
 200f4ac:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 200f4b0:	d0a72f17 	ldw	r2,-25412(gp)
 200f4b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 200f4b8:	d0a72f17 	ldw	r2,-25412(gp)
 200f4bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 200f4c0:	d0a72f17 	ldw	r2,-25412(gp)
 200f4c4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 200f4c8:	d0a72f17 	ldw	r2,-25412(gp)
 200f4cc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 200f4d0:	d0a72f17 	ldw	r2,-25412(gp)
 200f4d4:	10000915 	stw	zero,36(r2)
 200f4d8:	e0bff317 	ldw	r2,-52(fp)
 200f4dc:	e0bffa15 	stw	r2,-24(fp)
 200f4e0:	e0bffa17 	ldw	r2,-24(fp)
 200f4e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 200f4e8:	e0bff18b 	ldhu	r2,-58(fp)
}
 200f4ec:	e037883a 	mov	sp,fp
 200f4f0:	dfc00117 	ldw	ra,4(sp)
 200f4f4:	df000017 	ldw	fp,0(sp)
 200f4f8:	dec00204 	addi	sp,sp,8
 200f4fc:	f800283a 	ret

0200f500 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 200f500:	defffe04 	addi	sp,sp,-8
 200f504:	dfc00115 	stw	ra,4(sp)
 200f508:	df000015 	stw	fp,0(sp)
 200f50c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 200f510:	2018c680 	call	2018c68 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 200f514:	201027c0 	call	201027c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 200f518:	20102c40 	call	20102c4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 200f51c:	20104300 	call	2010430 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 200f520:	201019c0 	call	201019c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 200f524:	20122d00 	call	20122d0 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 200f528:	20136980 	call	2013698 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 200f52c:	20147cc0 	call	20147cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 200f530:	20103300 	call	2010330 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 200f534:	20103b00 	call	20103b0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 200f538:	2018c880 	call	2018c88 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 200f53c:	2010ca40 	call	2010ca4 <OSDebugInit>
#endif
}
 200f540:	0001883a 	nop
 200f544:	e037883a 	mov	sp,fp
 200f548:	dfc00117 	ldw	ra,4(sp)
 200f54c:	df000017 	ldw	fp,0(sp)
 200f550:	dec00204 	addi	sp,sp,8
 200f554:	f800283a 	ret

0200f558 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 200f558:	deffff04 	addi	sp,sp,-4
 200f55c:	df000015 	stw	fp,0(sp)
 200f560:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 200f564:	d0a72043 	ldbu	r2,-25471(gp)
 200f568:	10803fcc 	andi	r2,r2,255
 200f56c:	10800058 	cmpnei	r2,r2,1
 200f570:	1000071e 	bne	r2,zero,200f590 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 200f574:	d0a72e03 	ldbu	r2,-25416(gp)
 200f578:	10803fcc 	andi	r2,r2,255
 200f57c:	10803fe0 	cmpeqi	r2,r2,255
 200f580:	1000031e 	bne	r2,zero,200f590 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 200f584:	d0a72e03 	ldbu	r2,-25416(gp)
 200f588:	10800044 	addi	r2,r2,1
 200f58c:	d0a72e05 	stb	r2,-25416(gp)
        }
    }
}
 200f590:	0001883a 	nop
 200f594:	e037883a 	mov	sp,fp
 200f598:	df000017 	ldw	fp,0(sp)
 200f59c:	dec00104 	addi	sp,sp,4
 200f5a0:	f800283a 	ret

0200f5a4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 200f5a4:	defffb04 	addi	sp,sp,-20
 200f5a8:	dfc00415 	stw	ra,16(sp)
 200f5ac:	df000315 	stw	fp,12(sp)
 200f5b0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200f5b4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 200f5b8:	d0a72043 	ldbu	r2,-25471(gp)
 200f5bc:	10803fcc 	andi	r2,r2,255
 200f5c0:	10800058 	cmpnei	r2,r2,1
 200f5c4:	10002f1e 	bne	r2,zero,200f684 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f5c8:	0005303a 	rdctl	r2,status
 200f5cc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f5d0:	e0ffff17 	ldw	r3,-4(fp)
 200f5d4:	00bfff84 	movi	r2,-2
 200f5d8:	1884703a 	and	r2,r3,r2
 200f5dc:	1001703a 	wrctl	status,r2
  
  return context;
 200f5e0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 200f5e4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 200f5e8:	d0a72e03 	ldbu	r2,-25416(gp)
 200f5ec:	10803fcc 	andi	r2,r2,255
 200f5f0:	10000326 	beq	r2,zero,200f600 <OSIntExit+0x5c>
            OSIntNesting--;
 200f5f4:	d0a72e03 	ldbu	r2,-25416(gp)
 200f5f8:	10bfffc4 	addi	r2,r2,-1
 200f5fc:	d0a72e05 	stb	r2,-25416(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 200f600:	d0a72e03 	ldbu	r2,-25416(gp)
 200f604:	10803fcc 	andi	r2,r2,255
 200f608:	10001a1e 	bne	r2,zero,200f674 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 200f60c:	d0a72003 	ldbu	r2,-25472(gp)
 200f610:	10803fcc 	andi	r2,r2,255
 200f614:	1000171e 	bne	r2,zero,200f674 <OSIntExit+0xd0>
                OS_SchedNew();
 200f618:	20106a00 	call	20106a0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 200f61c:	d0e72203 	ldbu	r3,-25464(gp)
 200f620:	d0a72243 	ldbu	r2,-25463(gp)
 200f624:	18c03fcc 	andi	r3,r3,255
 200f628:	10803fcc 	andi	r2,r2,255
 200f62c:	18801126 	beq	r3,r2,200f674 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 200f630:	d0a72203 	ldbu	r2,-25464(gp)
 200f634:	10c03fcc 	andi	r3,r2,255
 200f638:	008080b4 	movhi	r2,514
 200f63c:	10906f04 	addi	r2,r2,16828
 200f640:	18c7883a 	add	r3,r3,r3
 200f644:	18c7883a 	add	r3,r3,r3
 200f648:	10c5883a 	add	r2,r2,r3
 200f64c:	10800017 	ldw	r2,0(r2)
 200f650:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 200f654:	d0a72a17 	ldw	r2,-25432(gp)
 200f658:	10c00e17 	ldw	r3,56(r2)
 200f65c:	18c00044 	addi	r3,r3,1
 200f660:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 200f664:	d0a72517 	ldw	r2,-25452(gp)
 200f668:	10800044 	addi	r2,r2,1
 200f66c:	d0a72515 	stw	r2,-25452(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 200f670:	20189940 	call	2018994 <OSCtxSw>
 200f674:	e0bffd17 	ldw	r2,-12(fp)
 200f678:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f67c:	e0bffe17 	ldw	r2,-8(fp)
 200f680:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 200f684:	0001883a 	nop
 200f688:	e037883a 	mov	sp,fp
 200f68c:	dfc00117 	ldw	ra,4(sp)
 200f690:	df000017 	ldw	fp,0(sp)
 200f694:	dec00204 	addi	sp,sp,8
 200f698:	f800283a 	ret

0200f69c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 200f69c:	defffc04 	addi	sp,sp,-16
 200f6a0:	df000315 	stw	fp,12(sp)
 200f6a4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f6a8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 200f6ac:	d0a72043 	ldbu	r2,-25471(gp)
 200f6b0:	10803fcc 	andi	r2,r2,255
 200f6b4:	10800058 	cmpnei	r2,r2,1
 200f6b8:	1000161e 	bne	r2,zero,200f714 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f6bc:	0005303a 	rdctl	r2,status
 200f6c0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f6c4:	e0ffff17 	ldw	r3,-4(fp)
 200f6c8:	00bfff84 	movi	r2,-2
 200f6cc:	1884703a 	and	r2,r3,r2
 200f6d0:	1001703a 	wrctl	status,r2
  
  return context;
 200f6d4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 200f6d8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 200f6dc:	d0a72e03 	ldbu	r2,-25416(gp)
 200f6e0:	10803fcc 	andi	r2,r2,255
 200f6e4:	1000071e 	bne	r2,zero,200f704 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 200f6e8:	d0a72003 	ldbu	r2,-25472(gp)
 200f6ec:	10803fcc 	andi	r2,r2,255
 200f6f0:	10803fe0 	cmpeqi	r2,r2,255
 200f6f4:	1000031e 	bne	r2,zero,200f704 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 200f6f8:	d0a72003 	ldbu	r2,-25472(gp)
 200f6fc:	10800044 	addi	r2,r2,1
 200f700:	d0a72005 	stb	r2,-25472(gp)
 200f704:	e0bffd17 	ldw	r2,-12(fp)
 200f708:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f70c:	e0bffe17 	ldw	r2,-8(fp)
 200f710:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 200f714:	0001883a 	nop
 200f718:	e037883a 	mov	sp,fp
 200f71c:	df000017 	ldw	fp,0(sp)
 200f720:	dec00104 	addi	sp,sp,4
 200f724:	f800283a 	ret

0200f728 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 200f728:	defff804 	addi	sp,sp,-32
 200f72c:	dfc00715 	stw	ra,28(sp)
 200f730:	df000615 	stw	fp,24(sp)
 200f734:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200f738:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 200f73c:	d0a72043 	ldbu	r2,-25471(gp)
 200f740:	10803fcc 	andi	r2,r2,255
 200f744:	10800058 	cmpnei	r2,r2,1
 200f748:	1000281e 	bne	r2,zero,200f7ec <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f74c:	0005303a 	rdctl	r2,status
 200f750:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f754:	e0ffff17 	ldw	r3,-4(fp)
 200f758:	00bfff84 	movi	r2,-2
 200f75c:	1884703a 	and	r2,r3,r2
 200f760:	1001703a 	wrctl	status,r2
  
  return context;
 200f764:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 200f768:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 200f76c:	d0a72003 	ldbu	r2,-25472(gp)
 200f770:	10803fcc 	andi	r2,r2,255
 200f774:	10001926 	beq	r2,zero,200f7dc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 200f778:	d0a72003 	ldbu	r2,-25472(gp)
 200f77c:	10bfffc4 	addi	r2,r2,-1
 200f780:	d0a72005 	stb	r2,-25472(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 200f784:	d0a72003 	ldbu	r2,-25472(gp)
 200f788:	10803fcc 	andi	r2,r2,255
 200f78c:	10000e1e 	bne	r2,zero,200f7c8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 200f790:	d0a72e03 	ldbu	r2,-25416(gp)
 200f794:	10803fcc 	andi	r2,r2,255
 200f798:	1000061e 	bne	r2,zero,200f7b4 <OSSchedUnlock+0x8c>
 200f79c:	e0bffa17 	ldw	r2,-24(fp)
 200f7a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f7a4:	e0bffb17 	ldw	r2,-20(fp)
 200f7a8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 200f7ac:	20105d00 	call	20105d0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 200f7b0:	00000e06 	br	200f7ec <OSSchedUnlock+0xc4>
 200f7b4:	e0bffa17 	ldw	r2,-24(fp)
 200f7b8:	e0bffc15 	stw	r2,-16(fp)
 200f7bc:	e0bffc17 	ldw	r2,-16(fp)
 200f7c0:	1001703a 	wrctl	status,r2
 200f7c4:	00000906 	br	200f7ec <OSSchedUnlock+0xc4>
 200f7c8:	e0bffa17 	ldw	r2,-24(fp)
 200f7cc:	e0bffd15 	stw	r2,-12(fp)
 200f7d0:	e0bffd17 	ldw	r2,-12(fp)
 200f7d4:	1001703a 	wrctl	status,r2
 200f7d8:	00000406 	br	200f7ec <OSSchedUnlock+0xc4>
 200f7dc:	e0bffa17 	ldw	r2,-24(fp)
 200f7e0:	e0bffe15 	stw	r2,-8(fp)
 200f7e4:	e0bffe17 	ldw	r2,-8(fp)
 200f7e8:	1001703a 	wrctl	status,r2
 200f7ec:	0001883a 	nop
 200f7f0:	e037883a 	mov	sp,fp
 200f7f4:	dfc00117 	ldw	ra,4(sp)
 200f7f8:	df000017 	ldw	fp,0(sp)
 200f7fc:	dec00204 	addi	sp,sp,8
 200f800:	f800283a 	ret

0200f804 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 200f804:	defffe04 	addi	sp,sp,-8
 200f808:	dfc00115 	stw	ra,4(sp)
 200f80c:	df000015 	stw	fp,0(sp)
 200f810:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 200f814:	d0a72043 	ldbu	r2,-25471(gp)
 200f818:	10803fcc 	andi	r2,r2,255
 200f81c:	10000f1e 	bne	r2,zero,200f85c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 200f820:	20106a00 	call	20106a0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 200f824:	d0a72203 	ldbu	r2,-25464(gp)
 200f828:	d0a72245 	stb	r2,-25463(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 200f82c:	d0a72203 	ldbu	r2,-25464(gp)
 200f830:	10c03fcc 	andi	r3,r2,255
 200f834:	008080b4 	movhi	r2,514
 200f838:	10906f04 	addi	r2,r2,16828
 200f83c:	18c7883a 	add	r3,r3,r3
 200f840:	18c7883a 	add	r3,r3,r3
 200f844:	10c5883a 	add	r2,r2,r3
 200f848:	10800017 	ldw	r2,0(r2)
 200f84c:	d0a72a15 	stw	r2,-25432(gp)
        OSTCBCur      = OSTCBHighRdy;
 200f850:	d0a72a17 	ldw	r2,-25432(gp)
 200f854:	d0a72f15 	stw	r2,-25412(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 200f858:	2018a200 	call	2018a20 <OSStartHighRdy>
    }
}
 200f85c:	0001883a 	nop
 200f860:	e037883a 	mov	sp,fp
 200f864:	dfc00117 	ldw	ra,4(sp)
 200f868:	df000017 	ldw	fp,0(sp)
 200f86c:	dec00204 	addi	sp,sp,8
 200f870:	f800283a 	ret

0200f874 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 200f874:	defff904 	addi	sp,sp,-28
 200f878:	dfc00615 	stw	ra,24(sp)
 200f87c:	df000515 	stw	fp,20(sp)
 200f880:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f884:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 200f888:	01000084 	movi	r4,2
 200f88c:	2016a400 	call	2016a40 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f890:	0005303a 	rdctl	r2,status
 200f894:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f898:	e0fffc17 	ldw	r3,-16(fp)
 200f89c:	00bfff84 	movi	r2,-2
 200f8a0:	1884703a 	and	r2,r3,r2
 200f8a4:	1001703a 	wrctl	status,r2
  
  return context;
 200f8a8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 200f8ac:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 200f8b0:	d0272115 	stw	zero,-25468(gp)
 200f8b4:	e0bffb17 	ldw	r2,-20(fp)
 200f8b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f8bc:	e0bffd17 	ldw	r2,-12(fp)
 200f8c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 200f8c4:	01001904 	movi	r4,100
 200f8c8:	2016a400 	call	2016a40 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f8cc:	0005303a 	rdctl	r2,status
 200f8d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f8d4:	e0fffe17 	ldw	r3,-8(fp)
 200f8d8:	00bfff84 	movi	r2,-2
 200f8dc:	1884703a 	and	r2,r3,r2
 200f8e0:	1001703a 	wrctl	status,r2
  
  return context;
 200f8e4:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 200f8e8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 200f8ec:	d0a72117 	ldw	r2,-25468(gp)
 200f8f0:	d0a72615 	stw	r2,-25448(gp)
    OSStatRdy    = OS_TRUE;
 200f8f4:	00800044 	movi	r2,1
 200f8f8:	d0a73205 	stb	r2,-25400(gp)
 200f8fc:	e0bffb17 	ldw	r2,-20(fp)
 200f900:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f904:	e0bfff17 	ldw	r2,-4(fp)
 200f908:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 200f90c:	0001883a 	nop
 200f910:	e037883a 	mov	sp,fp
 200f914:	dfc00117 	ldw	ra,4(sp)
 200f918:	df000017 	ldw	fp,0(sp)
 200f91c:	dec00204 	addi	sp,sp,8
 200f920:	f800283a 	ret

0200f924 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 200f924:	defff704 	addi	sp,sp,-36
 200f928:	dfc00815 	stw	ra,32(sp)
 200f92c:	df000715 	stw	fp,28(sp)
 200f930:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 200f934:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 200f938:	2018c480 	call	2018c48 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f93c:	0005303a 	rdctl	r2,status
 200f940:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f944:	e0fffd17 	ldw	r3,-12(fp)
 200f948:	00bfff84 	movi	r2,-2
 200f94c:	1884703a 	and	r2,r3,r2
 200f950:	1001703a 	wrctl	status,r2
  
  return context;
 200f954:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 200f958:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 200f95c:	d0a73017 	ldw	r2,-25408(gp)
 200f960:	10800044 	addi	r2,r2,1
 200f964:	d0a73015 	stw	r2,-25408(gp)
 200f968:	e0bffb17 	ldw	r2,-20(fp)
 200f96c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f970:	e0bfff17 	ldw	r2,-4(fp)
 200f974:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 200f978:	d0a72043 	ldbu	r2,-25471(gp)
 200f97c:	10803fcc 	andi	r2,r2,255
 200f980:	10800058 	cmpnei	r2,r2,1
 200f984:	10006a1e 	bne	r2,zero,200fb30 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 200f988:	d0a72403 	ldbu	r2,-25456(gp)
 200f98c:	10803fcc 	andi	r2,r2,255
 200f990:	10c00060 	cmpeqi	r3,r2,1
 200f994:	1800061e 	bne	r3,zero,200f9b0 <OSTimeTick+0x8c>
 200f998:	10c000a0 	cmpeqi	r3,r2,2
 200f99c:	1800061e 	bne	r3,zero,200f9b8 <OSTimeTick+0x94>
 200f9a0:	10000a1e 	bne	r2,zero,200f9cc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 200f9a4:	00800044 	movi	r2,1
 200f9a8:	e0bffa05 	stb	r2,-24(fp)
                 break;
 200f9ac:	00000b06 	br	200f9dc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 200f9b0:	e03ffa05 	stb	zero,-24(fp)
                 break;
 200f9b4:	00000906 	br	200f9dc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 200f9b8:	00800044 	movi	r2,1
 200f9bc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 200f9c0:	00800044 	movi	r2,1
 200f9c4:	d0a72405 	stb	r2,-25456(gp)
                 break;
 200f9c8:	00000406 	br	200f9dc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 200f9cc:	00800044 	movi	r2,1
 200f9d0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 200f9d4:	d0272405 	stb	zero,-25456(gp)
                 break;
 200f9d8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 200f9dc:	e0bffa03 	ldbu	r2,-24(fp)
 200f9e0:	10005226 	beq	r2,zero,200fb2c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 200f9e4:	d0a72317 	ldw	r2,-25460(gp)
 200f9e8:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 200f9ec:	00004906 	br	200fb14 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f9f0:	0005303a 	rdctl	r2,status
 200f9f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f9f8:	e0fffc17 	ldw	r3,-16(fp)
 200f9fc:	00bfff84 	movi	r2,-2
 200fa00:	1884703a 	and	r2,r3,r2
 200fa04:	1001703a 	wrctl	status,r2
  
  return context;
 200fa08:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 200fa0c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 200fa10:	e0bff917 	ldw	r2,-28(fp)
 200fa14:	10800b8b 	ldhu	r2,46(r2)
 200fa18:	10bfffcc 	andi	r2,r2,65535
 200fa1c:	10003626 	beq	r2,zero,200faf8 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 200fa20:	e0bff917 	ldw	r2,-28(fp)
 200fa24:	10800b8b 	ldhu	r2,46(r2)
 200fa28:	10bfffc4 	addi	r2,r2,-1
 200fa2c:	1007883a 	mov	r3,r2
 200fa30:	e0bff917 	ldw	r2,-28(fp)
 200fa34:	10c00b8d 	sth	r3,46(r2)
 200fa38:	e0bff917 	ldw	r2,-28(fp)
 200fa3c:	10800b8b 	ldhu	r2,46(r2)
 200fa40:	10bfffcc 	andi	r2,r2,65535
 200fa44:	10002c1e 	bne	r2,zero,200faf8 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 200fa48:	e0bff917 	ldw	r2,-28(fp)
 200fa4c:	10800c03 	ldbu	r2,48(r2)
 200fa50:	10803fcc 	andi	r2,r2,255
 200fa54:	10800dcc 	andi	r2,r2,55
 200fa58:	10000b26 	beq	r2,zero,200fa88 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 200fa5c:	e0bff917 	ldw	r2,-28(fp)
 200fa60:	10c00c03 	ldbu	r3,48(r2)
 200fa64:	00bff204 	movi	r2,-56
 200fa68:	1884703a 	and	r2,r3,r2
 200fa6c:	1007883a 	mov	r3,r2
 200fa70:	e0bff917 	ldw	r2,-28(fp)
 200fa74:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 200fa78:	e0bff917 	ldw	r2,-28(fp)
 200fa7c:	00c00044 	movi	r3,1
 200fa80:	10c00c45 	stb	r3,49(r2)
 200fa84:	00000206 	br	200fa90 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 200fa88:	e0bff917 	ldw	r2,-28(fp)
 200fa8c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 200fa90:	e0bff917 	ldw	r2,-28(fp)
 200fa94:	10800c03 	ldbu	r2,48(r2)
 200fa98:	10803fcc 	andi	r2,r2,255
 200fa9c:	1080020c 	andi	r2,r2,8
 200faa0:	1000151e 	bne	r2,zero,200faf8 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 200faa4:	e0bff917 	ldw	r2,-28(fp)
 200faa8:	10c00d83 	ldbu	r3,54(r2)
 200faac:	d0a72c03 	ldbu	r2,-25424(gp)
 200fab0:	1884b03a 	or	r2,r3,r2
 200fab4:	d0a72c05 	stb	r2,-25424(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 200fab8:	e0bff917 	ldw	r2,-28(fp)
 200fabc:	10800d03 	ldbu	r2,52(r2)
 200fac0:	10c03fcc 	andi	r3,r2,255
 200fac4:	e0bff917 	ldw	r2,-28(fp)
 200fac8:	10800d03 	ldbu	r2,52(r2)
 200facc:	11003fcc 	andi	r4,r2,255
 200fad0:	d0a72c44 	addi	r2,gp,-25423
 200fad4:	2085883a 	add	r2,r4,r2
 200fad8:	11000003 	ldbu	r4,0(r2)
 200fadc:	e0bff917 	ldw	r2,-28(fp)
 200fae0:	10800d43 	ldbu	r2,53(r2)
 200fae4:	2084b03a 	or	r2,r4,r2
 200fae8:	1009883a 	mov	r4,r2
 200faec:	d0a72c44 	addi	r2,gp,-25423
 200faf0:	1885883a 	add	r2,r3,r2
 200faf4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 200faf8:	e0bff917 	ldw	r2,-28(fp)
 200fafc:	10800517 	ldw	r2,20(r2)
 200fb00:	e0bff915 	stw	r2,-28(fp)
 200fb04:	e0bffb17 	ldw	r2,-20(fp)
 200fb08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fb0c:	e0bffe17 	ldw	r2,-8(fp)
 200fb10:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 200fb14:	e0bff917 	ldw	r2,-28(fp)
 200fb18:	10800c83 	ldbu	r2,50(r2)
 200fb1c:	10803fcc 	andi	r2,r2,255
 200fb20:	10800518 	cmpnei	r2,r2,20
 200fb24:	103fb21e 	bne	r2,zero,200f9f0 <OSTimeTick+0xcc>
 200fb28:	00000106 	br	200fb30 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 200fb2c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 200fb30:	e037883a 	mov	sp,fp
 200fb34:	dfc00117 	ldw	ra,4(sp)
 200fb38:	df000017 	ldw	fp,0(sp)
 200fb3c:	dec00204 	addi	sp,sp,8
 200fb40:	f800283a 	ret

0200fb44 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 200fb44:	deffff04 	addi	sp,sp,-4
 200fb48:	df000015 	stw	fp,0(sp)
 200fb4c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 200fb50:	00804784 	movi	r2,286
}
 200fb54:	e037883a 	mov	sp,fp
 200fb58:	df000017 	ldw	fp,0(sp)
 200fb5c:	dec00104 	addi	sp,sp,4
 200fb60:	f800283a 	ret

0200fb64 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 200fb64:	deffff04 	addi	sp,sp,-4
 200fb68:	df000015 	stw	fp,0(sp)
 200fb6c:	d839883a 	mov	fp,sp
}
 200fb70:	0001883a 	nop
 200fb74:	e037883a 	mov	sp,fp
 200fb78:	df000017 	ldw	fp,0(sp)
 200fb7c:	dec00104 	addi	sp,sp,4
 200fb80:	f800283a 	ret

0200fb84 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 200fb84:	defff804 	addi	sp,sp,-32
 200fb88:	dfc00715 	stw	ra,28(sp)
 200fb8c:	df000615 	stw	fp,24(sp)
 200fb90:	df000604 	addi	fp,sp,24
 200fb94:	e13ffc15 	stw	r4,-16(fp)
 200fb98:	e17ffd15 	stw	r5,-12(fp)
 200fb9c:	3007883a 	mov	r3,r6
 200fba0:	3805883a 	mov	r2,r7
 200fba4:	e0fffe05 	stb	r3,-8(fp)
 200fba8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 200fbac:	e0bffc17 	ldw	r2,-16(fp)
 200fbb0:	10800283 	ldbu	r2,10(r2)
 200fbb4:	10c03fcc 	andi	r3,r2,255
 200fbb8:	008080b4 	movhi	r2,514
 200fbbc:	10a5be04 	addi	r2,r2,-26888
 200fbc0:	10c5883a 	add	r2,r2,r3
 200fbc4:	10800003 	ldbu	r2,0(r2)
 200fbc8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 200fbcc:	e0bffa03 	ldbu	r2,-24(fp)
 200fbd0:	e0fffc17 	ldw	r3,-16(fp)
 200fbd4:	1885883a 	add	r2,r3,r2
 200fbd8:	108002c4 	addi	r2,r2,11
 200fbdc:	10800003 	ldbu	r2,0(r2)
 200fbe0:	10c03fcc 	andi	r3,r2,255
 200fbe4:	008080b4 	movhi	r2,514
 200fbe8:	10a5be04 	addi	r2,r2,-26888
 200fbec:	10c5883a 	add	r2,r2,r3
 200fbf0:	10800003 	ldbu	r2,0(r2)
 200fbf4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 200fbf8:	e0bffa03 	ldbu	r2,-24(fp)
 200fbfc:	100490fa 	slli	r2,r2,3
 200fc00:	1007883a 	mov	r3,r2
 200fc04:	e0bffa43 	ldbu	r2,-23(fp)
 200fc08:	1885883a 	add	r2,r3,r2
 200fc0c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 200fc10:	e0fffa83 	ldbu	r3,-22(fp)
 200fc14:	008080b4 	movhi	r2,514
 200fc18:	10906f04 	addi	r2,r2,16828
 200fc1c:	18c7883a 	add	r3,r3,r3
 200fc20:	18c7883a 	add	r3,r3,r3
 200fc24:	10c5883a 	add	r2,r2,r3
 200fc28:	10800017 	ldw	r2,0(r2)
 200fc2c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 200fc30:	e0bffb17 	ldw	r2,-20(fp)
 200fc34:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 200fc38:	e0bffb17 	ldw	r2,-20(fp)
 200fc3c:	e0fffd17 	ldw	r3,-12(fp)
 200fc40:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 200fc44:	e0bffb17 	ldw	r2,-20(fp)
 200fc48:	10800c03 	ldbu	r2,48(r2)
 200fc4c:	1007883a 	mov	r3,r2
 200fc50:	e0bffe03 	ldbu	r2,-8(fp)
 200fc54:	0084303a 	nor	r2,zero,r2
 200fc58:	1884703a 	and	r2,r3,r2
 200fc5c:	1007883a 	mov	r3,r2
 200fc60:	e0bffb17 	ldw	r2,-20(fp)
 200fc64:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 200fc68:	e0bffb17 	ldw	r2,-20(fp)
 200fc6c:	e0ffff03 	ldbu	r3,-4(fp)
 200fc70:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 200fc74:	e0bffb17 	ldw	r2,-20(fp)
 200fc78:	10800c03 	ldbu	r2,48(r2)
 200fc7c:	10803fcc 	andi	r2,r2,255
 200fc80:	1080020c 	andi	r2,r2,8
 200fc84:	1000111e 	bne	r2,zero,200fccc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 200fc88:	e0bffb17 	ldw	r2,-20(fp)
 200fc8c:	10c00d83 	ldbu	r3,54(r2)
 200fc90:	d0a72c03 	ldbu	r2,-25424(gp)
 200fc94:	1884b03a 	or	r2,r3,r2
 200fc98:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 200fc9c:	e0fffa03 	ldbu	r3,-24(fp)
 200fca0:	e13ffa03 	ldbu	r4,-24(fp)
 200fca4:	d0a72c44 	addi	r2,gp,-25423
 200fca8:	2085883a 	add	r2,r4,r2
 200fcac:	11000003 	ldbu	r4,0(r2)
 200fcb0:	e0bffb17 	ldw	r2,-20(fp)
 200fcb4:	10800d43 	ldbu	r2,53(r2)
 200fcb8:	2084b03a 	or	r2,r4,r2
 200fcbc:	1009883a 	mov	r4,r2
 200fcc0:	d0a72c44 	addi	r2,gp,-25423
 200fcc4:	1885883a 	add	r2,r3,r2
 200fcc8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 200fccc:	e17ffc17 	ldw	r5,-16(fp)
 200fcd0:	e13ffb17 	ldw	r4,-20(fp)
 200fcd4:	200ff7c0 	call	200ff7c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 200fcd8:	e0bffb17 	ldw	r2,-20(fp)
 200fcdc:	10800817 	ldw	r2,32(r2)
 200fce0:	10000826 	beq	r2,zero,200fd04 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 200fce4:	e0bffb17 	ldw	r2,-20(fp)
 200fce8:	10800817 	ldw	r2,32(r2)
 200fcec:	100b883a 	mov	r5,r2
 200fcf0:	e13ffb17 	ldw	r4,-20(fp)
 200fcf4:	20100340 	call	2010034 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 200fcf8:	e0bffb17 	ldw	r2,-20(fp)
 200fcfc:	e0fffc17 	ldw	r3,-16(fp)
 200fd00:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 200fd04:	e0bffa83 	ldbu	r2,-22(fp)
}
 200fd08:	e037883a 	mov	sp,fp
 200fd0c:	dfc00117 	ldw	ra,4(sp)
 200fd10:	df000017 	ldw	fp,0(sp)
 200fd14:	dec00204 	addi	sp,sp,8
 200fd18:	f800283a 	ret

0200fd1c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 200fd1c:	defffd04 	addi	sp,sp,-12
 200fd20:	df000215 	stw	fp,8(sp)
 200fd24:	df000204 	addi	fp,sp,8
 200fd28:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 200fd2c:	d0a72f17 	ldw	r2,-25412(gp)
 200fd30:	e0ffff17 	ldw	r3,-4(fp)
 200fd34:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 200fd38:	d0a72f17 	ldw	r2,-25412(gp)
 200fd3c:	10800d03 	ldbu	r2,52(r2)
 200fd40:	10803fcc 	andi	r2,r2,255
 200fd44:	d0e72f17 	ldw	r3,-25412(gp)
 200fd48:	18c00d03 	ldbu	r3,52(r3)
 200fd4c:	18c03fcc 	andi	r3,r3,255
 200fd50:	e13fff17 	ldw	r4,-4(fp)
 200fd54:	20c7883a 	add	r3,r4,r3
 200fd58:	18c002c4 	addi	r3,r3,11
 200fd5c:	19000003 	ldbu	r4,0(r3)
 200fd60:	d0e72f17 	ldw	r3,-25412(gp)
 200fd64:	18c00d43 	ldbu	r3,53(r3)
 200fd68:	20c6b03a 	or	r3,r4,r3
 200fd6c:	1809883a 	mov	r4,r3
 200fd70:	e0ffff17 	ldw	r3,-4(fp)
 200fd74:	1885883a 	add	r2,r3,r2
 200fd78:	108002c4 	addi	r2,r2,11
 200fd7c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 200fd80:	e0bfff17 	ldw	r2,-4(fp)
 200fd84:	10c00283 	ldbu	r3,10(r2)
 200fd88:	d0a72f17 	ldw	r2,-25412(gp)
 200fd8c:	10800d83 	ldbu	r2,54(r2)
 200fd90:	1884b03a 	or	r2,r3,r2
 200fd94:	1007883a 	mov	r3,r2
 200fd98:	e0bfff17 	ldw	r2,-4(fp)
 200fd9c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 200fda0:	d0a72f17 	ldw	r2,-25412(gp)
 200fda4:	10800d03 	ldbu	r2,52(r2)
 200fda8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 200fdac:	e0fffe03 	ldbu	r3,-8(fp)
 200fdb0:	e13ffe03 	ldbu	r4,-8(fp)
 200fdb4:	d0a72c44 	addi	r2,gp,-25423
 200fdb8:	2085883a 	add	r2,r4,r2
 200fdbc:	10800003 	ldbu	r2,0(r2)
 200fdc0:	1009883a 	mov	r4,r2
 200fdc4:	d0a72f17 	ldw	r2,-25412(gp)
 200fdc8:	10800d43 	ldbu	r2,53(r2)
 200fdcc:	0084303a 	nor	r2,zero,r2
 200fdd0:	2084703a 	and	r2,r4,r2
 200fdd4:	1009883a 	mov	r4,r2
 200fdd8:	d0a72c44 	addi	r2,gp,-25423
 200fddc:	1885883a 	add	r2,r3,r2
 200fde0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 200fde4:	e0fffe03 	ldbu	r3,-8(fp)
 200fde8:	d0a72c44 	addi	r2,gp,-25423
 200fdec:	1885883a 	add	r2,r3,r2
 200fdf0:	10800003 	ldbu	r2,0(r2)
 200fdf4:	10803fcc 	andi	r2,r2,255
 200fdf8:	1000071e 	bne	r2,zero,200fe18 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 200fdfc:	d0a72f17 	ldw	r2,-25412(gp)
 200fe00:	10800d83 	ldbu	r2,54(r2)
 200fe04:	0084303a 	nor	r2,zero,r2
 200fe08:	1007883a 	mov	r3,r2
 200fe0c:	d0a72c03 	ldbu	r2,-25424(gp)
 200fe10:	1884703a 	and	r2,r3,r2
 200fe14:	d0a72c05 	stb	r2,-25424(gp)
    }
}
 200fe18:	0001883a 	nop
 200fe1c:	e037883a 	mov	sp,fp
 200fe20:	df000017 	ldw	fp,0(sp)
 200fe24:	dec00104 	addi	sp,sp,4
 200fe28:	f800283a 	ret

0200fe2c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 200fe2c:	defffb04 	addi	sp,sp,-20
 200fe30:	df000415 	stw	fp,16(sp)
 200fe34:	df000404 	addi	fp,sp,16
 200fe38:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 200fe3c:	d0a72f17 	ldw	r2,-25412(gp)
 200fe40:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 200fe44:	d0a72f17 	ldw	r2,-25412(gp)
 200fe48:	e0ffff17 	ldw	r3,-4(fp)
 200fe4c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 200fe50:	e0bfff17 	ldw	r2,-4(fp)
 200fe54:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 200fe58:	e0bffc17 	ldw	r2,-16(fp)
 200fe5c:	10800017 	ldw	r2,0(r2)
 200fe60:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 200fe64:	00002006 	br	200fee8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 200fe68:	d0a72f17 	ldw	r2,-25412(gp)
 200fe6c:	10800d03 	ldbu	r2,52(r2)
 200fe70:	10803fcc 	andi	r2,r2,255
 200fe74:	d0e72f17 	ldw	r3,-25412(gp)
 200fe78:	18c00d03 	ldbu	r3,52(r3)
 200fe7c:	18c03fcc 	andi	r3,r3,255
 200fe80:	e13ffd17 	ldw	r4,-12(fp)
 200fe84:	20c7883a 	add	r3,r4,r3
 200fe88:	18c002c4 	addi	r3,r3,11
 200fe8c:	19000003 	ldbu	r4,0(r3)
 200fe90:	d0e72f17 	ldw	r3,-25412(gp)
 200fe94:	18c00d43 	ldbu	r3,53(r3)
 200fe98:	20c6b03a 	or	r3,r4,r3
 200fe9c:	1809883a 	mov	r4,r3
 200fea0:	e0fffd17 	ldw	r3,-12(fp)
 200fea4:	1885883a 	add	r2,r3,r2
 200fea8:	108002c4 	addi	r2,r2,11
 200feac:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 200feb0:	e0bffd17 	ldw	r2,-12(fp)
 200feb4:	10c00283 	ldbu	r3,10(r2)
 200feb8:	d0a72f17 	ldw	r2,-25412(gp)
 200febc:	10800d83 	ldbu	r2,54(r2)
 200fec0:	1884b03a 	or	r2,r3,r2
 200fec4:	1007883a 	mov	r3,r2
 200fec8:	e0bffd17 	ldw	r2,-12(fp)
 200fecc:	10c00285 	stb	r3,10(r2)
        pevents++;
 200fed0:	e0bffc17 	ldw	r2,-16(fp)
 200fed4:	10800104 	addi	r2,r2,4
 200fed8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 200fedc:	e0bffc17 	ldw	r2,-16(fp)
 200fee0:	10800017 	ldw	r2,0(r2)
 200fee4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 200fee8:	e0bffd17 	ldw	r2,-12(fp)
 200feec:	103fde1e 	bne	r2,zero,200fe68 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 200fef0:	d0a72f17 	ldw	r2,-25412(gp)
 200fef4:	10800d03 	ldbu	r2,52(r2)
 200fef8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 200fefc:	e0fffe03 	ldbu	r3,-8(fp)
 200ff00:	e13ffe03 	ldbu	r4,-8(fp)
 200ff04:	d0a72c44 	addi	r2,gp,-25423
 200ff08:	2085883a 	add	r2,r4,r2
 200ff0c:	10800003 	ldbu	r2,0(r2)
 200ff10:	1009883a 	mov	r4,r2
 200ff14:	d0a72f17 	ldw	r2,-25412(gp)
 200ff18:	10800d43 	ldbu	r2,53(r2)
 200ff1c:	0084303a 	nor	r2,zero,r2
 200ff20:	2084703a 	and	r2,r4,r2
 200ff24:	1009883a 	mov	r4,r2
 200ff28:	d0a72c44 	addi	r2,gp,-25423
 200ff2c:	1885883a 	add	r2,r3,r2
 200ff30:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 200ff34:	e0fffe03 	ldbu	r3,-8(fp)
 200ff38:	d0a72c44 	addi	r2,gp,-25423
 200ff3c:	1885883a 	add	r2,r3,r2
 200ff40:	10800003 	ldbu	r2,0(r2)
 200ff44:	10803fcc 	andi	r2,r2,255
 200ff48:	1000071e 	bne	r2,zero,200ff68 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 200ff4c:	d0a72f17 	ldw	r2,-25412(gp)
 200ff50:	10800d83 	ldbu	r2,54(r2)
 200ff54:	0084303a 	nor	r2,zero,r2
 200ff58:	1007883a 	mov	r3,r2
 200ff5c:	d0a72c03 	ldbu	r2,-25424(gp)
 200ff60:	1884703a 	and	r2,r3,r2
 200ff64:	d0a72c05 	stb	r2,-25424(gp)
    }
}
 200ff68:	0001883a 	nop
 200ff6c:	e037883a 	mov	sp,fp
 200ff70:	df000017 	ldw	fp,0(sp)
 200ff74:	dec00104 	addi	sp,sp,4
 200ff78:	f800283a 	ret

0200ff7c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 200ff7c:	defffc04 	addi	sp,sp,-16
 200ff80:	df000315 	stw	fp,12(sp)
 200ff84:	df000304 	addi	fp,sp,12
 200ff88:	e13ffe15 	stw	r4,-8(fp)
 200ff8c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 200ff90:	e0bffe17 	ldw	r2,-8(fp)
 200ff94:	10800d03 	ldbu	r2,52(r2)
 200ff98:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 200ff9c:	e0bffd03 	ldbu	r2,-12(fp)
 200ffa0:	e0fffd03 	ldbu	r3,-12(fp)
 200ffa4:	e13fff17 	ldw	r4,-4(fp)
 200ffa8:	20c7883a 	add	r3,r4,r3
 200ffac:	18c002c4 	addi	r3,r3,11
 200ffb0:	18c00003 	ldbu	r3,0(r3)
 200ffb4:	1809883a 	mov	r4,r3
 200ffb8:	e0fffe17 	ldw	r3,-8(fp)
 200ffbc:	18c00d43 	ldbu	r3,53(r3)
 200ffc0:	00c6303a 	nor	r3,zero,r3
 200ffc4:	20c6703a 	and	r3,r4,r3
 200ffc8:	1809883a 	mov	r4,r3
 200ffcc:	e0ffff17 	ldw	r3,-4(fp)
 200ffd0:	1885883a 	add	r2,r3,r2
 200ffd4:	108002c4 	addi	r2,r2,11
 200ffd8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 200ffdc:	e0bffd03 	ldbu	r2,-12(fp)
 200ffe0:	e0ffff17 	ldw	r3,-4(fp)
 200ffe4:	1885883a 	add	r2,r3,r2
 200ffe8:	108002c4 	addi	r2,r2,11
 200ffec:	10800003 	ldbu	r2,0(r2)
 200fff0:	10803fcc 	andi	r2,r2,255
 200fff4:	10000a1e 	bne	r2,zero,2010020 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 200fff8:	e0bfff17 	ldw	r2,-4(fp)
 200fffc:	10800283 	ldbu	r2,10(r2)
 2010000:	1007883a 	mov	r3,r2
 2010004:	e0bffe17 	ldw	r2,-8(fp)
 2010008:	10800d83 	ldbu	r2,54(r2)
 201000c:	0084303a 	nor	r2,zero,r2
 2010010:	1884703a 	and	r2,r3,r2
 2010014:	1007883a 	mov	r3,r2
 2010018:	e0bfff17 	ldw	r2,-4(fp)
 201001c:	10c00285 	stb	r3,10(r2)
    }
}
 2010020:	0001883a 	nop
 2010024:	e037883a 	mov	sp,fp
 2010028:	df000017 	ldw	fp,0(sp)
 201002c:	dec00104 	addi	sp,sp,4
 2010030:	f800283a 	ret

02010034 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 2010034:	defffa04 	addi	sp,sp,-24
 2010038:	df000515 	stw	fp,20(sp)
 201003c:	df000504 	addi	fp,sp,20
 2010040:	e13ffe15 	stw	r4,-8(fp)
 2010044:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 2010048:	e0bffe17 	ldw	r2,-8(fp)
 201004c:	10800d03 	ldbu	r2,52(r2)
 2010050:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 2010054:	e0bffe17 	ldw	r2,-8(fp)
 2010058:	10800d83 	ldbu	r2,54(r2)
 201005c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 2010060:	e0bffe17 	ldw	r2,-8(fp)
 2010064:	10800d43 	ldbu	r2,53(r2)
 2010068:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 201006c:	e0bfff17 	ldw	r2,-4(fp)
 2010070:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 2010074:	e0bffb17 	ldw	r2,-20(fp)
 2010078:	10800017 	ldw	r2,0(r2)
 201007c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2010080:	00002506 	br	2010118 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 2010084:	e0bffd03 	ldbu	r2,-12(fp)
 2010088:	e0fffd03 	ldbu	r3,-12(fp)
 201008c:	e13ffc17 	ldw	r4,-16(fp)
 2010090:	20c7883a 	add	r3,r4,r3
 2010094:	18c002c4 	addi	r3,r3,11
 2010098:	18c00003 	ldbu	r3,0(r3)
 201009c:	1809883a 	mov	r4,r3
 20100a0:	e0fffd83 	ldbu	r3,-10(fp)
 20100a4:	00c6303a 	nor	r3,zero,r3
 20100a8:	20c6703a 	and	r3,r4,r3
 20100ac:	1809883a 	mov	r4,r3
 20100b0:	e0fffc17 	ldw	r3,-16(fp)
 20100b4:	1885883a 	add	r2,r3,r2
 20100b8:	108002c4 	addi	r2,r2,11
 20100bc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 20100c0:	e0bffd03 	ldbu	r2,-12(fp)
 20100c4:	e0fffc17 	ldw	r3,-16(fp)
 20100c8:	1885883a 	add	r2,r3,r2
 20100cc:	108002c4 	addi	r2,r2,11
 20100d0:	10800003 	ldbu	r2,0(r2)
 20100d4:	10803fcc 	andi	r2,r2,255
 20100d8:	1000091e 	bne	r2,zero,2010100 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 20100dc:	e0bffc17 	ldw	r2,-16(fp)
 20100e0:	10800283 	ldbu	r2,10(r2)
 20100e4:	1007883a 	mov	r3,r2
 20100e8:	e0bffd43 	ldbu	r2,-11(fp)
 20100ec:	0084303a 	nor	r2,zero,r2
 20100f0:	1884703a 	and	r2,r3,r2
 20100f4:	1007883a 	mov	r3,r2
 20100f8:	e0bffc17 	ldw	r2,-16(fp)
 20100fc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 2010100:	e0bffb17 	ldw	r2,-20(fp)
 2010104:	10800104 	addi	r2,r2,4
 2010108:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 201010c:	e0bffb17 	ldw	r2,-20(fp)
 2010110:	10800017 	ldw	r2,0(r2)
 2010114:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2010118:	e0bffc17 	ldw	r2,-16(fp)
 201011c:	103fd91e 	bne	r2,zero,2010084 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 2010120:	0001883a 	nop
 2010124:	e037883a 	mov	sp,fp
 2010128:	df000017 	ldw	fp,0(sp)
 201012c:	dec00104 	addi	sp,sp,4
 2010130:	f800283a 	ret

02010134 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2010134:	defffc04 	addi	sp,sp,-16
 2010138:	df000315 	stw	fp,12(sp)
 201013c:	df000304 	addi	fp,sp,12
 2010140:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2010144:	e0bfff17 	ldw	r2,-4(fp)
 2010148:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 201014c:	e0bfff17 	ldw	r2,-4(fp)
 2010150:	108002c4 	addi	r2,r2,11
 2010154:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2010158:	e03ffe05 	stb	zero,-8(fp)
 201015c:	00000706 	br	201017c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 2010160:	e0bffd17 	ldw	r2,-12(fp)
 2010164:	10c00044 	addi	r3,r2,1
 2010168:	e0fffd15 	stw	r3,-12(fp)
 201016c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2010170:	e0bffe03 	ldbu	r2,-8(fp)
 2010174:	10800044 	addi	r2,r2,1
 2010178:	e0bffe05 	stb	r2,-8(fp)
 201017c:	e0bffe03 	ldbu	r2,-8(fp)
 2010180:	108000f0 	cmpltui	r2,r2,3
 2010184:	103ff61e 	bne	r2,zero,2010160 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2010188:	0001883a 	nop
 201018c:	e037883a 	mov	sp,fp
 2010190:	df000017 	ldw	fp,0(sp)
 2010194:	dec00104 	addi	sp,sp,4
 2010198:	f800283a 	ret

0201019c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 201019c:	defffb04 	addi	sp,sp,-20
 20101a0:	dfc00415 	stw	ra,16(sp)
 20101a4:	df000315 	stw	fp,12(sp)
 20101a8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 20101ac:	0142d004 	movi	r5,2880
 20101b0:	010080b4 	movhi	r4,514
 20101b4:	210c5b04 	addi	r4,r4,12652
 20101b8:	20105140 	call	2010514 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 20101bc:	008080b4 	movhi	r2,514
 20101c0:	108c5b04 	addi	r2,r2,12652
 20101c4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 20101c8:	008080b4 	movhi	r2,514
 20101cc:	108c6704 	addi	r2,r2,12700
 20101d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 20101d4:	e03ffd0d 	sth	zero,-12(fp)
 20101d8:	00001306 	br	2010228 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 20101dc:	e0bffe17 	ldw	r2,-8(fp)
 20101e0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 20101e4:	e0bffe17 	ldw	r2,-8(fp)
 20101e8:	e0ffff17 	ldw	r3,-4(fp)
 20101ec:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 20101f0:	e0bffe17 	ldw	r2,-8(fp)
 20101f4:	00c00fc4 	movi	r3,63
 20101f8:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 20101fc:	e0bffe17 	ldw	r2,-8(fp)
 2010200:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2010204:	e0bffe17 	ldw	r2,-8(fp)
 2010208:	10800c04 	addi	r2,r2,48
 201020c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 2010210:	e0bfff17 	ldw	r2,-4(fp)
 2010214:	10800c04 	addi	r2,r2,48
 2010218:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 201021c:	e0bffd0b 	ldhu	r2,-12(fp)
 2010220:	10800044 	addi	r2,r2,1
 2010224:	e0bffd0d 	sth	r2,-12(fp)
 2010228:	e0bffd0b 	ldhu	r2,-12(fp)
 201022c:	10800ef0 	cmpltui	r2,r2,59
 2010230:	103fea1e 	bne	r2,zero,20101dc <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2010234:	e0bffe17 	ldw	r2,-8(fp)
 2010238:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 201023c:	e0bffe17 	ldw	r2,-8(fp)
 2010240:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2010244:	e0bffe17 	ldw	r2,-8(fp)
 2010248:	00c00fc4 	movi	r3,63
 201024c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2010250:	e0bffe17 	ldw	r2,-8(fp)
 2010254:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2010258:	008080b4 	movhi	r2,514
 201025c:	108c5b04 	addi	r2,r2,12652
 2010260:	d0a72d15 	stw	r2,-25420(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2010264:	0001883a 	nop
 2010268:	e037883a 	mov	sp,fp
 201026c:	dfc00117 	ldw	ra,4(sp)
 2010270:	df000017 	ldw	fp,0(sp)
 2010274:	dec00204 	addi	sp,sp,8
 2010278:	f800283a 	ret

0201027c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 201027c:	deffff04 	addi	sp,sp,-4
 2010280:	df000015 	stw	fp,0(sp)
 2010284:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2010288:	d0273015 	stw	zero,-25408(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 201028c:	d0272e05 	stb	zero,-25416(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2010290:	d0272005 	stb	zero,-25472(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2010294:	d0272845 	stb	zero,-25439(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2010298:	d0272045 	stb	zero,-25471(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 201029c:	d0272515 	stw	zero,-25452(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 20102a0:	d0272115 	stw	zero,-25468(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 20102a4:	d0273315 	stw	zero,-25396(gp)
    OSIdleCtrMax  = 0L;
 20102a8:	d0272615 	stw	zero,-25448(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 20102ac:	d0273205 	stb	zero,-25400(gp)
#endif
}
 20102b0:	0001883a 	nop
 20102b4:	e037883a 	mov	sp,fp
 20102b8:	df000017 	ldw	fp,0(sp)
 20102bc:	dec00104 	addi	sp,sp,4
 20102c0:	f800283a 	ret

020102c4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 20102c4:	defffd04 	addi	sp,sp,-12
 20102c8:	df000215 	stw	fp,8(sp)
 20102cc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 20102d0:	d0272c05 	stb	zero,-25424(gp)
    prdytbl       = &OSRdyTbl[0];
 20102d4:	d0a72c44 	addi	r2,gp,-25423
 20102d8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20102dc:	e03ffe05 	stb	zero,-8(fp)
 20102e0:	00000706 	br	2010300 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 20102e4:	e0bfff17 	ldw	r2,-4(fp)
 20102e8:	10c00044 	addi	r3,r2,1
 20102ec:	e0ffff15 	stw	r3,-4(fp)
 20102f0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 20102f4:	e0bffe03 	ldbu	r2,-8(fp)
 20102f8:	10800044 	addi	r2,r2,1
 20102fc:	e0bffe05 	stb	r2,-8(fp)
 2010300:	e0bffe03 	ldbu	r2,-8(fp)
 2010304:	108000f0 	cmpltui	r2,r2,3
 2010308:	103ff61e 	bne	r2,zero,20102e4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 201030c:	d0272245 	stb	zero,-25463(gp)
    OSPrioHighRdy = 0;
 2010310:	d0272205 	stb	zero,-25464(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2010314:	d0272a15 	stw	zero,-25432(gp)
    OSTCBCur      = (OS_TCB *)0;
 2010318:	d0272f15 	stw	zero,-25412(gp)
}
 201031c:	0001883a 	nop
 2010320:	e037883a 	mov	sp,fp
 2010324:	df000017 	ldw	fp,0(sp)
 2010328:	dec00104 	addi	sp,sp,4
 201032c:	f800283a 	ret

02010330 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 2010330:	defff804 	addi	sp,sp,-32
 2010334:	dfc00715 	stw	ra,28(sp)
 2010338:	df000615 	stw	fp,24(sp)
 201033c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2010340:	008000c4 	movi	r2,3
 2010344:	d8800415 	stw	r2,16(sp)
 2010348:	d8000315 	stw	zero,12(sp)
 201034c:	00808004 	movi	r2,512
 2010350:	d8800215 	stw	r2,8(sp)
 2010354:	008080b4 	movhi	r2,514
 2010358:	108a5b04 	addi	r2,r2,10604
 201035c:	d8800115 	stw	r2,4(sp)
 2010360:	00bfffd4 	movui	r2,65535
 2010364:	d8800015 	stw	r2,0(sp)
 2010368:	01c00504 	movi	r7,20
 201036c:	018080b4 	movhi	r6,514
 2010370:	318c5a04 	addi	r6,r6,12648
 2010374:	000b883a 	mov	r5,zero
 2010378:	01008074 	movhi	r4,513
 201037c:	2101f704 	addi	r4,r4,2012
 2010380:	20159700 	call	2015970 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2010384:	e1bfff04 	addi	r6,fp,-4
 2010388:	014080b4 	movhi	r5,514
 201038c:	2965fe04 	addi	r5,r5,-26632
 2010390:	01000504 	movi	r4,20
 2010394:	20161800 	call	2016180 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2010398:	0001883a 	nop
 201039c:	e037883a 	mov	sp,fp
 20103a0:	dfc00117 	ldw	ra,4(sp)
 20103a4:	df000017 	ldw	fp,0(sp)
 20103a8:	dec00204 	addi	sp,sp,8
 20103ac:	f800283a 	ret

020103b0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 20103b0:	defff804 	addi	sp,sp,-32
 20103b4:	dfc00715 	stw	ra,28(sp)
 20103b8:	df000615 	stw	fp,24(sp)
 20103bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 20103c0:	008000c4 	movi	r2,3
 20103c4:	d8800415 	stw	r2,16(sp)
 20103c8:	d8000315 	stw	zero,12(sp)
 20103cc:	00808004 	movi	r2,512
 20103d0:	d8800215 	stw	r2,8(sp)
 20103d4:	008080b4 	movhi	r2,514
 20103d8:	1087e304 	addi	r2,r2,8076
 20103dc:	d8800115 	stw	r2,4(sp)
 20103e0:	00bfff94 	movui	r2,65534
 20103e4:	d8800015 	stw	r2,0(sp)
 20103e8:	01c004c4 	movi	r7,19
 20103ec:	018080b4 	movhi	r6,514
 20103f0:	3189e204 	addi	r6,r6,10120
 20103f4:	000b883a 	mov	r5,zero
 20103f8:	01008074 	movhi	r4,513
 20103fc:	21020e04 	addi	r4,r4,2104
 2010400:	20159700 	call	2015970 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2010404:	e1bfff04 	addi	r6,fp,-4
 2010408:	014080b4 	movhi	r5,514
 201040c:	29660204 	addi	r5,r5,-26616
 2010410:	010004c4 	movi	r4,19
 2010414:	20161800 	call	2016180 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 2010418:	0001883a 	nop
 201041c:	e037883a 	mov	sp,fp
 2010420:	dfc00117 	ldw	ra,4(sp)
 2010424:	df000017 	ldw	fp,0(sp)
 2010428:	dec00204 	addi	sp,sp,8
 201042c:	f800283a 	ret

02010430 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 2010430:	defffb04 	addi	sp,sp,-20
 2010434:	dfc00415 	stw	ra,16(sp)
 2010438:	df000315 	stw	fp,12(sp)
 201043c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 2010440:	01414404 	movi	r5,1296
 2010444:	010080b4 	movhi	r4,514
 2010448:	210f2b04 	addi	r4,r4,15532
 201044c:	20105140 	call	2010514 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2010450:	01401504 	movi	r5,84
 2010454:	010080b4 	movhi	r4,514
 2010458:	21106f04 	addi	r4,r4,16828
 201045c:	20105140 	call	2010514 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2010460:	008080b4 	movhi	r2,514
 2010464:	108f2b04 	addi	r2,r2,15532
 2010468:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 201046c:	008080b4 	movhi	r2,514
 2010470:	108f4604 	addi	r2,r2,15640
 2010474:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2010478:	e03ffd05 	stb	zero,-12(fp)
 201047c:	00001106 	br	20104c4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2010480:	e0bffe17 	ldw	r2,-8(fp)
 2010484:	e0ffff17 	ldw	r3,-4(fp)
 2010488:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 201048c:	e0bffe17 	ldw	r2,-8(fp)
 2010490:	00c00fc4 	movi	r3,63
 2010494:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2010498:	e0bffe17 	ldw	r2,-8(fp)
 201049c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 20104a0:	e0bffe17 	ldw	r2,-8(fp)
 20104a4:	10801b04 	addi	r2,r2,108
 20104a8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 20104ac:	e0bfff17 	ldw	r2,-4(fp)
 20104b0:	10801b04 	addi	r2,r2,108
 20104b4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 20104b8:	e0bffd03 	ldbu	r2,-12(fp)
 20104bc:	10800044 	addi	r2,r2,1
 20104c0:	e0bffd05 	stb	r2,-12(fp)
 20104c4:	e0bffd03 	ldbu	r2,-12(fp)
 20104c8:	108002f0 	cmpltui	r2,r2,11
 20104cc:	103fec1e 	bne	r2,zero,2010480 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 20104d0:	e0bffe17 	ldw	r2,-8(fp)
 20104d4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 20104d8:	e0bffe17 	ldw	r2,-8(fp)
 20104dc:	00c00fc4 	movi	r3,63
 20104e0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 20104e4:	e0bffe17 	ldw	r2,-8(fp)
 20104e8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 20104ec:	d0272315 	stw	zero,-25460(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 20104f0:	008080b4 	movhi	r2,514
 20104f4:	108f2b04 	addi	r2,r2,15532
 20104f8:	d0a72715 	stw	r2,-25444(gp)
}
 20104fc:	0001883a 	nop
 2010500:	e037883a 	mov	sp,fp
 2010504:	dfc00117 	ldw	ra,4(sp)
 2010508:	df000017 	ldw	fp,0(sp)
 201050c:	dec00204 	addi	sp,sp,8
 2010510:	f800283a 	ret

02010514 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2010514:	defffd04 	addi	sp,sp,-12
 2010518:	df000215 	stw	fp,8(sp)
 201051c:	df000204 	addi	fp,sp,8
 2010520:	e13ffe15 	stw	r4,-8(fp)
 2010524:	2805883a 	mov	r2,r5
 2010528:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 201052c:	00000706 	br	201054c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 2010530:	e0bffe17 	ldw	r2,-8(fp)
 2010534:	10c00044 	addi	r3,r2,1
 2010538:	e0fffe15 	stw	r3,-8(fp)
 201053c:	10000005 	stb	zero,0(r2)
        size--;
 2010540:	e0bfff0b 	ldhu	r2,-4(fp)
 2010544:	10bfffc4 	addi	r2,r2,-1
 2010548:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 201054c:	e0bfff0b 	ldhu	r2,-4(fp)
 2010550:	103ff71e 	bne	r2,zero,2010530 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2010554:	0001883a 	nop
 2010558:	e037883a 	mov	sp,fp
 201055c:	df000017 	ldw	fp,0(sp)
 2010560:	dec00104 	addi	sp,sp,4
 2010564:	f800283a 	ret

02010568 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2010568:	defffc04 	addi	sp,sp,-16
 201056c:	df000315 	stw	fp,12(sp)
 2010570:	df000304 	addi	fp,sp,12
 2010574:	e13ffd15 	stw	r4,-12(fp)
 2010578:	e17ffe15 	stw	r5,-8(fp)
 201057c:	3005883a 	mov	r2,r6
 2010580:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 2010584:	00000b06 	br	20105b4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 2010588:	e0bffd17 	ldw	r2,-12(fp)
 201058c:	10c00044 	addi	r3,r2,1
 2010590:	e0fffd15 	stw	r3,-12(fp)
 2010594:	e0fffe17 	ldw	r3,-8(fp)
 2010598:	19000044 	addi	r4,r3,1
 201059c:	e13ffe15 	stw	r4,-8(fp)
 20105a0:	18c00003 	ldbu	r3,0(r3)
 20105a4:	10c00005 	stb	r3,0(r2)
        size--;
 20105a8:	e0bfff0b 	ldhu	r2,-4(fp)
 20105ac:	10bfffc4 	addi	r2,r2,-1
 20105b0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 20105b4:	e0bfff0b 	ldhu	r2,-4(fp)
 20105b8:	103ff31e 	bne	r2,zero,2010588 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 20105bc:	0001883a 	nop
 20105c0:	e037883a 	mov	sp,fp
 20105c4:	df000017 	ldw	fp,0(sp)
 20105c8:	dec00104 	addi	sp,sp,4
 20105cc:	f800283a 	ret

020105d0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 20105d0:	defffb04 	addi	sp,sp,-20
 20105d4:	dfc00415 	stw	ra,16(sp)
 20105d8:	df000315 	stw	fp,12(sp)
 20105dc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20105e0:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20105e4:	0005303a 	rdctl	r2,status
 20105e8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20105ec:	e0ffff17 	ldw	r3,-4(fp)
 20105f0:	00bfff84 	movi	r2,-2
 20105f4:	1884703a 	and	r2,r3,r2
 20105f8:	1001703a 	wrctl	status,r2
  
  return context;
 20105fc:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 2010600:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2010604:	d0a72e03 	ldbu	r2,-25416(gp)
 2010608:	10803fcc 	andi	r2,r2,255
 201060c:	10001a1e 	bne	r2,zero,2010678 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2010610:	d0a72003 	ldbu	r2,-25472(gp)
 2010614:	10803fcc 	andi	r2,r2,255
 2010618:	1000171e 	bne	r2,zero,2010678 <OS_Sched+0xa8>
            OS_SchedNew();
 201061c:	20106a00 	call	20106a0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2010620:	d0e72203 	ldbu	r3,-25464(gp)
 2010624:	d0a72243 	ldbu	r2,-25463(gp)
 2010628:	18c03fcc 	andi	r3,r3,255
 201062c:	10803fcc 	andi	r2,r2,255
 2010630:	18801126 	beq	r3,r2,2010678 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2010634:	d0a72203 	ldbu	r2,-25464(gp)
 2010638:	10c03fcc 	andi	r3,r2,255
 201063c:	008080b4 	movhi	r2,514
 2010640:	10906f04 	addi	r2,r2,16828
 2010644:	18c7883a 	add	r3,r3,r3
 2010648:	18c7883a 	add	r3,r3,r3
 201064c:	10c5883a 	add	r2,r2,r3
 2010650:	10800017 	ldw	r2,0(r2)
 2010654:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2010658:	d0a72a17 	ldw	r2,-25432(gp)
 201065c:	10c00e17 	ldw	r3,56(r2)
 2010660:	18c00044 	addi	r3,r3,1
 2010664:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 2010668:	d0a72517 	ldw	r2,-25452(gp)
 201066c:	10800044 	addi	r2,r2,1
 2010670:	d0a72515 	stw	r2,-25452(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2010674:	20189940 	call	2018994 <OSCtxSw>
 2010678:	e0bffd17 	ldw	r2,-12(fp)
 201067c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010680:	e0bffe17 	ldw	r2,-8(fp)
 2010684:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 2010688:	0001883a 	nop
 201068c:	e037883a 	mov	sp,fp
 2010690:	dfc00117 	ldw	ra,4(sp)
 2010694:	df000017 	ldw	fp,0(sp)
 2010698:	dec00204 	addi	sp,sp,8
 201069c:	f800283a 	ret

020106a0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 20106a0:	defffe04 	addi	sp,sp,-8
 20106a4:	df000115 	stw	fp,4(sp)
 20106a8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 20106ac:	d0a72c03 	ldbu	r2,-25424(gp)
 20106b0:	10c03fcc 	andi	r3,r2,255
 20106b4:	008080b4 	movhi	r2,514
 20106b8:	10a5be04 	addi	r2,r2,-26888
 20106bc:	10c5883a 	add	r2,r2,r3
 20106c0:	10800003 	ldbu	r2,0(r2)
 20106c4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 20106c8:	e0bfff03 	ldbu	r2,-4(fp)
 20106cc:	100490fa 	slli	r2,r2,3
 20106d0:	1009883a 	mov	r4,r2
 20106d4:	e0ffff03 	ldbu	r3,-4(fp)
 20106d8:	d0a72c44 	addi	r2,gp,-25423
 20106dc:	1885883a 	add	r2,r3,r2
 20106e0:	10800003 	ldbu	r2,0(r2)
 20106e4:	10c03fcc 	andi	r3,r2,255
 20106e8:	008080b4 	movhi	r2,514
 20106ec:	10a5be04 	addi	r2,r2,-26888
 20106f0:	10c5883a 	add	r2,r2,r3
 20106f4:	10800003 	ldbu	r2,0(r2)
 20106f8:	2085883a 	add	r2,r4,r2
 20106fc:	d0a72205 	stb	r2,-25464(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 2010700:	0001883a 	nop
 2010704:	e037883a 	mov	sp,fp
 2010708:	df000017 	ldw	fp,0(sp)
 201070c:	dec00104 	addi	sp,sp,4
 2010710:	f800283a 	ret

02010714 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 2010714:	defffc04 	addi	sp,sp,-16
 2010718:	df000315 	stw	fp,12(sp)
 201071c:	df000304 	addi	fp,sp,12
 2010720:	e13ffe15 	stw	r4,-8(fp)
 2010724:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 2010728:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 201072c:	00000b06 	br	201075c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 2010730:	e0bffe17 	ldw	r2,-8(fp)
 2010734:	10c00044 	addi	r3,r2,1
 2010738:	e0fffe15 	stw	r3,-8(fp)
 201073c:	e0ffff17 	ldw	r3,-4(fp)
 2010740:	19000044 	addi	r4,r3,1
 2010744:	e13fff15 	stw	r4,-4(fp)
 2010748:	18c00003 	ldbu	r3,0(r3)
 201074c:	10c00005 	stb	r3,0(r2)
        len++;
 2010750:	e0bffd03 	ldbu	r2,-12(fp)
 2010754:	10800044 	addi	r2,r2,1
 2010758:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 201075c:	e0bfff17 	ldw	r2,-4(fp)
 2010760:	10800003 	ldbu	r2,0(r2)
 2010764:	10803fcc 	andi	r2,r2,255
 2010768:	103ff11e 	bne	r2,zero,2010730 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 201076c:	e0bffe17 	ldw	r2,-8(fp)
 2010770:	10000005 	stb	zero,0(r2)
    return (len);
 2010774:	e0bffd03 	ldbu	r2,-12(fp)
}
 2010778:	e037883a 	mov	sp,fp
 201077c:	df000017 	ldw	fp,0(sp)
 2010780:	dec00104 	addi	sp,sp,4
 2010784:	f800283a 	ret

02010788 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2010788:	defffd04 	addi	sp,sp,-12
 201078c:	df000215 	stw	fp,8(sp)
 2010790:	df000204 	addi	fp,sp,8
 2010794:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2010798:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 201079c:	00000606 	br	20107b8 <OS_StrLen+0x30>
        psrc++;
 20107a0:	e0bfff17 	ldw	r2,-4(fp)
 20107a4:	10800044 	addi	r2,r2,1
 20107a8:	e0bfff15 	stw	r2,-4(fp)
        len++;
 20107ac:	e0bffe03 	ldbu	r2,-8(fp)
 20107b0:	10800044 	addi	r2,r2,1
 20107b4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 20107b8:	e0bfff17 	ldw	r2,-4(fp)
 20107bc:	10800003 	ldbu	r2,0(r2)
 20107c0:	10803fcc 	andi	r2,r2,255
 20107c4:	103ff61e 	bne	r2,zero,20107a0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 20107c8:	e0bffe03 	ldbu	r2,-8(fp)
}
 20107cc:	e037883a 	mov	sp,fp
 20107d0:	df000017 	ldw	fp,0(sp)
 20107d4:	dec00104 	addi	sp,sp,4
 20107d8:	f800283a 	ret

020107dc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 20107dc:	defffa04 	addi	sp,sp,-24
 20107e0:	dfc00515 	stw	ra,20(sp)
 20107e4:	df000415 	stw	fp,16(sp)
 20107e8:	df000404 	addi	fp,sp,16
 20107ec:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20107f0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20107f4:	0005303a 	rdctl	r2,status
 20107f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20107fc:	e0fffd17 	ldw	r3,-12(fp)
 2010800:	00bfff84 	movi	r2,-2
 2010804:	1884703a 	and	r2,r3,r2
 2010808:	1001703a 	wrctl	status,r2
  
  return context;
 201080c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 2010810:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 2010814:	d0a72117 	ldw	r2,-25468(gp)
 2010818:	10800044 	addi	r2,r2,1
 201081c:	d0a72115 	stw	r2,-25468(gp)
 2010820:	e0bffc17 	ldw	r2,-16(fp)
 2010824:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010828:	e0bffe17 	ldw	r2,-8(fp)
 201082c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 2010830:	2018ca80 	call	2018ca8 <OSTaskIdleHook>
    }
 2010834:	003fef06 	br	20107f4 <OS_TaskIdle+0x18>

02010838 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 2010838:	defffa04 	addi	sp,sp,-24
 201083c:	dfc00515 	stw	ra,20(sp)
 2010840:	df000415 	stw	fp,16(sp)
 2010844:	df000404 	addi	fp,sp,16
 2010848:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201084c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2010850:	00000206 	br	201085c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2010854:	01003204 	movi	r4,200
 2010858:	2016a400 	call	2016a40 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 201085c:	d0a73203 	ldbu	r2,-25400(gp)
 2010860:	10803fcc 	andi	r2,r2,255
 2010864:	103ffb26 	beq	r2,zero,2010854 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2010868:	d0a72617 	ldw	r2,-25448(gp)
 201086c:	01401904 	movi	r5,100
 2010870:	1009883a 	mov	r4,r2
 2010874:	20039ac0 	call	20039ac <__udivsi3>
 2010878:	d0a72615 	stw	r2,-25448(gp)
    if (OSIdleCtrMax == 0L) {
 201087c:	d0a72617 	ldw	r2,-25448(gp)
 2010880:	1000031e 	bne	r2,zero,2010890 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 2010884:	d0272805 	stb	zero,-25440(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2010888:	01003fc4 	movi	r4,255
 201088c:	20166c80 	call	20166c8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010890:	0005303a 	rdctl	r2,status
 2010894:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010898:	e0fffd17 	ldw	r3,-12(fp)
 201089c:	00bfff84 	movi	r2,-2
 20108a0:	1884703a 	and	r2,r3,r2
 20108a4:	1001703a 	wrctl	status,r2
  
  return context;
 20108a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 20108ac:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 20108b0:	d0a72117 	ldw	r2,-25468(gp)
 20108b4:	d0a73315 	stw	r2,-25396(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 20108b8:	d0272115 	stw	zero,-25468(gp)
 20108bc:	e0bffc17 	ldw	r2,-16(fp)
 20108c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20108c4:	e0bffe17 	ldw	r2,-8(fp)
 20108c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 20108cc:	d0a73317 	ldw	r2,-25396(gp)
 20108d0:	d0e72617 	ldw	r3,-25448(gp)
 20108d4:	180b883a 	mov	r5,r3
 20108d8:	1009883a 	mov	r4,r2
 20108dc:	20039ac0 	call	20039ac <__udivsi3>
 20108e0:	1007883a 	mov	r3,r2
 20108e4:	00801904 	movi	r2,100
 20108e8:	10c5c83a 	sub	r2,r2,r3
 20108ec:	d0a72805 	stb	r2,-25440(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 20108f0:	2018c280 	call	2018c28 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 20108f4:	20109040 	call	2010904 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 20108f8:	01001904 	movi	r4,100
 20108fc:	2016a400 	call	2016a40 <OSTimeDly>
    }
 2010900:	003fe306 	br	2010890 <OS_TaskStat+0x58>

02010904 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 2010904:	defffa04 	addi	sp,sp,-24
 2010908:	dfc00515 	stw	ra,20(sp)
 201090c:	df000415 	stw	fp,16(sp)
 2010910:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2010914:	e03ffc05 	stb	zero,-16(fp)
 2010918:	00002406 	br	20109ac <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 201091c:	e0bffc03 	ldbu	r2,-16(fp)
 2010920:	e0fffe04 	addi	r3,fp,-8
 2010924:	180b883a 	mov	r5,r3
 2010928:	1009883a 	mov	r4,r2
 201092c:	20165080 	call	2016508 <OSTaskStkChk>
 2010930:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 2010934:	e0bffc43 	ldbu	r2,-15(fp)
 2010938:	1000191e 	bne	r2,zero,20109a0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 201093c:	e0fffc03 	ldbu	r3,-16(fp)
 2010940:	008080b4 	movhi	r2,514
 2010944:	10906f04 	addi	r2,r2,16828
 2010948:	18c7883a 	add	r3,r3,r3
 201094c:	18c7883a 	add	r3,r3,r3
 2010950:	10c5883a 	add	r2,r2,r3
 2010954:	10800017 	ldw	r2,0(r2)
 2010958:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 201095c:	e0bffd17 	ldw	r2,-12(fp)
 2010960:	10000f26 	beq	r2,zero,20109a0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 2010964:	e0bffd17 	ldw	r2,-12(fp)
 2010968:	10800060 	cmpeqi	r2,r2,1
 201096c:	10000c1e 	bne	r2,zero,20109a0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2010970:	e0bffd17 	ldw	r2,-12(fp)
 2010974:	10c00217 	ldw	r3,8(r2)
 2010978:	e0bffd17 	ldw	r2,-12(fp)
 201097c:	10800317 	ldw	r2,12(r2)
 2010980:	1085883a 	add	r2,r2,r2
 2010984:	1085883a 	add	r2,r2,r2
 2010988:	1887883a 	add	r3,r3,r2
 201098c:	e0bffd17 	ldw	r2,-12(fp)
 2010990:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 2010994:	e0ffff17 	ldw	r3,-4(fp)
 2010998:	e0bffd17 	ldw	r2,-12(fp)
 201099c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20109a0:	e0bffc03 	ldbu	r2,-16(fp)
 20109a4:	10800044 	addi	r2,r2,1
 20109a8:	e0bffc05 	stb	r2,-16(fp)
 20109ac:	e0bffc03 	ldbu	r2,-16(fp)
 20109b0:	10800570 	cmpltui	r2,r2,21
 20109b4:	103fd91e 	bne	r2,zero,201091c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 20109b8:	0001883a 	nop
 20109bc:	e037883a 	mov	sp,fp
 20109c0:	dfc00117 	ldw	ra,4(sp)
 20109c4:	df000017 	ldw	fp,0(sp)
 20109c8:	dec00204 	addi	sp,sp,8
 20109cc:	f800283a 	ret

020109d0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 20109d0:	defff204 	addi	sp,sp,-56
 20109d4:	dfc00d15 	stw	ra,52(sp)
 20109d8:	df000c15 	stw	fp,48(sp)
 20109dc:	df000c04 	addi	fp,sp,48
 20109e0:	e17ffc15 	stw	r5,-16(fp)
 20109e4:	e1bffd15 	stw	r6,-12(fp)
 20109e8:	3807883a 	mov	r3,r7
 20109ec:	e0800417 	ldw	r2,16(fp)
 20109f0:	e13ffb05 	stb	r4,-20(fp)
 20109f4:	e0fffe0d 	sth	r3,-8(fp)
 20109f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20109fc:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010a00:	0005303a 	rdctl	r2,status
 2010a04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010a08:	e0fffa17 	ldw	r3,-24(fp)
 2010a0c:	00bfff84 	movi	r2,-2
 2010a10:	1884703a 	and	r2,r3,r2
 2010a14:	1001703a 	wrctl	status,r2
  
  return context;
 2010a18:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 2010a1c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 2010a20:	d0a72717 	ldw	r2,-25444(gp)
 2010a24:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 2010a28:	e0bff617 	ldw	r2,-40(fp)
 2010a2c:	10009326 	beq	r2,zero,2010c7c <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 2010a30:	e0bff617 	ldw	r2,-40(fp)
 2010a34:	10800517 	ldw	r2,20(r2)
 2010a38:	d0a72715 	stw	r2,-25444(gp)
 2010a3c:	e0bff417 	ldw	r2,-48(fp)
 2010a40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010a44:	e0bff817 	ldw	r2,-32(fp)
 2010a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 2010a4c:	e0bff617 	ldw	r2,-40(fp)
 2010a50:	e0fffc17 	ldw	r3,-16(fp)
 2010a54:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 2010a58:	e0bff617 	ldw	r2,-40(fp)
 2010a5c:	e0fffb03 	ldbu	r3,-20(fp)
 2010a60:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2010a64:	e0bff617 	ldw	r2,-40(fp)
 2010a68:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2010a6c:	e0bff617 	ldw	r2,-40(fp)
 2010a70:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2010a74:	e0bff617 	ldw	r2,-40(fp)
 2010a78:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2010a7c:	e0bff617 	ldw	r2,-40(fp)
 2010a80:	e0c00317 	ldw	r3,12(fp)
 2010a84:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 2010a88:	e0bff617 	ldw	r2,-40(fp)
 2010a8c:	e0c00217 	ldw	r3,8(fp)
 2010a90:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2010a94:	e0bff617 	ldw	r2,-40(fp)
 2010a98:	e0fffd17 	ldw	r3,-12(fp)
 2010a9c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2010aa0:	e0bff617 	ldw	r2,-40(fp)
 2010aa4:	e0ffff0b 	ldhu	r3,-4(fp)
 2010aa8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2010aac:	e0bff617 	ldw	r2,-40(fp)
 2010ab0:	e0fffe0b 	ldhu	r3,-8(fp)
 2010ab4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 2010ab8:	e0bff617 	ldw	r2,-40(fp)
 2010abc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2010ac0:	e0bffb03 	ldbu	r2,-20(fp)
 2010ac4:	1004d0fa 	srli	r2,r2,3
 2010ac8:	1007883a 	mov	r3,r2
 2010acc:	e0bff617 	ldw	r2,-40(fp)
 2010ad0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2010ad4:	e0bffb03 	ldbu	r2,-20(fp)
 2010ad8:	108001cc 	andi	r2,r2,7
 2010adc:	1007883a 	mov	r3,r2
 2010ae0:	e0bff617 	ldw	r2,-40(fp)
 2010ae4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 2010ae8:	e0bff617 	ldw	r2,-40(fp)
 2010aec:	10800d03 	ldbu	r2,52(r2)
 2010af0:	10803fcc 	andi	r2,r2,255
 2010af4:	00c00044 	movi	r3,1
 2010af8:	1884983a 	sll	r2,r3,r2
 2010afc:	1007883a 	mov	r3,r2
 2010b00:	e0bff617 	ldw	r2,-40(fp)
 2010b04:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 2010b08:	e0bff617 	ldw	r2,-40(fp)
 2010b0c:	10800cc3 	ldbu	r2,51(r2)
 2010b10:	10803fcc 	andi	r2,r2,255
 2010b14:	00c00044 	movi	r3,1
 2010b18:	1884983a 	sll	r2,r3,r2
 2010b1c:	1007883a 	mov	r3,r2
 2010b20:	e0bff617 	ldw	r2,-40(fp)
 2010b24:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 2010b28:	e0bff617 	ldw	r2,-40(fp)
 2010b2c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 2010b30:	e0bff617 	ldw	r2,-40(fp)
 2010b34:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 2010b38:	e0bff617 	ldw	r2,-40(fp)
 2010b3c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 2010b40:	e0bff617 	ldw	r2,-40(fp)
 2010b44:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 2010b48:	e0bff617 	ldw	r2,-40(fp)
 2010b4c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 2010b50:	e0bff617 	ldw	r2,-40(fp)
 2010b54:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 2010b58:	e0bff617 	ldw	r2,-40(fp)
 2010b5c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2010b60:	e0bff617 	ldw	r2,-40(fp)
 2010b64:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 2010b68:	e0bff617 	ldw	r2,-40(fp)
 2010b6c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2010b70:	e0bff617 	ldw	r2,-40(fp)
 2010b74:	00c00fc4 	movi	r3,63
 2010b78:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2010b7c:	e0bff617 	ldw	r2,-40(fp)
 2010b80:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2010b84:	e13ff617 	ldw	r4,-40(fp)
 2010b88:	2018cc80 	call	2018cc8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2010b8c:	e13ff617 	ldw	r4,-40(fp)
 2010b90:	2018bc00 	call	2018bc0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010b94:	0005303a 	rdctl	r2,status
 2010b98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010b9c:	e0fff517 	ldw	r3,-44(fp)
 2010ba0:	00bfff84 	movi	r2,-2
 2010ba4:	1884703a 	and	r2,r3,r2
 2010ba8:	1001703a 	wrctl	status,r2
  
  return context;
 2010bac:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2010bb0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2010bb4:	e0fffb03 	ldbu	r3,-20(fp)
 2010bb8:	008080b4 	movhi	r2,514
 2010bbc:	10906f04 	addi	r2,r2,16828
 2010bc0:	18c7883a 	add	r3,r3,r3
 2010bc4:	18c7883a 	add	r3,r3,r3
 2010bc8:	10c5883a 	add	r2,r2,r3
 2010bcc:	e0fff617 	ldw	r3,-40(fp)
 2010bd0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2010bd4:	d0e72317 	ldw	r3,-25460(gp)
 2010bd8:	e0bff617 	ldw	r2,-40(fp)
 2010bdc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2010be0:	e0bff617 	ldw	r2,-40(fp)
 2010be4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 2010be8:	d0a72317 	ldw	r2,-25460(gp)
 2010bec:	10000326 	beq	r2,zero,2010bfc <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 2010bf0:	d0a72317 	ldw	r2,-25460(gp)
 2010bf4:	e0fff617 	ldw	r3,-40(fp)
 2010bf8:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 2010bfc:	e0bff617 	ldw	r2,-40(fp)
 2010c00:	d0a72315 	stw	r2,-25460(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 2010c04:	e0bff617 	ldw	r2,-40(fp)
 2010c08:	10c00d83 	ldbu	r3,54(r2)
 2010c0c:	d0a72c03 	ldbu	r2,-25424(gp)
 2010c10:	1884b03a 	or	r2,r3,r2
 2010c14:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2010c18:	e0bff617 	ldw	r2,-40(fp)
 2010c1c:	10800d03 	ldbu	r2,52(r2)
 2010c20:	10c03fcc 	andi	r3,r2,255
 2010c24:	e0bff617 	ldw	r2,-40(fp)
 2010c28:	10800d03 	ldbu	r2,52(r2)
 2010c2c:	11003fcc 	andi	r4,r2,255
 2010c30:	d0a72c44 	addi	r2,gp,-25423
 2010c34:	2085883a 	add	r2,r4,r2
 2010c38:	11000003 	ldbu	r4,0(r2)
 2010c3c:	e0bff617 	ldw	r2,-40(fp)
 2010c40:	10800d43 	ldbu	r2,53(r2)
 2010c44:	2084b03a 	or	r2,r4,r2
 2010c48:	1009883a 	mov	r4,r2
 2010c4c:	d0a72c44 	addi	r2,gp,-25423
 2010c50:	1885883a 	add	r2,r3,r2
 2010c54:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2010c58:	d0a72843 	ldbu	r2,-25439(gp)
 2010c5c:	10800044 	addi	r2,r2,1
 2010c60:	d0a72845 	stb	r2,-25439(gp)
 2010c64:	e0bff417 	ldw	r2,-48(fp)
 2010c68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010c6c:	e0bff717 	ldw	r2,-36(fp)
 2010c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2010c74:	0005883a 	mov	r2,zero
 2010c78:	00000506 	br	2010c90 <OS_TCBInit+0x2c0>
 2010c7c:	e0bff417 	ldw	r2,-48(fp)
 2010c80:	e0bff915 	stw	r2,-28(fp)
 2010c84:	e0bff917 	ldw	r2,-28(fp)
 2010c88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2010c8c:	00801084 	movi	r2,66
}
 2010c90:	e037883a 	mov	sp,fp
 2010c94:	dfc00117 	ldw	ra,4(sp)
 2010c98:	df000017 	ldw	fp,0(sp)
 2010c9c:	dec00204 	addi	sp,sp,8
 2010ca0:	f800283a 	ret

02010ca4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2010ca4:	defffe04 	addi	sp,sp,-8
 2010ca8:	df000115 	stw	fp,4(sp)
 2010cac:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2010cb0:	d0a01004 	addi	r2,gp,-32704
 2010cb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2010cb8:	d0a01104 	addi	r2,gp,-32700
 2010cbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2010cc0:	d0a01284 	addi	r2,gp,-32694
 2010cc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2010cc8:	d0a01304 	addi	r2,gp,-32692
 2010ccc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2010cd0:	d0a01204 	addi	r2,gp,-32696
 2010cd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2010cd8:	d0a01384 	addi	r2,gp,-32690
 2010cdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2010ce0:	d0a01404 	addi	r2,gp,-32688
 2010ce4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2010ce8:	d0a01484 	addi	r2,gp,-32686
 2010cec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 2010cf0:	d0a01504 	addi	r2,gp,-32684
 2010cf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 2010cf8:	d0a01584 	addi	r2,gp,-32682
 2010cfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 2010d00:	d0a01604 	addi	r2,gp,-32680
 2010d04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 2010d08:	d0a01684 	addi	r2,gp,-32678
 2010d0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 2010d10:	d0a01704 	addi	r2,gp,-32676
 2010d14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 2010d18:	d0a01784 	addi	r2,gp,-32674
 2010d1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 2010d20:	d0a01804 	addi	r2,gp,-32672
 2010d24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 2010d28:	d0a01884 	addi	r2,gp,-32670
 2010d2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 2010d30:	d0a01904 	addi	r2,gp,-32668
 2010d34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 2010d38:	d0a01984 	addi	r2,gp,-32666
 2010d3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 2010d40:	d0a01a04 	addi	r2,gp,-32664
 2010d44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 2010d48:	d0a01a84 	addi	r2,gp,-32662
 2010d4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2010d50:	d0a01b04 	addi	r2,gp,-32660
 2010d54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2010d58:	d0a01b84 	addi	r2,gp,-32658
 2010d5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2010d60:	d0a01c04 	addi	r2,gp,-32656
 2010d64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2010d68:	d0a01c84 	addi	r2,gp,-32654
 2010d6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2010d70:	d0a01d04 	addi	r2,gp,-32652
 2010d74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2010d78:	d0a01d84 	addi	r2,gp,-32650
 2010d7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2010d80:	d0a01e04 	addi	r2,gp,-32648
 2010d84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2010d88:	d0a01e84 	addi	r2,gp,-32646
 2010d8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2010d90:	d0a01f04 	addi	r2,gp,-32644
 2010d94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2010d98:	d0a01f84 	addi	r2,gp,-32642
 2010d9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2010da0:	d0a02004 	addi	r2,gp,-32640
 2010da4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2010da8:	d0a02084 	addi	r2,gp,-32638
 2010dac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2010db0:	d0a02104 	addi	r2,gp,-32636
 2010db4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2010db8:	d0a02184 	addi	r2,gp,-32634
 2010dbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2010dc0:	d0a02204 	addi	r2,gp,-32632
 2010dc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2010dc8:	d0a02284 	addi	r2,gp,-32630
 2010dcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2010dd0:	d0a02304 	addi	r2,gp,-32628
 2010dd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2010dd8:	d0a02384 	addi	r2,gp,-32626
 2010ddc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2010de0:	d0a02404 	addi	r2,gp,-32624
 2010de4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2010de8:	d0a02484 	addi	r2,gp,-32622
 2010dec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 2010df0:	d0a02504 	addi	r2,gp,-32620
 2010df4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 2010df8:	d0a02584 	addi	r2,gp,-32618
 2010dfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 2010e00:	d0a02604 	addi	r2,gp,-32616
 2010e04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 2010e08:	d0a02684 	addi	r2,gp,-32614
 2010e0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 2010e10:	d0a02704 	addi	r2,gp,-32612
 2010e14:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 2010e18:	d0a02c04 	addi	r2,gp,-32592
 2010e1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 2010e20:	0001883a 	nop
 2010e24:	e037883a 	mov	sp,fp
 2010e28:	df000017 	ldw	fp,0(sp)
 2010e2c:	dec00104 	addi	sp,sp,4
 2010e30:	f800283a 	ret

02010e34 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 2010e34:	defff204 	addi	sp,sp,-56
 2010e38:	df000d15 	stw	fp,52(sp)
 2010e3c:	df000d04 	addi	fp,sp,52
 2010e40:	e13ffc15 	stw	r4,-16(fp)
 2010e44:	2807883a 	mov	r3,r5
 2010e48:	3005883a 	mov	r2,r6
 2010e4c:	e1ffff15 	stw	r7,-4(fp)
 2010e50:	e0fffd0d 	sth	r3,-12(fp)
 2010e54:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2010e58:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2010e5c:	e0bfff17 	ldw	r2,-4(fp)
 2010e60:	1000021e 	bne	r2,zero,2010e6c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 2010e64:	0005883a 	mov	r2,zero
 2010e68:	0000b006 	br	201112c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2010e6c:	e0bffc17 	ldw	r2,-16(fp)
 2010e70:	1000051e 	bne	r2,zero,2010e88 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2010e74:	e0bfff17 	ldw	r2,-4(fp)
 2010e78:	00c01b84 	movi	r3,110
 2010e7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2010e80:	0005883a 	mov	r2,zero
 2010e84:	0000a906 	br	201112c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2010e88:	e0bffc17 	ldw	r2,-16(fp)
 2010e8c:	10800003 	ldbu	r2,0(r2)
 2010e90:	10803fcc 	andi	r2,r2,255
 2010e94:	10800160 	cmpeqi	r2,r2,5
 2010e98:	1000051e 	bne	r2,zero,2010eb0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2010e9c:	e0bfff17 	ldw	r2,-4(fp)
 2010ea0:	00c00044 	movi	r3,1
 2010ea4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2010ea8:	0005883a 	mov	r2,zero
 2010eac:	00009f06 	br	201112c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2010eb0:	e0fffe03 	ldbu	r3,-8(fp)
 2010eb4:	00bfe004 	movi	r2,-128
 2010eb8:	1884703a 	and	r2,r3,r2
 2010ebc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 2010ec0:	e0bff503 	ldbu	r2,-44(fp)
 2010ec4:	10000626 	beq	r2,zero,2010ee0 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 2010ec8:	e0bffe03 	ldbu	r2,-8(fp)
 2010ecc:	10801fcc 	andi	r2,r2,127
 2010ed0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 2010ed4:	00800044 	movi	r2,1
 2010ed8:	e0bff385 	stb	r2,-50(fp)
 2010edc:	00000106 	br	2010ee4 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 2010ee0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2010ee4:	e0bfff17 	ldw	r2,-4(fp)
 2010ee8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010eec:	0005303a 	rdctl	r2,status
 2010ef0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ef4:	e0fffb17 	ldw	r3,-20(fp)
 2010ef8:	00bfff84 	movi	r2,-2
 2010efc:	1884703a 	and	r2,r3,r2
 2010f00:	1001703a 	wrctl	status,r2
  
  return context;
 2010f04:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 2010f08:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 2010f0c:	e0bffe03 	ldbu	r2,-8(fp)
 2010f10:	10c00060 	cmpeqi	r3,r2,1
 2010f14:	18005f1e 	bne	r3,zero,2011094 <OSFlagAccept+0x260>
 2010f18:	10c00088 	cmpgei	r3,r2,2
 2010f1c:	1800021e 	bne	r3,zero,2010f28 <OSFlagAccept+0xf4>
 2010f20:	10003f26 	beq	r2,zero,2011020 <OSFlagAccept+0x1ec>
 2010f24:	00007706 	br	2011104 <OSFlagAccept+0x2d0>
 2010f28:	10c000a0 	cmpeqi	r3,r2,2
 2010f2c:	1800031e 	bne	r3,zero,2010f3c <OSFlagAccept+0x108>
 2010f30:	108000e0 	cmpeqi	r2,r2,3
 2010f34:	10001e1e 	bne	r2,zero,2010fb0 <OSFlagAccept+0x17c>
 2010f38:	00007206 	br	2011104 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2010f3c:	e0bffc17 	ldw	r2,-16(fp)
 2010f40:	10c0020b 	ldhu	r3,8(r2)
 2010f44:	e0bffd0b 	ldhu	r2,-12(fp)
 2010f48:	1884703a 	and	r2,r3,r2
 2010f4c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2010f50:	e0fff30b 	ldhu	r3,-52(fp)
 2010f54:	e0bffd0b 	ldhu	r2,-12(fp)
 2010f58:	18800d1e 	bne	r3,r2,2010f90 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2010f5c:	e0bff383 	ldbu	r2,-50(fp)
 2010f60:	10800058 	cmpnei	r2,r2,1
 2010f64:	10000d1e 	bne	r2,zero,2010f9c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2010f68:	e0bffc17 	ldw	r2,-16(fp)
 2010f6c:	1080020b 	ldhu	r2,8(r2)
 2010f70:	1007883a 	mov	r3,r2
 2010f74:	e0bff30b 	ldhu	r2,-52(fp)
 2010f78:	0084303a 	nor	r2,zero,r2
 2010f7c:	1884703a 	and	r2,r3,r2
 2010f80:	1007883a 	mov	r3,r2
 2010f84:	e0bffc17 	ldw	r2,-16(fp)
 2010f88:	10c0020d 	sth	r3,8(r2)
 2010f8c:	00000306 	br	2010f9c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2010f90:	e0bfff17 	ldw	r2,-4(fp)
 2010f94:	00c01c04 	movi	r3,112
 2010f98:	10c00005 	stb	r3,0(r2)
 2010f9c:	e0bff417 	ldw	r2,-48(fp)
 2010fa0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010fa4:	e0bff617 	ldw	r2,-40(fp)
 2010fa8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2010fac:	00005e06 	br	2011128 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2010fb0:	e0bffc17 	ldw	r2,-16(fp)
 2010fb4:	10c0020b 	ldhu	r3,8(r2)
 2010fb8:	e0bffd0b 	ldhu	r2,-12(fp)
 2010fbc:	1884703a 	and	r2,r3,r2
 2010fc0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2010fc4:	e0bff30b 	ldhu	r2,-52(fp)
 2010fc8:	10000d26 	beq	r2,zero,2011000 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2010fcc:	e0bff383 	ldbu	r2,-50(fp)
 2010fd0:	10800058 	cmpnei	r2,r2,1
 2010fd4:	10000d1e 	bne	r2,zero,201100c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2010fd8:	e0bffc17 	ldw	r2,-16(fp)
 2010fdc:	1080020b 	ldhu	r2,8(r2)
 2010fe0:	1007883a 	mov	r3,r2
 2010fe4:	e0bff30b 	ldhu	r2,-52(fp)
 2010fe8:	0084303a 	nor	r2,zero,r2
 2010fec:	1884703a 	and	r2,r3,r2
 2010ff0:	1007883a 	mov	r3,r2
 2010ff4:	e0bffc17 	ldw	r2,-16(fp)
 2010ff8:	10c0020d 	sth	r3,8(r2)
 2010ffc:	00000306 	br	201100c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2011000:	e0bfff17 	ldw	r2,-4(fp)
 2011004:	00c01c04 	movi	r3,112
 2011008:	10c00005 	stb	r3,0(r2)
 201100c:	e0bff417 	ldw	r2,-48(fp)
 2011010:	e0bff715 	stw	r2,-36(fp)
 2011014:	e0bff717 	ldw	r2,-36(fp)
 2011018:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 201101c:	00004206 	br	2011128 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2011020:	e0bffc17 	ldw	r2,-16(fp)
 2011024:	1080020b 	ldhu	r2,8(r2)
 2011028:	0084303a 	nor	r2,zero,r2
 201102c:	1007883a 	mov	r3,r2
 2011030:	e0bffd0b 	ldhu	r2,-12(fp)
 2011034:	1884703a 	and	r2,r3,r2
 2011038:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201103c:	e0fff30b 	ldhu	r3,-52(fp)
 2011040:	e0bffd0b 	ldhu	r2,-12(fp)
 2011044:	18800b1e 	bne	r3,r2,2011074 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011048:	e0bff383 	ldbu	r2,-50(fp)
 201104c:	10800058 	cmpnei	r2,r2,1
 2011050:	10000b1e 	bne	r2,zero,2011080 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2011054:	e0bffc17 	ldw	r2,-16(fp)
 2011058:	10c0020b 	ldhu	r3,8(r2)
 201105c:	e0bff30b 	ldhu	r2,-52(fp)
 2011060:	1884b03a 	or	r2,r3,r2
 2011064:	1007883a 	mov	r3,r2
 2011068:	e0bffc17 	ldw	r2,-16(fp)
 201106c:	10c0020d 	sth	r3,8(r2)
 2011070:	00000306 	br	2011080 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2011074:	e0bfff17 	ldw	r2,-4(fp)
 2011078:	00c01c04 	movi	r3,112
 201107c:	10c00005 	stb	r3,0(r2)
 2011080:	e0bff417 	ldw	r2,-48(fp)
 2011084:	e0bff815 	stw	r2,-32(fp)
 2011088:	e0bff817 	ldw	r2,-32(fp)
 201108c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2011090:	00002506 	br	2011128 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2011094:	e0bffc17 	ldw	r2,-16(fp)
 2011098:	1080020b 	ldhu	r2,8(r2)
 201109c:	0084303a 	nor	r2,zero,r2
 20110a0:	1007883a 	mov	r3,r2
 20110a4:	e0bffd0b 	ldhu	r2,-12(fp)
 20110a8:	1884703a 	and	r2,r3,r2
 20110ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 20110b0:	e0bff30b 	ldhu	r2,-52(fp)
 20110b4:	10000b26 	beq	r2,zero,20110e4 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20110b8:	e0bff383 	ldbu	r2,-50(fp)
 20110bc:	10800058 	cmpnei	r2,r2,1
 20110c0:	10000b1e 	bne	r2,zero,20110f0 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 20110c4:	e0bffc17 	ldw	r2,-16(fp)
 20110c8:	10c0020b 	ldhu	r3,8(r2)
 20110cc:	e0bff30b 	ldhu	r2,-52(fp)
 20110d0:	1884b03a 	or	r2,r3,r2
 20110d4:	1007883a 	mov	r3,r2
 20110d8:	e0bffc17 	ldw	r2,-16(fp)
 20110dc:	10c0020d 	sth	r3,8(r2)
 20110e0:	00000306 	br	20110f0 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20110e4:	e0bfff17 	ldw	r2,-4(fp)
 20110e8:	00c01c04 	movi	r3,112
 20110ec:	10c00005 	stb	r3,0(r2)
 20110f0:	e0bff417 	ldw	r2,-48(fp)
 20110f4:	e0bff915 	stw	r2,-28(fp)
 20110f8:	e0bff917 	ldw	r2,-28(fp)
 20110fc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2011100:	00000906 	br	2011128 <OSFlagAccept+0x2f4>
 2011104:	e0bff417 	ldw	r2,-48(fp)
 2011108:	e0bffa15 	stw	r2,-24(fp)
 201110c:	e0bffa17 	ldw	r2,-24(fp)
 2011110:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2011114:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2011118:	e0bfff17 	ldw	r2,-4(fp)
 201111c:	00c01bc4 	movi	r3,111
 2011120:	10c00005 	stb	r3,0(r2)
             break;
 2011124:	0001883a 	nop
    }
    return (flags_rdy);
 2011128:	e0bff30b 	ldhu	r2,-52(fp)
}
 201112c:	e037883a 	mov	sp,fp
 2011130:	df000017 	ldw	fp,0(sp)
 2011134:	dec00104 	addi	sp,sp,4
 2011138:	f800283a 	ret

0201113c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 201113c:	defff804 	addi	sp,sp,-32
 2011140:	df000715 	stw	fp,28(sp)
 2011144:	df000704 	addi	fp,sp,28
 2011148:	2005883a 	mov	r2,r4
 201114c:	e17fff15 	stw	r5,-4(fp)
 2011150:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2011154:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2011158:	e0bfff17 	ldw	r2,-4(fp)
 201115c:	1000021e 	bne	r2,zero,2011168 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2011160:	0005883a 	mov	r2,zero
 2011164:	00003306 	br	2011234 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2011168:	d0a72e03 	ldbu	r2,-25416(gp)
 201116c:	10803fcc 	andi	r2,r2,255
 2011170:	10000526 	beq	r2,zero,2011188 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2011174:	e0bfff17 	ldw	r2,-4(fp)
 2011178:	00c00404 	movi	r3,16
 201117c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 2011180:	0005883a 	mov	r2,zero
 2011184:	00002b06 	br	2011234 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011188:	0005303a 	rdctl	r2,status
 201118c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011190:	e0fffd17 	ldw	r3,-12(fp)
 2011194:	00bfff84 	movi	r2,-2
 2011198:	1884703a 	and	r2,r3,r2
 201119c:	1001703a 	wrctl	status,r2
  
  return context;
 20111a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20111a4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 20111a8:	d0a73117 	ldw	r2,-25404(gp)
 20111ac:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 20111b0:	e0bffb17 	ldw	r2,-20(fp)
 20111b4:	10001726 	beq	r2,zero,2011214 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 20111b8:	d0a73117 	ldw	r2,-25404(gp)
 20111bc:	10800117 	ldw	r2,4(r2)
 20111c0:	d0a73115 	stw	r2,-25404(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 20111c4:	e0bffb17 	ldw	r2,-20(fp)
 20111c8:	00c00144 	movi	r3,5
 20111cc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 20111d0:	e0bffb17 	ldw	r2,-20(fp)
 20111d4:	e0fffe0b 	ldhu	r3,-8(fp)
 20111d8:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 20111dc:	e0bffb17 	ldw	r2,-20(fp)
 20111e0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 20111e4:	e0bffb17 	ldw	r2,-20(fp)
 20111e8:	00c00fc4 	movi	r3,63
 20111ec:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20111f0:	e0bffb17 	ldw	r2,-20(fp)
 20111f4:	100002c5 	stb	zero,11(r2)
 20111f8:	e0bff917 	ldw	r2,-28(fp)
 20111fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011200:	e0bffa17 	ldw	r2,-24(fp)
 2011204:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2011208:	e0bfff17 	ldw	r2,-4(fp)
 201120c:	10000005 	stb	zero,0(r2)
 2011210:	00000706 	br	2011230 <OSFlagCreate+0xf4>
 2011214:	e0bff917 	ldw	r2,-28(fp)
 2011218:	e0bffc15 	stw	r2,-16(fp)
 201121c:	e0bffc17 	ldw	r2,-16(fp)
 2011220:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2011224:	e0bfff17 	ldw	r2,-4(fp)
 2011228:	00c01c84 	movi	r3,114
 201122c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2011230:	e0bffb17 	ldw	r2,-20(fp)
}
 2011234:	e037883a 	mov	sp,fp
 2011238:	df000017 	ldw	fp,0(sp)
 201123c:	dec00104 	addi	sp,sp,4
 2011240:	f800283a 	ret

02011244 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2011244:	defff204 	addi	sp,sp,-56
 2011248:	dfc00d15 	stw	ra,52(sp)
 201124c:	df000c15 	stw	fp,48(sp)
 2011250:	df000c04 	addi	fp,sp,48
 2011254:	e13ffd15 	stw	r4,-12(fp)
 2011258:	2805883a 	mov	r2,r5
 201125c:	e1bfff15 	stw	r6,-4(fp)
 2011260:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2011264:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2011268:	e0bfff17 	ldw	r2,-4(fp)
 201126c:	1000021e 	bne	r2,zero,2011278 <OSFlagDel+0x34>
        return (pgrp);
 2011270:	e0bffd17 	ldw	r2,-12(fp)
 2011274:	00008006 	br	2011478 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2011278:	e0bffd17 	ldw	r2,-12(fp)
 201127c:	1000051e 	bne	r2,zero,2011294 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011280:	e0bfff17 	ldw	r2,-4(fp)
 2011284:	00c01b84 	movi	r3,110
 2011288:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 201128c:	e0bffd17 	ldw	r2,-12(fp)
 2011290:	00007906 	br	2011478 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2011294:	d0a72e03 	ldbu	r2,-25416(gp)
 2011298:	10803fcc 	andi	r2,r2,255
 201129c:	10000526 	beq	r2,zero,20112b4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 20112a0:	e0bfff17 	ldw	r2,-4(fp)
 20112a4:	00c003c4 	movi	r3,15
 20112a8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20112ac:	e0bffd17 	ldw	r2,-12(fp)
 20112b0:	00007106 	br	2011478 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 20112b4:	e0bffd17 	ldw	r2,-12(fp)
 20112b8:	10800003 	ldbu	r2,0(r2)
 20112bc:	10803fcc 	andi	r2,r2,255
 20112c0:	10800160 	cmpeqi	r2,r2,5
 20112c4:	1000051e 	bne	r2,zero,20112dc <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 20112c8:	e0bfff17 	ldw	r2,-4(fp)
 20112cc:	00c00044 	movi	r3,1
 20112d0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 20112d4:	e0bffd17 	ldw	r2,-12(fp)
 20112d8:	00006706 	br	2011478 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20112dc:	0005303a 	rdctl	r2,status
 20112e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20112e4:	e0fffc17 	ldw	r3,-16(fp)
 20112e8:	00bfff84 	movi	r2,-2
 20112ec:	1884703a 	and	r2,r3,r2
 20112f0:	1001703a 	wrctl	status,r2
  
  return context;
 20112f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20112f8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 20112fc:	e0bffd17 	ldw	r2,-12(fp)
 2011300:	10800117 	ldw	r2,4(r2)
 2011304:	10000326 	beq	r2,zero,2011314 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2011308:	00800044 	movi	r2,1
 201130c:	e0bff405 	stb	r2,-48(fp)
 2011310:	00000106 	br	2011318 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2011314:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2011318:	e0bffe03 	ldbu	r2,-8(fp)
 201131c:	10000326 	beq	r2,zero,201132c <OSFlagDel+0xe8>
 2011320:	10800060 	cmpeqi	r2,r2,1
 2011324:	1000231e 	bne	r2,zero,20113b4 <OSFlagDel+0x170>
 2011328:	00004806 	br	201144c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 201132c:	e0bff403 	ldbu	r2,-48(fp)
 2011330:	1000161e 	bne	r2,zero,201138c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2011334:	e0bffd17 	ldw	r2,-12(fp)
 2011338:	00c00fc4 	movi	r3,63
 201133c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2011340:	e0bffd17 	ldw	r2,-12(fp)
 2011344:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2011348:	e0bffd17 	ldw	r2,-12(fp)
 201134c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2011350:	d0e73117 	ldw	r3,-25404(gp)
 2011354:	e0bffd17 	ldw	r2,-12(fp)
 2011358:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 201135c:	e0bffd17 	ldw	r2,-12(fp)
 2011360:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2011364:	e0bffd17 	ldw	r2,-12(fp)
 2011368:	d0a73115 	stw	r2,-25404(gp)
 201136c:	e0bff717 	ldw	r2,-36(fp)
 2011370:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011374:	e0bff817 	ldw	r2,-32(fp)
 2011378:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 201137c:	e0bfff17 	ldw	r2,-4(fp)
 2011380:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2011384:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 2011388:	00003a06 	br	2011474 <OSFlagDel+0x230>
 201138c:	e0bff717 	ldw	r2,-36(fp)
 2011390:	e0bff915 	stw	r2,-28(fp)
 2011394:	e0bff917 	ldw	r2,-28(fp)
 2011398:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 201139c:	e0bfff17 	ldw	r2,-4(fp)
 20113a0:	00c01244 	movi	r3,73
 20113a4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 20113a8:	e0bffd17 	ldw	r2,-12(fp)
 20113ac:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 20113b0:	00003006 	br	2011474 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 20113b4:	e0bffd17 	ldw	r2,-12(fp)
 20113b8:	10800117 	ldw	r2,4(r2)
 20113bc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20113c0:	00000606 	br	20113dc <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 20113c4:	000b883a 	mov	r5,zero
 20113c8:	e13ff517 	ldw	r4,-44(fp)
 20113cc:	20123b00 	call	20123b0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20113d0:	e0bff517 	ldw	r2,-44(fp)
 20113d4:	10800017 	ldw	r2,0(r2)
 20113d8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 20113dc:	e0bff517 	ldw	r2,-44(fp)
 20113e0:	103ff81e 	bne	r2,zero,20113c4 <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 20113e4:	e0bffd17 	ldw	r2,-12(fp)
 20113e8:	00c00fc4 	movi	r3,63
 20113ec:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 20113f0:	e0bffd17 	ldw	r2,-12(fp)
 20113f4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 20113f8:	e0bffd17 	ldw	r2,-12(fp)
 20113fc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2011400:	d0e73117 	ldw	r3,-25404(gp)
 2011404:	e0bffd17 	ldw	r2,-12(fp)
 2011408:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 201140c:	e0bffd17 	ldw	r2,-12(fp)
 2011410:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2011414:	e0bffd17 	ldw	r2,-12(fp)
 2011418:	d0a73115 	stw	r2,-25404(gp)
 201141c:	e0bff717 	ldw	r2,-36(fp)
 2011420:	e0bffa15 	stw	r2,-24(fp)
 2011424:	e0bffa17 	ldw	r2,-24(fp)
 2011428:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201142c:	e0bff403 	ldbu	r2,-48(fp)
 2011430:	10800058 	cmpnei	r2,r2,1
 2011434:	1000011e 	bne	r2,zero,201143c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2011438:	20105d00 	call	20105d0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 201143c:	e0bfff17 	ldw	r2,-4(fp)
 2011440:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2011444:	e03ff615 	stw	zero,-40(fp)
             break;
 2011448:	00000a06 	br	2011474 <OSFlagDel+0x230>
 201144c:	e0bff717 	ldw	r2,-36(fp)
 2011450:	e0bffb15 	stw	r2,-20(fp)
 2011454:	e0bffb17 	ldw	r2,-20(fp)
 2011458:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 201145c:	e0bfff17 	ldw	r2,-4(fp)
 2011460:	00c001c4 	movi	r3,7
 2011464:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 2011468:	e0bffd17 	ldw	r2,-12(fp)
 201146c:	e0bff615 	stw	r2,-40(fp)
             break;
 2011470:	0001883a 	nop
    }
    return (pgrp_return);
 2011474:	e0bff617 	ldw	r2,-40(fp)
}
 2011478:	e037883a 	mov	sp,fp
 201147c:	dfc00117 	ldw	ra,4(sp)
 2011480:	df000017 	ldw	fp,0(sp)
 2011484:	dec00204 	addi	sp,sp,8
 2011488:	f800283a 	ret

0201148c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 201148c:	defff604 	addi	sp,sp,-40
 2011490:	dfc00915 	stw	ra,36(sp)
 2011494:	df000815 	stw	fp,32(sp)
 2011498:	df000804 	addi	fp,sp,32
 201149c:	e13ffd15 	stw	r4,-12(fp)
 20114a0:	e17ffe15 	stw	r5,-8(fp)
 20114a4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20114a8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20114ac:	e0bfff17 	ldw	r2,-4(fp)
 20114b0:	1000021e 	bne	r2,zero,20114bc <OSFlagNameGet+0x30>
        return (0);
 20114b4:	0005883a 	mov	r2,zero
 20114b8:	00003906 	br	20115a0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20114bc:	e0bffd17 	ldw	r2,-12(fp)
 20114c0:	1000051e 	bne	r2,zero,20114d8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20114c4:	e0bfff17 	ldw	r2,-4(fp)
 20114c8:	00c01b84 	movi	r3,110
 20114cc:	10c00005 	stb	r3,0(r2)
        return (0);
 20114d0:	0005883a 	mov	r2,zero
 20114d4:	00003206 	br	20115a0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20114d8:	e0bffe17 	ldw	r2,-8(fp)
 20114dc:	1000051e 	bne	r2,zero,20114f4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 20114e0:	e0bfff17 	ldw	r2,-4(fp)
 20114e4:	00c00304 	movi	r3,12
 20114e8:	10c00005 	stb	r3,0(r2)
        return (0);
 20114ec:	0005883a 	mov	r2,zero
 20114f0:	00002b06 	br	20115a0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20114f4:	d0a72e03 	ldbu	r2,-25416(gp)
 20114f8:	10803fcc 	andi	r2,r2,255
 20114fc:	10000526 	beq	r2,zero,2011514 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2011500:	e0bfff17 	ldw	r2,-4(fp)
 2011504:	00c00444 	movi	r3,17
 2011508:	10c00005 	stb	r3,0(r2)
        return (0);
 201150c:	0005883a 	mov	r2,zero
 2011510:	00002306 	br	20115a0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011514:	0005303a 	rdctl	r2,status
 2011518:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201151c:	e0fffc17 	ldw	r3,-16(fp)
 2011520:	00bfff84 	movi	r2,-2
 2011524:	1884703a 	and	r2,r3,r2
 2011528:	1001703a 	wrctl	status,r2
  
  return context;
 201152c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2011530:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2011534:	e0bffd17 	ldw	r2,-12(fp)
 2011538:	10800003 	ldbu	r2,0(r2)
 201153c:	10803fcc 	andi	r2,r2,255
 2011540:	10800160 	cmpeqi	r2,r2,5
 2011544:	1000091e 	bne	r2,zero,201156c <OSFlagNameGet+0xe0>
 2011548:	e0bff817 	ldw	r2,-32(fp)
 201154c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011550:	e0bff917 	ldw	r2,-28(fp)
 2011554:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2011558:	e0bfff17 	ldw	r2,-4(fp)
 201155c:	00c00044 	movi	r3,1
 2011560:	10c00005 	stb	r3,0(r2)
        return (0);
 2011564:	0005883a 	mov	r2,zero
 2011568:	00000d06 	br	20115a0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 201156c:	e0bffd17 	ldw	r2,-12(fp)
 2011570:	10800284 	addi	r2,r2,10
 2011574:	100b883a 	mov	r5,r2
 2011578:	e13ffe17 	ldw	r4,-8(fp)
 201157c:	20107140 	call	2010714 <OS_StrCopy>
 2011580:	e0bffb05 	stb	r2,-20(fp)
 2011584:	e0bff817 	ldw	r2,-32(fp)
 2011588:	e0bffa15 	stw	r2,-24(fp)
 201158c:	e0bffa17 	ldw	r2,-24(fp)
 2011590:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2011594:	e0bfff17 	ldw	r2,-4(fp)
 2011598:	10000005 	stb	zero,0(r2)
    return (len);
 201159c:	e0bffb03 	ldbu	r2,-20(fp)
}
 20115a0:	e037883a 	mov	sp,fp
 20115a4:	dfc00117 	ldw	ra,4(sp)
 20115a8:	df000017 	ldw	fp,0(sp)
 20115ac:	dec00204 	addi	sp,sp,8
 20115b0:	f800283a 	ret

020115b4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 20115b4:	defff504 	addi	sp,sp,-44
 20115b8:	dfc00a15 	stw	ra,40(sp)
 20115bc:	df000915 	stw	fp,36(sp)
 20115c0:	df000904 	addi	fp,sp,36
 20115c4:	e13ffd15 	stw	r4,-12(fp)
 20115c8:	e17ffe15 	stw	r5,-8(fp)
 20115cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20115d0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20115d4:	e0bfff17 	ldw	r2,-4(fp)
 20115d8:	10004326 	beq	r2,zero,20116e8 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 20115dc:	e0bffd17 	ldw	r2,-12(fp)
 20115e0:	1000041e 	bne	r2,zero,20115f4 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20115e4:	e0bfff17 	ldw	r2,-4(fp)
 20115e8:	00c01b84 	movi	r3,110
 20115ec:	10c00005 	stb	r3,0(r2)
        return;
 20115f0:	00003e06 	br	20116ec <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 20115f4:	e0bffe17 	ldw	r2,-8(fp)
 20115f8:	1000041e 	bne	r2,zero,201160c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 20115fc:	e0bfff17 	ldw	r2,-4(fp)
 2011600:	00c00304 	movi	r3,12
 2011604:	10c00005 	stb	r3,0(r2)
        return;
 2011608:	00003806 	br	20116ec <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201160c:	d0a72e03 	ldbu	r2,-25416(gp)
 2011610:	10803fcc 	andi	r2,r2,255
 2011614:	10000426 	beq	r2,zero,2011628 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2011618:	e0bfff17 	ldw	r2,-4(fp)
 201161c:	00c00484 	movi	r3,18
 2011620:	10c00005 	stb	r3,0(r2)
        return;
 2011624:	00003106 	br	20116ec <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011628:	0005303a 	rdctl	r2,status
 201162c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011630:	e0fffc17 	ldw	r3,-16(fp)
 2011634:	00bfff84 	movi	r2,-2
 2011638:	1884703a 	and	r2,r3,r2
 201163c:	1001703a 	wrctl	status,r2
  
  return context;
 2011640:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2011644:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2011648:	e0bffd17 	ldw	r2,-12(fp)
 201164c:	10800003 	ldbu	r2,0(r2)
 2011650:	10803fcc 	andi	r2,r2,255
 2011654:	10800160 	cmpeqi	r2,r2,5
 2011658:	1000081e 	bne	r2,zero,201167c <OSFlagNameSet+0xc8>
 201165c:	e0bff717 	ldw	r2,-36(fp)
 2011660:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011664:	e0bff817 	ldw	r2,-32(fp)
 2011668:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 201166c:	e0bfff17 	ldw	r2,-4(fp)
 2011670:	00c00044 	movi	r3,1
 2011674:	10c00005 	stb	r3,0(r2)
        return;
 2011678:	00001c06 	br	20116ec <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201167c:	e13ffe17 	ldw	r4,-8(fp)
 2011680:	20107880 	call	2010788 <OS_StrLen>
 2011684:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2011688:	e0bffa03 	ldbu	r2,-24(fp)
 201168c:	10800830 	cmpltui	r2,r2,32
 2011690:	1000081e 	bne	r2,zero,20116b4 <OSFlagNameSet+0x100>
 2011694:	e0bff717 	ldw	r2,-36(fp)
 2011698:	e0bff915 	stw	r2,-28(fp)
 201169c:	e0bff917 	ldw	r2,-28(fp)
 20116a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 20116a4:	e0bfff17 	ldw	r2,-4(fp)
 20116a8:	00c01cc4 	movi	r3,115
 20116ac:	10c00005 	stb	r3,0(r2)
        return;
 20116b0:	00000e06 	br	20116ec <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 20116b4:	e0bffd17 	ldw	r2,-12(fp)
 20116b8:	10800284 	addi	r2,r2,10
 20116bc:	e17ffe17 	ldw	r5,-8(fp)
 20116c0:	1009883a 	mov	r4,r2
 20116c4:	20107140 	call	2010714 <OS_StrCopy>
 20116c8:	e0bff717 	ldw	r2,-36(fp)
 20116cc:	e0bffb15 	stw	r2,-20(fp)
 20116d0:	e0bffb17 	ldw	r2,-20(fp)
 20116d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20116d8:	e0bfff17 	ldw	r2,-4(fp)
 20116dc:	10000005 	stb	zero,0(r2)
    return;
 20116e0:	0001883a 	nop
 20116e4:	00000106 	br	20116ec <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 20116e8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 20116ec:	e037883a 	mov	sp,fp
 20116f0:	dfc00117 	ldw	ra,4(sp)
 20116f4:	df000017 	ldw	fp,0(sp)
 20116f8:	dec00204 	addi	sp,sp,8
 20116fc:	f800283a 	ret

02011700 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2011700:	deffe104 	addi	sp,sp,-124
 2011704:	dfc01e15 	stw	ra,120(sp)
 2011708:	df001d15 	stw	fp,116(sp)
 201170c:	df001d04 	addi	fp,sp,116
 2011710:	e13ffc15 	stw	r4,-16(fp)
 2011714:	2809883a 	mov	r4,r5
 2011718:	3007883a 	mov	r3,r6
 201171c:	3805883a 	mov	r2,r7
 2011720:	e13ffd0d 	sth	r4,-12(fp)
 2011724:	e0fffe05 	stb	r3,-8(fp)
 2011728:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 201172c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2011730:	e0800217 	ldw	r2,8(fp)
 2011734:	1000021e 	bne	r2,zero,2011740 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 2011738:	0005883a 	mov	r2,zero
 201173c:	00015906 	br	2011ca4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2011740:	e0bffc17 	ldw	r2,-16(fp)
 2011744:	1000051e 	bne	r2,zero,201175c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011748:	e0800217 	ldw	r2,8(fp)
 201174c:	00c01b84 	movi	r3,110
 2011750:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011754:	0005883a 	mov	r2,zero
 2011758:	00015206 	br	2011ca4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201175c:	d0a72e03 	ldbu	r2,-25416(gp)
 2011760:	10803fcc 	andi	r2,r2,255
 2011764:	10000526 	beq	r2,zero,201177c <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2011768:	e0800217 	ldw	r2,8(fp)
 201176c:	00c00084 	movi	r3,2
 2011770:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011774:	0005883a 	mov	r2,zero
 2011778:	00014a06 	br	2011ca4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 201177c:	d0a72003 	ldbu	r2,-25472(gp)
 2011780:	10803fcc 	andi	r2,r2,255
 2011784:	10000526 	beq	r2,zero,201179c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 2011788:	e0800217 	ldw	r2,8(fp)
 201178c:	00c00344 	movi	r3,13
 2011790:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011794:	0005883a 	mov	r2,zero
 2011798:	00014206 	br	2011ca4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 201179c:	e0bffc17 	ldw	r2,-16(fp)
 20117a0:	10800003 	ldbu	r2,0(r2)
 20117a4:	10803fcc 	andi	r2,r2,255
 20117a8:	10800160 	cmpeqi	r2,r2,5
 20117ac:	1000051e 	bne	r2,zero,20117c4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 20117b0:	e0800217 	ldw	r2,8(fp)
 20117b4:	00c00044 	movi	r3,1
 20117b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20117bc:	0005883a 	mov	r2,zero
 20117c0:	00013806 	br	2011ca4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 20117c4:	e0fffe03 	ldbu	r3,-8(fp)
 20117c8:	00bfe004 	movi	r2,-128
 20117cc:	1884703a 	and	r2,r3,r2
 20117d0:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 20117d4:	e0bfe603 	ldbu	r2,-104(fp)
 20117d8:	10000626 	beq	r2,zero,20117f4 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 20117dc:	e0bffe03 	ldbu	r2,-8(fp)
 20117e0:	10801fcc 	andi	r2,r2,127
 20117e4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 20117e8:	00800044 	movi	r2,1
 20117ec:	e0bfe405 	stb	r2,-112(fp)
 20117f0:	00000106 	br	20117f8 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 20117f4:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20117f8:	0005303a 	rdctl	r2,status
 20117fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011800:	e0fff617 	ldw	r3,-40(fp)
 2011804:	00bfff84 	movi	r2,-2
 2011808:	1884703a 	and	r2,r3,r2
 201180c:	1001703a 	wrctl	status,r2
  
  return context;
 2011810:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2011814:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 2011818:	e0bffe03 	ldbu	r2,-8(fp)
 201181c:	10c00060 	cmpeqi	r3,r2,1
 2011820:	1800921e 	bne	r3,zero,2011a6c <OSFlagPend+0x36c>
 2011824:	10c00088 	cmpgei	r3,r2,2
 2011828:	1800021e 	bne	r3,zero,2011834 <OSFlagPend+0x134>
 201182c:	10006126 	beq	r2,zero,20119b4 <OSFlagPend+0x2b4>
 2011830:	0000bb06 	br	2011b20 <OSFlagPend+0x420>
 2011834:	10c000a0 	cmpeqi	r3,r2,2
 2011838:	1800031e 	bne	r3,zero,2011848 <OSFlagPend+0x148>
 201183c:	108000e0 	cmpeqi	r2,r2,3
 2011840:	10002f1e 	bne	r2,zero,2011900 <OSFlagPend+0x200>
 2011844:	0000b606 	br	2011b20 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2011848:	e0bffc17 	ldw	r2,-16(fp)
 201184c:	10c0020b 	ldhu	r3,8(r2)
 2011850:	e0bffd0b 	ldhu	r2,-12(fp)
 2011854:	1884703a 	and	r2,r3,r2
 2011858:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201185c:	e0ffe80b 	ldhu	r3,-96(fp)
 2011860:	e0bffd0b 	ldhu	r2,-12(fp)
 2011864:	1880171e 	bne	r3,r2,20118c4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011868:	e0bfe403 	ldbu	r2,-112(fp)
 201186c:	10800058 	cmpnei	r2,r2,1
 2011870:	1000091e 	bne	r2,zero,2011898 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2011874:	e0bffc17 	ldw	r2,-16(fp)
 2011878:	1080020b 	ldhu	r2,8(r2)
 201187c:	1007883a 	mov	r3,r2
 2011880:	e0bfe80b 	ldhu	r2,-96(fp)
 2011884:	0084303a 	nor	r2,zero,r2
 2011888:	1884703a 	and	r2,r3,r2
 201188c:	1007883a 	mov	r3,r2
 2011890:	e0bffc17 	ldw	r2,-16(fp)
 2011894:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2011898:	d0a72f17 	ldw	r2,-25412(gp)
 201189c:	e0ffe80b 	ldhu	r3,-96(fp)
 20118a0:	10c00b0d 	sth	r3,44(r2)
 20118a4:	e0bfe517 	ldw	r2,-108(fp)
 20118a8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20118ac:	e0bfe717 	ldw	r2,-100(fp)
 20118b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20118b4:	e0800217 	ldw	r2,8(fp)
 20118b8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20118bc:	e0bfe80b 	ldhu	r2,-96(fp)
 20118c0:	0000f806 	br	2011ca4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20118c4:	e13ffd0b 	ldhu	r4,-12(fp)
 20118c8:	e17ffe03 	ldbu	r5,-8(fp)
 20118cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20118d0:	e0fff704 	addi	r3,fp,-36
 20118d4:	d8800015 	stw	r2,0(sp)
 20118d8:	280f883a 	mov	r7,r5
 20118dc:	200d883a 	mov	r6,r4
 20118e0:	180b883a 	mov	r5,r3
 20118e4:	e13ffc17 	ldw	r4,-16(fp)
 20118e8:	20121700 	call	2012170 <OS_FlagBlock>
 20118ec:	e0bfe517 	ldw	r2,-108(fp)
 20118f0:	e0bfe915 	stw	r2,-92(fp)
 20118f4:	e0bfe917 	ldw	r2,-92(fp)
 20118f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20118fc:	00009206 	br	2011b48 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 2011900:	e0bffc17 	ldw	r2,-16(fp)
 2011904:	10c0020b 	ldhu	r3,8(r2)
 2011908:	e0bffd0b 	ldhu	r2,-12(fp)
 201190c:	1884703a 	and	r2,r3,r2
 2011910:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2011914:	e0bfe80b 	ldhu	r2,-96(fp)
 2011918:	10001726 	beq	r2,zero,2011978 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201191c:	e0bfe403 	ldbu	r2,-112(fp)
 2011920:	10800058 	cmpnei	r2,r2,1
 2011924:	1000091e 	bne	r2,zero,201194c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 2011928:	e0bffc17 	ldw	r2,-16(fp)
 201192c:	1080020b 	ldhu	r2,8(r2)
 2011930:	1007883a 	mov	r3,r2
 2011934:	e0bfe80b 	ldhu	r2,-96(fp)
 2011938:	0084303a 	nor	r2,zero,r2
 201193c:	1884703a 	and	r2,r3,r2
 2011940:	1007883a 	mov	r3,r2
 2011944:	e0bffc17 	ldw	r2,-16(fp)
 2011948:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 201194c:	d0a72f17 	ldw	r2,-25412(gp)
 2011950:	e0ffe80b 	ldhu	r3,-96(fp)
 2011954:	10c00b0d 	sth	r3,44(r2)
 2011958:	e0bfe517 	ldw	r2,-108(fp)
 201195c:	e0bfea15 	stw	r2,-88(fp)
 2011960:	e0bfea17 	ldw	r2,-88(fp)
 2011964:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2011968:	e0800217 	ldw	r2,8(fp)
 201196c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2011970:	e0bfe80b 	ldhu	r2,-96(fp)
 2011974:	0000cb06 	br	2011ca4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2011978:	e13ffd0b 	ldhu	r4,-12(fp)
 201197c:	e17ffe03 	ldbu	r5,-8(fp)
 2011980:	e0bfff0b 	ldhu	r2,-4(fp)
 2011984:	e0fff704 	addi	r3,fp,-36
 2011988:	d8800015 	stw	r2,0(sp)
 201198c:	280f883a 	mov	r7,r5
 2011990:	200d883a 	mov	r6,r4
 2011994:	180b883a 	mov	r5,r3
 2011998:	e13ffc17 	ldw	r4,-16(fp)
 201199c:	20121700 	call	2012170 <OS_FlagBlock>
 20119a0:	e0bfe517 	ldw	r2,-108(fp)
 20119a4:	e0bfeb15 	stw	r2,-84(fp)
 20119a8:	e0bfeb17 	ldw	r2,-84(fp)
 20119ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20119b0:	00006506 	br	2011b48 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20119b4:	e0bffc17 	ldw	r2,-16(fp)
 20119b8:	1080020b 	ldhu	r2,8(r2)
 20119bc:	0084303a 	nor	r2,zero,r2
 20119c0:	1007883a 	mov	r3,r2
 20119c4:	e0bffd0b 	ldhu	r2,-12(fp)
 20119c8:	1884703a 	and	r2,r3,r2
 20119cc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 20119d0:	e0ffe80b 	ldhu	r3,-96(fp)
 20119d4:	e0bffd0b 	ldhu	r2,-12(fp)
 20119d8:	1880151e 	bne	r3,r2,2011a30 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20119dc:	e0bfe403 	ldbu	r2,-112(fp)
 20119e0:	10800058 	cmpnei	r2,r2,1
 20119e4:	1000071e 	bne	r2,zero,2011a04 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 20119e8:	e0bffc17 	ldw	r2,-16(fp)
 20119ec:	10c0020b 	ldhu	r3,8(r2)
 20119f0:	e0bfe80b 	ldhu	r2,-96(fp)
 20119f4:	1884b03a 	or	r2,r3,r2
 20119f8:	1007883a 	mov	r3,r2
 20119fc:	e0bffc17 	ldw	r2,-16(fp)
 2011a00:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2011a04:	d0a72f17 	ldw	r2,-25412(gp)
 2011a08:	e0ffe80b 	ldhu	r3,-96(fp)
 2011a0c:	10c00b0d 	sth	r3,44(r2)
 2011a10:	e0bfe517 	ldw	r2,-108(fp)
 2011a14:	e0bfec15 	stw	r2,-80(fp)
 2011a18:	e0bfec17 	ldw	r2,-80(fp)
 2011a1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2011a20:	e0800217 	ldw	r2,8(fp)
 2011a24:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2011a28:	e0bfe80b 	ldhu	r2,-96(fp)
 2011a2c:	00009d06 	br	2011ca4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2011a30:	e13ffd0b 	ldhu	r4,-12(fp)
 2011a34:	e17ffe03 	ldbu	r5,-8(fp)
 2011a38:	e0bfff0b 	ldhu	r2,-4(fp)
 2011a3c:	e0fff704 	addi	r3,fp,-36
 2011a40:	d8800015 	stw	r2,0(sp)
 2011a44:	280f883a 	mov	r7,r5
 2011a48:	200d883a 	mov	r6,r4
 2011a4c:	180b883a 	mov	r5,r3
 2011a50:	e13ffc17 	ldw	r4,-16(fp)
 2011a54:	20121700 	call	2012170 <OS_FlagBlock>
 2011a58:	e0bfe517 	ldw	r2,-108(fp)
 2011a5c:	e0bfed15 	stw	r2,-76(fp)
 2011a60:	e0bfed17 	ldw	r2,-76(fp)
 2011a64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2011a68:	00003706 	br	2011b48 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2011a6c:	e0bffc17 	ldw	r2,-16(fp)
 2011a70:	1080020b 	ldhu	r2,8(r2)
 2011a74:	0084303a 	nor	r2,zero,r2
 2011a78:	1007883a 	mov	r3,r2
 2011a7c:	e0bffd0b 	ldhu	r2,-12(fp)
 2011a80:	1884703a 	and	r2,r3,r2
 2011a84:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2011a88:	e0bfe80b 	ldhu	r2,-96(fp)
 2011a8c:	10001526 	beq	r2,zero,2011ae4 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011a90:	e0bfe403 	ldbu	r2,-112(fp)
 2011a94:	10800058 	cmpnei	r2,r2,1
 2011a98:	1000071e 	bne	r2,zero,2011ab8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2011a9c:	e0bffc17 	ldw	r2,-16(fp)
 2011aa0:	10c0020b 	ldhu	r3,8(r2)
 2011aa4:	e0bfe80b 	ldhu	r2,-96(fp)
 2011aa8:	1884b03a 	or	r2,r3,r2
 2011aac:	1007883a 	mov	r3,r2
 2011ab0:	e0bffc17 	ldw	r2,-16(fp)
 2011ab4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2011ab8:	d0a72f17 	ldw	r2,-25412(gp)
 2011abc:	e0ffe80b 	ldhu	r3,-96(fp)
 2011ac0:	10c00b0d 	sth	r3,44(r2)
 2011ac4:	e0bfe517 	ldw	r2,-108(fp)
 2011ac8:	e0bfee15 	stw	r2,-72(fp)
 2011acc:	e0bfee17 	ldw	r2,-72(fp)
 2011ad0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2011ad4:	e0800217 	ldw	r2,8(fp)
 2011ad8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2011adc:	e0bfe80b 	ldhu	r2,-96(fp)
 2011ae0:	00007006 	br	2011ca4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2011ae4:	e13ffd0b 	ldhu	r4,-12(fp)
 2011ae8:	e17ffe03 	ldbu	r5,-8(fp)
 2011aec:	e0bfff0b 	ldhu	r2,-4(fp)
 2011af0:	e0fff704 	addi	r3,fp,-36
 2011af4:	d8800015 	stw	r2,0(sp)
 2011af8:	280f883a 	mov	r7,r5
 2011afc:	200d883a 	mov	r6,r4
 2011b00:	180b883a 	mov	r5,r3
 2011b04:	e13ffc17 	ldw	r4,-16(fp)
 2011b08:	20121700 	call	2012170 <OS_FlagBlock>
 2011b0c:	e0bfe517 	ldw	r2,-108(fp)
 2011b10:	e0bfef15 	stw	r2,-68(fp)
 2011b14:	e0bfef17 	ldw	r2,-68(fp)
 2011b18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2011b1c:	00000a06 	br	2011b48 <OSFlagPend+0x448>
 2011b20:	e0bfe517 	ldw	r2,-108(fp)
 2011b24:	e0bff015 	stw	r2,-64(fp)
 2011b28:	e0bff017 	ldw	r2,-64(fp)
 2011b2c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2011b30:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2011b34:	e0800217 	ldw	r2,8(fp)
 2011b38:	00c01bc4 	movi	r3,111
 2011b3c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 2011b40:	e0bfe80b 	ldhu	r2,-96(fp)
 2011b44:	00005706 	br	2011ca4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 2011b48:	20105d00 	call	20105d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011b4c:	0005303a 	rdctl	r2,status
 2011b50:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011b54:	e0fff117 	ldw	r3,-60(fp)
 2011b58:	00bfff84 	movi	r2,-2
 2011b5c:	1884703a 	and	r2,r3,r2
 2011b60:	1001703a 	wrctl	status,r2
  
  return context;
 2011b64:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 2011b68:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2011b6c:	d0a72f17 	ldw	r2,-25412(gp)
 2011b70:	10800c43 	ldbu	r2,49(r2)
 2011b74:	10803fcc 	andi	r2,r2,255
 2011b78:	10001c26 	beq	r2,zero,2011bec <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 2011b7c:	d0a72f17 	ldw	r2,-25412(gp)
 2011b80:	10800c43 	ldbu	r2,49(r2)
 2011b84:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2011b88:	d0a72f17 	ldw	r2,-25412(gp)
 2011b8c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2011b90:	e0bff704 	addi	r2,fp,-36
 2011b94:	1009883a 	mov	r4,r2
 2011b98:	20124a40 	call	20124a4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2011b9c:	d0a72f17 	ldw	r2,-25412(gp)
 2011ba0:	10000c05 	stb	zero,48(r2)
 2011ba4:	e0bfe517 	ldw	r2,-108(fp)
 2011ba8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011bac:	e0bff217 	ldw	r2,-56(fp)
 2011bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 2011bb4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 2011bb8:	e0bff303 	ldbu	r2,-52(fp)
 2011bbc:	108000a0 	cmpeqi	r2,r2,2
 2011bc0:	10000426 	beq	r2,zero,2011bd4 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 2011bc4:	e0800217 	ldw	r2,8(fp)
 2011bc8:	00c00384 	movi	r3,14
 2011bcc:	10c00005 	stb	r3,0(r2)
                 break;
 2011bd0:	00000406 	br	2011be4 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 2011bd4:	e0800217 	ldw	r2,8(fp)
 2011bd8:	00c00284 	movi	r3,10
 2011bdc:	10c00005 	stb	r3,0(r2)
                 break;
 2011be0:	0001883a 	nop
        }
        return (flags_rdy);
 2011be4:	e0bfe80b 	ldhu	r2,-96(fp)
 2011be8:	00002e06 	br	2011ca4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 2011bec:	d0a72f17 	ldw	r2,-25412(gp)
 2011bf0:	10800b0b 	ldhu	r2,44(r2)
 2011bf4:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 2011bf8:	e0bfe403 	ldbu	r2,-112(fp)
 2011bfc:	10800058 	cmpnei	r2,r2,1
 2011c00:	1000211e 	bne	r2,zero,2011c88 <OSFlagPend+0x588>
        switch (wait_type) {
 2011c04:	e0bffe03 	ldbu	r2,-8(fp)
 2011c08:	10001616 	blt	r2,zero,2011c64 <OSFlagPend+0x564>
 2011c0c:	10c00090 	cmplti	r3,r2,2
 2011c10:	18000c1e 	bne	r3,zero,2011c44 <OSFlagPend+0x544>
 2011c14:	10800108 	cmpgei	r2,r2,4
 2011c18:	1000121e 	bne	r2,zero,2011c64 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2011c1c:	e0bffc17 	ldw	r2,-16(fp)
 2011c20:	1080020b 	ldhu	r2,8(r2)
 2011c24:	1007883a 	mov	r3,r2
 2011c28:	e0bfe80b 	ldhu	r2,-96(fp)
 2011c2c:	0084303a 	nor	r2,zero,r2
 2011c30:	1884703a 	and	r2,r3,r2
 2011c34:	1007883a 	mov	r3,r2
 2011c38:	e0bffc17 	ldw	r2,-16(fp)
 2011c3c:	10c0020d 	sth	r3,8(r2)
                 break;
 2011c40:	00001106 	br	2011c88 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2011c44:	e0bffc17 	ldw	r2,-16(fp)
 2011c48:	10c0020b 	ldhu	r3,8(r2)
 2011c4c:	e0bfe80b 	ldhu	r2,-96(fp)
 2011c50:	1884b03a 	or	r2,r3,r2
 2011c54:	1007883a 	mov	r3,r2
 2011c58:	e0bffc17 	ldw	r2,-16(fp)
 2011c5c:	10c0020d 	sth	r3,8(r2)
                 break;
 2011c60:	00000906 	br	2011c88 <OSFlagPend+0x588>
 2011c64:	e0bfe517 	ldw	r2,-108(fp)
 2011c68:	e0bff415 	stw	r2,-48(fp)
 2011c6c:	e0bff417 	ldw	r2,-48(fp)
 2011c70:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2011c74:	e0800217 	ldw	r2,8(fp)
 2011c78:	00c01bc4 	movi	r3,111
 2011c7c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2011c80:	0005883a 	mov	r2,zero
 2011c84:	00000706 	br	2011ca4 <OSFlagPend+0x5a4>
 2011c88:	e0bfe517 	ldw	r2,-108(fp)
 2011c8c:	e0bff515 	stw	r2,-44(fp)
 2011c90:	e0bff517 	ldw	r2,-44(fp)
 2011c94:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 2011c98:	e0800217 	ldw	r2,8(fp)
 2011c9c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 2011ca0:	e0bfe80b 	ldhu	r2,-96(fp)
}
 2011ca4:	e037883a 	mov	sp,fp
 2011ca8:	dfc00117 	ldw	ra,4(sp)
 2011cac:	df000017 	ldw	fp,0(sp)
 2011cb0:	dec00204 	addi	sp,sp,8
 2011cb4:	f800283a 	ret

02011cb8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 2011cb8:	defffb04 	addi	sp,sp,-20
 2011cbc:	df000415 	stw	fp,16(sp)
 2011cc0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2011cc4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011cc8:	0005303a 	rdctl	r2,status
 2011ccc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011cd0:	e0fffe17 	ldw	r3,-8(fp)
 2011cd4:	00bfff84 	movi	r2,-2
 2011cd8:	1884703a 	and	r2,r3,r2
 2011cdc:	1001703a 	wrctl	status,r2
  
  return context;
 2011ce0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2011ce4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2011ce8:	d0a72f17 	ldw	r2,-25412(gp)
 2011cec:	10800b0b 	ldhu	r2,44(r2)
 2011cf0:	e0bffd0d 	sth	r2,-12(fp)
 2011cf4:	e0bffc17 	ldw	r2,-16(fp)
 2011cf8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011cfc:	e0bfff17 	ldw	r2,-4(fp)
 2011d00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2011d04:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2011d08:	e037883a 	mov	sp,fp
 2011d0c:	df000017 	ldw	fp,0(sp)
 2011d10:	dec00104 	addi	sp,sp,4
 2011d14:	f800283a 	ret

02011d18 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 2011d18:	deffef04 	addi	sp,sp,-68
 2011d1c:	dfc01015 	stw	ra,64(sp)
 2011d20:	df000f15 	stw	fp,60(sp)
 2011d24:	df000f04 	addi	fp,sp,60
 2011d28:	e13ffc15 	stw	r4,-16(fp)
 2011d2c:	2807883a 	mov	r3,r5
 2011d30:	3005883a 	mov	r2,r6
 2011d34:	e1ffff15 	stw	r7,-4(fp)
 2011d38:	e0fffd0d 	sth	r3,-12(fp)
 2011d3c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 2011d40:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2011d44:	e0bfff17 	ldw	r2,-4(fp)
 2011d48:	1000021e 	bne	r2,zero,2011d54 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 2011d4c:	0005883a 	mov	r2,zero
 2011d50:	0000d106 	br	2012098 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2011d54:	e0bffc17 	ldw	r2,-16(fp)
 2011d58:	1000051e 	bne	r2,zero,2011d70 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011d5c:	e0bfff17 	ldw	r2,-4(fp)
 2011d60:	00c01b84 	movi	r3,110
 2011d64:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011d68:	0005883a 	mov	r2,zero
 2011d6c:	0000ca06 	br	2012098 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2011d70:	e0bffc17 	ldw	r2,-16(fp)
 2011d74:	10800003 	ldbu	r2,0(r2)
 2011d78:	10803fcc 	andi	r2,r2,255
 2011d7c:	10800160 	cmpeqi	r2,r2,5
 2011d80:	1000051e 	bne	r2,zero,2011d98 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 2011d84:	e0bfff17 	ldw	r2,-4(fp)
 2011d88:	00c00044 	movi	r3,1
 2011d8c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2011d90:	0005883a 	mov	r2,zero
 2011d94:	0000c006 	br	2012098 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011d98:	0005303a 	rdctl	r2,status
 2011d9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011da0:	e0fffb17 	ldw	r3,-20(fp)
 2011da4:	00bfff84 	movi	r2,-2
 2011da8:	1884703a 	and	r2,r3,r2
 2011dac:	1001703a 	wrctl	status,r2
  
  return context;
 2011db0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 2011db4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 2011db8:	e0bffe03 	ldbu	r2,-8(fp)
 2011dbc:	10000326 	beq	r2,zero,2011dcc <OSFlagPost+0xb4>
 2011dc0:	10800060 	cmpeqi	r2,r2,1
 2011dc4:	10000b1e 	bne	r2,zero,2011df4 <OSFlagPost+0xdc>
 2011dc8:	00001206 	br	2011e14 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2011dcc:	e0bffc17 	ldw	r2,-16(fp)
 2011dd0:	1080020b 	ldhu	r2,8(r2)
 2011dd4:	1007883a 	mov	r3,r2
 2011dd8:	e0bffd0b 	ldhu	r2,-12(fp)
 2011ddc:	0084303a 	nor	r2,zero,r2
 2011de0:	1884703a 	and	r2,r3,r2
 2011de4:	1007883a 	mov	r3,r2
 2011de8:	e0bffc17 	ldw	r2,-16(fp)
 2011dec:	10c0020d 	sth	r3,8(r2)
             break;
 2011df0:	00001106 	br	2011e38 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2011df4:	e0bffc17 	ldw	r2,-16(fp)
 2011df8:	10c0020b 	ldhu	r3,8(r2)
 2011dfc:	e0bffd0b 	ldhu	r2,-12(fp)
 2011e00:	1884b03a 	or	r2,r3,r2
 2011e04:	1007883a 	mov	r3,r2
 2011e08:	e0bffc17 	ldw	r2,-16(fp)
 2011e0c:	10c0020d 	sth	r3,8(r2)
             break;
 2011e10:	00000906 	br	2011e38 <OSFlagPost+0x120>
 2011e14:	e0bff317 	ldw	r2,-52(fp)
 2011e18:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011e1c:	e0bff417 	ldw	r2,-48(fp)
 2011e20:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2011e24:	e0bfff17 	ldw	r2,-4(fp)
 2011e28:	00c01c44 	movi	r3,113
 2011e2c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 2011e30:	0005883a 	mov	r2,zero
 2011e34:	00009806 	br	2012098 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 2011e38:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2011e3c:	e0bffc17 	ldw	r2,-16(fp)
 2011e40:	10800117 	ldw	r2,4(r2)
 2011e44:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2011e48:	00007706 	br	2012028 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 2011e4c:	e0bff117 	ldw	r2,-60(fp)
 2011e50:	10800483 	ldbu	r2,18(r2)
 2011e54:	10803fcc 	andi	r2,r2,255
 2011e58:	10c00060 	cmpeqi	r3,r2,1
 2011e5c:	18004a1e 	bne	r3,zero,2011f88 <OSFlagPost+0x270>
 2011e60:	10c00088 	cmpgei	r3,r2,2
 2011e64:	1800021e 	bne	r3,zero,2011e70 <OSFlagPost+0x158>
 2011e68:	10002f26 	beq	r2,zero,2011f28 <OSFlagPost+0x210>
 2011e6c:	00005b06 	br	2011fdc <OSFlagPost+0x2c4>
 2011e70:	10c000a0 	cmpeqi	r3,r2,2
 2011e74:	1800031e 	bne	r3,zero,2011e84 <OSFlagPost+0x16c>
 2011e78:	108000e0 	cmpeqi	r2,r2,3
 2011e7c:	1000171e 	bne	r2,zero,2011edc <OSFlagPost+0x1c4>
 2011e80:	00005606 	br	2011fdc <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2011e84:	e0bffc17 	ldw	r2,-16(fp)
 2011e88:	10c0020b 	ldhu	r3,8(r2)
 2011e8c:	e0bff117 	ldw	r2,-60(fp)
 2011e90:	1080040b 	ldhu	r2,16(r2)
 2011e94:	1884703a 	and	r2,r3,r2
 2011e98:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2011e9c:	e0bff117 	ldw	r2,-60(fp)
 2011ea0:	1080040b 	ldhu	r2,16(r2)
 2011ea4:	10ffffcc 	andi	r3,r2,65535
 2011ea8:	e0bff60b 	ldhu	r2,-40(fp)
 2011eac:	1880541e 	bne	r3,r2,2012000 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011eb0:	e0bff60b 	ldhu	r2,-40(fp)
 2011eb4:	100b883a 	mov	r5,r2
 2011eb8:	e13ff117 	ldw	r4,-60(fp)
 2011ebc:	20123b00 	call	20123b0 <OS_FlagTaskRdy>
 2011ec0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011ec4:	e0bff683 	ldbu	r2,-38(fp)
 2011ec8:	10800058 	cmpnei	r2,r2,1
 2011ecc:	10004c1e 	bne	r2,zero,2012000 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011ed0:	00800044 	movi	r2,1
 2011ed4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2011ed8:	00004906 	br	2012000 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2011edc:	e0bffc17 	ldw	r2,-16(fp)
 2011ee0:	10c0020b 	ldhu	r3,8(r2)
 2011ee4:	e0bff117 	ldw	r2,-60(fp)
 2011ee8:	1080040b 	ldhu	r2,16(r2)
 2011eec:	1884703a 	and	r2,r3,r2
 2011ef0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2011ef4:	e0bff60b 	ldhu	r2,-40(fp)
 2011ef8:	10004326 	beq	r2,zero,2012008 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011efc:	e0bff60b 	ldhu	r2,-40(fp)
 2011f00:	100b883a 	mov	r5,r2
 2011f04:	e13ff117 	ldw	r4,-60(fp)
 2011f08:	20123b00 	call	20123b0 <OS_FlagTaskRdy>
 2011f0c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011f10:	e0bff683 	ldbu	r2,-38(fp)
 2011f14:	10800058 	cmpnei	r2,r2,1
 2011f18:	10003b1e 	bne	r2,zero,2012008 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011f1c:	00800044 	movi	r2,1
 2011f20:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2011f24:	00003806 	br	2012008 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2011f28:	e0bffc17 	ldw	r2,-16(fp)
 2011f2c:	1080020b 	ldhu	r2,8(r2)
 2011f30:	0084303a 	nor	r2,zero,r2
 2011f34:	1007883a 	mov	r3,r2
 2011f38:	e0bff117 	ldw	r2,-60(fp)
 2011f3c:	1080040b 	ldhu	r2,16(r2)
 2011f40:	1884703a 	and	r2,r3,r2
 2011f44:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2011f48:	e0bff117 	ldw	r2,-60(fp)
 2011f4c:	1080040b 	ldhu	r2,16(r2)
 2011f50:	10ffffcc 	andi	r3,r2,65535
 2011f54:	e0bff60b 	ldhu	r2,-40(fp)
 2011f58:	18802d1e 	bne	r3,r2,2012010 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011f5c:	e0bff60b 	ldhu	r2,-40(fp)
 2011f60:	100b883a 	mov	r5,r2
 2011f64:	e13ff117 	ldw	r4,-60(fp)
 2011f68:	20123b00 	call	20123b0 <OS_FlagTaskRdy>
 2011f6c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011f70:	e0bff683 	ldbu	r2,-38(fp)
 2011f74:	10800058 	cmpnei	r2,r2,1
 2011f78:	1000251e 	bne	r2,zero,2012010 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011f7c:	00800044 	movi	r2,1
 2011f80:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2011f84:	00002206 	br	2012010 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2011f88:	e0bffc17 	ldw	r2,-16(fp)
 2011f8c:	1080020b 	ldhu	r2,8(r2)
 2011f90:	0084303a 	nor	r2,zero,r2
 2011f94:	1007883a 	mov	r3,r2
 2011f98:	e0bff117 	ldw	r2,-60(fp)
 2011f9c:	1080040b 	ldhu	r2,16(r2)
 2011fa0:	1884703a 	and	r2,r3,r2
 2011fa4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2011fa8:	e0bff60b 	ldhu	r2,-40(fp)
 2011fac:	10001a26 	beq	r2,zero,2012018 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2011fb0:	e0bff60b 	ldhu	r2,-40(fp)
 2011fb4:	100b883a 	mov	r5,r2
 2011fb8:	e13ff117 	ldw	r4,-60(fp)
 2011fbc:	20123b00 	call	20123b0 <OS_FlagTaskRdy>
 2011fc0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 2011fc4:	e0bff683 	ldbu	r2,-38(fp)
 2011fc8:	10800058 	cmpnei	r2,r2,1
 2011fcc:	1000121e 	bne	r2,zero,2012018 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2011fd0:	00800044 	movi	r2,1
 2011fd4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 2011fd8:	00000f06 	br	2012018 <OSFlagPost+0x300>
 2011fdc:	e0bff317 	ldw	r2,-52(fp)
 2011fe0:	e0bff515 	stw	r2,-44(fp)
 2011fe4:	e0bff517 	ldw	r2,-44(fp)
 2011fe8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2011fec:	e0bfff17 	ldw	r2,-4(fp)
 2011ff0:	00c01bc4 	movi	r3,111
 2011ff4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 2011ff8:	0005883a 	mov	r2,zero
 2011ffc:	00002606 	br	2012098 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2012000:	0001883a 	nop
 2012004:	00000506 	br	201201c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2012008:	0001883a 	nop
 201200c:	00000306 	br	201201c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2012010:	0001883a 	nop
 2012014:	00000106 	br	201201c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 2012018:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 201201c:	e0bff117 	ldw	r2,-60(fp)
 2012020:	10800017 	ldw	r2,0(r2)
 2012024:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2012028:	e0bff117 	ldw	r2,-60(fp)
 201202c:	103f871e 	bne	r2,zero,2011e4c <OSFlagPost+0x134>
 2012030:	e0bff317 	ldw	r2,-52(fp)
 2012034:	e0bff715 	stw	r2,-36(fp)
 2012038:	e0bff717 	ldw	r2,-36(fp)
 201203c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 2012040:	e0bff203 	ldbu	r2,-56(fp)
 2012044:	10800058 	cmpnei	r2,r2,1
 2012048:	1000011e 	bne	r2,zero,2012050 <OSFlagPost+0x338>
        OS_Sched();
 201204c:	20105d00 	call	20105d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012050:	0005303a 	rdctl	r2,status
 2012054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012058:	e0fffa17 	ldw	r3,-24(fp)
 201205c:	00bfff84 	movi	r2,-2
 2012060:	1884703a 	and	r2,r3,r2
 2012064:	1001703a 	wrctl	status,r2
  
  return context;
 2012068:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 201206c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 2012070:	e0bffc17 	ldw	r2,-16(fp)
 2012074:	1080020b 	ldhu	r2,8(r2)
 2012078:	e0bff90d 	sth	r2,-28(fp)
 201207c:	e0bff317 	ldw	r2,-52(fp)
 2012080:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012084:	e0bff817 	ldw	r2,-32(fp)
 2012088:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 201208c:	e0bfff17 	ldw	r2,-4(fp)
 2012090:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2012094:	e0bff90b 	ldhu	r2,-28(fp)
}
 2012098:	e037883a 	mov	sp,fp
 201209c:	dfc00117 	ldw	ra,4(sp)
 20120a0:	df000017 	ldw	fp,0(sp)
 20120a4:	dec00204 	addi	sp,sp,8
 20120a8:	f800283a 	ret

020120ac <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 20120ac:	defff904 	addi	sp,sp,-28
 20120b0:	df000615 	stw	fp,24(sp)
 20120b4:	df000604 	addi	fp,sp,24
 20120b8:	e13ffe15 	stw	r4,-8(fp)
 20120bc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 20120c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 20120c4:	e0bfff17 	ldw	r2,-4(fp)
 20120c8:	1000021e 	bne	r2,zero,20120d4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 20120cc:	0005883a 	mov	r2,zero
 20120d0:	00002306 	br	2012160 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 20120d4:	e0bffe17 	ldw	r2,-8(fp)
 20120d8:	1000051e 	bne	r2,zero,20120f0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20120dc:	e0bfff17 	ldw	r2,-4(fp)
 20120e0:	00c01b84 	movi	r3,110
 20120e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 20120e8:	0005883a 	mov	r2,zero
 20120ec:	00001c06 	br	2012160 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 20120f0:	e0bffe17 	ldw	r2,-8(fp)
 20120f4:	10800003 	ldbu	r2,0(r2)
 20120f8:	10803fcc 	andi	r2,r2,255
 20120fc:	10800160 	cmpeqi	r2,r2,5
 2012100:	1000051e 	bne	r2,zero,2012118 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 2012104:	e0bfff17 	ldw	r2,-4(fp)
 2012108:	00c00044 	movi	r3,1
 201210c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 2012110:	0005883a 	mov	r2,zero
 2012114:	00001206 	br	2012160 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012118:	0005303a 	rdctl	r2,status
 201211c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012120:	e0fffc17 	ldw	r3,-16(fp)
 2012124:	00bfff84 	movi	r2,-2
 2012128:	1884703a 	and	r2,r3,r2
 201212c:	1001703a 	wrctl	status,r2
  
  return context;
 2012130:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2012134:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 2012138:	e0bffe17 	ldw	r2,-8(fp)
 201213c:	1080020b 	ldhu	r2,8(r2)
 2012140:	e0bffb0d 	sth	r2,-20(fp)
 2012144:	e0bffa17 	ldw	r2,-24(fp)
 2012148:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201214c:	e0bffd17 	ldw	r2,-12(fp)
 2012150:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012154:	e0bfff17 	ldw	r2,-4(fp)
 2012158:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 201215c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 2012160:	e037883a 	mov	sp,fp
 2012164:	df000017 	ldw	fp,0(sp)
 2012168:	dec00104 	addi	sp,sp,4
 201216c:	f800283a 	ret

02012170 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2012170:	defff804 	addi	sp,sp,-32
 2012174:	df000715 	stw	fp,28(sp)
 2012178:	df000704 	addi	fp,sp,28
 201217c:	e13ffb15 	stw	r4,-20(fp)
 2012180:	e17ffc15 	stw	r5,-16(fp)
 2012184:	3009883a 	mov	r4,r6
 2012188:	3807883a 	mov	r3,r7
 201218c:	e0800117 	ldw	r2,4(fp)
 2012190:	e13ffd0d 	sth	r4,-12(fp)
 2012194:	e0fffe05 	stb	r3,-8(fp)
 2012198:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 201219c:	d0a72f17 	ldw	r2,-25412(gp)
 20121a0:	d0e72f17 	ldw	r3,-25412(gp)
 20121a4:	18c00c03 	ldbu	r3,48(r3)
 20121a8:	18c00814 	ori	r3,r3,32
 20121ac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 20121b0:	d0a72f17 	ldw	r2,-25412(gp)
 20121b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 20121b8:	d0a72f17 	ldw	r2,-25412(gp)
 20121bc:	e0ffff0b 	ldhu	r3,-4(fp)
 20121c0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 20121c4:	d0a72f17 	ldw	r2,-25412(gp)
 20121c8:	e0fffc17 	ldw	r3,-16(fp)
 20121cc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 20121d0:	e0bffc17 	ldw	r2,-16(fp)
 20121d4:	e0fffd0b 	ldhu	r3,-12(fp)
 20121d8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 20121dc:	e0bffc17 	ldw	r2,-16(fp)
 20121e0:	e0fffe03 	ldbu	r3,-8(fp)
 20121e4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 20121e8:	d0e72f17 	ldw	r3,-25412(gp)
 20121ec:	e0bffc17 	ldw	r2,-16(fp)
 20121f0:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 20121f4:	e0bffb17 	ldw	r2,-20(fp)
 20121f8:	10c00117 	ldw	r3,4(r2)
 20121fc:	e0bffc17 	ldw	r2,-16(fp)
 2012200:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2012204:	e0bffc17 	ldw	r2,-16(fp)
 2012208:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 201220c:	e0bffc17 	ldw	r2,-16(fp)
 2012210:	e0fffb17 	ldw	r3,-20(fp)
 2012214:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2012218:	e0bffb17 	ldw	r2,-20(fp)
 201221c:	10800117 	ldw	r2,4(r2)
 2012220:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2012224:	e0bff917 	ldw	r2,-28(fp)
 2012228:	10000326 	beq	r2,zero,2012238 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 201222c:	e0bff917 	ldw	r2,-28(fp)
 2012230:	e0fffc17 	ldw	r3,-16(fp)
 2012234:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2012238:	e0bffb17 	ldw	r2,-20(fp)
 201223c:	e0fffc17 	ldw	r3,-16(fp)
 2012240:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2012244:	d0a72f17 	ldw	r2,-25412(gp)
 2012248:	10800d03 	ldbu	r2,52(r2)
 201224c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2012250:	e0fffa03 	ldbu	r3,-24(fp)
 2012254:	e13ffa03 	ldbu	r4,-24(fp)
 2012258:	d0a72c44 	addi	r2,gp,-25423
 201225c:	2085883a 	add	r2,r4,r2
 2012260:	10800003 	ldbu	r2,0(r2)
 2012264:	1009883a 	mov	r4,r2
 2012268:	d0a72f17 	ldw	r2,-25412(gp)
 201226c:	10800d43 	ldbu	r2,53(r2)
 2012270:	0084303a 	nor	r2,zero,r2
 2012274:	2084703a 	and	r2,r4,r2
 2012278:	1009883a 	mov	r4,r2
 201227c:	d0a72c44 	addi	r2,gp,-25423
 2012280:	1885883a 	add	r2,r3,r2
 2012284:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2012288:	e0fffa03 	ldbu	r3,-24(fp)
 201228c:	d0a72c44 	addi	r2,gp,-25423
 2012290:	1885883a 	add	r2,r3,r2
 2012294:	10800003 	ldbu	r2,0(r2)
 2012298:	10803fcc 	andi	r2,r2,255
 201229c:	1000071e 	bne	r2,zero,20122bc <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 20122a0:	d0a72f17 	ldw	r2,-25412(gp)
 20122a4:	10800d83 	ldbu	r2,54(r2)
 20122a8:	0084303a 	nor	r2,zero,r2
 20122ac:	1007883a 	mov	r3,r2
 20122b0:	d0a72c03 	ldbu	r2,-25424(gp)
 20122b4:	1884703a 	and	r2,r3,r2
 20122b8:	d0a72c05 	stb	r2,-25424(gp)
    }
}
 20122bc:	0001883a 	nop
 20122c0:	e037883a 	mov	sp,fp
 20122c4:	df000017 	ldw	fp,0(sp)
 20122c8:	dec00104 	addi	sp,sp,4
 20122cc:	f800283a 	ret

020122d0 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 20122d0:	defffb04 	addi	sp,sp,-20
 20122d4:	dfc00415 	stw	ra,16(sp)
 20122d8:	df000315 	stw	fp,12(sp)
 20122dc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 20122e0:	0140dc04 	movi	r5,880
 20122e4:	010080b4 	movhi	r4,514
 20122e8:	2103fb04 	addi	r4,r4,4076
 20122ec:	20105140 	call	2010514 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 20122f0:	008080b4 	movhi	r2,514
 20122f4:	1083fb04 	addi	r2,r2,4076
 20122f8:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 20122fc:	008080b4 	movhi	r2,514
 2012300:	10840604 	addi	r2,r2,4120
 2012304:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2012308:	e03ffd0d 	sth	zero,-12(fp)
 201230c:	00001306 	br	201235c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2012310:	e0bffe17 	ldw	r2,-8(fp)
 2012314:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2012318:	e0bffe17 	ldw	r2,-8(fp)
 201231c:	e0ffff17 	ldw	r3,-4(fp)
 2012320:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2012324:	e0bffe17 	ldw	r2,-8(fp)
 2012328:	00c00fc4 	movi	r3,63
 201232c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2012330:	e0bffe17 	ldw	r2,-8(fp)
 2012334:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2012338:	e0bffe17 	ldw	r2,-8(fp)
 201233c:	10800b04 	addi	r2,r2,44
 2012340:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2012344:	e0bfff17 	ldw	r2,-4(fp)
 2012348:	10800b04 	addi	r2,r2,44
 201234c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2012350:	e0bffd0b 	ldhu	r2,-12(fp)
 2012354:	10800044 	addi	r2,r2,1
 2012358:	e0bffd0d 	sth	r2,-12(fp)
 201235c:	e0bffd0b 	ldhu	r2,-12(fp)
 2012360:	108004f0 	cmpltui	r2,r2,19
 2012364:	103fea1e 	bne	r2,zero,2012310 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2012368:	e0bffe17 	ldw	r2,-8(fp)
 201236c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2012370:	e0bffe17 	ldw	r2,-8(fp)
 2012374:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2012378:	e0bffe17 	ldw	r2,-8(fp)
 201237c:	00c00fc4 	movi	r3,63
 2012380:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2012384:	e0bffe17 	ldw	r2,-8(fp)
 2012388:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 201238c:	008080b4 	movhi	r2,514
 2012390:	1083fb04 	addi	r2,r2,4076
 2012394:	d0a73115 	stw	r2,-25404(gp)
#endif
}
 2012398:	0001883a 	nop
 201239c:	e037883a 	mov	sp,fp
 20123a0:	dfc00117 	ldw	ra,4(sp)
 20123a4:	df000017 	ldw	fp,0(sp)
 20123a8:	dec00204 	addi	sp,sp,8
 20123ac:	f800283a 	ret

020123b0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 20123b0:	defffa04 	addi	sp,sp,-24
 20123b4:	dfc00515 	stw	ra,20(sp)
 20123b8:	df000415 	stw	fp,16(sp)
 20123bc:	df000404 	addi	fp,sp,16
 20123c0:	e13ffe15 	stw	r4,-8(fp)
 20123c4:	2805883a 	mov	r2,r5
 20123c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 20123cc:	e0bffe17 	ldw	r2,-8(fp)
 20123d0:	10800217 	ldw	r2,8(r2)
 20123d4:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 20123d8:	e0bffd17 	ldw	r2,-12(fp)
 20123dc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 20123e0:	e0bffd17 	ldw	r2,-12(fp)
 20123e4:	e0ffff0b 	ldhu	r3,-4(fp)
 20123e8:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 20123ec:	e0bffd17 	ldw	r2,-12(fp)
 20123f0:	10c00c03 	ldbu	r3,48(r2)
 20123f4:	00bff7c4 	movi	r2,-33
 20123f8:	1884703a 	and	r2,r3,r2
 20123fc:	1007883a 	mov	r3,r2
 2012400:	e0bffd17 	ldw	r2,-12(fp)
 2012404:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2012408:	e0bffd17 	ldw	r2,-12(fp)
 201240c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 2012410:	e0bffd17 	ldw	r2,-12(fp)
 2012414:	10800c03 	ldbu	r2,48(r2)
 2012418:	10803fcc 	andi	r2,r2,255
 201241c:	1000181e 	bne	r2,zero,2012480 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 2012420:	e0bffd17 	ldw	r2,-12(fp)
 2012424:	10c00d83 	ldbu	r3,54(r2)
 2012428:	d0a72c03 	ldbu	r2,-25424(gp)
 201242c:	1884b03a 	or	r2,r3,r2
 2012430:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2012434:	e0bffd17 	ldw	r2,-12(fp)
 2012438:	10800d03 	ldbu	r2,52(r2)
 201243c:	10c03fcc 	andi	r3,r2,255
 2012440:	e0bffd17 	ldw	r2,-12(fp)
 2012444:	10800d03 	ldbu	r2,52(r2)
 2012448:	11003fcc 	andi	r4,r2,255
 201244c:	d0a72c44 	addi	r2,gp,-25423
 2012450:	2085883a 	add	r2,r4,r2
 2012454:	11000003 	ldbu	r4,0(r2)
 2012458:	e0bffd17 	ldw	r2,-12(fp)
 201245c:	10800d43 	ldbu	r2,53(r2)
 2012460:	2084b03a 	or	r2,r4,r2
 2012464:	1009883a 	mov	r4,r2
 2012468:	d0a72c44 	addi	r2,gp,-25423
 201246c:	1885883a 	add	r2,r3,r2
 2012470:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 2012474:	00800044 	movi	r2,1
 2012478:	e0bffc05 	stb	r2,-16(fp)
 201247c:	00000106 	br	2012484 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 2012480:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2012484:	e13ffe17 	ldw	r4,-8(fp)
 2012488:	20124a40 	call	20124a4 <OS_FlagUnlink>
    return (sched);
 201248c:	e0bffc03 	ldbu	r2,-16(fp)
}
 2012490:	e037883a 	mov	sp,fp
 2012494:	dfc00117 	ldw	ra,4(sp)
 2012498:	df000017 	ldw	fp,0(sp)
 201249c:	dec00204 	addi	sp,sp,8
 20124a0:	f800283a 	ret

020124a4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 20124a4:	defffa04 	addi	sp,sp,-24
 20124a8:	df000515 	stw	fp,20(sp)
 20124ac:	df000504 	addi	fp,sp,20
 20124b0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 20124b4:	e0bfff17 	ldw	r2,-4(fp)
 20124b8:	10800117 	ldw	r2,4(r2)
 20124bc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 20124c0:	e0bfff17 	ldw	r2,-4(fp)
 20124c4:	10800017 	ldw	r2,0(r2)
 20124c8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 20124cc:	e0bffb17 	ldw	r2,-20(fp)
 20124d0:	10000b1e 	bne	r2,zero,2012500 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 20124d4:	e0bfff17 	ldw	r2,-4(fp)
 20124d8:	10800317 	ldw	r2,12(r2)
 20124dc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 20124e0:	e0bffd17 	ldw	r2,-12(fp)
 20124e4:	e0fffc17 	ldw	r3,-16(fp)
 20124e8:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 20124ec:	e0bffc17 	ldw	r2,-16(fp)
 20124f0:	10000b26 	beq	r2,zero,2012520 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 20124f4:	e0bffc17 	ldw	r2,-16(fp)
 20124f8:	10000115 	stw	zero,4(r2)
 20124fc:	00000806 	br	2012520 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 2012500:	e0bffb17 	ldw	r2,-20(fp)
 2012504:	e0fffc17 	ldw	r3,-16(fp)
 2012508:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 201250c:	e0bffc17 	ldw	r2,-16(fp)
 2012510:	10000326 	beq	r2,zero,2012520 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 2012514:	e0bffc17 	ldw	r2,-16(fp)
 2012518:	e0fffb17 	ldw	r3,-20(fp)
 201251c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 2012520:	e0bfff17 	ldw	r2,-4(fp)
 2012524:	10800217 	ldw	r2,8(r2)
 2012528:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 201252c:	e0bffe17 	ldw	r2,-8(fp)
 2012530:	10000a15 	stw	zero,40(r2)
#endif
}
 2012534:	0001883a 	nop
 2012538:	e037883a 	mov	sp,fp
 201253c:	df000017 	ldw	fp,0(sp)
 2012540:	dec00104 	addi	sp,sp,4
 2012544:	f800283a 	ret

02012548 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 2012548:	defffa04 	addi	sp,sp,-24
 201254c:	df000515 	stw	fp,20(sp)
 2012550:	df000504 	addi	fp,sp,20
 2012554:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 2012558:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 201255c:	e0bfff17 	ldw	r2,-4(fp)
 2012560:	1000021e 	bne	r2,zero,201256c <OSMboxAccept+0x24>
        return ((void *)0);
 2012564:	0005883a 	mov	r2,zero
 2012568:	00001906 	br	20125d0 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 201256c:	e0bfff17 	ldw	r2,-4(fp)
 2012570:	10800003 	ldbu	r2,0(r2)
 2012574:	10803fcc 	andi	r2,r2,255
 2012578:	10800060 	cmpeqi	r2,r2,1
 201257c:	1000021e 	bne	r2,zero,2012588 <OSMboxAccept+0x40>
        return ((void *)0);
 2012580:	0005883a 	mov	r2,zero
 2012584:	00001206 	br	20125d0 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012588:	0005303a 	rdctl	r2,status
 201258c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012590:	e0fffd17 	ldw	r3,-12(fp)
 2012594:	00bfff84 	movi	r2,-2
 2012598:	1884703a 	and	r2,r3,r2
 201259c:	1001703a 	wrctl	status,r2
  
  return context;
 20125a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20125a4:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 20125a8:	e0bfff17 	ldw	r2,-4(fp)
 20125ac:	10800117 	ldw	r2,4(r2)
 20125b0:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 20125b4:	e0bfff17 	ldw	r2,-4(fp)
 20125b8:	10000115 	stw	zero,4(r2)
 20125bc:	e0bffb17 	ldw	r2,-20(fp)
 20125c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20125c4:	e0bffe17 	ldw	r2,-8(fp)
 20125c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 20125cc:	e0bffc17 	ldw	r2,-16(fp)
}
 20125d0:	e037883a 	mov	sp,fp
 20125d4:	df000017 	ldw	fp,0(sp)
 20125d8:	dec00104 	addi	sp,sp,4
 20125dc:	f800283a 	ret

020125e0 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 20125e0:	defff904 	addi	sp,sp,-28
 20125e4:	dfc00615 	stw	ra,24(sp)
 20125e8:	df000515 	stw	fp,20(sp)
 20125ec:	df000504 	addi	fp,sp,20
 20125f0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20125f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20125f8:	d0a72e03 	ldbu	r2,-25416(gp)
 20125fc:	10803fcc 	andi	r2,r2,255
 2012600:	10000226 	beq	r2,zero,201260c <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2012604:	0005883a 	mov	r2,zero
 2012608:	00002506 	br	20126a0 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201260c:	0005303a 	rdctl	r2,status
 2012610:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012614:	e0fffe17 	ldw	r3,-8(fp)
 2012618:	00bfff84 	movi	r2,-2
 201261c:	1884703a 	and	r2,r3,r2
 2012620:	1001703a 	wrctl	status,r2
  
  return context;
 2012624:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2012628:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 201262c:	d0a72d17 	ldw	r2,-25420(gp)
 2012630:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2012634:	d0a72d17 	ldw	r2,-25420(gp)
 2012638:	10000326 	beq	r2,zero,2012648 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 201263c:	d0a72d17 	ldw	r2,-25420(gp)
 2012640:	10800117 	ldw	r2,4(r2)
 2012644:	d0a72d15 	stw	r2,-25420(gp)
 2012648:	e0bffb17 	ldw	r2,-20(fp)
 201264c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012650:	e0bffc17 	ldw	r2,-16(fp)
 2012654:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 2012658:	e0bffd17 	ldw	r2,-12(fp)
 201265c:	10000f26 	beq	r2,zero,201269c <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 2012660:	e0bffd17 	ldw	r2,-12(fp)
 2012664:	00c00044 	movi	r3,1
 2012668:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 201266c:	e0bffd17 	ldw	r2,-12(fp)
 2012670:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 2012674:	e0bffd17 	ldw	r2,-12(fp)
 2012678:	e0ffff17 	ldw	r3,-4(fp)
 201267c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 2012680:	e0bffd17 	ldw	r2,-12(fp)
 2012684:	00c00fc4 	movi	r3,63
 2012688:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 201268c:	e0bffd17 	ldw	r2,-12(fp)
 2012690:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 2012694:	e13ffd17 	ldw	r4,-12(fp)
 2012698:	20101340 	call	2010134 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 201269c:	e0bffd17 	ldw	r2,-12(fp)
}
 20126a0:	e037883a 	mov	sp,fp
 20126a4:	dfc00117 	ldw	ra,4(sp)
 20126a8:	df000017 	ldw	fp,0(sp)
 20126ac:	dec00204 	addi	sp,sp,8
 20126b0:	f800283a 	ret

020126b4 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20126b4:	defff304 	addi	sp,sp,-52
 20126b8:	dfc00c15 	stw	ra,48(sp)
 20126bc:	df000b15 	stw	fp,44(sp)
 20126c0:	df000b04 	addi	fp,sp,44
 20126c4:	e13ffd15 	stw	r4,-12(fp)
 20126c8:	2805883a 	mov	r2,r5
 20126cc:	e1bfff15 	stw	r6,-4(fp)
 20126d0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20126d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20126d8:	e0bfff17 	ldw	r2,-4(fp)
 20126dc:	1000021e 	bne	r2,zero,20126e8 <OSMboxDel+0x34>
        return (pevent);
 20126e0:	e0bffd17 	ldw	r2,-12(fp)
 20126e4:	00007e06 	br	20128e0 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20126e8:	e0bffd17 	ldw	r2,-12(fp)
 20126ec:	1000051e 	bne	r2,zero,2012704 <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 20126f0:	e0bfff17 	ldw	r2,-4(fp)
 20126f4:	00c00104 	movi	r3,4
 20126f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 20126fc:	e0bffd17 	ldw	r2,-12(fp)
 2012700:	00007706 	br	20128e0 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2012704:	e0bffd17 	ldw	r2,-12(fp)
 2012708:	10800003 	ldbu	r2,0(r2)
 201270c:	10803fcc 	andi	r2,r2,255
 2012710:	10800060 	cmpeqi	r2,r2,1
 2012714:	1000051e 	bne	r2,zero,201272c <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2012718:	e0bfff17 	ldw	r2,-4(fp)
 201271c:	00c00044 	movi	r3,1
 2012720:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2012724:	e0bffd17 	ldw	r2,-12(fp)
 2012728:	00006d06 	br	20128e0 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 201272c:	d0a72e03 	ldbu	r2,-25416(gp)
 2012730:	10803fcc 	andi	r2,r2,255
 2012734:	10000526 	beq	r2,zero,201274c <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2012738:	e0bfff17 	ldw	r2,-4(fp)
 201273c:	00c003c4 	movi	r3,15
 2012740:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2012744:	e0bffd17 	ldw	r2,-12(fp)
 2012748:	00006506 	br	20128e0 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201274c:	0005303a 	rdctl	r2,status
 2012750:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012754:	e0fffc17 	ldw	r3,-16(fp)
 2012758:	00bfff84 	movi	r2,-2
 201275c:	1884703a 	and	r2,r3,r2
 2012760:	1001703a 	wrctl	status,r2
  
  return context;
 2012764:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2012768:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 201276c:	e0bffd17 	ldw	r2,-12(fp)
 2012770:	10800283 	ldbu	r2,10(r2)
 2012774:	10803fcc 	andi	r2,r2,255
 2012778:	10000326 	beq	r2,zero,2012788 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 201277c:	00800044 	movi	r2,1
 2012780:	e0bff505 	stb	r2,-44(fp)
 2012784:	00000106 	br	201278c <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2012788:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 201278c:	e0bffe03 	ldbu	r2,-8(fp)
 2012790:	10000326 	beq	r2,zero,20127a0 <OSMboxDel+0xec>
 2012794:	10800060 	cmpeqi	r2,r2,1
 2012798:	1000281e 	bne	r2,zero,201283c <OSMboxDel+0x188>
 201279c:	00004506 	br	20128b4 <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 20127a0:	e0bff503 	ldbu	r2,-44(fp)
 20127a4:	1000161e 	bne	r2,zero,2012800 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 20127a8:	e0bffd17 	ldw	r2,-12(fp)
 20127ac:	00c00fc4 	movi	r3,63
 20127b0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 20127b4:	e0bffd17 	ldw	r2,-12(fp)
 20127b8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 20127bc:	e0bffd17 	ldw	r2,-12(fp)
 20127c0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 20127c4:	d0e72d17 	ldw	r3,-25420(gp)
 20127c8:	e0bffd17 	ldw	r2,-12(fp)
 20127cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 20127d0:	e0bffd17 	ldw	r2,-12(fp)
 20127d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 20127d8:	e0bffd17 	ldw	r2,-12(fp)
 20127dc:	d0a72d15 	stw	r2,-25420(gp)
 20127e0:	e0bff717 	ldw	r2,-36(fp)
 20127e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20127e8:	e0bff817 	ldw	r2,-32(fp)
 20127ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 20127f0:	e0bfff17 	ldw	r2,-4(fp)
 20127f4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 20127f8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 20127fc:	00003706 	br	20128dc <OSMboxDel+0x228>
 2012800:	e0bff717 	ldw	r2,-36(fp)
 2012804:	e0bff915 	stw	r2,-28(fp)
 2012808:	e0bff917 	ldw	r2,-28(fp)
 201280c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 2012810:	e0bfff17 	ldw	r2,-4(fp)
 2012814:	00c01244 	movi	r3,73
 2012818:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 201281c:	e0bffd17 	ldw	r2,-12(fp)
 2012820:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2012824:	00002d06 	br	20128dc <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2012828:	000f883a 	mov	r7,zero
 201282c:	01800084 	movi	r6,2
 2012830:	000b883a 	mov	r5,zero
 2012834:	e13ffd17 	ldw	r4,-12(fp)
 2012838:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 201283c:	e0bffd17 	ldw	r2,-12(fp)
 2012840:	10800283 	ldbu	r2,10(r2)
 2012844:	10803fcc 	andi	r2,r2,255
 2012848:	103ff71e 	bne	r2,zero,2012828 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 201284c:	e0bffd17 	ldw	r2,-12(fp)
 2012850:	00c00fc4 	movi	r3,63
 2012854:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2012858:	e0bffd17 	ldw	r2,-12(fp)
 201285c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2012860:	e0bffd17 	ldw	r2,-12(fp)
 2012864:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2012868:	d0e72d17 	ldw	r3,-25420(gp)
 201286c:	e0bffd17 	ldw	r2,-12(fp)
 2012870:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2012874:	e0bffd17 	ldw	r2,-12(fp)
 2012878:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201287c:	e0bffd17 	ldw	r2,-12(fp)
 2012880:	d0a72d15 	stw	r2,-25420(gp)
 2012884:	e0bff717 	ldw	r2,-36(fp)
 2012888:	e0bffa15 	stw	r2,-24(fp)
 201288c:	e0bffa17 	ldw	r2,-24(fp)
 2012890:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2012894:	e0bff503 	ldbu	r2,-44(fp)
 2012898:	10800058 	cmpnei	r2,r2,1
 201289c:	1000011e 	bne	r2,zero,20128a4 <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 20128a0:	20105d00 	call	20105d0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 20128a4:	e0bfff17 	ldw	r2,-4(fp)
 20128a8:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 20128ac:	e03ff615 	stw	zero,-40(fp)
             break;
 20128b0:	00000a06 	br	20128dc <OSMboxDel+0x228>
 20128b4:	e0bff717 	ldw	r2,-36(fp)
 20128b8:	e0bffb15 	stw	r2,-20(fp)
 20128bc:	e0bffb17 	ldw	r2,-20(fp)
 20128c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 20128c4:	e0bfff17 	ldw	r2,-4(fp)
 20128c8:	00c001c4 	movi	r3,7
 20128cc:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 20128d0:	e0bffd17 	ldw	r2,-12(fp)
 20128d4:	e0bff615 	stw	r2,-40(fp)
             break;
 20128d8:	0001883a 	nop
    }
    return (pevent_return);
 20128dc:	e0bff617 	ldw	r2,-40(fp)
}
 20128e0:	e037883a 	mov	sp,fp
 20128e4:	dfc00117 	ldw	ra,4(sp)
 20128e8:	df000017 	ldw	fp,0(sp)
 20128ec:	dec00204 	addi	sp,sp,8
 20128f0:	f800283a 	ret

020128f4 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 20128f4:	defff404 	addi	sp,sp,-48
 20128f8:	dfc00b15 	stw	ra,44(sp)
 20128fc:	df000a15 	stw	fp,40(sp)
 2012900:	df000a04 	addi	fp,sp,40
 2012904:	e13ffd15 	stw	r4,-12(fp)
 2012908:	2805883a 	mov	r2,r5
 201290c:	e1bfff15 	stw	r6,-4(fp)
 2012910:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2012914:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2012918:	e0bfff17 	ldw	r2,-4(fp)
 201291c:	1000021e 	bne	r2,zero,2012928 <OSMboxPend+0x34>
        return ((void *)0);
 2012920:	0005883a 	mov	r2,zero
 2012924:	00007b06 	br	2012b14 <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2012928:	e0bffd17 	ldw	r2,-12(fp)
 201292c:	1000051e 	bne	r2,zero,2012944 <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2012930:	e0bfff17 	ldw	r2,-4(fp)
 2012934:	00c00104 	movi	r3,4
 2012938:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 201293c:	0005883a 	mov	r2,zero
 2012940:	00007406 	br	2012b14 <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2012944:	e0bffd17 	ldw	r2,-12(fp)
 2012948:	10800003 	ldbu	r2,0(r2)
 201294c:	10803fcc 	andi	r2,r2,255
 2012950:	10800060 	cmpeqi	r2,r2,1
 2012954:	1000051e 	bne	r2,zero,201296c <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2012958:	e0bfff17 	ldw	r2,-4(fp)
 201295c:	00c00044 	movi	r3,1
 2012960:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2012964:	0005883a 	mov	r2,zero
 2012968:	00006a06 	br	2012b14 <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201296c:	d0a72e03 	ldbu	r2,-25416(gp)
 2012970:	10803fcc 	andi	r2,r2,255
 2012974:	10000526 	beq	r2,zero,201298c <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2012978:	e0bfff17 	ldw	r2,-4(fp)
 201297c:	00c00084 	movi	r3,2
 2012980:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2012984:	0005883a 	mov	r2,zero
 2012988:	00006206 	br	2012b14 <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 201298c:	d0a72003 	ldbu	r2,-25472(gp)
 2012990:	10803fcc 	andi	r2,r2,255
 2012994:	10000526 	beq	r2,zero,20129ac <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2012998:	e0bfff17 	ldw	r2,-4(fp)
 201299c:	00c00344 	movi	r3,13
 20129a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20129a4:	0005883a 	mov	r2,zero
 20129a8:	00005a06 	br	2012b14 <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20129ac:	0005303a 	rdctl	r2,status
 20129b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20129b4:	e0fffc17 	ldw	r3,-16(fp)
 20129b8:	00bfff84 	movi	r2,-2
 20129bc:	1884703a 	and	r2,r3,r2
 20129c0:	1001703a 	wrctl	status,r2
  
  return context;
 20129c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20129c8:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 20129cc:	e0bffd17 	ldw	r2,-12(fp)
 20129d0:	10800117 	ldw	r2,4(r2)
 20129d4:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 20129d8:	e0bff617 	ldw	r2,-40(fp)
 20129dc:	10000a26 	beq	r2,zero,2012a08 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 20129e0:	e0bffd17 	ldw	r2,-12(fp)
 20129e4:	10000115 	stw	zero,4(r2)
 20129e8:	e0bff717 	ldw	r2,-36(fp)
 20129ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20129f0:	e0bff817 	ldw	r2,-32(fp)
 20129f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 20129f8:	e0bfff17 	ldw	r2,-4(fp)
 20129fc:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 2012a00:	e0bff617 	ldw	r2,-40(fp)
 2012a04:	00004306 	br	2012b14 <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 2012a08:	d0a72f17 	ldw	r2,-25412(gp)
 2012a0c:	d0e72f17 	ldw	r3,-25412(gp)
 2012a10:	18c00c03 	ldbu	r3,48(r3)
 2012a14:	18c00094 	ori	r3,r3,2
 2012a18:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2012a1c:	d0a72f17 	ldw	r2,-25412(gp)
 2012a20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 2012a24:	d0a72f17 	ldw	r2,-25412(gp)
 2012a28:	e0fffe0b 	ldhu	r3,-8(fp)
 2012a2c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2012a30:	e13ffd17 	ldw	r4,-12(fp)
 2012a34:	200fd1c0 	call	200fd1c <OS_EventTaskWait>
 2012a38:	e0bff717 	ldw	r2,-36(fp)
 2012a3c:	e0bffb15 	stw	r2,-20(fp)
 2012a40:	e0bffb17 	ldw	r2,-20(fp)
 2012a44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 2012a48:	20105d00 	call	20105d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012a4c:	0005303a 	rdctl	r2,status
 2012a50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012a54:	e0fff917 	ldw	r3,-28(fp)
 2012a58:	00bfff84 	movi	r2,-2
 2012a5c:	1884703a 	and	r2,r3,r2
 2012a60:	1001703a 	wrctl	status,r2
  
  return context;
 2012a64:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2012a68:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2012a6c:	d0a72f17 	ldw	r2,-25412(gp)
 2012a70:	10800c43 	ldbu	r2,49(r2)
 2012a74:	10803fcc 	andi	r2,r2,255
 2012a78:	10000326 	beq	r2,zero,2012a88 <OSMboxPend+0x194>
 2012a7c:	108000a0 	cmpeqi	r2,r2,2
 2012a80:	1000071e 	bne	r2,zero,2012aa0 <OSMboxPend+0x1ac>
 2012a84:	00000b06 	br	2012ab4 <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 2012a88:	d0a72f17 	ldw	r2,-25412(gp)
 2012a8c:	10800917 	ldw	r2,36(r2)
 2012a90:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 2012a94:	e0bfff17 	ldw	r2,-4(fp)
 2012a98:	10000005 	stb	zero,0(r2)
             break;
 2012a9c:	00000e06 	br	2012ad8 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2012aa0:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2012aa4:	e0bfff17 	ldw	r2,-4(fp)
 2012aa8:	00c00384 	movi	r3,14
 2012aac:	10c00005 	stb	r3,0(r2)
             break;
 2012ab0:	00000906 	br	2012ad8 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2012ab4:	d0a72f17 	ldw	r2,-25412(gp)
 2012ab8:	e17ffd17 	ldw	r5,-12(fp)
 2012abc:	1009883a 	mov	r4,r2
 2012ac0:	200ff7c0 	call	200ff7c <OS_EventTaskRemove>
             pmsg = (void *)0;
 2012ac4:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2012ac8:	e0bfff17 	ldw	r2,-4(fp)
 2012acc:	00c00284 	movi	r3,10
 2012ad0:	10c00005 	stb	r3,0(r2)
             break;
 2012ad4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2012ad8:	d0a72f17 	ldw	r2,-25412(gp)
 2012adc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2012ae0:	d0a72f17 	ldw	r2,-25412(gp)
 2012ae4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2012ae8:	d0a72f17 	ldw	r2,-25412(gp)
 2012aec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2012af0:	d0a72f17 	ldw	r2,-25412(gp)
 2012af4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2012af8:	d0a72f17 	ldw	r2,-25412(gp)
 2012afc:	10000915 	stw	zero,36(r2)
 2012b00:	e0bff717 	ldw	r2,-36(fp)
 2012b04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012b08:	e0bffa17 	ldw	r2,-24(fp)
 2012b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2012b10:	e0bff617 	ldw	r2,-40(fp)
}
 2012b14:	e037883a 	mov	sp,fp
 2012b18:	dfc00117 	ldw	ra,4(sp)
 2012b1c:	df000017 	ldw	fp,0(sp)
 2012b20:	dec00204 	addi	sp,sp,8
 2012b24:	f800283a 	ret

02012b28 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2012b28:	defff604 	addi	sp,sp,-40
 2012b2c:	dfc00915 	stw	ra,36(sp)
 2012b30:	df000815 	stw	fp,32(sp)
 2012b34:	df000804 	addi	fp,sp,32
 2012b38:	e13ffd15 	stw	r4,-12(fp)
 2012b3c:	2805883a 	mov	r2,r5
 2012b40:	e1bfff15 	stw	r6,-4(fp)
 2012b44:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2012b48:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2012b4c:	e0bfff17 	ldw	r2,-4(fp)
 2012b50:	1000021e 	bne	r2,zero,2012b5c <OSMboxPendAbort+0x34>
        return (0);
 2012b54:	0005883a 	mov	r2,zero
 2012b58:	00004906 	br	2012c80 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2012b5c:	e0bffd17 	ldw	r2,-12(fp)
 2012b60:	1000051e 	bne	r2,zero,2012b78 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2012b64:	e0bfff17 	ldw	r2,-4(fp)
 2012b68:	00c00104 	movi	r3,4
 2012b6c:	10c00005 	stb	r3,0(r2)
        return (0);
 2012b70:	0005883a 	mov	r2,zero
 2012b74:	00004206 	br	2012c80 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2012b78:	e0bffd17 	ldw	r2,-12(fp)
 2012b7c:	10800003 	ldbu	r2,0(r2)
 2012b80:	10803fcc 	andi	r2,r2,255
 2012b84:	10800060 	cmpeqi	r2,r2,1
 2012b88:	1000051e 	bne	r2,zero,2012ba0 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2012b8c:	e0bfff17 	ldw	r2,-4(fp)
 2012b90:	00c00044 	movi	r3,1
 2012b94:	10c00005 	stb	r3,0(r2)
        return (0);
 2012b98:	0005883a 	mov	r2,zero
 2012b9c:	00003806 	br	2012c80 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012ba0:	0005303a 	rdctl	r2,status
 2012ba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012ba8:	e0fffc17 	ldw	r3,-16(fp)
 2012bac:	00bfff84 	movi	r2,-2
 2012bb0:	1884703a 	and	r2,r3,r2
 2012bb4:	1001703a 	wrctl	status,r2
  
  return context;
 2012bb8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2012bbc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 2012bc0:	e0bffd17 	ldw	r2,-12(fp)
 2012bc4:	10800283 	ldbu	r2,10(r2)
 2012bc8:	10803fcc 	andi	r2,r2,255
 2012bcc:	10002526 	beq	r2,zero,2012c64 <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 2012bd0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2012bd4:	e0bffe03 	ldbu	r2,-8(fp)
 2012bd8:	10800060 	cmpeqi	r2,r2,1
 2012bdc:	10000e26 	beq	r2,zero,2012c18 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2012be0:	00000806 	br	2012c04 <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2012be4:	01c00084 	movi	r7,2
 2012be8:	01800084 	movi	r6,2
 2012bec:	000b883a 	mov	r5,zero
 2012bf0:	e13ffd17 	ldw	r4,-12(fp)
 2012bf4:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                     nbr_tasks++;
 2012bf8:	e0bff803 	ldbu	r2,-32(fp)
 2012bfc:	10800044 	addi	r2,r2,1
 2012c00:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 2012c04:	e0bffd17 	ldw	r2,-12(fp)
 2012c08:	10800283 	ldbu	r2,10(r2)
 2012c0c:	10803fcc 	andi	r2,r2,255
 2012c10:	103ff41e 	bne	r2,zero,2012be4 <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2012c14:	00000906 	br	2012c3c <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 2012c18:	01c00084 	movi	r7,2
 2012c1c:	01800084 	movi	r6,2
 2012c20:	000b883a 	mov	r5,zero
 2012c24:	e13ffd17 	ldw	r4,-12(fp)
 2012c28:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                 nbr_tasks++;
 2012c2c:	e0bff803 	ldbu	r2,-32(fp)
 2012c30:	10800044 	addi	r2,r2,1
 2012c34:	e0bff805 	stb	r2,-32(fp)
                 break;
 2012c38:	0001883a 	nop
 2012c3c:	e0bff917 	ldw	r2,-28(fp)
 2012c40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012c44:	e0bffa17 	ldw	r2,-24(fp)
 2012c48:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2012c4c:	20105d00 	call	20105d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2012c50:	e0bfff17 	ldw	r2,-4(fp)
 2012c54:	00c00384 	movi	r3,14
 2012c58:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2012c5c:	e0bff803 	ldbu	r2,-32(fp)
 2012c60:	00000706 	br	2012c80 <OSMboxPendAbort+0x158>
 2012c64:	e0bff917 	ldw	r2,-28(fp)
 2012c68:	e0bffb15 	stw	r2,-20(fp)
 2012c6c:	e0bffb17 	ldw	r2,-20(fp)
 2012c70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012c74:	e0bfff17 	ldw	r2,-4(fp)
 2012c78:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 2012c7c:	0005883a 	mov	r2,zero
}
 2012c80:	e037883a 	mov	sp,fp
 2012c84:	dfc00117 	ldw	ra,4(sp)
 2012c88:	df000017 	ldw	fp,0(sp)
 2012c8c:	dec00204 	addi	sp,sp,8
 2012c90:	f800283a 	ret

02012c94 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 2012c94:	defff704 	addi	sp,sp,-36
 2012c98:	dfc00815 	stw	ra,32(sp)
 2012c9c:	df000715 	stw	fp,28(sp)
 2012ca0:	df000704 	addi	fp,sp,28
 2012ca4:	e13ffe15 	stw	r4,-8(fp)
 2012ca8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2012cac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2012cb0:	e0bffe17 	ldw	r2,-8(fp)
 2012cb4:	1000021e 	bne	r2,zero,2012cc0 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2012cb8:	00800104 	movi	r2,4
 2012cbc:	00003406 	br	2012d90 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2012cc0:	e0bfff17 	ldw	r2,-4(fp)
 2012cc4:	1000021e 	bne	r2,zero,2012cd0 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 2012cc8:	008000c4 	movi	r2,3
 2012ccc:	00003006 	br	2012d90 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2012cd0:	e0bffe17 	ldw	r2,-8(fp)
 2012cd4:	10800003 	ldbu	r2,0(r2)
 2012cd8:	10803fcc 	andi	r2,r2,255
 2012cdc:	10800060 	cmpeqi	r2,r2,1
 2012ce0:	1000021e 	bne	r2,zero,2012cec <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 2012ce4:	00800044 	movi	r2,1
 2012ce8:	00002906 	br	2012d90 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012cec:	0005303a 	rdctl	r2,status
 2012cf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012cf4:	e0fffd17 	ldw	r3,-12(fp)
 2012cf8:	00bfff84 	movi	r2,-2
 2012cfc:	1884703a 	and	r2,r3,r2
 2012d00:	1001703a 	wrctl	status,r2
  
  return context;
 2012d04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2012d08:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2012d0c:	e0bffe17 	ldw	r2,-8(fp)
 2012d10:	10800283 	ldbu	r2,10(r2)
 2012d14:	10803fcc 	andi	r2,r2,255
 2012d18:	10000c26 	beq	r2,zero,2012d4c <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2012d1c:	000f883a 	mov	r7,zero
 2012d20:	01800084 	movi	r6,2
 2012d24:	e17fff17 	ldw	r5,-4(fp)
 2012d28:	e13ffe17 	ldw	r4,-8(fp)
 2012d2c:	200fb840 	call	200fb84 <OS_EventTaskRdy>
 2012d30:	e0bff917 	ldw	r2,-28(fp)
 2012d34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012d38:	e0bffa17 	ldw	r2,-24(fp)
 2012d3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2012d40:	20105d00 	call	20105d0 <OS_Sched>
        return (OS_ERR_NONE);
 2012d44:	0005883a 	mov	r2,zero
 2012d48:	00001106 	br	2012d90 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2012d4c:	e0bffe17 	ldw	r2,-8(fp)
 2012d50:	10800117 	ldw	r2,4(r2)
 2012d54:	10000626 	beq	r2,zero,2012d70 <OSMboxPost+0xdc>
 2012d58:	e0bff917 	ldw	r2,-28(fp)
 2012d5c:	e0bffb15 	stw	r2,-20(fp)
 2012d60:	e0bffb17 	ldw	r2,-20(fp)
 2012d64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2012d68:	00800504 	movi	r2,20
 2012d6c:	00000806 	br	2012d90 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2012d70:	e0bffe17 	ldw	r2,-8(fp)
 2012d74:	e0ffff17 	ldw	r3,-4(fp)
 2012d78:	10c00115 	stw	r3,4(r2)
 2012d7c:	e0bff917 	ldw	r2,-28(fp)
 2012d80:	e0bffc15 	stw	r2,-16(fp)
 2012d84:	e0bffc17 	ldw	r2,-16(fp)
 2012d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2012d8c:	0005883a 	mov	r2,zero
}
 2012d90:	e037883a 	mov	sp,fp
 2012d94:	dfc00117 	ldw	ra,4(sp)
 2012d98:	df000017 	ldw	fp,0(sp)
 2012d9c:	dec00204 	addi	sp,sp,8
 2012da0:	f800283a 	ret

02012da4 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2012da4:	defff604 	addi	sp,sp,-40
 2012da8:	dfc00915 	stw	ra,36(sp)
 2012dac:	df000815 	stw	fp,32(sp)
 2012db0:	df000804 	addi	fp,sp,32
 2012db4:	e13ffd15 	stw	r4,-12(fp)
 2012db8:	e17ffe15 	stw	r5,-8(fp)
 2012dbc:	3005883a 	mov	r2,r6
 2012dc0:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2012dc4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2012dc8:	e0bffd17 	ldw	r2,-12(fp)
 2012dcc:	1000021e 	bne	r2,zero,2012dd8 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2012dd0:	00800104 	movi	r2,4
 2012dd4:	00004506 	br	2012eec <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 2012dd8:	e0bffe17 	ldw	r2,-8(fp)
 2012ddc:	1000021e 	bne	r2,zero,2012de8 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 2012de0:	008000c4 	movi	r2,3
 2012de4:	00004106 	br	2012eec <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 2012de8:	e0bffd17 	ldw	r2,-12(fp)
 2012dec:	10800003 	ldbu	r2,0(r2)
 2012df0:	10803fcc 	andi	r2,r2,255
 2012df4:	10800060 	cmpeqi	r2,r2,1
 2012df8:	1000021e 	bne	r2,zero,2012e04 <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 2012dfc:	00800044 	movi	r2,1
 2012e00:	00003a06 	br	2012eec <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012e04:	0005303a 	rdctl	r2,status
 2012e08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012e0c:	e0fffc17 	ldw	r3,-16(fp)
 2012e10:	00bfff84 	movi	r2,-2
 2012e14:	1884703a 	and	r2,r3,r2
 2012e18:	1001703a 	wrctl	status,r2
  
  return context;
 2012e1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2012e20:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 2012e24:	e0bffd17 	ldw	r2,-12(fp)
 2012e28:	10800283 	ldbu	r2,10(r2)
 2012e2c:	10803fcc 	andi	r2,r2,255
 2012e30:	10001d26 	beq	r2,zero,2012ea8 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2012e34:	e0bfff03 	ldbu	r2,-4(fp)
 2012e38:	1080004c 	andi	r2,r2,1
 2012e3c:	10000b26 	beq	r2,zero,2012e6c <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2012e40:	00000506 	br	2012e58 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2012e44:	000f883a 	mov	r7,zero
 2012e48:	01800084 	movi	r6,2
 2012e4c:	e17ffe17 	ldw	r5,-8(fp)
 2012e50:	e13ffd17 	ldw	r4,-12(fp)
 2012e54:	200fb840 	call	200fb84 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 2012e58:	e0bffd17 	ldw	r2,-12(fp)
 2012e5c:	10800283 	ldbu	r2,10(r2)
 2012e60:	10803fcc 	andi	r2,r2,255
 2012e64:	103ff71e 	bne	r2,zero,2012e44 <OSMboxPostOpt+0xa0>
 2012e68:	00000506 	br	2012e80 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 2012e6c:	000f883a 	mov	r7,zero
 2012e70:	01800084 	movi	r6,2
 2012e74:	e17ffe17 	ldw	r5,-8(fp)
 2012e78:	e13ffd17 	ldw	r4,-12(fp)
 2012e7c:	200fb840 	call	200fb84 <OS_EventTaskRdy>
 2012e80:	e0bff817 	ldw	r2,-32(fp)
 2012e84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012e88:	e0bff917 	ldw	r2,-28(fp)
 2012e8c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2012e90:	e0bfff03 	ldbu	r2,-4(fp)
 2012e94:	1080010c 	andi	r2,r2,4
 2012e98:	1000011e 	bne	r2,zero,2012ea0 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 2012e9c:	20105d00 	call	20105d0 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2012ea0:	0005883a 	mov	r2,zero
 2012ea4:	00001106 	br	2012eec <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 2012ea8:	e0bffd17 	ldw	r2,-12(fp)
 2012eac:	10800117 	ldw	r2,4(r2)
 2012eb0:	10000626 	beq	r2,zero,2012ecc <OSMboxPostOpt+0x128>
 2012eb4:	e0bff817 	ldw	r2,-32(fp)
 2012eb8:	e0bffa15 	stw	r2,-24(fp)
 2012ebc:	e0bffa17 	ldw	r2,-24(fp)
 2012ec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 2012ec4:	00800504 	movi	r2,20
 2012ec8:	00000806 	br	2012eec <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 2012ecc:	e0bffd17 	ldw	r2,-12(fp)
 2012ed0:	e0fffe17 	ldw	r3,-8(fp)
 2012ed4:	10c00115 	stw	r3,4(r2)
 2012ed8:	e0bff817 	ldw	r2,-32(fp)
 2012edc:	e0bffb15 	stw	r2,-20(fp)
 2012ee0:	e0bffb17 	ldw	r2,-20(fp)
 2012ee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2012ee8:	0005883a 	mov	r2,zero
}
 2012eec:	e037883a 	mov	sp,fp
 2012ef0:	dfc00117 	ldw	ra,4(sp)
 2012ef4:	df000017 	ldw	fp,0(sp)
 2012ef8:	dec00204 	addi	sp,sp,8
 2012efc:	f800283a 	ret

02012f00 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 2012f00:	defff704 	addi	sp,sp,-36
 2012f04:	df000815 	stw	fp,32(sp)
 2012f08:	df000804 	addi	fp,sp,32
 2012f0c:	e13ffe15 	stw	r4,-8(fp)
 2012f10:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2012f14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2012f18:	e0bffe17 	ldw	r2,-8(fp)
 2012f1c:	1000021e 	bne	r2,zero,2012f28 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2012f20:	00800104 	movi	r2,4
 2012f24:	00003606 	br	2013000 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 2012f28:	e0bfff17 	ldw	r2,-4(fp)
 2012f2c:	1000021e 	bne	r2,zero,2012f38 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 2012f30:	00800244 	movi	r2,9
 2012f34:	00003206 	br	2013000 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 2012f38:	e0bffe17 	ldw	r2,-8(fp)
 2012f3c:	10800003 	ldbu	r2,0(r2)
 2012f40:	10803fcc 	andi	r2,r2,255
 2012f44:	10800060 	cmpeqi	r2,r2,1
 2012f48:	1000021e 	bne	r2,zero,2012f54 <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2012f4c:	00800044 	movi	r2,1
 2012f50:	00002b06 	br	2013000 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012f54:	0005303a 	rdctl	r2,status
 2012f58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012f5c:	e0fffd17 	ldw	r3,-12(fp)
 2012f60:	00bfff84 	movi	r2,-2
 2012f64:	1884703a 	and	r2,r3,r2
 2012f68:	1001703a 	wrctl	status,r2
  
  return context;
 2012f6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2012f70:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 2012f74:	e0bffe17 	ldw	r2,-8(fp)
 2012f78:	10c00283 	ldbu	r3,10(r2)
 2012f7c:	e0bfff17 	ldw	r2,-4(fp)
 2012f80:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 2012f84:	e0bffe17 	ldw	r2,-8(fp)
 2012f88:	108002c4 	addi	r2,r2,11
 2012f8c:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 2012f90:	e0bfff17 	ldw	r2,-4(fp)
 2012f94:	10800104 	addi	r2,r2,4
 2012f98:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2012f9c:	e03ff805 	stb	zero,-32(fp)
 2012fa0:	00000b06 	br	2012fd0 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 2012fa4:	e0bffa17 	ldw	r2,-24(fp)
 2012fa8:	10c00044 	addi	r3,r2,1
 2012fac:	e0fffa15 	stw	r3,-24(fp)
 2012fb0:	e0fff917 	ldw	r3,-28(fp)
 2012fb4:	19000044 	addi	r4,r3,1
 2012fb8:	e13ff915 	stw	r4,-28(fp)
 2012fbc:	18c00003 	ldbu	r3,0(r3)
 2012fc0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2012fc4:	e0bff803 	ldbu	r2,-32(fp)
 2012fc8:	10800044 	addi	r2,r2,1
 2012fcc:	e0bff805 	stb	r2,-32(fp)
 2012fd0:	e0bff803 	ldbu	r2,-32(fp)
 2012fd4:	108000f0 	cmpltui	r2,r2,3
 2012fd8:	103ff21e 	bne	r2,zero,2012fa4 <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 2012fdc:	e0bffe17 	ldw	r2,-8(fp)
 2012fe0:	10c00117 	ldw	r3,4(r2)
 2012fe4:	e0bfff17 	ldw	r2,-4(fp)
 2012fe8:	10c00015 	stw	r3,0(r2)
 2012fec:	e0bffb17 	ldw	r2,-20(fp)
 2012ff0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012ff4:	e0bffc17 	ldw	r2,-16(fp)
 2012ff8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2012ffc:	0005883a 	mov	r2,zero
}
 2013000:	e037883a 	mov	sp,fp
 2013004:	df000017 	ldw	fp,0(sp)
 2013008:	dec00104 	addi	sp,sp,4
 201300c:	f800283a 	ret

02013010 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 2013010:	defff404 	addi	sp,sp,-48
 2013014:	df000b15 	stw	fp,44(sp)
 2013018:	df000b04 	addi	fp,sp,44
 201301c:	e13ffc15 	stw	r4,-16(fp)
 2013020:	e17ffd15 	stw	r5,-12(fp)
 2013024:	e1bffe15 	stw	r6,-8(fp)
 2013028:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201302c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2013030:	e0bfff17 	ldw	r2,-4(fp)
 2013034:	1000021e 	bne	r2,zero,2013040 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 2013038:	0005883a 	mov	r2,zero
 201303c:	00006506 	br	20131d4 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 2013040:	e0bffc17 	ldw	r2,-16(fp)
 2013044:	1000051e 	bne	r2,zero,201305c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2013048:	e0bfff17 	ldw	r2,-4(fp)
 201304c:	00c01884 	movi	r3,98
 2013050:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013054:	0005883a 	mov	r2,zero
 2013058:	00005e06 	br	20131d4 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 201305c:	e0bffc17 	ldw	r2,-16(fp)
 2013060:	108000cc 	andi	r2,r2,3
 2013064:	10000526 	beq	r2,zero,201307c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2013068:	e0bfff17 	ldw	r2,-4(fp)
 201306c:	00c01884 	movi	r3,98
 2013070:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013074:	0005883a 	mov	r2,zero
 2013078:	00005606 	br	20131d4 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 201307c:	e0bffd17 	ldw	r2,-12(fp)
 2013080:	108000a8 	cmpgeui	r2,r2,2
 2013084:	1000051e 	bne	r2,zero,201309c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 2013088:	e0bfff17 	ldw	r2,-4(fp)
 201308c:	00c016c4 	movi	r3,91
 2013090:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 2013094:	0005883a 	mov	r2,zero
 2013098:	00004e06 	br	20131d4 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 201309c:	e0bffe17 	ldw	r2,-8(fp)
 20130a0:	10800128 	cmpgeui	r2,r2,4
 20130a4:	1000051e 	bne	r2,zero,20130bc <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 20130a8:	e0bfff17 	ldw	r2,-4(fp)
 20130ac:	00c01704 	movi	r3,92
 20130b0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 20130b4:	0005883a 	mov	r2,zero
 20130b8:	00004606 	br	20131d4 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20130bc:	0005303a 	rdctl	r2,status
 20130c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20130c4:	e0fffb17 	ldw	r3,-20(fp)
 20130c8:	00bfff84 	movi	r2,-2
 20130cc:	1884703a 	and	r2,r3,r2
 20130d0:	1001703a 	wrctl	status,r2
  
  return context;
 20130d4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20130d8:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 20130dc:	d0a72917 	ldw	r2,-25436(gp)
 20130e0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 20130e4:	d0a72917 	ldw	r2,-25436(gp)
 20130e8:	10000326 	beq	r2,zero,20130f8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 20130ec:	d0a72917 	ldw	r2,-25436(gp)
 20130f0:	10800117 	ldw	r2,4(r2)
 20130f4:	d0a72915 	stw	r2,-25436(gp)
 20130f8:	e0bff817 	ldw	r2,-32(fp)
 20130fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013100:	e0bff917 	ldw	r2,-28(fp)
 2013104:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2013108:	e0bffa17 	ldw	r2,-24(fp)
 201310c:	1000051e 	bne	r2,zero,2013124 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 2013110:	e0bfff17 	ldw	r2,-4(fp)
 2013114:	00c01684 	movi	r3,90
 2013118:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 201311c:	0005883a 	mov	r2,zero
 2013120:	00002c06 	br	20131d4 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 2013124:	e0bffc17 	ldw	r2,-16(fp)
 2013128:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 201312c:	e0fffc17 	ldw	r3,-16(fp)
 2013130:	e0bffe17 	ldw	r2,-8(fp)
 2013134:	1885883a 	add	r2,r3,r2
 2013138:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 201313c:	e03ff715 	stw	zero,-36(fp)
 2013140:	00000c06 	br	2013174 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 2013144:	e0bff617 	ldw	r2,-40(fp)
 2013148:	e0fff517 	ldw	r3,-44(fp)
 201314c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 2013150:	e0bff517 	ldw	r2,-44(fp)
 2013154:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 2013158:	e0fff517 	ldw	r3,-44(fp)
 201315c:	e0bffe17 	ldw	r2,-8(fp)
 2013160:	1885883a 	add	r2,r3,r2
 2013164:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 2013168:	e0bff717 	ldw	r2,-36(fp)
 201316c:	10800044 	addi	r2,r2,1
 2013170:	e0bff715 	stw	r2,-36(fp)
 2013174:	e0bffd17 	ldw	r2,-12(fp)
 2013178:	10bfffc4 	addi	r2,r2,-1
 201317c:	e0fff717 	ldw	r3,-36(fp)
 2013180:	18bff036 	bltu	r3,r2,2013144 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 2013184:	e0bff617 	ldw	r2,-40(fp)
 2013188:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 201318c:	e0bffa17 	ldw	r2,-24(fp)
 2013190:	e0fffc17 	ldw	r3,-16(fp)
 2013194:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 2013198:	e0bffa17 	ldw	r2,-24(fp)
 201319c:	e0fffc17 	ldw	r3,-16(fp)
 20131a0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 20131a4:	e0bffa17 	ldw	r2,-24(fp)
 20131a8:	e0fffd17 	ldw	r3,-12(fp)
 20131ac:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 20131b0:	e0bffa17 	ldw	r2,-24(fp)
 20131b4:	e0fffd17 	ldw	r3,-12(fp)
 20131b8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 20131bc:	e0bffa17 	ldw	r2,-24(fp)
 20131c0:	e0fffe17 	ldw	r3,-8(fp)
 20131c4:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 20131c8:	e0bfff17 	ldw	r2,-4(fp)
 20131cc:	10000005 	stb	zero,0(r2)
    return (pmem);
 20131d0:	e0bffa17 	ldw	r2,-24(fp)
}
 20131d4:	e037883a 	mov	sp,fp
 20131d8:	df000017 	ldw	fp,0(sp)
 20131dc:	dec00104 	addi	sp,sp,4
 20131e0:	f800283a 	ret

020131e4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 20131e4:	defff804 	addi	sp,sp,-32
 20131e8:	df000715 	stw	fp,28(sp)
 20131ec:	df000704 	addi	fp,sp,28
 20131f0:	e13ffe15 	stw	r4,-8(fp)
 20131f4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20131f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20131fc:	e0bfff17 	ldw	r2,-4(fp)
 2013200:	1000021e 	bne	r2,zero,201320c <OSMemGet+0x28>
        return ((void *)0);
 2013204:	0005883a 	mov	r2,zero
 2013208:	00002e06 	br	20132c4 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 201320c:	e0bffe17 	ldw	r2,-8(fp)
 2013210:	1000051e 	bne	r2,zero,2013228 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2013214:	e0bfff17 	ldw	r2,-4(fp)
 2013218:	00c01804 	movi	r3,96
 201321c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013220:	0005883a 	mov	r2,zero
 2013224:	00002706 	br	20132c4 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013228:	0005303a 	rdctl	r2,status
 201322c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013230:	e0fffd17 	ldw	r3,-12(fp)
 2013234:	00bfff84 	movi	r2,-2
 2013238:	1884703a 	and	r2,r3,r2
 201323c:	1001703a 	wrctl	status,r2
  
  return context;
 2013240:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2013244:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 2013248:	e0bffe17 	ldw	r2,-8(fp)
 201324c:	10800417 	ldw	r2,16(r2)
 2013250:	10001426 	beq	r2,zero,20132a4 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 2013254:	e0bffe17 	ldw	r2,-8(fp)
 2013258:	10800117 	ldw	r2,4(r2)
 201325c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 2013260:	e0bffb17 	ldw	r2,-20(fp)
 2013264:	10c00017 	ldw	r3,0(r2)
 2013268:	e0bffe17 	ldw	r2,-8(fp)
 201326c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 2013270:	e0bffe17 	ldw	r2,-8(fp)
 2013274:	10800417 	ldw	r2,16(r2)
 2013278:	10ffffc4 	addi	r3,r2,-1
 201327c:	e0bffe17 	ldw	r2,-8(fp)
 2013280:	10c00415 	stw	r3,16(r2)
 2013284:	e0bff917 	ldw	r2,-28(fp)
 2013288:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201328c:	e0bffa17 	ldw	r2,-24(fp)
 2013290:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 2013294:	e0bfff17 	ldw	r2,-4(fp)
 2013298:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 201329c:	e0bffb17 	ldw	r2,-20(fp)
 20132a0:	00000806 	br	20132c4 <OSMemGet+0xe0>
 20132a4:	e0bff917 	ldw	r2,-28(fp)
 20132a8:	e0bffc15 	stw	r2,-16(fp)
 20132ac:	e0bffc17 	ldw	r2,-16(fp)
 20132b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 20132b4:	e0bfff17 	ldw	r2,-4(fp)
 20132b8:	00c01744 	movi	r3,93
 20132bc:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 20132c0:	0005883a 	mov	r2,zero
}
 20132c4:	e037883a 	mov	sp,fp
 20132c8:	df000017 	ldw	fp,0(sp)
 20132cc:	dec00104 	addi	sp,sp,4
 20132d0:	f800283a 	ret

020132d4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20132d4:	defff704 	addi	sp,sp,-36
 20132d8:	dfc00815 	stw	ra,32(sp)
 20132dc:	df000715 	stw	fp,28(sp)
 20132e0:	df000704 	addi	fp,sp,28
 20132e4:	e13ffd15 	stw	r4,-12(fp)
 20132e8:	e17ffe15 	stw	r5,-8(fp)
 20132ec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20132f0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20132f4:	e0bfff17 	ldw	r2,-4(fp)
 20132f8:	1000021e 	bne	r2,zero,2013304 <OSMemNameGet+0x30>
        return (0);
 20132fc:	0005883a 	mov	r2,zero
 2013300:	00002b06 	br	20133b0 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2013304:	e0bffd17 	ldw	r2,-12(fp)
 2013308:	1000051e 	bne	r2,zero,2013320 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201330c:	e0bfff17 	ldw	r2,-4(fp)
 2013310:	00c01804 	movi	r3,96
 2013314:	10c00005 	stb	r3,0(r2)
        return (0);
 2013318:	0005883a 	mov	r2,zero
 201331c:	00002406 	br	20133b0 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013320:	e0bffe17 	ldw	r2,-8(fp)
 2013324:	1000051e 	bne	r2,zero,201333c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 2013328:	e0bfff17 	ldw	r2,-4(fp)
 201332c:	00c00304 	movi	r3,12
 2013330:	10c00005 	stb	r3,0(r2)
        return (0);
 2013334:	0005883a 	mov	r2,zero
 2013338:	00001d06 	br	20133b0 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201333c:	d0a72e03 	ldbu	r2,-25416(gp)
 2013340:	10803fcc 	andi	r2,r2,255
 2013344:	10000526 	beq	r2,zero,201335c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 2013348:	e0bfff17 	ldw	r2,-4(fp)
 201334c:	00c00444 	movi	r3,17
 2013350:	10c00005 	stb	r3,0(r2)
        return (0);
 2013354:	0005883a 	mov	r2,zero
 2013358:	00001506 	br	20133b0 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201335c:	0005303a 	rdctl	r2,status
 2013360:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013364:	e0fffb17 	ldw	r3,-20(fp)
 2013368:	00bfff84 	movi	r2,-2
 201336c:	1884703a 	and	r2,r3,r2
 2013370:	1001703a 	wrctl	status,r2
  
  return context;
 2013374:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2013378:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 201337c:	e0bffd17 	ldw	r2,-12(fp)
 2013380:	10800504 	addi	r2,r2,20
 2013384:	100b883a 	mov	r5,r2
 2013388:	e13ffe17 	ldw	r4,-8(fp)
 201338c:	20107140 	call	2010714 <OS_StrCopy>
 2013390:	e0bffa05 	stb	r2,-24(fp)
 2013394:	e0bff917 	ldw	r2,-28(fp)
 2013398:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201339c:	e0bffc17 	ldw	r2,-16(fp)
 20133a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20133a4:	e0bfff17 	ldw	r2,-4(fp)
 20133a8:	10000005 	stb	zero,0(r2)
    return (len);
 20133ac:	e0bffa03 	ldbu	r2,-24(fp)
}
 20133b0:	e037883a 	mov	sp,fp
 20133b4:	dfc00117 	ldw	ra,4(sp)
 20133b8:	df000017 	ldw	fp,0(sp)
 20133bc:	dec00204 	addi	sp,sp,8
 20133c0:	f800283a 	ret

020133c4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 20133c4:	defff604 	addi	sp,sp,-40
 20133c8:	dfc00915 	stw	ra,36(sp)
 20133cc:	df000815 	stw	fp,32(sp)
 20133d0:	df000804 	addi	fp,sp,32
 20133d4:	e13ffd15 	stw	r4,-12(fp)
 20133d8:	e17ffe15 	stw	r5,-8(fp)
 20133dc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20133e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 20133e4:	e0bfff17 	ldw	r2,-4(fp)
 20133e8:	10003526 	beq	r2,zero,20134c0 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 20133ec:	e0bffd17 	ldw	r2,-12(fp)
 20133f0:	1000041e 	bne	r2,zero,2013404 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 20133f4:	e0bfff17 	ldw	r2,-4(fp)
 20133f8:	00c01804 	movi	r3,96
 20133fc:	10c00005 	stb	r3,0(r2)
        return;
 2013400:	00003006 	br	20134c4 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013404:	e0bffe17 	ldw	r2,-8(fp)
 2013408:	1000041e 	bne	r2,zero,201341c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 201340c:	e0bfff17 	ldw	r2,-4(fp)
 2013410:	00c00304 	movi	r3,12
 2013414:	10c00005 	stb	r3,0(r2)
        return;
 2013418:	00002a06 	br	20134c4 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201341c:	d0a72e03 	ldbu	r2,-25416(gp)
 2013420:	10803fcc 	andi	r2,r2,255
 2013424:	10000426 	beq	r2,zero,2013438 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 2013428:	e0bfff17 	ldw	r2,-4(fp)
 201342c:	00c00484 	movi	r3,18
 2013430:	10c00005 	stb	r3,0(r2)
        return;
 2013434:	00002306 	br	20134c4 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013438:	0005303a 	rdctl	r2,status
 201343c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013440:	e0fffc17 	ldw	r3,-16(fp)
 2013444:	00bfff84 	movi	r2,-2
 2013448:	1884703a 	and	r2,r3,r2
 201344c:	1001703a 	wrctl	status,r2
  
  return context;
 2013450:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013454:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 2013458:	e13ffe17 	ldw	r4,-8(fp)
 201345c:	20107880 	call	2010788 <OS_StrLen>
 2013460:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2013464:	e0bffa03 	ldbu	r2,-24(fp)
 2013468:	10800830 	cmpltui	r2,r2,32
 201346c:	1000081e 	bne	r2,zero,2013490 <OSMemNameSet+0xcc>
 2013470:	e0bff817 	ldw	r2,-32(fp)
 2013474:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013478:	e0bff917 	ldw	r2,-28(fp)
 201347c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 2013480:	e0bfff17 	ldw	r2,-4(fp)
 2013484:	00c018c4 	movi	r3,99
 2013488:	10c00005 	stb	r3,0(r2)
        return;
 201348c:	00000d06 	br	20134c4 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 2013490:	e0bffd17 	ldw	r2,-12(fp)
 2013494:	10800504 	addi	r2,r2,20
 2013498:	e17ffe17 	ldw	r5,-8(fp)
 201349c:	1009883a 	mov	r4,r2
 20134a0:	20107140 	call	2010714 <OS_StrCopy>
 20134a4:	e0bff817 	ldw	r2,-32(fp)
 20134a8:	e0bffb15 	stw	r2,-20(fp)
 20134ac:	e0bffb17 	ldw	r2,-20(fp)
 20134b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20134b4:	e0bfff17 	ldw	r2,-4(fp)
 20134b8:	10000005 	stb	zero,0(r2)
 20134bc:	00000106 	br	20134c4 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 20134c0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 20134c4:	e037883a 	mov	sp,fp
 20134c8:	dfc00117 	ldw	ra,4(sp)
 20134cc:	df000017 	ldw	fp,0(sp)
 20134d0:	dec00204 	addi	sp,sp,8
 20134d4:	f800283a 	ret

020134d8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 20134d8:	defff904 	addi	sp,sp,-28
 20134dc:	df000615 	stw	fp,24(sp)
 20134e0:	df000604 	addi	fp,sp,24
 20134e4:	e13ffe15 	stw	r4,-8(fp)
 20134e8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20134ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 20134f0:	e0bffe17 	ldw	r2,-8(fp)
 20134f4:	1000021e 	bne	r2,zero,2013500 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 20134f8:	00801804 	movi	r2,96
 20134fc:	00002806 	br	20135a0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 2013500:	e0bfff17 	ldw	r2,-4(fp)
 2013504:	1000021e 	bne	r2,zero,2013510 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 2013508:	008017c4 	movi	r2,95
 201350c:	00002406 	br	20135a0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013510:	0005303a 	rdctl	r2,status
 2013514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013518:	e0fffd17 	ldw	r3,-12(fp)
 201351c:	00bfff84 	movi	r2,-2
 2013520:	1884703a 	and	r2,r3,r2
 2013524:	1001703a 	wrctl	status,r2
  
  return context;
 2013528:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201352c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 2013530:	e0bffe17 	ldw	r2,-8(fp)
 2013534:	10c00417 	ldw	r3,16(r2)
 2013538:	e0bffe17 	ldw	r2,-8(fp)
 201353c:	10800317 	ldw	r2,12(r2)
 2013540:	18800636 	bltu	r3,r2,201355c <OSMemPut+0x84>
 2013544:	e0bffa17 	ldw	r2,-24(fp)
 2013548:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201354c:	e0bffb17 	ldw	r2,-20(fp)
 2013550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 2013554:	00801784 	movi	r2,94
 2013558:	00001106 	br	20135a0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 201355c:	e0bffe17 	ldw	r2,-8(fp)
 2013560:	10c00117 	ldw	r3,4(r2)
 2013564:	e0bfff17 	ldw	r2,-4(fp)
 2013568:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 201356c:	e0bffe17 	ldw	r2,-8(fp)
 2013570:	e0ffff17 	ldw	r3,-4(fp)
 2013574:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 2013578:	e0bffe17 	ldw	r2,-8(fp)
 201357c:	10800417 	ldw	r2,16(r2)
 2013580:	10c00044 	addi	r3,r2,1
 2013584:	e0bffe17 	ldw	r2,-8(fp)
 2013588:	10c00415 	stw	r3,16(r2)
 201358c:	e0bffa17 	ldw	r2,-24(fp)
 2013590:	e0bffc15 	stw	r2,-16(fp)
 2013594:	e0bffc17 	ldw	r2,-16(fp)
 2013598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 201359c:	0005883a 	mov	r2,zero
}
 20135a0:	e037883a 	mov	sp,fp
 20135a4:	df000017 	ldw	fp,0(sp)
 20135a8:	dec00104 	addi	sp,sp,4
 20135ac:	f800283a 	ret

020135b0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 20135b0:	defffa04 	addi	sp,sp,-24
 20135b4:	df000515 	stw	fp,20(sp)
 20135b8:	df000504 	addi	fp,sp,20
 20135bc:	e13ffe15 	stw	r4,-8(fp)
 20135c0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20135c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 20135c8:	e0bffe17 	ldw	r2,-8(fp)
 20135cc:	1000021e 	bne	r2,zero,20135d8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 20135d0:	00801804 	movi	r2,96
 20135d4:	00002c06 	br	2013688 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 20135d8:	e0bfff17 	ldw	r2,-4(fp)
 20135dc:	1000021e 	bne	r2,zero,20135e8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 20135e0:	00801844 	movi	r2,97
 20135e4:	00002806 	br	2013688 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20135e8:	0005303a 	rdctl	r2,status
 20135ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20135f0:	e0fffc17 	ldw	r3,-16(fp)
 20135f4:	00bfff84 	movi	r2,-2
 20135f8:	1884703a 	and	r2,r3,r2
 20135fc:	1001703a 	wrctl	status,r2
  
  return context;
 2013600:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2013604:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 2013608:	e0bffe17 	ldw	r2,-8(fp)
 201360c:	10c00017 	ldw	r3,0(r2)
 2013610:	e0bfff17 	ldw	r2,-4(fp)
 2013614:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 2013618:	e0bffe17 	ldw	r2,-8(fp)
 201361c:	10c00117 	ldw	r3,4(r2)
 2013620:	e0bfff17 	ldw	r2,-4(fp)
 2013624:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 2013628:	e0bffe17 	ldw	r2,-8(fp)
 201362c:	10c00217 	ldw	r3,8(r2)
 2013630:	e0bfff17 	ldw	r2,-4(fp)
 2013634:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 2013638:	e0bffe17 	ldw	r2,-8(fp)
 201363c:	10c00317 	ldw	r3,12(r2)
 2013640:	e0bfff17 	ldw	r2,-4(fp)
 2013644:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2013648:	e0bffe17 	ldw	r2,-8(fp)
 201364c:	10c00417 	ldw	r3,16(r2)
 2013650:	e0bfff17 	ldw	r2,-4(fp)
 2013654:	10c00415 	stw	r3,16(r2)
 2013658:	e0bffb17 	ldw	r2,-20(fp)
 201365c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013660:	e0bffd17 	ldw	r2,-12(fp)
 2013664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2013668:	e0bfff17 	ldw	r2,-4(fp)
 201366c:	10c00317 	ldw	r3,12(r2)
 2013670:	e0bfff17 	ldw	r2,-4(fp)
 2013674:	10800417 	ldw	r2,16(r2)
 2013678:	1887c83a 	sub	r3,r3,r2
 201367c:	e0bfff17 	ldw	r2,-4(fp)
 2013680:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 2013684:	0005883a 	mov	r2,zero
}
 2013688:	e037883a 	mov	sp,fp
 201368c:	df000017 	ldw	fp,0(sp)
 2013690:	dec00104 	addi	sp,sp,4
 2013694:	f800283a 	ret

02013698 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 2013698:	defffc04 	addi	sp,sp,-16
 201369c:	dfc00315 	stw	ra,12(sp)
 20136a0:	df000215 	stw	fp,8(sp)
 20136a4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 20136a8:	01430c04 	movi	r5,3120
 20136ac:	010080b4 	movhi	r4,514
 20136b0:	2104d704 	addi	r4,r4,4956
 20136b4:	20105140 	call	2010514 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 20136b8:	008080b4 	movhi	r2,514
 20136bc:	1084d704 	addi	r2,r2,4956
 20136c0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20136c4:	e03fff0d 	sth	zero,-4(fp)
 20136c8:	00001606 	br	2013724 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 20136cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20136d0:	10800044 	addi	r2,r2,1
 20136d4:	01400d04 	movi	r5,52
 20136d8:	1009883a 	mov	r4,r2
 20136dc:	20011180 	call	2001118 <__mulsi3>
 20136e0:	1007883a 	mov	r3,r2
 20136e4:	008080b4 	movhi	r2,514
 20136e8:	1084d704 	addi	r2,r2,4956
 20136ec:	1887883a 	add	r3,r3,r2
 20136f0:	e0bffe17 	ldw	r2,-8(fp)
 20136f4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 20136f8:	e0bffe17 	ldw	r2,-8(fp)
 20136fc:	00c00fc4 	movi	r3,63
 2013700:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 2013704:	e0bffe17 	ldw	r2,-8(fp)
 2013708:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 201370c:	e0bffe17 	ldw	r2,-8(fp)
 2013710:	10800d04 	addi	r2,r2,52
 2013714:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2013718:	e0bfff0b 	ldhu	r2,-4(fp)
 201371c:	10800044 	addi	r2,r2,1
 2013720:	e0bfff0d 	sth	r2,-4(fp)
 2013724:	e0bfff0b 	ldhu	r2,-4(fp)
 2013728:	10800ef0 	cmpltui	r2,r2,59
 201372c:	103fe71e 	bne	r2,zero,20136cc <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 2013730:	e0bffe17 	ldw	r2,-8(fp)
 2013734:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 2013738:	e0bffe17 	ldw	r2,-8(fp)
 201373c:	00c00fc4 	movi	r3,63
 2013740:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 2013744:	e0bffe17 	ldw	r2,-8(fp)
 2013748:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 201374c:	008080b4 	movhi	r2,514
 2013750:	1084d704 	addi	r2,r2,4956
 2013754:	d0a72915 	stw	r2,-25436(gp)
#endif
}
 2013758:	0001883a 	nop
 201375c:	e037883a 	mov	sp,fp
 2013760:	dfc00117 	ldw	ra,4(sp)
 2013764:	df000017 	ldw	fp,0(sp)
 2013768:	dec00204 	addi	sp,sp,8
 201376c:	f800283a 	ret

02013770 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2013770:	defff804 	addi	sp,sp,-32
 2013774:	df000715 	stw	fp,28(sp)
 2013778:	df000704 	addi	fp,sp,28
 201377c:	e13ffe15 	stw	r4,-8(fp)
 2013780:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013784:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013788:	e0bfff17 	ldw	r2,-4(fp)
 201378c:	1000021e 	bne	r2,zero,2013798 <OSQAccept+0x28>
        return ((void *)0);
 2013790:	0005883a 	mov	r2,zero
 2013794:	00004206 	br	20138a0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2013798:	e0bffe17 	ldw	r2,-8(fp)
 201379c:	1000051e 	bne	r2,zero,20137b4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 20137a0:	e0bfff17 	ldw	r2,-4(fp)
 20137a4:	00c00104 	movi	r3,4
 20137a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20137ac:	0005883a 	mov	r2,zero
 20137b0:	00003b06 	br	20138a0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20137b4:	e0bffe17 	ldw	r2,-8(fp)
 20137b8:	10800003 	ldbu	r2,0(r2)
 20137bc:	10803fcc 	andi	r2,r2,255
 20137c0:	108000a0 	cmpeqi	r2,r2,2
 20137c4:	1000051e 	bne	r2,zero,20137dc <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 20137c8:	e0bfff17 	ldw	r2,-4(fp)
 20137cc:	00c00044 	movi	r3,1
 20137d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 20137d4:	0005883a 	mov	r2,zero
 20137d8:	00003106 	br	20138a0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20137dc:	0005303a 	rdctl	r2,status
 20137e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20137e4:	e0fffd17 	ldw	r3,-12(fp)
 20137e8:	00bfff84 	movi	r2,-2
 20137ec:	1884703a 	and	r2,r3,r2
 20137f0:	1001703a 	wrctl	status,r2
  
  return context;
 20137f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20137f8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 20137fc:	e0bffe17 	ldw	r2,-8(fp)
 2013800:	10800117 	ldw	r2,4(r2)
 2013804:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2013808:	e0bffc17 	ldw	r2,-16(fp)
 201380c:	1080058b 	ldhu	r2,22(r2)
 2013810:	10bfffcc 	andi	r2,r2,65535
 2013814:	10001926 	beq	r2,zero,201387c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2013818:	e0bffc17 	ldw	r2,-16(fp)
 201381c:	10800417 	ldw	r2,16(r2)
 2013820:	11000104 	addi	r4,r2,4
 2013824:	e0fffc17 	ldw	r3,-16(fp)
 2013828:	19000415 	stw	r4,16(r3)
 201382c:	10800017 	ldw	r2,0(r2)
 2013830:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2013834:	e0bffc17 	ldw	r2,-16(fp)
 2013838:	1080058b 	ldhu	r2,22(r2)
 201383c:	10bfffc4 	addi	r2,r2,-1
 2013840:	1007883a 	mov	r3,r2
 2013844:	e0bffc17 	ldw	r2,-16(fp)
 2013848:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 201384c:	e0bffc17 	ldw	r2,-16(fp)
 2013850:	10c00417 	ldw	r3,16(r2)
 2013854:	e0bffc17 	ldw	r2,-16(fp)
 2013858:	10800217 	ldw	r2,8(r2)
 201385c:	1880041e 	bne	r3,r2,2013870 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 2013860:	e0bffc17 	ldw	r2,-16(fp)
 2013864:	10c00117 	ldw	r3,4(r2)
 2013868:	e0bffc17 	ldw	r2,-16(fp)
 201386c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2013870:	e0bfff17 	ldw	r2,-4(fp)
 2013874:	10000005 	stb	zero,0(r2)
 2013878:	00000406 	br	201388c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 201387c:	e0bfff17 	ldw	r2,-4(fp)
 2013880:	00c007c4 	movi	r3,31
 2013884:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2013888:	e03ff915 	stw	zero,-28(fp)
 201388c:	e0bffa17 	ldw	r2,-24(fp)
 2013890:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013894:	e0bffb17 	ldw	r2,-20(fp)
 2013898:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 201389c:	e0bff917 	ldw	r2,-28(fp)
}
 20138a0:	e037883a 	mov	sp,fp
 20138a4:	df000017 	ldw	fp,0(sp)
 20138a8:	dec00104 	addi	sp,sp,4
 20138ac:	f800283a 	ret

020138b0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 20138b0:	defff404 	addi	sp,sp,-48
 20138b4:	dfc00b15 	stw	ra,44(sp)
 20138b8:	df000a15 	stw	fp,40(sp)
 20138bc:	df000a04 	addi	fp,sp,40
 20138c0:	e13ffe15 	stw	r4,-8(fp)
 20138c4:	2805883a 	mov	r2,r5
 20138c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20138cc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20138d0:	d0a72e03 	ldbu	r2,-25416(gp)
 20138d4:	10803fcc 	andi	r2,r2,255
 20138d8:	10000226 	beq	r2,zero,20138e4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 20138dc:	0005883a 	mov	r2,zero
 20138e0:	00005906 	br	2013a48 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20138e4:	0005303a 	rdctl	r2,status
 20138e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20138ec:	e0fffd17 	ldw	r3,-12(fp)
 20138f0:	00bfff84 	movi	r2,-2
 20138f4:	1884703a 	and	r2,r3,r2
 20138f8:	1001703a 	wrctl	status,r2
  
  return context;
 20138fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2013900:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2013904:	d0a72d17 	ldw	r2,-25420(gp)
 2013908:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 201390c:	d0a72d17 	ldw	r2,-25420(gp)
 2013910:	10000326 	beq	r2,zero,2013920 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2013914:	d0a72d17 	ldw	r2,-25420(gp)
 2013918:	10800117 	ldw	r2,4(r2)
 201391c:	d0a72d15 	stw	r2,-25420(gp)
 2013920:	e0bff717 	ldw	r2,-36(fp)
 2013924:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013928:	e0bff817 	ldw	r2,-32(fp)
 201392c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2013930:	e0bff617 	ldw	r2,-40(fp)
 2013934:	10004326 	beq	r2,zero,2013a44 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013938:	0005303a 	rdctl	r2,status
 201393c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013940:	e0fff917 	ldw	r3,-28(fp)
 2013944:	00bfff84 	movi	r2,-2
 2013948:	1884703a 	and	r2,r3,r2
 201394c:	1001703a 	wrctl	status,r2
  
  return context;
 2013950:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 2013954:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2013958:	d0a72b17 	ldw	r2,-25428(gp)
 201395c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2013960:	e0bffb17 	ldw	r2,-20(fp)
 2013964:	10002d26 	beq	r2,zero,2013a1c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2013968:	d0a72b17 	ldw	r2,-25428(gp)
 201396c:	10800017 	ldw	r2,0(r2)
 2013970:	d0a72b15 	stw	r2,-25428(gp)
 2013974:	e0bff717 	ldw	r2,-36(fp)
 2013978:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201397c:	e0bffa17 	ldw	r2,-24(fp)
 2013980:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2013984:	e0bffb17 	ldw	r2,-20(fp)
 2013988:	e0fffe17 	ldw	r3,-8(fp)
 201398c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 2013990:	e0bfff0b 	ldhu	r2,-4(fp)
 2013994:	1085883a 	add	r2,r2,r2
 2013998:	1085883a 	add	r2,r2,r2
 201399c:	1007883a 	mov	r3,r2
 20139a0:	e0bffe17 	ldw	r2,-8(fp)
 20139a4:	10c7883a 	add	r3,r2,r3
 20139a8:	e0bffb17 	ldw	r2,-20(fp)
 20139ac:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 20139b0:	e0bffb17 	ldw	r2,-20(fp)
 20139b4:	e0fffe17 	ldw	r3,-8(fp)
 20139b8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 20139bc:	e0bffb17 	ldw	r2,-20(fp)
 20139c0:	e0fffe17 	ldw	r3,-8(fp)
 20139c4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 20139c8:	e0bffb17 	ldw	r2,-20(fp)
 20139cc:	e0ffff0b 	ldhu	r3,-4(fp)
 20139d0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 20139d4:	e0bffb17 	ldw	r2,-20(fp)
 20139d8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 20139dc:	e0bff617 	ldw	r2,-40(fp)
 20139e0:	00c00084 	movi	r3,2
 20139e4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 20139e8:	e0bff617 	ldw	r2,-40(fp)
 20139ec:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 20139f0:	e0bff617 	ldw	r2,-40(fp)
 20139f4:	e0fffb17 	ldw	r3,-20(fp)
 20139f8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 20139fc:	e0bff617 	ldw	r2,-40(fp)
 2013a00:	00c00fc4 	movi	r3,63
 2013a04:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2013a08:	e0bff617 	ldw	r2,-40(fp)
 2013a0c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2013a10:	e13ff617 	ldw	r4,-40(fp)
 2013a14:	20101340 	call	2010134 <OS_EventWaitListInit>
 2013a18:	00000a06 	br	2013a44 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2013a1c:	d0e72d17 	ldw	r3,-25420(gp)
 2013a20:	e0bff617 	ldw	r2,-40(fp)
 2013a24:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2013a28:	e0bff617 	ldw	r2,-40(fp)
 2013a2c:	d0a72d15 	stw	r2,-25420(gp)
 2013a30:	e0bff717 	ldw	r2,-36(fp)
 2013a34:	e0bffc15 	stw	r2,-16(fp)
 2013a38:	e0bffc17 	ldw	r2,-16(fp)
 2013a3c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2013a40:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 2013a44:	e0bff617 	ldw	r2,-40(fp)
}
 2013a48:	e037883a 	mov	sp,fp
 2013a4c:	dfc00117 	ldw	ra,4(sp)
 2013a50:	df000017 	ldw	fp,0(sp)
 2013a54:	dec00204 	addi	sp,sp,8
 2013a58:	f800283a 	ret

02013a5c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2013a5c:	defff204 	addi	sp,sp,-56
 2013a60:	dfc00d15 	stw	ra,52(sp)
 2013a64:	df000c15 	stw	fp,48(sp)
 2013a68:	df000c04 	addi	fp,sp,48
 2013a6c:	e13ffd15 	stw	r4,-12(fp)
 2013a70:	2805883a 	mov	r2,r5
 2013a74:	e1bfff15 	stw	r6,-4(fp)
 2013a78:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2013a7c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2013a80:	e0bfff17 	ldw	r2,-4(fp)
 2013a84:	1000021e 	bne	r2,zero,2013a90 <OSQDel+0x34>
        return (pevent);
 2013a88:	e0bffd17 	ldw	r2,-12(fp)
 2013a8c:	00008e06 	br	2013cc8 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2013a90:	e0bffd17 	ldw	r2,-12(fp)
 2013a94:	1000051e 	bne	r2,zero,2013aac <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2013a98:	e0bfff17 	ldw	r2,-4(fp)
 2013a9c:	00c00104 	movi	r3,4
 2013aa0:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2013aa4:	e0bffd17 	ldw	r2,-12(fp)
 2013aa8:	00008706 	br	2013cc8 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2013aac:	e0bffd17 	ldw	r2,-12(fp)
 2013ab0:	10800003 	ldbu	r2,0(r2)
 2013ab4:	10803fcc 	andi	r2,r2,255
 2013ab8:	108000a0 	cmpeqi	r2,r2,2
 2013abc:	1000051e 	bne	r2,zero,2013ad4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2013ac0:	e0bfff17 	ldw	r2,-4(fp)
 2013ac4:	00c00044 	movi	r3,1
 2013ac8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2013acc:	e0bffd17 	ldw	r2,-12(fp)
 2013ad0:	00007d06 	br	2013cc8 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2013ad4:	d0a72e03 	ldbu	r2,-25416(gp)
 2013ad8:	10803fcc 	andi	r2,r2,255
 2013adc:	10000526 	beq	r2,zero,2013af4 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2013ae0:	e0bfff17 	ldw	r2,-4(fp)
 2013ae4:	00c003c4 	movi	r3,15
 2013ae8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2013aec:	e0bffd17 	ldw	r2,-12(fp)
 2013af0:	00007506 	br	2013cc8 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013af4:	0005303a 	rdctl	r2,status
 2013af8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013afc:	e0fffc17 	ldw	r3,-16(fp)
 2013b00:	00bfff84 	movi	r2,-2
 2013b04:	1884703a 	and	r2,r3,r2
 2013b08:	1001703a 	wrctl	status,r2
  
  return context;
 2013b0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013b10:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2013b14:	e0bffd17 	ldw	r2,-12(fp)
 2013b18:	10800283 	ldbu	r2,10(r2)
 2013b1c:	10803fcc 	andi	r2,r2,255
 2013b20:	10000326 	beq	r2,zero,2013b30 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2013b24:	00800044 	movi	r2,1
 2013b28:	e0bff405 	stb	r2,-48(fp)
 2013b2c:	00000106 	br	2013b34 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2013b30:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 2013b34:	e0bffe03 	ldbu	r2,-8(fp)
 2013b38:	10000326 	beq	r2,zero,2013b48 <OSQDel+0xec>
 2013b3c:	10800060 	cmpeqi	r2,r2,1
 2013b40:	1000301e 	bne	r2,zero,2013c04 <OSQDel+0x1a8>
 2013b44:	00005506 	br	2013c9c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2013b48:	e0bff403 	ldbu	r2,-48(fp)
 2013b4c:	10001e1e 	bne	r2,zero,2013bc8 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2013b50:	e0bffd17 	ldw	r2,-12(fp)
 2013b54:	00c00fc4 	movi	r3,63
 2013b58:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2013b5c:	e0bffd17 	ldw	r2,-12(fp)
 2013b60:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2013b64:	e0bffd17 	ldw	r2,-12(fp)
 2013b68:	10800117 	ldw	r2,4(r2)
 2013b6c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2013b70:	d0e72b17 	ldw	r3,-25428(gp)
 2013b74:	e0bff817 	ldw	r2,-32(fp)
 2013b78:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2013b7c:	e0bff817 	ldw	r2,-32(fp)
 2013b80:	d0a72b15 	stw	r2,-25428(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2013b84:	e0bffd17 	ldw	r2,-12(fp)
 2013b88:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2013b8c:	d0e72d17 	ldw	r3,-25420(gp)
 2013b90:	e0bffd17 	ldw	r2,-12(fp)
 2013b94:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2013b98:	e0bffd17 	ldw	r2,-12(fp)
 2013b9c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2013ba0:	e0bffd17 	ldw	r2,-12(fp)
 2013ba4:	d0a72d15 	stw	r2,-25420(gp)
 2013ba8:	e0bff617 	ldw	r2,-40(fp)
 2013bac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013bb0:	e0bff717 	ldw	r2,-36(fp)
 2013bb4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2013bb8:	e0bfff17 	ldw	r2,-4(fp)
 2013bbc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2013bc0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2013bc4:	00003f06 	br	2013cc4 <OSQDel+0x268>
 2013bc8:	e0bff617 	ldw	r2,-40(fp)
 2013bcc:	e0bff915 	stw	r2,-28(fp)
 2013bd0:	e0bff917 	ldw	r2,-28(fp)
 2013bd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2013bd8:	e0bfff17 	ldw	r2,-4(fp)
 2013bdc:	00c01244 	movi	r3,73
 2013be0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2013be4:	e0bffd17 	ldw	r2,-12(fp)
 2013be8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 2013bec:	00003506 	br	2013cc4 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2013bf0:	000f883a 	mov	r7,zero
 2013bf4:	01800104 	movi	r6,4
 2013bf8:	000b883a 	mov	r5,zero
 2013bfc:	e13ffd17 	ldw	r4,-12(fp)
 2013c00:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2013c04:	e0bffd17 	ldw	r2,-12(fp)
 2013c08:	10800283 	ldbu	r2,10(r2)
 2013c0c:	10803fcc 	andi	r2,r2,255
 2013c10:	103ff71e 	bne	r2,zero,2013bf0 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2013c14:	e0bffd17 	ldw	r2,-12(fp)
 2013c18:	00c00fc4 	movi	r3,63
 2013c1c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2013c20:	e0bffd17 	ldw	r2,-12(fp)
 2013c24:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2013c28:	e0bffd17 	ldw	r2,-12(fp)
 2013c2c:	10800117 	ldw	r2,4(r2)
 2013c30:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2013c34:	d0e72b17 	ldw	r3,-25428(gp)
 2013c38:	e0bff817 	ldw	r2,-32(fp)
 2013c3c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2013c40:	e0bff817 	ldw	r2,-32(fp)
 2013c44:	d0a72b15 	stw	r2,-25428(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2013c48:	e0bffd17 	ldw	r2,-12(fp)
 2013c4c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2013c50:	d0e72d17 	ldw	r3,-25420(gp)
 2013c54:	e0bffd17 	ldw	r2,-12(fp)
 2013c58:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2013c5c:	e0bffd17 	ldw	r2,-12(fp)
 2013c60:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2013c64:	e0bffd17 	ldw	r2,-12(fp)
 2013c68:	d0a72d15 	stw	r2,-25420(gp)
 2013c6c:	e0bff617 	ldw	r2,-40(fp)
 2013c70:	e0bffa15 	stw	r2,-24(fp)
 2013c74:	e0bffa17 	ldw	r2,-24(fp)
 2013c78:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2013c7c:	e0bff403 	ldbu	r2,-48(fp)
 2013c80:	10800058 	cmpnei	r2,r2,1
 2013c84:	1000011e 	bne	r2,zero,2013c8c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2013c88:	20105d00 	call	20105d0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2013c8c:	e0bfff17 	ldw	r2,-4(fp)
 2013c90:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2013c94:	e03ff515 	stw	zero,-44(fp)
             break;
 2013c98:	00000a06 	br	2013cc4 <OSQDel+0x268>
 2013c9c:	e0bff617 	ldw	r2,-40(fp)
 2013ca0:	e0bffb15 	stw	r2,-20(fp)
 2013ca4:	e0bffb17 	ldw	r2,-20(fp)
 2013ca8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2013cac:	e0bfff17 	ldw	r2,-4(fp)
 2013cb0:	00c001c4 	movi	r3,7
 2013cb4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2013cb8:	e0bffd17 	ldw	r2,-12(fp)
 2013cbc:	e0bff515 	stw	r2,-44(fp)
             break;
 2013cc0:	0001883a 	nop
    }
    return (pevent_return);
 2013cc4:	e0bff517 	ldw	r2,-44(fp)
}
 2013cc8:	e037883a 	mov	sp,fp
 2013ccc:	dfc00117 	ldw	ra,4(sp)
 2013cd0:	df000017 	ldw	fp,0(sp)
 2013cd4:	dec00204 	addi	sp,sp,8
 2013cd8:	f800283a 	ret

02013cdc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2013cdc:	defffa04 	addi	sp,sp,-24
 2013ce0:	df000515 	stw	fp,20(sp)
 2013ce4:	df000504 	addi	fp,sp,20
 2013ce8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013cec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2013cf0:	e0bfff17 	ldw	r2,-4(fp)
 2013cf4:	1000021e 	bne	r2,zero,2013d00 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 2013cf8:	00800104 	movi	r2,4
 2013cfc:	00002106 	br	2013d84 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2013d00:	e0bfff17 	ldw	r2,-4(fp)
 2013d04:	10800003 	ldbu	r2,0(r2)
 2013d08:	10803fcc 	andi	r2,r2,255
 2013d0c:	108000a0 	cmpeqi	r2,r2,2
 2013d10:	1000021e 	bne	r2,zero,2013d1c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 2013d14:	00800044 	movi	r2,1
 2013d18:	00001a06 	br	2013d84 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013d1c:	0005303a 	rdctl	r2,status
 2013d20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013d24:	e0fffd17 	ldw	r3,-12(fp)
 2013d28:	00bfff84 	movi	r2,-2
 2013d2c:	1884703a 	and	r2,r3,r2
 2013d30:	1001703a 	wrctl	status,r2
  
  return context;
 2013d34:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2013d38:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2013d3c:	e0bfff17 	ldw	r2,-4(fp)
 2013d40:	10800117 	ldw	r2,4(r2)
 2013d44:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 2013d48:	e0bffc17 	ldw	r2,-16(fp)
 2013d4c:	10c00117 	ldw	r3,4(r2)
 2013d50:	e0bffc17 	ldw	r2,-16(fp)
 2013d54:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2013d58:	e0bffc17 	ldw	r2,-16(fp)
 2013d5c:	10c00117 	ldw	r3,4(r2)
 2013d60:	e0bffc17 	ldw	r2,-16(fp)
 2013d64:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2013d68:	e0bffc17 	ldw	r2,-16(fp)
 2013d6c:	1000058d 	sth	zero,22(r2)
 2013d70:	e0bffb17 	ldw	r2,-20(fp)
 2013d74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013d78:	e0bffe17 	ldw	r2,-8(fp)
 2013d7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2013d80:	0005883a 	mov	r2,zero
}
 2013d84:	e037883a 	mov	sp,fp
 2013d88:	df000017 	ldw	fp,0(sp)
 2013d8c:	dec00104 	addi	sp,sp,4
 2013d90:	f800283a 	ret

02013d94 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2013d94:	defff304 	addi	sp,sp,-52
 2013d98:	dfc00c15 	stw	ra,48(sp)
 2013d9c:	df000b15 	stw	fp,44(sp)
 2013da0:	df000b04 	addi	fp,sp,44
 2013da4:	e13ffd15 	stw	r4,-12(fp)
 2013da8:	2805883a 	mov	r2,r5
 2013dac:	e1bfff15 	stw	r6,-4(fp)
 2013db0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013db4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013db8:	e0bfff17 	ldw	r2,-4(fp)
 2013dbc:	1000021e 	bne	r2,zero,2013dc8 <OSQPend+0x34>
        return ((void *)0);
 2013dc0:	0005883a 	mov	r2,zero
 2013dc4:	00009106 	br	201400c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2013dc8:	e0bffd17 	ldw	r2,-12(fp)
 2013dcc:	1000051e 	bne	r2,zero,2013de4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2013dd0:	e0bfff17 	ldw	r2,-4(fp)
 2013dd4:	00c00104 	movi	r3,4
 2013dd8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013ddc:	0005883a 	mov	r2,zero
 2013de0:	00008a06 	br	201400c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2013de4:	e0bffd17 	ldw	r2,-12(fp)
 2013de8:	10800003 	ldbu	r2,0(r2)
 2013dec:	10803fcc 	andi	r2,r2,255
 2013df0:	108000a0 	cmpeqi	r2,r2,2
 2013df4:	1000051e 	bne	r2,zero,2013e0c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2013df8:	e0bfff17 	ldw	r2,-4(fp)
 2013dfc:	00c00044 	movi	r3,1
 2013e00:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013e04:	0005883a 	mov	r2,zero
 2013e08:	00008006 	br	201400c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2013e0c:	d0a72e03 	ldbu	r2,-25416(gp)
 2013e10:	10803fcc 	andi	r2,r2,255
 2013e14:	10000526 	beq	r2,zero,2013e2c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 2013e18:	e0bfff17 	ldw	r2,-4(fp)
 2013e1c:	00c00084 	movi	r3,2
 2013e20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013e24:	0005883a 	mov	r2,zero
 2013e28:	00007806 	br	201400c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2013e2c:	d0a72003 	ldbu	r2,-25472(gp)
 2013e30:	10803fcc 	andi	r2,r2,255
 2013e34:	10000526 	beq	r2,zero,2013e4c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2013e38:	e0bfff17 	ldw	r2,-4(fp)
 2013e3c:	00c00344 	movi	r3,13
 2013e40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 2013e44:	0005883a 	mov	r2,zero
 2013e48:	00007006 	br	201400c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013e4c:	0005303a 	rdctl	r2,status
 2013e50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013e54:	e0fffc17 	ldw	r3,-16(fp)
 2013e58:	00bfff84 	movi	r2,-2
 2013e5c:	1884703a 	and	r2,r3,r2
 2013e60:	1001703a 	wrctl	status,r2
  
  return context;
 2013e64:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2013e68:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 2013e6c:	e0bffd17 	ldw	r2,-12(fp)
 2013e70:	10800117 	ldw	r2,4(r2)
 2013e74:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2013e78:	e0bff817 	ldw	r2,-32(fp)
 2013e7c:	1080058b 	ldhu	r2,22(r2)
 2013e80:	10bfffcc 	andi	r2,r2,65535
 2013e84:	10001e26 	beq	r2,zero,2013f00 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 2013e88:	e0bff817 	ldw	r2,-32(fp)
 2013e8c:	10800417 	ldw	r2,16(r2)
 2013e90:	11000104 	addi	r4,r2,4
 2013e94:	e0fff817 	ldw	r3,-32(fp)
 2013e98:	19000415 	stw	r4,16(r3)
 2013e9c:	10800017 	ldw	r2,0(r2)
 2013ea0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2013ea4:	e0bff817 	ldw	r2,-32(fp)
 2013ea8:	1080058b 	ldhu	r2,22(r2)
 2013eac:	10bfffc4 	addi	r2,r2,-1
 2013eb0:	1007883a 	mov	r3,r2
 2013eb4:	e0bff817 	ldw	r2,-32(fp)
 2013eb8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2013ebc:	e0bff817 	ldw	r2,-32(fp)
 2013ec0:	10c00417 	ldw	r3,16(r2)
 2013ec4:	e0bff817 	ldw	r2,-32(fp)
 2013ec8:	10800217 	ldw	r2,8(r2)
 2013ecc:	1880041e 	bne	r3,r2,2013ee0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 2013ed0:	e0bff817 	ldw	r2,-32(fp)
 2013ed4:	10c00117 	ldw	r3,4(r2)
 2013ed8:	e0bff817 	ldw	r2,-32(fp)
 2013edc:	10c00415 	stw	r3,16(r2)
 2013ee0:	e0bff617 	ldw	r2,-40(fp)
 2013ee4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ee8:	e0bff717 	ldw	r2,-36(fp)
 2013eec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2013ef0:	e0bfff17 	ldw	r2,-4(fp)
 2013ef4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 2013ef8:	e0bff517 	ldw	r2,-44(fp)
 2013efc:	00004306 	br	201400c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 2013f00:	d0a72f17 	ldw	r2,-25412(gp)
 2013f04:	d0e72f17 	ldw	r3,-25412(gp)
 2013f08:	18c00c03 	ldbu	r3,48(r3)
 2013f0c:	18c00114 	ori	r3,r3,4
 2013f10:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2013f14:	d0a72f17 	ldw	r2,-25412(gp)
 2013f18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 2013f1c:	d0a72f17 	ldw	r2,-25412(gp)
 2013f20:	e0fffe0b 	ldhu	r3,-8(fp)
 2013f24:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2013f28:	e13ffd17 	ldw	r4,-12(fp)
 2013f2c:	200fd1c0 	call	200fd1c <OS_EventTaskWait>
 2013f30:	e0bff617 	ldw	r2,-40(fp)
 2013f34:	e0bffb15 	stw	r2,-20(fp)
 2013f38:	e0bffb17 	ldw	r2,-20(fp)
 2013f3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2013f40:	20105d00 	call	20105d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013f44:	0005303a 	rdctl	r2,status
 2013f48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013f4c:	e0fff917 	ldw	r3,-28(fp)
 2013f50:	00bfff84 	movi	r2,-2
 2013f54:	1884703a 	and	r2,r3,r2
 2013f58:	1001703a 	wrctl	status,r2
  
  return context;
 2013f5c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2013f60:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2013f64:	d0a72f17 	ldw	r2,-25412(gp)
 2013f68:	10800c43 	ldbu	r2,49(r2)
 2013f6c:	10803fcc 	andi	r2,r2,255
 2013f70:	10000326 	beq	r2,zero,2013f80 <OSQPend+0x1ec>
 2013f74:	108000a0 	cmpeqi	r2,r2,2
 2013f78:	1000071e 	bne	r2,zero,2013f98 <OSQPend+0x204>
 2013f7c:	00000b06 	br	2013fac <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 2013f80:	d0a72f17 	ldw	r2,-25412(gp)
 2013f84:	10800917 	ldw	r2,36(r2)
 2013f88:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 2013f8c:	e0bfff17 	ldw	r2,-4(fp)
 2013f90:	10000005 	stb	zero,0(r2)
             break;
 2013f94:	00000e06 	br	2013fd0 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 2013f98:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2013f9c:	e0bfff17 	ldw	r2,-4(fp)
 2013fa0:	00c00384 	movi	r3,14
 2013fa4:	10c00005 	stb	r3,0(r2)
             break;
 2013fa8:	00000906 	br	2013fd0 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 2013fac:	d0a72f17 	ldw	r2,-25412(gp)
 2013fb0:	e17ffd17 	ldw	r5,-12(fp)
 2013fb4:	1009883a 	mov	r4,r2
 2013fb8:	200ff7c0 	call	200ff7c <OS_EventTaskRemove>
             pmsg = (void *)0;
 2013fbc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2013fc0:	e0bfff17 	ldw	r2,-4(fp)
 2013fc4:	00c00284 	movi	r3,10
 2013fc8:	10c00005 	stb	r3,0(r2)
             break;
 2013fcc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2013fd0:	d0a72f17 	ldw	r2,-25412(gp)
 2013fd4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2013fd8:	d0a72f17 	ldw	r2,-25412(gp)
 2013fdc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2013fe0:	d0a72f17 	ldw	r2,-25412(gp)
 2013fe4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2013fe8:	d0a72f17 	ldw	r2,-25412(gp)
 2013fec:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2013ff0:	d0a72f17 	ldw	r2,-25412(gp)
 2013ff4:	10000915 	stw	zero,36(r2)
 2013ff8:	e0bff617 	ldw	r2,-40(fp)
 2013ffc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014000:	e0bffa17 	ldw	r2,-24(fp)
 2014004:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2014008:	e0bff517 	ldw	r2,-44(fp)
}
 201400c:	e037883a 	mov	sp,fp
 2014010:	dfc00117 	ldw	ra,4(sp)
 2014014:	df000017 	ldw	fp,0(sp)
 2014018:	dec00204 	addi	sp,sp,8
 201401c:	f800283a 	ret

02014020 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014020:	defff604 	addi	sp,sp,-40
 2014024:	dfc00915 	stw	ra,36(sp)
 2014028:	df000815 	stw	fp,32(sp)
 201402c:	df000804 	addi	fp,sp,32
 2014030:	e13ffd15 	stw	r4,-12(fp)
 2014034:	2805883a 	mov	r2,r5
 2014038:	e1bfff15 	stw	r6,-4(fp)
 201403c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014040:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014044:	e0bfff17 	ldw	r2,-4(fp)
 2014048:	1000021e 	bne	r2,zero,2014054 <OSQPendAbort+0x34>
        return (0);
 201404c:	0005883a 	mov	r2,zero
 2014050:	00004906 	br	2014178 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014054:	e0bffd17 	ldw	r2,-12(fp)
 2014058:	1000051e 	bne	r2,zero,2014070 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 201405c:	e0bfff17 	ldw	r2,-4(fp)
 2014060:	00c00104 	movi	r3,4
 2014064:	10c00005 	stb	r3,0(r2)
        return (0);
 2014068:	0005883a 	mov	r2,zero
 201406c:	00004206 	br	2014178 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2014070:	e0bffd17 	ldw	r2,-12(fp)
 2014074:	10800003 	ldbu	r2,0(r2)
 2014078:	10803fcc 	andi	r2,r2,255
 201407c:	108000a0 	cmpeqi	r2,r2,2
 2014080:	1000051e 	bne	r2,zero,2014098 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014084:	e0bfff17 	ldw	r2,-4(fp)
 2014088:	00c00044 	movi	r3,1
 201408c:	10c00005 	stb	r3,0(r2)
        return (0);
 2014090:	0005883a 	mov	r2,zero
 2014094:	00003806 	br	2014178 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014098:	0005303a 	rdctl	r2,status
 201409c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20140a0:	e0fffc17 	ldw	r3,-16(fp)
 20140a4:	00bfff84 	movi	r2,-2
 20140a8:	1884703a 	and	r2,r3,r2
 20140ac:	1001703a 	wrctl	status,r2
  
  return context;
 20140b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20140b4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 20140b8:	e0bffd17 	ldw	r2,-12(fp)
 20140bc:	10800283 	ldbu	r2,10(r2)
 20140c0:	10803fcc 	andi	r2,r2,255
 20140c4:	10002526 	beq	r2,zero,201415c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 20140c8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 20140cc:	e0bffe03 	ldbu	r2,-8(fp)
 20140d0:	10800060 	cmpeqi	r2,r2,1
 20140d4:	10000e26 	beq	r2,zero,2014110 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20140d8:	00000806 	br	20140fc <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 20140dc:	01c00084 	movi	r7,2
 20140e0:	01800104 	movi	r6,4
 20140e4:	000b883a 	mov	r5,zero
 20140e8:	e13ffd17 	ldw	r4,-12(fp)
 20140ec:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                     nbr_tasks++;
 20140f0:	e0bff803 	ldbu	r2,-32(fp)
 20140f4:	10800044 	addi	r2,r2,1
 20140f8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 20140fc:	e0bffd17 	ldw	r2,-12(fp)
 2014100:	10800283 	ldbu	r2,10(r2)
 2014104:	10803fcc 	andi	r2,r2,255
 2014108:	103ff41e 	bne	r2,zero,20140dc <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 201410c:	00000906 	br	2014134 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2014110:	01c00084 	movi	r7,2
 2014114:	01800104 	movi	r6,4
 2014118:	000b883a 	mov	r5,zero
 201411c:	e13ffd17 	ldw	r4,-12(fp)
 2014120:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                 nbr_tasks++;
 2014124:	e0bff803 	ldbu	r2,-32(fp)
 2014128:	10800044 	addi	r2,r2,1
 201412c:	e0bff805 	stb	r2,-32(fp)
                 break;
 2014130:	0001883a 	nop
 2014134:	e0bff917 	ldw	r2,-28(fp)
 2014138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201413c:	e0bffa17 	ldw	r2,-24(fp)
 2014140:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 2014144:	20105d00 	call	20105d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2014148:	e0bfff17 	ldw	r2,-4(fp)
 201414c:	00c00384 	movi	r3,14
 2014150:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2014154:	e0bff803 	ldbu	r2,-32(fp)
 2014158:	00000706 	br	2014178 <OSQPendAbort+0x158>
 201415c:	e0bff917 	ldw	r2,-28(fp)
 2014160:	e0bffb15 	stw	r2,-20(fp)
 2014164:	e0bffb17 	ldw	r2,-20(fp)
 2014168:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201416c:	e0bfff17 	ldw	r2,-4(fp)
 2014170:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 2014174:	0005883a 	mov	r2,zero
}
 2014178:	e037883a 	mov	sp,fp
 201417c:	dfc00117 	ldw	ra,4(sp)
 2014180:	df000017 	ldw	fp,0(sp)
 2014184:	dec00204 	addi	sp,sp,8
 2014188:	f800283a 	ret

0201418c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 201418c:	defff604 	addi	sp,sp,-40
 2014190:	dfc00915 	stw	ra,36(sp)
 2014194:	df000815 	stw	fp,32(sp)
 2014198:	df000804 	addi	fp,sp,32
 201419c:	e13ffe15 	stw	r4,-8(fp)
 20141a0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20141a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 20141a8:	e0bffe17 	ldw	r2,-8(fp)
 20141ac:	1000021e 	bne	r2,zero,20141b8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 20141b0:	00800104 	movi	r2,4
 20141b4:	00004a06 	br	20142e0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20141b8:	e0bffe17 	ldw	r2,-8(fp)
 20141bc:	10800003 	ldbu	r2,0(r2)
 20141c0:	10803fcc 	andi	r2,r2,255
 20141c4:	108000a0 	cmpeqi	r2,r2,2
 20141c8:	1000021e 	bne	r2,zero,20141d4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 20141cc:	00800044 	movi	r2,1
 20141d0:	00004306 	br	20142e0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20141d4:	0005303a 	rdctl	r2,status
 20141d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20141dc:	e0fffd17 	ldw	r3,-12(fp)
 20141e0:	00bfff84 	movi	r2,-2
 20141e4:	1884703a 	and	r2,r3,r2
 20141e8:	1001703a 	wrctl	status,r2
  
  return context;
 20141ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20141f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 20141f4:	e0bffe17 	ldw	r2,-8(fp)
 20141f8:	10800283 	ldbu	r2,10(r2)
 20141fc:	10803fcc 	andi	r2,r2,255
 2014200:	10000c26 	beq	r2,zero,2014234 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 2014204:	000f883a 	mov	r7,zero
 2014208:	01800104 	movi	r6,4
 201420c:	e17fff17 	ldw	r5,-4(fp)
 2014210:	e13ffe17 	ldw	r4,-8(fp)
 2014214:	200fb840 	call	200fb84 <OS_EventTaskRdy>
 2014218:	e0bff817 	ldw	r2,-32(fp)
 201421c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014220:	e0bff917 	ldw	r2,-28(fp)
 2014224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 2014228:	20105d00 	call	20105d0 <OS_Sched>
        return (OS_ERR_NONE);
 201422c:	0005883a 	mov	r2,zero
 2014230:	00002b06 	br	20142e0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 2014234:	e0bffe17 	ldw	r2,-8(fp)
 2014238:	10800117 	ldw	r2,4(r2)
 201423c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 2014240:	e0bffb17 	ldw	r2,-20(fp)
 2014244:	10c0058b 	ldhu	r3,22(r2)
 2014248:	e0bffb17 	ldw	r2,-20(fp)
 201424c:	1080050b 	ldhu	r2,20(r2)
 2014250:	18ffffcc 	andi	r3,r3,65535
 2014254:	10bfffcc 	andi	r2,r2,65535
 2014258:	18800636 	bltu	r3,r2,2014274 <OSQPost+0xe8>
 201425c:	e0bff817 	ldw	r2,-32(fp)
 2014260:	e0bffa15 	stw	r2,-24(fp)
 2014264:	e0bffa17 	ldw	r2,-24(fp)
 2014268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 201426c:	00800784 	movi	r2,30
 2014270:	00001b06 	br	20142e0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 2014274:	e0bffb17 	ldw	r2,-20(fp)
 2014278:	10800317 	ldw	r2,12(r2)
 201427c:	11000104 	addi	r4,r2,4
 2014280:	e0fffb17 	ldw	r3,-20(fp)
 2014284:	19000315 	stw	r4,12(r3)
 2014288:	e0ffff17 	ldw	r3,-4(fp)
 201428c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 2014290:	e0bffb17 	ldw	r2,-20(fp)
 2014294:	1080058b 	ldhu	r2,22(r2)
 2014298:	10800044 	addi	r2,r2,1
 201429c:	1007883a 	mov	r3,r2
 20142a0:	e0bffb17 	ldw	r2,-20(fp)
 20142a4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 20142a8:	e0bffb17 	ldw	r2,-20(fp)
 20142ac:	10c00317 	ldw	r3,12(r2)
 20142b0:	e0bffb17 	ldw	r2,-20(fp)
 20142b4:	10800217 	ldw	r2,8(r2)
 20142b8:	1880041e 	bne	r3,r2,20142cc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 20142bc:	e0bffb17 	ldw	r2,-20(fp)
 20142c0:	10c00117 	ldw	r3,4(r2)
 20142c4:	e0bffb17 	ldw	r2,-20(fp)
 20142c8:	10c00315 	stw	r3,12(r2)
 20142cc:	e0bff817 	ldw	r2,-32(fp)
 20142d0:	e0bffc15 	stw	r2,-16(fp)
 20142d4:	e0bffc17 	ldw	r2,-16(fp)
 20142d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20142dc:	0005883a 	mov	r2,zero
}
 20142e0:	e037883a 	mov	sp,fp
 20142e4:	dfc00117 	ldw	ra,4(sp)
 20142e8:	df000017 	ldw	fp,0(sp)
 20142ec:	dec00204 	addi	sp,sp,8
 20142f0:	f800283a 	ret

020142f4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 20142f4:	defff604 	addi	sp,sp,-40
 20142f8:	dfc00915 	stw	ra,36(sp)
 20142fc:	df000815 	stw	fp,32(sp)
 2014300:	df000804 	addi	fp,sp,32
 2014304:	e13ffe15 	stw	r4,-8(fp)
 2014308:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201430c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014310:	e0bffe17 	ldw	r2,-8(fp)
 2014314:	1000021e 	bne	r2,zero,2014320 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2014318:	00800104 	movi	r2,4
 201431c:	00004c06 	br	2014450 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2014320:	e0bffe17 	ldw	r2,-8(fp)
 2014324:	10800003 	ldbu	r2,0(r2)
 2014328:	10803fcc 	andi	r2,r2,255
 201432c:	108000a0 	cmpeqi	r2,r2,2
 2014330:	1000021e 	bne	r2,zero,201433c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 2014334:	00800044 	movi	r2,1
 2014338:	00004506 	br	2014450 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201433c:	0005303a 	rdctl	r2,status
 2014340:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014344:	e0fffd17 	ldw	r3,-12(fp)
 2014348:	00bfff84 	movi	r2,-2
 201434c:	1884703a 	and	r2,r3,r2
 2014350:	1001703a 	wrctl	status,r2
  
  return context;
 2014354:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2014358:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 201435c:	e0bffe17 	ldw	r2,-8(fp)
 2014360:	10800283 	ldbu	r2,10(r2)
 2014364:	10803fcc 	andi	r2,r2,255
 2014368:	10000c26 	beq	r2,zero,201439c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201436c:	000f883a 	mov	r7,zero
 2014370:	01800104 	movi	r6,4
 2014374:	e17fff17 	ldw	r5,-4(fp)
 2014378:	e13ffe17 	ldw	r4,-8(fp)
 201437c:	200fb840 	call	200fb84 <OS_EventTaskRdy>
 2014380:	e0bff817 	ldw	r2,-32(fp)
 2014384:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014388:	e0bff917 	ldw	r2,-28(fp)
 201438c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2014390:	20105d00 	call	20105d0 <OS_Sched>
        return (OS_ERR_NONE);
 2014394:	0005883a 	mov	r2,zero
 2014398:	00002d06 	br	2014450 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201439c:	e0bffe17 	ldw	r2,-8(fp)
 20143a0:	10800117 	ldw	r2,4(r2)
 20143a4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 20143a8:	e0bffb17 	ldw	r2,-20(fp)
 20143ac:	10c0058b 	ldhu	r3,22(r2)
 20143b0:	e0bffb17 	ldw	r2,-20(fp)
 20143b4:	1080050b 	ldhu	r2,20(r2)
 20143b8:	18ffffcc 	andi	r3,r3,65535
 20143bc:	10bfffcc 	andi	r2,r2,65535
 20143c0:	18800636 	bltu	r3,r2,20143dc <OSQPostFront+0xe8>
 20143c4:	e0bff817 	ldw	r2,-32(fp)
 20143c8:	e0bffa15 	stw	r2,-24(fp)
 20143cc:	e0bffa17 	ldw	r2,-24(fp)
 20143d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20143d4:	00800784 	movi	r2,30
 20143d8:	00001d06 	br	2014450 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 20143dc:	e0bffb17 	ldw	r2,-20(fp)
 20143e0:	10c00417 	ldw	r3,16(r2)
 20143e4:	e0bffb17 	ldw	r2,-20(fp)
 20143e8:	10800117 	ldw	r2,4(r2)
 20143ec:	1880041e 	bne	r3,r2,2014400 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 20143f0:	e0bffb17 	ldw	r2,-20(fp)
 20143f4:	10c00217 	ldw	r3,8(r2)
 20143f8:	e0bffb17 	ldw	r2,-20(fp)
 20143fc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2014400:	e0bffb17 	ldw	r2,-20(fp)
 2014404:	10800417 	ldw	r2,16(r2)
 2014408:	10ffff04 	addi	r3,r2,-4
 201440c:	e0bffb17 	ldw	r2,-20(fp)
 2014410:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 2014414:	e0bffb17 	ldw	r2,-20(fp)
 2014418:	10800417 	ldw	r2,16(r2)
 201441c:	e0ffff17 	ldw	r3,-4(fp)
 2014420:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2014424:	e0bffb17 	ldw	r2,-20(fp)
 2014428:	1080058b 	ldhu	r2,22(r2)
 201442c:	10800044 	addi	r2,r2,1
 2014430:	1007883a 	mov	r3,r2
 2014434:	e0bffb17 	ldw	r2,-20(fp)
 2014438:	10c0058d 	sth	r3,22(r2)
 201443c:	e0bff817 	ldw	r2,-32(fp)
 2014440:	e0bffc15 	stw	r2,-16(fp)
 2014444:	e0bffc17 	ldw	r2,-16(fp)
 2014448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 201444c:	0005883a 	mov	r2,zero
}
 2014450:	e037883a 	mov	sp,fp
 2014454:	dfc00117 	ldw	ra,4(sp)
 2014458:	df000017 	ldw	fp,0(sp)
 201445c:	dec00204 	addi	sp,sp,8
 2014460:	f800283a 	ret

02014464 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 2014464:	defff504 	addi	sp,sp,-44
 2014468:	dfc00a15 	stw	ra,40(sp)
 201446c:	df000915 	stw	fp,36(sp)
 2014470:	df000904 	addi	fp,sp,36
 2014474:	e13ffd15 	stw	r4,-12(fp)
 2014478:	e17ffe15 	stw	r5,-8(fp)
 201447c:	3005883a 	mov	r2,r6
 2014480:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014484:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014488:	e0bffd17 	ldw	r2,-12(fp)
 201448c:	1000021e 	bne	r2,zero,2014498 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 2014490:	00800104 	movi	r2,4
 2014494:	00007106 	br	201465c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2014498:	e0bffd17 	ldw	r2,-12(fp)
 201449c:	10800003 	ldbu	r2,0(r2)
 20144a0:	10803fcc 	andi	r2,r2,255
 20144a4:	108000a0 	cmpeqi	r2,r2,2
 20144a8:	1000021e 	bne	r2,zero,20144b4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 20144ac:	00800044 	movi	r2,1
 20144b0:	00006a06 	br	201465c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20144b4:	0005303a 	rdctl	r2,status
 20144b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20144bc:	e0fffc17 	ldw	r3,-16(fp)
 20144c0:	00bfff84 	movi	r2,-2
 20144c4:	1884703a 	and	r2,r3,r2
 20144c8:	1001703a 	wrctl	status,r2
  
  return context;
 20144cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20144d0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 20144d4:	e0bffd17 	ldw	r2,-12(fp)
 20144d8:	10800283 	ldbu	r2,10(r2)
 20144dc:	10803fcc 	andi	r2,r2,255
 20144e0:	10001d26 	beq	r2,zero,2014558 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 20144e4:	e0bfff03 	ldbu	r2,-4(fp)
 20144e8:	1080004c 	andi	r2,r2,1
 20144ec:	10000b26 	beq	r2,zero,201451c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 20144f0:	00000506 	br	2014508 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20144f4:	000f883a 	mov	r7,zero
 20144f8:	01800104 	movi	r6,4
 20144fc:	e17ffe17 	ldw	r5,-8(fp)
 2014500:	e13ffd17 	ldw	r4,-12(fp)
 2014504:	200fb840 	call	200fb84 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 2014508:	e0bffd17 	ldw	r2,-12(fp)
 201450c:	10800283 	ldbu	r2,10(r2)
 2014510:	10803fcc 	andi	r2,r2,255
 2014514:	103ff71e 	bne	r2,zero,20144f4 <OSQPostOpt+0x90>
 2014518:	00000506 	br	2014530 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201451c:	000f883a 	mov	r7,zero
 2014520:	01800104 	movi	r6,4
 2014524:	e17ffe17 	ldw	r5,-8(fp)
 2014528:	e13ffd17 	ldw	r4,-12(fp)
 201452c:	200fb840 	call	200fb84 <OS_EventTaskRdy>
 2014530:	e0bff717 	ldw	r2,-36(fp)
 2014534:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014538:	e0bff817 	ldw	r2,-32(fp)
 201453c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 2014540:	e0bfff03 	ldbu	r2,-4(fp)
 2014544:	1080010c 	andi	r2,r2,4
 2014548:	1000011e 	bne	r2,zero,2014550 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 201454c:	20105d00 	call	20105d0 <OS_Sched>
        }
        return (OS_ERR_NONE);
 2014550:	0005883a 	mov	r2,zero
 2014554:	00004106 	br	201465c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 2014558:	e0bffd17 	ldw	r2,-12(fp)
 201455c:	10800117 	ldw	r2,4(r2)
 2014560:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2014564:	e0bffa17 	ldw	r2,-24(fp)
 2014568:	10c0058b 	ldhu	r3,22(r2)
 201456c:	e0bffa17 	ldw	r2,-24(fp)
 2014570:	1080050b 	ldhu	r2,20(r2)
 2014574:	18ffffcc 	andi	r3,r3,65535
 2014578:	10bfffcc 	andi	r2,r2,65535
 201457c:	18800636 	bltu	r3,r2,2014598 <OSQPostOpt+0x134>
 2014580:	e0bff717 	ldw	r2,-36(fp)
 2014584:	e0bff915 	stw	r2,-28(fp)
 2014588:	e0bff917 	ldw	r2,-28(fp)
 201458c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2014590:	00800784 	movi	r2,30
 2014594:	00003106 	br	201465c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2014598:	e0bfff03 	ldbu	r2,-4(fp)
 201459c:	1080008c 	andi	r2,r2,2
 20145a0:	10001326 	beq	r2,zero,20145f0 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 20145a4:	e0bffa17 	ldw	r2,-24(fp)
 20145a8:	10c00417 	ldw	r3,16(r2)
 20145ac:	e0bffa17 	ldw	r2,-24(fp)
 20145b0:	10800117 	ldw	r2,4(r2)
 20145b4:	1880041e 	bne	r3,r2,20145c8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 20145b8:	e0bffa17 	ldw	r2,-24(fp)
 20145bc:	10c00217 	ldw	r3,8(r2)
 20145c0:	e0bffa17 	ldw	r2,-24(fp)
 20145c4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 20145c8:	e0bffa17 	ldw	r2,-24(fp)
 20145cc:	10800417 	ldw	r2,16(r2)
 20145d0:	10ffff04 	addi	r3,r2,-4
 20145d4:	e0bffa17 	ldw	r2,-24(fp)
 20145d8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 20145dc:	e0bffa17 	ldw	r2,-24(fp)
 20145e0:	10800417 	ldw	r2,16(r2)
 20145e4:	e0fffe17 	ldw	r3,-8(fp)
 20145e8:	10c00015 	stw	r3,0(r2)
 20145ec:	00001006 	br	2014630 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 20145f0:	e0bffa17 	ldw	r2,-24(fp)
 20145f4:	10800317 	ldw	r2,12(r2)
 20145f8:	11000104 	addi	r4,r2,4
 20145fc:	e0fffa17 	ldw	r3,-24(fp)
 2014600:	19000315 	stw	r4,12(r3)
 2014604:	e0fffe17 	ldw	r3,-8(fp)
 2014608:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 201460c:	e0bffa17 	ldw	r2,-24(fp)
 2014610:	10c00317 	ldw	r3,12(r2)
 2014614:	e0bffa17 	ldw	r2,-24(fp)
 2014618:	10800217 	ldw	r2,8(r2)
 201461c:	1880041e 	bne	r3,r2,2014630 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 2014620:	e0bffa17 	ldw	r2,-24(fp)
 2014624:	10c00117 	ldw	r3,4(r2)
 2014628:	e0bffa17 	ldw	r2,-24(fp)
 201462c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 2014630:	e0bffa17 	ldw	r2,-24(fp)
 2014634:	1080058b 	ldhu	r2,22(r2)
 2014638:	10800044 	addi	r2,r2,1
 201463c:	1007883a 	mov	r3,r2
 2014640:	e0bffa17 	ldw	r2,-24(fp)
 2014644:	10c0058d 	sth	r3,22(r2)
 2014648:	e0bff717 	ldw	r2,-36(fp)
 201464c:	e0bffb15 	stw	r2,-20(fp)
 2014650:	e0bffb17 	ldw	r2,-20(fp)
 2014654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014658:	0005883a 	mov	r2,zero
}
 201465c:	e037883a 	mov	sp,fp
 2014660:	dfc00117 	ldw	ra,4(sp)
 2014664:	df000017 	ldw	fp,0(sp)
 2014668:	dec00204 	addi	sp,sp,8
 201466c:	f800283a 	ret

02014670 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2014670:	defff604 	addi	sp,sp,-40
 2014674:	df000915 	stw	fp,36(sp)
 2014678:	df000904 	addi	fp,sp,36
 201467c:	e13ffe15 	stw	r4,-8(fp)
 2014680:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2014684:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2014688:	e0bffe17 	ldw	r2,-8(fp)
 201468c:	1000021e 	bne	r2,zero,2014698 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 2014690:	00800104 	movi	r2,4
 2014694:	00004906 	br	20147bc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2014698:	e0bfff17 	ldw	r2,-4(fp)
 201469c:	1000021e 	bne	r2,zero,20146a8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20146a0:	00800244 	movi	r2,9
 20146a4:	00004506 	br	20147bc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 20146a8:	e0bffe17 	ldw	r2,-8(fp)
 20146ac:	10800003 	ldbu	r2,0(r2)
 20146b0:	10803fcc 	andi	r2,r2,255
 20146b4:	108000a0 	cmpeqi	r2,r2,2
 20146b8:	1000021e 	bne	r2,zero,20146c4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 20146bc:	00800044 	movi	r2,1
 20146c0:	00003e06 	br	20147bc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20146c4:	0005303a 	rdctl	r2,status
 20146c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20146cc:	e0fffd17 	ldw	r3,-12(fp)
 20146d0:	00bfff84 	movi	r2,-2
 20146d4:	1884703a 	and	r2,r3,r2
 20146d8:	1001703a 	wrctl	status,r2
  
  return context;
 20146dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 20146e0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 20146e4:	e0bffe17 	ldw	r2,-8(fp)
 20146e8:	10c00283 	ldbu	r3,10(r2)
 20146ec:	e0bfff17 	ldw	r2,-4(fp)
 20146f0:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 20146f4:	e0bffe17 	ldw	r2,-8(fp)
 20146f8:	108002c4 	addi	r2,r2,11
 20146fc:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2014700:	e0bfff17 	ldw	r2,-4(fp)
 2014704:	10800204 	addi	r2,r2,8
 2014708:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 201470c:	e03ff705 	stb	zero,-36(fp)
 2014710:	00000b06 	br	2014740 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 2014714:	e0bff917 	ldw	r2,-28(fp)
 2014718:	10c00044 	addi	r3,r2,1
 201471c:	e0fff915 	stw	r3,-28(fp)
 2014720:	e0fff817 	ldw	r3,-32(fp)
 2014724:	19000044 	addi	r4,r3,1
 2014728:	e13ff815 	stw	r4,-32(fp)
 201472c:	18c00003 	ldbu	r3,0(r3)
 2014730:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2014734:	e0bff703 	ldbu	r2,-36(fp)
 2014738:	10800044 	addi	r2,r2,1
 201473c:	e0bff705 	stb	r2,-36(fp)
 2014740:	e0bff703 	ldbu	r2,-36(fp)
 2014744:	108000f0 	cmpltui	r2,r2,3
 2014748:	103ff21e 	bne	r2,zero,2014714 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 201474c:	e0bffe17 	ldw	r2,-8(fp)
 2014750:	10800117 	ldw	r2,4(r2)
 2014754:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2014758:	e0bffc17 	ldw	r2,-16(fp)
 201475c:	1080058b 	ldhu	r2,22(r2)
 2014760:	10bfffcc 	andi	r2,r2,65535
 2014764:	10000626 	beq	r2,zero,2014780 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2014768:	e0bffc17 	ldw	r2,-16(fp)
 201476c:	10800417 	ldw	r2,16(r2)
 2014770:	10c00017 	ldw	r3,0(r2)
 2014774:	e0bfff17 	ldw	r2,-4(fp)
 2014778:	10c00015 	stw	r3,0(r2)
 201477c:	00000206 	br	2014788 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 2014780:	e0bfff17 	ldw	r2,-4(fp)
 2014784:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2014788:	e0bffc17 	ldw	r2,-16(fp)
 201478c:	10c0058b 	ldhu	r3,22(r2)
 2014790:	e0bfff17 	ldw	r2,-4(fp)
 2014794:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2014798:	e0bffc17 	ldw	r2,-16(fp)
 201479c:	10c0050b 	ldhu	r3,20(r2)
 20147a0:	e0bfff17 	ldw	r2,-4(fp)
 20147a4:	10c0018d 	sth	r3,6(r2)
 20147a8:	e0bffa17 	ldw	r2,-24(fp)
 20147ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20147b0:	e0bffb17 	ldw	r2,-20(fp)
 20147b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20147b8:	0005883a 	mov	r2,zero
}
 20147bc:	e037883a 	mov	sp,fp
 20147c0:	df000017 	ldw	fp,0(sp)
 20147c4:	dec00104 	addi	sp,sp,4
 20147c8:	f800283a 	ret

020147cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 20147cc:	defffb04 	addi	sp,sp,-20
 20147d0:	dfc00415 	stw	ra,16(sp)
 20147d4:	df000315 	stw	fp,12(sp)
 20147d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 20147dc:	01407804 	movi	r5,480
 20147e0:	010080b4 	movhi	r4,514
 20147e4:	2109e304 	addi	r4,r4,10124
 20147e8:	20105140 	call	2010514 <OS_MemClr>
    pq1 = &OSQTbl[0];
 20147ec:	008080b4 	movhi	r2,514
 20147f0:	1089e304 	addi	r2,r2,10124
 20147f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 20147f8:	008080b4 	movhi	r2,514
 20147fc:	1089e904 	addi	r2,r2,10148
 2014800:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2014804:	e03ffd0d 	sth	zero,-12(fp)
 2014808:	00000c06 	br	201483c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 201480c:	e0bffe17 	ldw	r2,-8(fp)
 2014810:	e0ffff17 	ldw	r3,-4(fp)
 2014814:	10c00015 	stw	r3,0(r2)
        pq1++;
 2014818:	e0bffe17 	ldw	r2,-8(fp)
 201481c:	10800604 	addi	r2,r2,24
 2014820:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2014824:	e0bfff17 	ldw	r2,-4(fp)
 2014828:	10800604 	addi	r2,r2,24
 201482c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2014830:	e0bffd0b 	ldhu	r2,-12(fp)
 2014834:	10800044 	addi	r2,r2,1
 2014838:	e0bffd0d 	sth	r2,-12(fp)
 201483c:	e0bffd0b 	ldhu	r2,-12(fp)
 2014840:	108004f0 	cmpltui	r2,r2,19
 2014844:	103ff11e 	bne	r2,zero,201480c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2014848:	e0bffe17 	ldw	r2,-8(fp)
 201484c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2014850:	008080b4 	movhi	r2,514
 2014854:	1089e304 	addi	r2,r2,10124
 2014858:	d0a72b15 	stw	r2,-25428(gp)
#endif
}
 201485c:	0001883a 	nop
 2014860:	e037883a 	mov	sp,fp
 2014864:	dfc00117 	ldw	ra,4(sp)
 2014868:	df000017 	ldw	fp,0(sp)
 201486c:	dec00204 	addi	sp,sp,8
 2014870:	f800283a 	ret

02014874 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2014874:	defffa04 	addi	sp,sp,-24
 2014878:	df000515 	stw	fp,20(sp)
 201487c:	df000504 	addi	fp,sp,20
 2014880:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014884:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014888:	e0bfff17 	ldw	r2,-4(fp)
 201488c:	1000021e 	bne	r2,zero,2014898 <OSSemAccept+0x24>
        return (0);
 2014890:	0005883a 	mov	r2,zero
 2014894:	00001f06 	br	2014914 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014898:	e0bfff17 	ldw	r2,-4(fp)
 201489c:	10800003 	ldbu	r2,0(r2)
 20148a0:	10803fcc 	andi	r2,r2,255
 20148a4:	108000e0 	cmpeqi	r2,r2,3
 20148a8:	1000021e 	bne	r2,zero,20148b4 <OSSemAccept+0x40>
        return (0);
 20148ac:	0005883a 	mov	r2,zero
 20148b0:	00001806 	br	2014914 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20148b4:	0005303a 	rdctl	r2,status
 20148b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20148bc:	e0fffe17 	ldw	r3,-8(fp)
 20148c0:	00bfff84 	movi	r2,-2
 20148c4:	1884703a 	and	r2,r3,r2
 20148c8:	1001703a 	wrctl	status,r2
  
  return context;
 20148cc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 20148d0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 20148d4:	e0bfff17 	ldw	r2,-4(fp)
 20148d8:	1080020b 	ldhu	r2,8(r2)
 20148dc:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 20148e0:	e0bffd0b 	ldhu	r2,-12(fp)
 20148e4:	10000626 	beq	r2,zero,2014900 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 20148e8:	e0bfff17 	ldw	r2,-4(fp)
 20148ec:	1080020b 	ldhu	r2,8(r2)
 20148f0:	10bfffc4 	addi	r2,r2,-1
 20148f4:	1007883a 	mov	r3,r2
 20148f8:	e0bfff17 	ldw	r2,-4(fp)
 20148fc:	10c0020d 	sth	r3,8(r2)
 2014900:	e0bffb17 	ldw	r2,-20(fp)
 2014904:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014908:	e0bffc17 	ldw	r2,-16(fp)
 201490c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2014910:	e0bffd0b 	ldhu	r2,-12(fp)
}
 2014914:	e037883a 	mov	sp,fp
 2014918:	df000017 	ldw	fp,0(sp)
 201491c:	dec00104 	addi	sp,sp,4
 2014920:	f800283a 	ret

02014924 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2014924:	defff904 	addi	sp,sp,-28
 2014928:	dfc00615 	stw	ra,24(sp)
 201492c:	df000515 	stw	fp,20(sp)
 2014930:	df000504 	addi	fp,sp,20
 2014934:	2005883a 	mov	r2,r4
 2014938:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201493c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2014940:	d0a72e03 	ldbu	r2,-25416(gp)
 2014944:	10803fcc 	andi	r2,r2,255
 2014948:	10000226 	beq	r2,zero,2014954 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 201494c:	0005883a 	mov	r2,zero
 2014950:	00002506 	br	20149e8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014954:	0005303a 	rdctl	r2,status
 2014958:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201495c:	e0fffe17 	ldw	r3,-8(fp)
 2014960:	00bfff84 	movi	r2,-2
 2014964:	1884703a 	and	r2,r3,r2
 2014968:	1001703a 	wrctl	status,r2
  
  return context;
 201496c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2014970:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2014974:	d0a72d17 	ldw	r2,-25420(gp)
 2014978:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 201497c:	d0a72d17 	ldw	r2,-25420(gp)
 2014980:	10000326 	beq	r2,zero,2014990 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2014984:	d0a72d17 	ldw	r2,-25420(gp)
 2014988:	10800117 	ldw	r2,4(r2)
 201498c:	d0a72d15 	stw	r2,-25420(gp)
 2014990:	e0bffb17 	ldw	r2,-20(fp)
 2014994:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014998:	e0bffc17 	ldw	r2,-16(fp)
 201499c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 20149a0:	e0bffd17 	ldw	r2,-12(fp)
 20149a4:	10000f26 	beq	r2,zero,20149e4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 20149a8:	e0bffd17 	ldw	r2,-12(fp)
 20149ac:	00c000c4 	movi	r3,3
 20149b0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 20149b4:	e0bffd17 	ldw	r2,-12(fp)
 20149b8:	e0ffff0b 	ldhu	r3,-4(fp)
 20149bc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 20149c0:	e0bffd17 	ldw	r2,-12(fp)
 20149c4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 20149c8:	e0bffd17 	ldw	r2,-12(fp)
 20149cc:	00c00fc4 	movi	r3,63
 20149d0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 20149d4:	e0bffd17 	ldw	r2,-12(fp)
 20149d8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 20149dc:	e13ffd17 	ldw	r4,-12(fp)
 20149e0:	20101340 	call	2010134 <OS_EventWaitListInit>
    }
    return (pevent);
 20149e4:	e0bffd17 	ldw	r2,-12(fp)
}
 20149e8:	e037883a 	mov	sp,fp
 20149ec:	dfc00117 	ldw	ra,4(sp)
 20149f0:	df000017 	ldw	fp,0(sp)
 20149f4:	dec00204 	addi	sp,sp,8
 20149f8:	f800283a 	ret

020149fc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 20149fc:	defff304 	addi	sp,sp,-52
 2014a00:	dfc00c15 	stw	ra,48(sp)
 2014a04:	df000b15 	stw	fp,44(sp)
 2014a08:	df000b04 	addi	fp,sp,44
 2014a0c:	e13ffd15 	stw	r4,-12(fp)
 2014a10:	2805883a 	mov	r2,r5
 2014a14:	e1bfff15 	stw	r6,-4(fp)
 2014a18:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014a1c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014a20:	e0bfff17 	ldw	r2,-4(fp)
 2014a24:	1000021e 	bne	r2,zero,2014a30 <OSSemDel+0x34>
        return (pevent);
 2014a28:	e0bffd17 	ldw	r2,-12(fp)
 2014a2c:	00007e06 	br	2014c28 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014a30:	e0bffd17 	ldw	r2,-12(fp)
 2014a34:	1000051e 	bne	r2,zero,2014a4c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2014a38:	e0bfff17 	ldw	r2,-4(fp)
 2014a3c:	00c00104 	movi	r3,4
 2014a40:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014a44:	e0bffd17 	ldw	r2,-12(fp)
 2014a48:	00007706 	br	2014c28 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2014a4c:	e0bffd17 	ldw	r2,-12(fp)
 2014a50:	10800003 	ldbu	r2,0(r2)
 2014a54:	10803fcc 	andi	r2,r2,255
 2014a58:	108000e0 	cmpeqi	r2,r2,3
 2014a5c:	1000051e 	bne	r2,zero,2014a74 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014a60:	e0bfff17 	ldw	r2,-4(fp)
 2014a64:	00c00044 	movi	r3,1
 2014a68:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014a6c:	e0bffd17 	ldw	r2,-12(fp)
 2014a70:	00006d06 	br	2014c28 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2014a74:	d0a72e03 	ldbu	r2,-25416(gp)
 2014a78:	10803fcc 	andi	r2,r2,255
 2014a7c:	10000526 	beq	r2,zero,2014a94 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2014a80:	e0bfff17 	ldw	r2,-4(fp)
 2014a84:	00c003c4 	movi	r3,15
 2014a88:	10c00005 	stb	r3,0(r2)
        return (pevent);
 2014a8c:	e0bffd17 	ldw	r2,-12(fp)
 2014a90:	00006506 	br	2014c28 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a94:	0005303a 	rdctl	r2,status
 2014a98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a9c:	e0fffc17 	ldw	r3,-16(fp)
 2014aa0:	00bfff84 	movi	r2,-2
 2014aa4:	1884703a 	and	r2,r3,r2
 2014aa8:	1001703a 	wrctl	status,r2
  
  return context;
 2014aac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014ab0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2014ab4:	e0bffd17 	ldw	r2,-12(fp)
 2014ab8:	10800283 	ldbu	r2,10(r2)
 2014abc:	10803fcc 	andi	r2,r2,255
 2014ac0:	10000326 	beq	r2,zero,2014ad0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2014ac4:	00800044 	movi	r2,1
 2014ac8:	e0bff505 	stb	r2,-44(fp)
 2014acc:	00000106 	br	2014ad4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2014ad0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 2014ad4:	e0bffe03 	ldbu	r2,-8(fp)
 2014ad8:	10000326 	beq	r2,zero,2014ae8 <OSSemDel+0xec>
 2014adc:	10800060 	cmpeqi	r2,r2,1
 2014ae0:	1000281e 	bne	r2,zero,2014b84 <OSSemDel+0x188>
 2014ae4:	00004506 	br	2014bfc <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2014ae8:	e0bff503 	ldbu	r2,-44(fp)
 2014aec:	1000161e 	bne	r2,zero,2014b48 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2014af0:	e0bffd17 	ldw	r2,-12(fp)
 2014af4:	00c00fc4 	movi	r3,63
 2014af8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2014afc:	e0bffd17 	ldw	r2,-12(fp)
 2014b00:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2014b04:	e0bffd17 	ldw	r2,-12(fp)
 2014b08:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2014b0c:	d0e72d17 	ldw	r3,-25420(gp)
 2014b10:	e0bffd17 	ldw	r2,-12(fp)
 2014b14:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2014b18:	e0bffd17 	ldw	r2,-12(fp)
 2014b1c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2014b20:	e0bffd17 	ldw	r2,-12(fp)
 2014b24:	d0a72d15 	stw	r2,-25420(gp)
 2014b28:	e0bff717 	ldw	r2,-36(fp)
 2014b2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b30:	e0bff817 	ldw	r2,-32(fp)
 2014b34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2014b38:	e0bfff17 	ldw	r2,-4(fp)
 2014b3c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2014b40:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 2014b44:	00003706 	br	2014c24 <OSSemDel+0x228>
 2014b48:	e0bff717 	ldw	r2,-36(fp)
 2014b4c:	e0bff915 	stw	r2,-28(fp)
 2014b50:	e0bff917 	ldw	r2,-28(fp)
 2014b54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2014b58:	e0bfff17 	ldw	r2,-4(fp)
 2014b5c:	00c01244 	movi	r3,73
 2014b60:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 2014b64:	e0bffd17 	ldw	r2,-12(fp)
 2014b68:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 2014b6c:	00002d06 	br	2014c24 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2014b70:	000f883a 	mov	r7,zero
 2014b74:	01800044 	movi	r6,1
 2014b78:	000b883a 	mov	r5,zero
 2014b7c:	e13ffd17 	ldw	r4,-12(fp)
 2014b80:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2014b84:	e0bffd17 	ldw	r2,-12(fp)
 2014b88:	10800283 	ldbu	r2,10(r2)
 2014b8c:	10803fcc 	andi	r2,r2,255
 2014b90:	103ff71e 	bne	r2,zero,2014b70 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2014b94:	e0bffd17 	ldw	r2,-12(fp)
 2014b98:	00c00fc4 	movi	r3,63
 2014b9c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2014ba0:	e0bffd17 	ldw	r2,-12(fp)
 2014ba4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2014ba8:	e0bffd17 	ldw	r2,-12(fp)
 2014bac:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2014bb0:	d0e72d17 	ldw	r3,-25420(gp)
 2014bb4:	e0bffd17 	ldw	r2,-12(fp)
 2014bb8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2014bbc:	e0bffd17 	ldw	r2,-12(fp)
 2014bc0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2014bc4:	e0bffd17 	ldw	r2,-12(fp)
 2014bc8:	d0a72d15 	stw	r2,-25420(gp)
 2014bcc:	e0bff717 	ldw	r2,-36(fp)
 2014bd0:	e0bffa15 	stw	r2,-24(fp)
 2014bd4:	e0bffa17 	ldw	r2,-24(fp)
 2014bd8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2014bdc:	e0bff503 	ldbu	r2,-44(fp)
 2014be0:	10800058 	cmpnei	r2,r2,1
 2014be4:	1000011e 	bne	r2,zero,2014bec <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2014be8:	20105d00 	call	20105d0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2014bec:	e0bfff17 	ldw	r2,-4(fp)
 2014bf0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2014bf4:	e03ff615 	stw	zero,-40(fp)
             break;
 2014bf8:	00000a06 	br	2014c24 <OSSemDel+0x228>
 2014bfc:	e0bff717 	ldw	r2,-36(fp)
 2014c00:	e0bffb15 	stw	r2,-20(fp)
 2014c04:	e0bffb17 	ldw	r2,-20(fp)
 2014c08:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2014c0c:	e0bfff17 	ldw	r2,-4(fp)
 2014c10:	00c001c4 	movi	r3,7
 2014c14:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 2014c18:	e0bffd17 	ldw	r2,-12(fp)
 2014c1c:	e0bff615 	stw	r2,-40(fp)
             break;
 2014c20:	0001883a 	nop
    }
    return (pevent_return);
 2014c24:	e0bff617 	ldw	r2,-40(fp)
}
 2014c28:	e037883a 	mov	sp,fp
 2014c2c:	dfc00117 	ldw	ra,4(sp)
 2014c30:	df000017 	ldw	fp,0(sp)
 2014c34:	dec00204 	addi	sp,sp,8
 2014c38:	f800283a 	ret

02014c3c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2014c3c:	defff504 	addi	sp,sp,-44
 2014c40:	dfc00a15 	stw	ra,40(sp)
 2014c44:	df000915 	stw	fp,36(sp)
 2014c48:	df000904 	addi	fp,sp,36
 2014c4c:	e13ffd15 	stw	r4,-12(fp)
 2014c50:	2805883a 	mov	r2,r5
 2014c54:	e1bfff15 	stw	r6,-4(fp)
 2014c58:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014c5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2014c60:	e0bfff17 	ldw	r2,-4(fp)
 2014c64:	10007226 	beq	r2,zero,2014e30 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014c68:	e0bffd17 	ldw	r2,-12(fp)
 2014c6c:	1000041e 	bne	r2,zero,2014c80 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2014c70:	e0bfff17 	ldw	r2,-4(fp)
 2014c74:	00c00104 	movi	r3,4
 2014c78:	10c00005 	stb	r3,0(r2)
        return;
 2014c7c:	00006d06 	br	2014e34 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014c80:	e0bffd17 	ldw	r2,-12(fp)
 2014c84:	10800003 	ldbu	r2,0(r2)
 2014c88:	10803fcc 	andi	r2,r2,255
 2014c8c:	108000e0 	cmpeqi	r2,r2,3
 2014c90:	1000041e 	bne	r2,zero,2014ca4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2014c94:	e0bfff17 	ldw	r2,-4(fp)
 2014c98:	00c00044 	movi	r3,1
 2014c9c:	10c00005 	stb	r3,0(r2)
        return;
 2014ca0:	00006406 	br	2014e34 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 2014ca4:	d0a72e03 	ldbu	r2,-25416(gp)
 2014ca8:	10803fcc 	andi	r2,r2,255
 2014cac:	10000426 	beq	r2,zero,2014cc0 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2014cb0:	e0bfff17 	ldw	r2,-4(fp)
 2014cb4:	00c00084 	movi	r3,2
 2014cb8:	10c00005 	stb	r3,0(r2)
        return;
 2014cbc:	00005d06 	br	2014e34 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2014cc0:	d0a72003 	ldbu	r2,-25472(gp)
 2014cc4:	10803fcc 	andi	r2,r2,255
 2014cc8:	10000426 	beq	r2,zero,2014cdc <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 2014ccc:	e0bfff17 	ldw	r2,-4(fp)
 2014cd0:	00c00344 	movi	r3,13
 2014cd4:	10c00005 	stb	r3,0(r2)
        return;
 2014cd8:	00005606 	br	2014e34 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014cdc:	0005303a 	rdctl	r2,status
 2014ce0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ce4:	e0fffc17 	ldw	r3,-16(fp)
 2014ce8:	00bfff84 	movi	r2,-2
 2014cec:	1884703a 	and	r2,r3,r2
 2014cf0:	1001703a 	wrctl	status,r2
  
  return context;
 2014cf4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014cf8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 2014cfc:	e0bffd17 	ldw	r2,-12(fp)
 2014d00:	1080020b 	ldhu	r2,8(r2)
 2014d04:	10bfffcc 	andi	r2,r2,65535
 2014d08:	10000d26 	beq	r2,zero,2014d40 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 2014d0c:	e0bffd17 	ldw	r2,-12(fp)
 2014d10:	1080020b 	ldhu	r2,8(r2)
 2014d14:	10bfffc4 	addi	r2,r2,-1
 2014d18:	1007883a 	mov	r3,r2
 2014d1c:	e0bffd17 	ldw	r2,-12(fp)
 2014d20:	10c0020d 	sth	r3,8(r2)
 2014d24:	e0bff717 	ldw	r2,-36(fp)
 2014d28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014d2c:	e0bff817 	ldw	r2,-32(fp)
 2014d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 2014d34:	e0bfff17 	ldw	r2,-4(fp)
 2014d38:	10000005 	stb	zero,0(r2)
        return;
 2014d3c:	00003d06 	br	2014e34 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 2014d40:	d0a72f17 	ldw	r2,-25412(gp)
 2014d44:	d0e72f17 	ldw	r3,-25412(gp)
 2014d48:	18c00c03 	ldbu	r3,48(r3)
 2014d4c:	18c00054 	ori	r3,r3,1
 2014d50:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2014d54:	d0a72f17 	ldw	r2,-25412(gp)
 2014d58:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2014d5c:	d0a72f17 	ldw	r2,-25412(gp)
 2014d60:	e0fffe0b 	ldhu	r3,-8(fp)
 2014d64:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 2014d68:	e13ffd17 	ldw	r4,-12(fp)
 2014d6c:	200fd1c0 	call	200fd1c <OS_EventTaskWait>
 2014d70:	e0bff717 	ldw	r2,-36(fp)
 2014d74:	e0bffb15 	stw	r2,-20(fp)
 2014d78:	e0bffb17 	ldw	r2,-20(fp)
 2014d7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2014d80:	20105d00 	call	20105d0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014d84:	0005303a 	rdctl	r2,status
 2014d88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014d8c:	e0fff917 	ldw	r3,-28(fp)
 2014d90:	00bfff84 	movi	r2,-2
 2014d94:	1884703a 	and	r2,r3,r2
 2014d98:	1001703a 	wrctl	status,r2
  
  return context;
 2014d9c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 2014da0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2014da4:	d0a72f17 	ldw	r2,-25412(gp)
 2014da8:	10800c43 	ldbu	r2,49(r2)
 2014dac:	10803fcc 	andi	r2,r2,255
 2014db0:	10000326 	beq	r2,zero,2014dc0 <OSSemPend+0x184>
 2014db4:	108000a0 	cmpeqi	r2,r2,2
 2014db8:	1000041e 	bne	r2,zero,2014dcc <OSSemPend+0x190>
 2014dbc:	00000706 	br	2014ddc <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 2014dc0:	e0bfff17 	ldw	r2,-4(fp)
 2014dc4:	10000005 	stb	zero,0(r2)
             break;
 2014dc8:	00000c06 	br	2014dfc <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 2014dcc:	e0bfff17 	ldw	r2,-4(fp)
 2014dd0:	00c00384 	movi	r3,14
 2014dd4:	10c00005 	stb	r3,0(r2)
             break;
 2014dd8:	00000806 	br	2014dfc <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 2014ddc:	d0a72f17 	ldw	r2,-25412(gp)
 2014de0:	e17ffd17 	ldw	r5,-12(fp)
 2014de4:	1009883a 	mov	r4,r2
 2014de8:	200ff7c0 	call	200ff7c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 2014dec:	e0bfff17 	ldw	r2,-4(fp)
 2014df0:	00c00284 	movi	r3,10
 2014df4:	10c00005 	stb	r3,0(r2)
             break;
 2014df8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 2014dfc:	d0a72f17 	ldw	r2,-25412(gp)
 2014e00:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2014e04:	d0a72f17 	ldw	r2,-25412(gp)
 2014e08:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2014e0c:	d0a72f17 	ldw	r2,-25412(gp)
 2014e10:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2014e14:	d0a72f17 	ldw	r2,-25412(gp)
 2014e18:	10000815 	stw	zero,32(r2)
 2014e1c:	e0bff717 	ldw	r2,-36(fp)
 2014e20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014e24:	e0bffa17 	ldw	r2,-24(fp)
 2014e28:	1001703a 	wrctl	status,r2
 2014e2c:	00000106 	br	2014e34 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 2014e30:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 2014e34:	e037883a 	mov	sp,fp
 2014e38:	dfc00117 	ldw	ra,4(sp)
 2014e3c:	df000017 	ldw	fp,0(sp)
 2014e40:	dec00204 	addi	sp,sp,8
 2014e44:	f800283a 	ret

02014e48 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014e48:	defff604 	addi	sp,sp,-40
 2014e4c:	dfc00915 	stw	ra,36(sp)
 2014e50:	df000815 	stw	fp,32(sp)
 2014e54:	df000804 	addi	fp,sp,32
 2014e58:	e13ffd15 	stw	r4,-12(fp)
 2014e5c:	2805883a 	mov	r2,r5
 2014e60:	e1bfff15 	stw	r6,-4(fp)
 2014e64:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014e68:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2014e6c:	e0bfff17 	ldw	r2,-4(fp)
 2014e70:	1000021e 	bne	r2,zero,2014e7c <OSSemPendAbort+0x34>
        return (0);
 2014e74:	0005883a 	mov	r2,zero
 2014e78:	00004906 	br	2014fa0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014e7c:	e0bffd17 	ldw	r2,-12(fp)
 2014e80:	1000051e 	bne	r2,zero,2014e98 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 2014e84:	e0bfff17 	ldw	r2,-4(fp)
 2014e88:	00c00104 	movi	r3,4
 2014e8c:	10c00005 	stb	r3,0(r2)
        return (0);
 2014e90:	0005883a 	mov	r2,zero
 2014e94:	00004206 	br	2014fa0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014e98:	e0bffd17 	ldw	r2,-12(fp)
 2014e9c:	10800003 	ldbu	r2,0(r2)
 2014ea0:	10803fcc 	andi	r2,r2,255
 2014ea4:	108000e0 	cmpeqi	r2,r2,3
 2014ea8:	1000051e 	bne	r2,zero,2014ec0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 2014eac:	e0bfff17 	ldw	r2,-4(fp)
 2014eb0:	00c00044 	movi	r3,1
 2014eb4:	10c00005 	stb	r3,0(r2)
        return (0);
 2014eb8:	0005883a 	mov	r2,zero
 2014ebc:	00003806 	br	2014fa0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ec0:	0005303a 	rdctl	r2,status
 2014ec4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ec8:	e0fffc17 	ldw	r3,-16(fp)
 2014ecc:	00bfff84 	movi	r2,-2
 2014ed0:	1884703a 	and	r2,r3,r2
 2014ed4:	1001703a 	wrctl	status,r2
  
  return context;
 2014ed8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2014edc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 2014ee0:	e0bffd17 	ldw	r2,-12(fp)
 2014ee4:	10800283 	ldbu	r2,10(r2)
 2014ee8:	10803fcc 	andi	r2,r2,255
 2014eec:	10002526 	beq	r2,zero,2014f84 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 2014ef0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 2014ef4:	e0bffe03 	ldbu	r2,-8(fp)
 2014ef8:	10800060 	cmpeqi	r2,r2,1
 2014efc:	10000e26 	beq	r2,zero,2014f38 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2014f00:	00000806 	br	2014f24 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2014f04:	01c00084 	movi	r7,2
 2014f08:	01800044 	movi	r6,1
 2014f0c:	000b883a 	mov	r5,zero
 2014f10:	e13ffd17 	ldw	r4,-12(fp)
 2014f14:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                     nbr_tasks++;
 2014f18:	e0bff803 	ldbu	r2,-32(fp)
 2014f1c:	10800044 	addi	r2,r2,1
 2014f20:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2014f24:	e0bffd17 	ldw	r2,-12(fp)
 2014f28:	10800283 	ldbu	r2,10(r2)
 2014f2c:	10803fcc 	andi	r2,r2,255
 2014f30:	103ff41e 	bne	r2,zero,2014f04 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2014f34:	00000906 	br	2014f5c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2014f38:	01c00084 	movi	r7,2
 2014f3c:	01800044 	movi	r6,1
 2014f40:	000b883a 	mov	r5,zero
 2014f44:	e13ffd17 	ldw	r4,-12(fp)
 2014f48:	200fb840 	call	200fb84 <OS_EventTaskRdy>
                 nbr_tasks++;
 2014f4c:	e0bff803 	ldbu	r2,-32(fp)
 2014f50:	10800044 	addi	r2,r2,1
 2014f54:	e0bff805 	stb	r2,-32(fp)
                 break;
 2014f58:	0001883a 	nop
 2014f5c:	e0bff917 	ldw	r2,-28(fp)
 2014f60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014f64:	e0bffa17 	ldw	r2,-24(fp)
 2014f68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2014f6c:	20105d00 	call	20105d0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 2014f70:	e0bfff17 	ldw	r2,-4(fp)
 2014f74:	00c00384 	movi	r3,14
 2014f78:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 2014f7c:	e0bff803 	ldbu	r2,-32(fp)
 2014f80:	00000706 	br	2014fa0 <OSSemPendAbort+0x158>
 2014f84:	e0bff917 	ldw	r2,-28(fp)
 2014f88:	e0bffb15 	stw	r2,-20(fp)
 2014f8c:	e0bffb17 	ldw	r2,-20(fp)
 2014f90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2014f94:	e0bfff17 	ldw	r2,-4(fp)
 2014f98:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 2014f9c:	0005883a 	mov	r2,zero
}
 2014fa0:	e037883a 	mov	sp,fp
 2014fa4:	dfc00117 	ldw	ra,4(sp)
 2014fa8:	df000017 	ldw	fp,0(sp)
 2014fac:	dec00204 	addi	sp,sp,8
 2014fb0:	f800283a 	ret

02014fb4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 2014fb4:	defff804 	addi	sp,sp,-32
 2014fb8:	dfc00715 	stw	ra,28(sp)
 2014fbc:	df000615 	stw	fp,24(sp)
 2014fc0:	df000604 	addi	fp,sp,24
 2014fc4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014fc8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014fcc:	e0bfff17 	ldw	r2,-4(fp)
 2014fd0:	1000021e 	bne	r2,zero,2014fdc <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 2014fd4:	00800104 	movi	r2,4
 2014fd8:	00003506 	br	20150b0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014fdc:	e0bfff17 	ldw	r2,-4(fp)
 2014fe0:	10800003 	ldbu	r2,0(r2)
 2014fe4:	10803fcc 	andi	r2,r2,255
 2014fe8:	108000e0 	cmpeqi	r2,r2,3
 2014fec:	1000021e 	bne	r2,zero,2014ff8 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 2014ff0:	00800044 	movi	r2,1
 2014ff4:	00002e06 	br	20150b0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ff8:	0005303a 	rdctl	r2,status
 2014ffc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015000:	e0fffe17 	ldw	r3,-8(fp)
 2015004:	00bfff84 	movi	r2,-2
 2015008:	1884703a 	and	r2,r3,r2
 201500c:	1001703a 	wrctl	status,r2
  
  return context;
 2015010:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2015014:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 2015018:	e0bfff17 	ldw	r2,-4(fp)
 201501c:	10800283 	ldbu	r2,10(r2)
 2015020:	10803fcc 	andi	r2,r2,255
 2015024:	10000c26 	beq	r2,zero,2015058 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2015028:	000f883a 	mov	r7,zero
 201502c:	01800044 	movi	r6,1
 2015030:	000b883a 	mov	r5,zero
 2015034:	e13fff17 	ldw	r4,-4(fp)
 2015038:	200fb840 	call	200fb84 <OS_EventTaskRdy>
 201503c:	e0bffa17 	ldw	r2,-24(fp)
 2015040:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015044:	e0bffb17 	ldw	r2,-20(fp)
 2015048:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 201504c:	20105d00 	call	20105d0 <OS_Sched>
        return (OS_ERR_NONE);
 2015050:	0005883a 	mov	r2,zero
 2015054:	00001606 	br	20150b0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 2015058:	e0bfff17 	ldw	r2,-4(fp)
 201505c:	1080020b 	ldhu	r2,8(r2)
 2015060:	10ffffcc 	andi	r3,r2,65535
 2015064:	00bfffd4 	movui	r2,65535
 2015068:	18800c26 	beq	r3,r2,201509c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 201506c:	e0bfff17 	ldw	r2,-4(fp)
 2015070:	1080020b 	ldhu	r2,8(r2)
 2015074:	10800044 	addi	r2,r2,1
 2015078:	1007883a 	mov	r3,r2
 201507c:	e0bfff17 	ldw	r2,-4(fp)
 2015080:	10c0020d 	sth	r3,8(r2)
 2015084:	e0bffa17 	ldw	r2,-24(fp)
 2015088:	e0bffc15 	stw	r2,-16(fp)
 201508c:	e0bffc17 	ldw	r2,-16(fp)
 2015090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 2015094:	0005883a 	mov	r2,zero
 2015098:	00000506 	br	20150b0 <OSSemPost+0xfc>
 201509c:	e0bffa17 	ldw	r2,-24(fp)
 20150a0:	e0bffd15 	stw	r2,-12(fp)
 20150a4:	e0bffd17 	ldw	r2,-12(fp)
 20150a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 20150ac:	00800c84 	movi	r2,50
}
 20150b0:	e037883a 	mov	sp,fp
 20150b4:	dfc00117 	ldw	ra,4(sp)
 20150b8:	df000017 	ldw	fp,0(sp)
 20150bc:	dec00204 	addi	sp,sp,8
 20150c0:	f800283a 	ret

020150c4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 20150c4:	defff704 	addi	sp,sp,-36
 20150c8:	df000815 	stw	fp,32(sp)
 20150cc:	df000804 	addi	fp,sp,32
 20150d0:	e13ffe15 	stw	r4,-8(fp)
 20150d4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20150d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20150dc:	e0bffe17 	ldw	r2,-8(fp)
 20150e0:	1000021e 	bne	r2,zero,20150ec <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 20150e4:	00800104 	movi	r2,4
 20150e8:	00003606 	br	20151c4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 20150ec:	e0bfff17 	ldw	r2,-4(fp)
 20150f0:	1000021e 	bne	r2,zero,20150fc <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 20150f4:	00800244 	movi	r2,9
 20150f8:	00003206 	br	20151c4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 20150fc:	e0bffe17 	ldw	r2,-8(fp)
 2015100:	10800003 	ldbu	r2,0(r2)
 2015104:	10803fcc 	andi	r2,r2,255
 2015108:	108000e0 	cmpeqi	r2,r2,3
 201510c:	1000021e 	bne	r2,zero,2015118 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 2015110:	00800044 	movi	r2,1
 2015114:	00002b06 	br	20151c4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015118:	0005303a 	rdctl	r2,status
 201511c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015120:	e0fffd17 	ldw	r3,-12(fp)
 2015124:	00bfff84 	movi	r2,-2
 2015128:	1884703a 	and	r2,r3,r2
 201512c:	1001703a 	wrctl	status,r2
  
  return context;
 2015130:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 2015134:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 2015138:	e0bffe17 	ldw	r2,-8(fp)
 201513c:	10c00283 	ldbu	r3,10(r2)
 2015140:	e0bfff17 	ldw	r2,-4(fp)
 2015144:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 2015148:	e0bffe17 	ldw	r2,-8(fp)
 201514c:	108002c4 	addi	r2,r2,11
 2015150:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 2015154:	e0bfff17 	ldw	r2,-4(fp)
 2015158:	10800084 	addi	r2,r2,2
 201515c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015160:	e03ffa05 	stb	zero,-24(fp)
 2015164:	00000b06 	br	2015194 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 2015168:	e0bff917 	ldw	r2,-28(fp)
 201516c:	10c00044 	addi	r3,r2,1
 2015170:	e0fff915 	stw	r3,-28(fp)
 2015174:	e0fff817 	ldw	r3,-32(fp)
 2015178:	19000044 	addi	r4,r3,1
 201517c:	e13ff815 	stw	r4,-32(fp)
 2015180:	18c00003 	ldbu	r3,0(r3)
 2015184:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2015188:	e0bffa03 	ldbu	r2,-24(fp)
 201518c:	10800044 	addi	r2,r2,1
 2015190:	e0bffa05 	stb	r2,-24(fp)
 2015194:	e0bffa03 	ldbu	r2,-24(fp)
 2015198:	108000f0 	cmpltui	r2,r2,3
 201519c:	103ff21e 	bne	r2,zero,2015168 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 20151a0:	e0bffe17 	ldw	r2,-8(fp)
 20151a4:	10c0020b 	ldhu	r3,8(r2)
 20151a8:	e0bfff17 	ldw	r2,-4(fp)
 20151ac:	10c0000d 	sth	r3,0(r2)
 20151b0:	e0bffb17 	ldw	r2,-20(fp)
 20151b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20151b8:	e0bffc17 	ldw	r2,-16(fp)
 20151bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20151c0:	0005883a 	mov	r2,zero
}
 20151c4:	e037883a 	mov	sp,fp
 20151c8:	df000017 	ldw	fp,0(sp)
 20151cc:	dec00104 	addi	sp,sp,4
 20151d0:	f800283a 	ret

020151d4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 20151d4:	defff904 	addi	sp,sp,-28
 20151d8:	df000615 	stw	fp,24(sp)
 20151dc:	df000604 	addi	fp,sp,24
 20151e0:	e13ffd15 	stw	r4,-12(fp)
 20151e4:	2805883a 	mov	r2,r5
 20151e8:	e1bfff15 	stw	r6,-4(fp)
 20151ec:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20151f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20151f4:	e0bfff17 	ldw	r2,-4(fp)
 20151f8:	10003126 	beq	r2,zero,20152c0 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20151fc:	e0bffd17 	ldw	r2,-12(fp)
 2015200:	1000041e 	bne	r2,zero,2015214 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 2015204:	e0bfff17 	ldw	r2,-4(fp)
 2015208:	00c00104 	movi	r3,4
 201520c:	10c00005 	stb	r3,0(r2)
        return;
 2015210:	00002c06 	br	20152c4 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015214:	e0bffd17 	ldw	r2,-12(fp)
 2015218:	10800003 	ldbu	r2,0(r2)
 201521c:	10803fcc 	andi	r2,r2,255
 2015220:	108000e0 	cmpeqi	r2,r2,3
 2015224:	1000041e 	bne	r2,zero,2015238 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 2015228:	e0bfff17 	ldw	r2,-4(fp)
 201522c:	00c00044 	movi	r3,1
 2015230:	10c00005 	stb	r3,0(r2)
        return;
 2015234:	00002306 	br	20152c4 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015238:	0005303a 	rdctl	r2,status
 201523c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015240:	e0fffc17 	ldw	r3,-16(fp)
 2015244:	00bfff84 	movi	r2,-2
 2015248:	1884703a 	and	r2,r3,r2
 201524c:	1001703a 	wrctl	status,r2
  
  return context;
 2015250:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015254:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 2015258:	e0bfff17 	ldw	r2,-4(fp)
 201525c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 2015260:	e0bffd17 	ldw	r2,-12(fp)
 2015264:	1080020b 	ldhu	r2,8(r2)
 2015268:	10bfffcc 	andi	r2,r2,65535
 201526c:	10000426 	beq	r2,zero,2015280 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 2015270:	e0bffd17 	ldw	r2,-12(fp)
 2015274:	e0fffe0b 	ldhu	r3,-8(fp)
 2015278:	10c0020d 	sth	r3,8(r2)
 201527c:	00000b06 	br	20152ac <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 2015280:	e0bffd17 	ldw	r2,-12(fp)
 2015284:	10800283 	ldbu	r2,10(r2)
 2015288:	10803fcc 	andi	r2,r2,255
 201528c:	1000041e 	bne	r2,zero,20152a0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 2015290:	e0bffd17 	ldw	r2,-12(fp)
 2015294:	e0fffe0b 	ldhu	r3,-8(fp)
 2015298:	10c0020d 	sth	r3,8(r2)
 201529c:	00000306 	br	20152ac <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 20152a0:	e0bfff17 	ldw	r2,-4(fp)
 20152a4:	00c01244 	movi	r3,73
 20152a8:	10c00005 	stb	r3,0(r2)
 20152ac:	e0bffa17 	ldw	r2,-24(fp)
 20152b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20152b4:	e0bffb17 	ldw	r2,-20(fp)
 20152b8:	1001703a 	wrctl	status,r2
 20152bc:	00000106 	br	20152c4 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 20152c0:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 20152c4:	e037883a 	mov	sp,fp
 20152c8:	df000017 	ldw	fp,0(sp)
 20152cc:	dec00104 	addi	sp,sp,4
 20152d0:	f800283a 	ret

020152d4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 20152d4:	defff104 	addi	sp,sp,-60
 20152d8:	dfc00e15 	stw	ra,56(sp)
 20152dc:	df000d15 	stw	fp,52(sp)
 20152e0:	df000d04 	addi	fp,sp,52
 20152e4:	2007883a 	mov	r3,r4
 20152e8:	2805883a 	mov	r2,r5
 20152ec:	e0fffe05 	stb	r3,-8(fp)
 20152f0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 20152f4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 20152f8:	e0bffe03 	ldbu	r2,-8(fp)
 20152fc:	10800530 	cmpltui	r2,r2,20
 2015300:	1000051e 	bne	r2,zero,2015318 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 2015304:	e0bffe03 	ldbu	r2,-8(fp)
 2015308:	10803fe0 	cmpeqi	r2,r2,255
 201530c:	1000021e 	bne	r2,zero,2015318 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 2015310:	00800a84 	movi	r2,42
 2015314:	00012606 	br	20157b0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 2015318:	e0bfff03 	ldbu	r2,-4(fp)
 201531c:	10800530 	cmpltui	r2,r2,20
 2015320:	1000021e 	bne	r2,zero,201532c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 2015324:	00800a84 	movi	r2,42
 2015328:	00012106 	br	20157b0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201532c:	0005303a 	rdctl	r2,status
 2015330:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015334:	e0fffd17 	ldw	r3,-12(fp)
 2015338:	00bfff84 	movi	r2,-2
 201533c:	1884703a 	and	r2,r3,r2
 2015340:	1001703a 	wrctl	status,r2
  
  return context;
 2015344:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015348:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201534c:	e0ffff03 	ldbu	r3,-4(fp)
 2015350:	008080b4 	movhi	r2,514
 2015354:	10906f04 	addi	r2,r2,16828
 2015358:	18c7883a 	add	r3,r3,r3
 201535c:	18c7883a 	add	r3,r3,r3
 2015360:	10c5883a 	add	r2,r2,r3
 2015364:	10800017 	ldw	r2,0(r2)
 2015368:	10000626 	beq	r2,zero,2015384 <OSTaskChangePrio+0xb0>
 201536c:	e0bff517 	ldw	r2,-44(fp)
 2015370:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015374:	e0bff617 	ldw	r2,-40(fp)
 2015378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 201537c:	00800a04 	movi	r2,40
 2015380:	00010b06 	br	20157b0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 2015384:	e0bffe03 	ldbu	r2,-8(fp)
 2015388:	10803fd8 	cmpnei	r2,r2,255
 201538c:	1000031e 	bne	r2,zero,201539c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 2015390:	d0a72f17 	ldw	r2,-25412(gp)
 2015394:	10800c83 	ldbu	r2,50(r2)
 2015398:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 201539c:	e0fffe03 	ldbu	r3,-8(fp)
 20153a0:	008080b4 	movhi	r2,514
 20153a4:	10906f04 	addi	r2,r2,16828
 20153a8:	18c7883a 	add	r3,r3,r3
 20153ac:	18c7883a 	add	r3,r3,r3
 20153b0:	10c5883a 	add	r2,r2,r3
 20153b4:	10800017 	ldw	r2,0(r2)
 20153b8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 20153bc:	e0bff817 	ldw	r2,-32(fp)
 20153c0:	1000061e 	bne	r2,zero,20153dc <OSTaskChangePrio+0x108>
 20153c4:	e0bff517 	ldw	r2,-44(fp)
 20153c8:	e0bff715 	stw	r2,-36(fp)
 20153cc:	e0bff717 	ldw	r2,-36(fp)
 20153d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 20153d4:	00800a44 	movi	r2,41
 20153d8:	0000f506 	br	20157b0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 20153dc:	e0bff817 	ldw	r2,-32(fp)
 20153e0:	10800058 	cmpnei	r2,r2,1
 20153e4:	1000061e 	bne	r2,zero,2015400 <OSTaskChangePrio+0x12c>
 20153e8:	e0bff517 	ldw	r2,-44(fp)
 20153ec:	e0bff915 	stw	r2,-28(fp)
 20153f0:	e0bff917 	ldw	r2,-28(fp)
 20153f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 20153f8:	008010c4 	movi	r2,67
 20153fc:	0000ec06 	br	20157b0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 2015400:	e0bfff03 	ldbu	r2,-4(fp)
 2015404:	1004d0fa 	srli	r2,r2,3
 2015408:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 201540c:	e0bfff03 	ldbu	r2,-4(fp)
 2015410:	108001cc 	andi	r2,r2,7
 2015414:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 2015418:	e0bffb03 	ldbu	r2,-20(fp)
 201541c:	00c00044 	movi	r3,1
 2015420:	1884983a 	sll	r2,r3,r2
 2015424:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 2015428:	e0bffb43 	ldbu	r2,-19(fp)
 201542c:	00c00044 	movi	r3,1
 2015430:	1884983a 	sll	r2,r3,r2
 2015434:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 2015438:	e0fffe03 	ldbu	r3,-8(fp)
 201543c:	008080b4 	movhi	r2,514
 2015440:	10906f04 	addi	r2,r2,16828
 2015444:	18c7883a 	add	r3,r3,r3
 2015448:	18c7883a 	add	r3,r3,r3
 201544c:	10c5883a 	add	r2,r2,r3
 2015450:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 2015454:	e0ffff03 	ldbu	r3,-4(fp)
 2015458:	008080b4 	movhi	r2,514
 201545c:	10906f04 	addi	r2,r2,16828
 2015460:	18c7883a 	add	r3,r3,r3
 2015464:	18c7883a 	add	r3,r3,r3
 2015468:	10c5883a 	add	r2,r2,r3
 201546c:	e0fff817 	ldw	r3,-32(fp)
 2015470:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 2015474:	e0bff817 	ldw	r2,-32(fp)
 2015478:	10800d03 	ldbu	r2,52(r2)
 201547c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 2015480:	e0bff817 	ldw	r2,-32(fp)
 2015484:	10800d83 	ldbu	r2,54(r2)
 2015488:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 201548c:	e0bff817 	ldw	r2,-32(fp)
 2015490:	10800d43 	ldbu	r2,53(r2)
 2015494:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 2015498:	e0fffc03 	ldbu	r3,-16(fp)
 201549c:	d0a72c44 	addi	r2,gp,-25423
 20154a0:	1885883a 	add	r2,r3,r2
 20154a4:	10c00003 	ldbu	r3,0(r2)
 20154a8:	e0bffc83 	ldbu	r2,-14(fp)
 20154ac:	1884703a 	and	r2,r3,r2
 20154b0:	10803fcc 	andi	r2,r2,255
 20154b4:	10002826 	beq	r2,zero,2015558 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 20154b8:	e0fffc03 	ldbu	r3,-16(fp)
 20154bc:	e13ffc03 	ldbu	r4,-16(fp)
 20154c0:	d0a72c44 	addi	r2,gp,-25423
 20154c4:	2085883a 	add	r2,r4,r2
 20154c8:	10800003 	ldbu	r2,0(r2)
 20154cc:	1009883a 	mov	r4,r2
 20154d0:	e0bffc83 	ldbu	r2,-14(fp)
 20154d4:	0084303a 	nor	r2,zero,r2
 20154d8:	2084703a 	and	r2,r4,r2
 20154dc:	1009883a 	mov	r4,r2
 20154e0:	d0a72c44 	addi	r2,gp,-25423
 20154e4:	1885883a 	add	r2,r3,r2
 20154e8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 20154ec:	e0fffc03 	ldbu	r3,-16(fp)
 20154f0:	d0a72c44 	addi	r2,gp,-25423
 20154f4:	1885883a 	add	r2,r3,r2
 20154f8:	10800003 	ldbu	r2,0(r2)
 20154fc:	10803fcc 	andi	r2,r2,255
 2015500:	1000061e 	bne	r2,zero,201551c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 2015504:	e0bffc43 	ldbu	r2,-15(fp)
 2015508:	0084303a 	nor	r2,zero,r2
 201550c:	1007883a 	mov	r3,r2
 2015510:	d0a72c03 	ldbu	r2,-25424(gp)
 2015514:	1884703a 	and	r2,r3,r2
 2015518:	d0a72c05 	stb	r2,-25424(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 201551c:	d0e72c03 	ldbu	r3,-25424(gp)
 2015520:	e0bffb83 	ldbu	r2,-18(fp)
 2015524:	1884b03a 	or	r2,r3,r2
 2015528:	d0a72c05 	stb	r2,-25424(gp)
         OSRdyTbl[y_new] |= bitx_new;
 201552c:	e0fffb03 	ldbu	r3,-20(fp)
 2015530:	e13ffb03 	ldbu	r4,-20(fp)
 2015534:	d0a72c44 	addi	r2,gp,-25423
 2015538:	2085883a 	add	r2,r4,r2
 201553c:	11000003 	ldbu	r4,0(r2)
 2015540:	e0bffbc3 	ldbu	r2,-17(fp)
 2015544:	2084b03a 	or	r2,r4,r2
 2015548:	1009883a 	mov	r4,r2
 201554c:	d0a72c44 	addi	r2,gp,-25423
 2015550:	1885883a 	add	r2,r3,r2
 2015554:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 2015558:	e0bff817 	ldw	r2,-32(fp)
 201555c:	10800717 	ldw	r2,28(r2)
 2015560:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 2015564:	e0bff317 	ldw	r2,-52(fp)
 2015568:	10003326 	beq	r2,zero,2015638 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 201556c:	e0bffc03 	ldbu	r2,-16(fp)
 2015570:	e0fffc03 	ldbu	r3,-16(fp)
 2015574:	e13ff317 	ldw	r4,-52(fp)
 2015578:	20c7883a 	add	r3,r4,r3
 201557c:	18c002c4 	addi	r3,r3,11
 2015580:	18c00003 	ldbu	r3,0(r3)
 2015584:	1809883a 	mov	r4,r3
 2015588:	e0fffc83 	ldbu	r3,-14(fp)
 201558c:	00c6303a 	nor	r3,zero,r3
 2015590:	20c6703a 	and	r3,r4,r3
 2015594:	1809883a 	mov	r4,r3
 2015598:	e0fff317 	ldw	r3,-52(fp)
 201559c:	1885883a 	add	r2,r3,r2
 20155a0:	108002c4 	addi	r2,r2,11
 20155a4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 20155a8:	e0bffc03 	ldbu	r2,-16(fp)
 20155ac:	e0fff317 	ldw	r3,-52(fp)
 20155b0:	1885883a 	add	r2,r3,r2
 20155b4:	108002c4 	addi	r2,r2,11
 20155b8:	10800003 	ldbu	r2,0(r2)
 20155bc:	10803fcc 	andi	r2,r2,255
 20155c0:	1000091e 	bne	r2,zero,20155e8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 20155c4:	e0bff317 	ldw	r2,-52(fp)
 20155c8:	10800283 	ldbu	r2,10(r2)
 20155cc:	1007883a 	mov	r3,r2
 20155d0:	e0bffc43 	ldbu	r2,-15(fp)
 20155d4:	0084303a 	nor	r2,zero,r2
 20155d8:	1884703a 	and	r2,r3,r2
 20155dc:	1007883a 	mov	r3,r2
 20155e0:	e0bff317 	ldw	r2,-52(fp)
 20155e4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 20155e8:	e0bff317 	ldw	r2,-52(fp)
 20155ec:	10c00283 	ldbu	r3,10(r2)
 20155f0:	e0bffb83 	ldbu	r2,-18(fp)
 20155f4:	1884b03a 	or	r2,r3,r2
 20155f8:	1007883a 	mov	r3,r2
 20155fc:	e0bff317 	ldw	r2,-52(fp)
 2015600:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 2015604:	e0bffb03 	ldbu	r2,-20(fp)
 2015608:	e0fffb03 	ldbu	r3,-20(fp)
 201560c:	e13ff317 	ldw	r4,-52(fp)
 2015610:	20c7883a 	add	r3,r4,r3
 2015614:	18c002c4 	addi	r3,r3,11
 2015618:	19000003 	ldbu	r4,0(r3)
 201561c:	e0fffbc3 	ldbu	r3,-17(fp)
 2015620:	20c6b03a 	or	r3,r4,r3
 2015624:	1809883a 	mov	r4,r3
 2015628:	e0fff317 	ldw	r3,-52(fp)
 201562c:	1885883a 	add	r2,r3,r2
 2015630:	108002c4 	addi	r2,r2,11
 2015634:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 2015638:	e0bff817 	ldw	r2,-32(fp)
 201563c:	10800817 	ldw	r2,32(r2)
 2015640:	10004226 	beq	r2,zero,201574c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 2015644:	e0bff817 	ldw	r2,-32(fp)
 2015648:	10800817 	ldw	r2,32(r2)
 201564c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 2015650:	e0bff417 	ldw	r2,-48(fp)
 2015654:	10800017 	ldw	r2,0(r2)
 2015658:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 201565c:	00003906 	br	2015744 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 2015660:	e0bffc03 	ldbu	r2,-16(fp)
 2015664:	e0fffc03 	ldbu	r3,-16(fp)
 2015668:	e13ff317 	ldw	r4,-52(fp)
 201566c:	20c7883a 	add	r3,r4,r3
 2015670:	18c002c4 	addi	r3,r3,11
 2015674:	18c00003 	ldbu	r3,0(r3)
 2015678:	1809883a 	mov	r4,r3
 201567c:	e0fffc83 	ldbu	r3,-14(fp)
 2015680:	00c6303a 	nor	r3,zero,r3
 2015684:	20c6703a 	and	r3,r4,r3
 2015688:	1809883a 	mov	r4,r3
 201568c:	e0fff317 	ldw	r3,-52(fp)
 2015690:	1885883a 	add	r2,r3,r2
 2015694:	108002c4 	addi	r2,r2,11
 2015698:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 201569c:	e0bffc03 	ldbu	r2,-16(fp)
 20156a0:	e0fff317 	ldw	r3,-52(fp)
 20156a4:	1885883a 	add	r2,r3,r2
 20156a8:	108002c4 	addi	r2,r2,11
 20156ac:	10800003 	ldbu	r2,0(r2)
 20156b0:	10803fcc 	andi	r2,r2,255
 20156b4:	1000091e 	bne	r2,zero,20156dc <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 20156b8:	e0bff317 	ldw	r2,-52(fp)
 20156bc:	10800283 	ldbu	r2,10(r2)
 20156c0:	1007883a 	mov	r3,r2
 20156c4:	e0bffc43 	ldbu	r2,-15(fp)
 20156c8:	0084303a 	nor	r2,zero,r2
 20156cc:	1884703a 	and	r2,r3,r2
 20156d0:	1007883a 	mov	r3,r2
 20156d4:	e0bff317 	ldw	r2,-52(fp)
 20156d8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 20156dc:	e0bff317 	ldw	r2,-52(fp)
 20156e0:	10c00283 	ldbu	r3,10(r2)
 20156e4:	e0bffb83 	ldbu	r2,-18(fp)
 20156e8:	1884b03a 	or	r2,r3,r2
 20156ec:	1007883a 	mov	r3,r2
 20156f0:	e0bff317 	ldw	r2,-52(fp)
 20156f4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 20156f8:	e0bffb03 	ldbu	r2,-20(fp)
 20156fc:	e0fffb03 	ldbu	r3,-20(fp)
 2015700:	e13ff317 	ldw	r4,-52(fp)
 2015704:	20c7883a 	add	r3,r4,r3
 2015708:	18c002c4 	addi	r3,r3,11
 201570c:	19000003 	ldbu	r4,0(r3)
 2015710:	e0fffbc3 	ldbu	r3,-17(fp)
 2015714:	20c6b03a 	or	r3,r4,r3
 2015718:	1809883a 	mov	r4,r3
 201571c:	e0fff317 	ldw	r3,-52(fp)
 2015720:	1885883a 	add	r2,r3,r2
 2015724:	108002c4 	addi	r2,r2,11
 2015728:	11000005 	stb	r4,0(r2)
            pevents++;
 201572c:	e0bff417 	ldw	r2,-48(fp)
 2015730:	10800104 	addi	r2,r2,4
 2015734:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 2015738:	e0bff417 	ldw	r2,-48(fp)
 201573c:	10800017 	ldw	r2,0(r2)
 2015740:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 2015744:	e0bff317 	ldw	r2,-52(fp)
 2015748:	103fc51e 	bne	r2,zero,2015660 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 201574c:	e0bff817 	ldw	r2,-32(fp)
 2015750:	e0ffff03 	ldbu	r3,-4(fp)
 2015754:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 2015758:	e0bff817 	ldw	r2,-32(fp)
 201575c:	e0fffb03 	ldbu	r3,-20(fp)
 2015760:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 2015764:	e0bff817 	ldw	r2,-32(fp)
 2015768:	e0fffb43 	ldbu	r3,-19(fp)
 201576c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 2015770:	e0bff817 	ldw	r2,-32(fp)
 2015774:	e0fffb83 	ldbu	r3,-18(fp)
 2015778:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 201577c:	e0bff817 	ldw	r2,-32(fp)
 2015780:	e0fffbc3 	ldbu	r3,-17(fp)
 2015784:	10c00d45 	stb	r3,53(r2)
 2015788:	e0bff517 	ldw	r2,-44(fp)
 201578c:	e0bffa15 	stw	r2,-24(fp)
 2015790:	e0bffa17 	ldw	r2,-24(fp)
 2015794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2015798:	d0a72043 	ldbu	r2,-25471(gp)
 201579c:	10803fcc 	andi	r2,r2,255
 20157a0:	10800058 	cmpnei	r2,r2,1
 20157a4:	1000011e 	bne	r2,zero,20157ac <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 20157a8:	20105d00 	call	20105d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 20157ac:	0005883a 	mov	r2,zero
}
 20157b0:	e037883a 	mov	sp,fp
 20157b4:	dfc00117 	ldw	ra,4(sp)
 20157b8:	df000017 	ldw	fp,0(sp)
 20157bc:	dec00204 	addi	sp,sp,8
 20157c0:	f800283a 	ret

020157c4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 20157c4:	deffee04 	addi	sp,sp,-72
 20157c8:	dfc01115 	stw	ra,68(sp)
 20157cc:	df001015 	stw	fp,64(sp)
 20157d0:	df001004 	addi	fp,sp,64
 20157d4:	e13ffc15 	stw	r4,-16(fp)
 20157d8:	e17ffd15 	stw	r5,-12(fp)
 20157dc:	e1bffe15 	stw	r6,-8(fp)
 20157e0:	3805883a 	mov	r2,r7
 20157e4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 20157e8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 20157ec:	e0bfff03 	ldbu	r2,-4(fp)
 20157f0:	10800570 	cmpltui	r2,r2,21
 20157f4:	1000021e 	bne	r2,zero,2015800 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 20157f8:	00800a84 	movi	r2,42
 20157fc:	00005706 	br	201595c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015800:	0005303a 	rdctl	r2,status
 2015804:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015808:	e0fffb17 	ldw	r3,-20(fp)
 201580c:	00bfff84 	movi	r2,-2
 2015810:	1884703a 	and	r2,r3,r2
 2015814:	1001703a 	wrctl	status,r2
  
  return context;
 2015818:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 201581c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2015820:	d0a72e03 	ldbu	r2,-25416(gp)
 2015824:	10803fcc 	andi	r2,r2,255
 2015828:	10000626 	beq	r2,zero,2015844 <OSTaskCreate+0x80>
 201582c:	e0bff317 	ldw	r2,-52(fp)
 2015830:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015834:	e0bff417 	ldw	r2,-48(fp)
 2015838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 201583c:	00800f04 	movi	r2,60
 2015840:	00004606 	br	201595c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2015844:	e0ffff03 	ldbu	r3,-4(fp)
 2015848:	008080b4 	movhi	r2,514
 201584c:	10906f04 	addi	r2,r2,16828
 2015850:	18c7883a 	add	r3,r3,r3
 2015854:	18c7883a 	add	r3,r3,r3
 2015858:	10c5883a 	add	r2,r2,r3
 201585c:	10800017 	ldw	r2,0(r2)
 2015860:	1000391e 	bne	r2,zero,2015948 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2015864:	e0ffff03 	ldbu	r3,-4(fp)
 2015868:	008080b4 	movhi	r2,514
 201586c:	10906f04 	addi	r2,r2,16828
 2015870:	18c7883a 	add	r3,r3,r3
 2015874:	18c7883a 	add	r3,r3,r3
 2015878:	10c5883a 	add	r2,r2,r3
 201587c:	00c00044 	movi	r3,1
 2015880:	10c00015 	stw	r3,0(r2)
 2015884:	e0bff317 	ldw	r2,-52(fp)
 2015888:	e0bff515 	stw	r2,-44(fp)
 201588c:	e0bff517 	ldw	r2,-44(fp)
 2015890:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 2015894:	000f883a 	mov	r7,zero
 2015898:	e1bffe17 	ldw	r6,-8(fp)
 201589c:	e17ffd17 	ldw	r5,-12(fp)
 20158a0:	e13ffc17 	ldw	r4,-16(fp)
 20158a4:	2018a640 	call	2018a64 <OSTaskStkInit>
 20158a8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 20158ac:	e0bfff03 	ldbu	r2,-4(fp)
 20158b0:	d8000215 	stw	zero,8(sp)
 20158b4:	d8000115 	stw	zero,4(sp)
 20158b8:	d8000015 	stw	zero,0(sp)
 20158bc:	000f883a 	mov	r7,zero
 20158c0:	000d883a 	mov	r6,zero
 20158c4:	e17ff717 	ldw	r5,-36(fp)
 20158c8:	1009883a 	mov	r4,r2
 20158cc:	20109d00 	call	20109d0 <OS_TCBInit>
 20158d0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 20158d4:	e0bff803 	ldbu	r2,-32(fp)
 20158d8:	1000061e 	bne	r2,zero,20158f4 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 20158dc:	d0a72043 	ldbu	r2,-25471(gp)
 20158e0:	10803fcc 	andi	r2,r2,255
 20158e4:	10800058 	cmpnei	r2,r2,1
 20158e8:	1000151e 	bne	r2,zero,2015940 <OSTaskCreate+0x17c>
                OS_Sched();
 20158ec:	20105d00 	call	20105d0 <OS_Sched>
 20158f0:	00001306 	br	2015940 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20158f4:	0005303a 	rdctl	r2,status
 20158f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20158fc:	e0fffa17 	ldw	r3,-24(fp)
 2015900:	00bfff84 	movi	r2,-2
 2015904:	1884703a 	and	r2,r3,r2
 2015908:	1001703a 	wrctl	status,r2
  
  return context;
 201590c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2015910:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 2015914:	e0ffff03 	ldbu	r3,-4(fp)
 2015918:	008080b4 	movhi	r2,514
 201591c:	10906f04 	addi	r2,r2,16828
 2015920:	18c7883a 	add	r3,r3,r3
 2015924:	18c7883a 	add	r3,r3,r3
 2015928:	10c5883a 	add	r2,r2,r3
 201592c:	10000015 	stw	zero,0(r2)
 2015930:	e0bff317 	ldw	r2,-52(fp)
 2015934:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015938:	e0bff617 	ldw	r2,-40(fp)
 201593c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2015940:	e0bff803 	ldbu	r2,-32(fp)
 2015944:	00000506 	br	201595c <OSTaskCreate+0x198>
 2015948:	e0bff317 	ldw	r2,-52(fp)
 201594c:	e0bff915 	stw	r2,-28(fp)
 2015950:	e0bff917 	ldw	r2,-28(fp)
 2015954:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 2015958:	00800a04 	movi	r2,40
}
 201595c:	e037883a 	mov	sp,fp
 2015960:	dfc00117 	ldw	ra,4(sp)
 2015964:	df000017 	ldw	fp,0(sp)
 2015968:	dec00204 	addi	sp,sp,8
 201596c:	f800283a 	ret

02015970 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 2015970:	deffec04 	addi	sp,sp,-80
 2015974:	dfc01315 	stw	ra,76(sp)
 2015978:	df001215 	stw	fp,72(sp)
 201597c:	df001204 	addi	fp,sp,72
 2015980:	e13ffa15 	stw	r4,-24(fp)
 2015984:	e17ffb15 	stw	r5,-20(fp)
 2015988:	e1bffc15 	stw	r6,-16(fp)
 201598c:	3809883a 	mov	r4,r7
 2015990:	e0c00217 	ldw	r3,8(fp)
 2015994:	e0800617 	ldw	r2,24(fp)
 2015998:	e13ffd05 	stb	r4,-12(fp)
 201599c:	e0fffe0d 	sth	r3,-8(fp)
 20159a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 20159a4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 20159a8:	e0bffd03 	ldbu	r2,-12(fp)
 20159ac:	10800570 	cmpltui	r2,r2,21
 20159b0:	1000021e 	bne	r2,zero,20159bc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 20159b4:	00800a84 	movi	r2,42
 20159b8:	00006106 	br	2015b40 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20159bc:	0005303a 	rdctl	r2,status
 20159c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20159c4:	e0fff917 	ldw	r3,-28(fp)
 20159c8:	00bfff84 	movi	r2,-2
 20159cc:	1884703a 	and	r2,r3,r2
 20159d0:	1001703a 	wrctl	status,r2
  
  return context;
 20159d4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20159d8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 20159dc:	d0a72e03 	ldbu	r2,-25416(gp)
 20159e0:	10803fcc 	andi	r2,r2,255
 20159e4:	10000626 	beq	r2,zero,2015a00 <OSTaskCreateExt+0x90>
 20159e8:	e0bff117 	ldw	r2,-60(fp)
 20159ec:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20159f0:	e0bff217 	ldw	r2,-56(fp)
 20159f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 20159f8:	00800f04 	movi	r2,60
 20159fc:	00005006 	br	2015b40 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2015a00:	e0fffd03 	ldbu	r3,-12(fp)
 2015a04:	008080b4 	movhi	r2,514
 2015a08:	10906f04 	addi	r2,r2,16828
 2015a0c:	18c7883a 	add	r3,r3,r3
 2015a10:	18c7883a 	add	r3,r3,r3
 2015a14:	10c5883a 	add	r2,r2,r3
 2015a18:	10800017 	ldw	r2,0(r2)
 2015a1c:	1000431e 	bne	r2,zero,2015b2c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2015a20:	e0fffd03 	ldbu	r3,-12(fp)
 2015a24:	008080b4 	movhi	r2,514
 2015a28:	10906f04 	addi	r2,r2,16828
 2015a2c:	18c7883a 	add	r3,r3,r3
 2015a30:	18c7883a 	add	r3,r3,r3
 2015a34:	10c5883a 	add	r2,r2,r3
 2015a38:	00c00044 	movi	r3,1
 2015a3c:	10c00015 	stw	r3,0(r2)
 2015a40:	e0bff117 	ldw	r2,-60(fp)
 2015a44:	e0bff315 	stw	r2,-52(fp)
 2015a48:	e0bff317 	ldw	r2,-52(fp)
 2015a4c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 2015a50:	e0bfff0b 	ldhu	r2,-4(fp)
 2015a54:	100d883a 	mov	r6,r2
 2015a58:	e1400417 	ldw	r5,16(fp)
 2015a5c:	e1000317 	ldw	r4,12(fp)
 2015a60:	20169d00 	call	20169d0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 2015a64:	e0bfff0b 	ldhu	r2,-4(fp)
 2015a68:	100f883a 	mov	r7,r2
 2015a6c:	e1bffc17 	ldw	r6,-16(fp)
 2015a70:	e17ffb17 	ldw	r5,-20(fp)
 2015a74:	e13ffa17 	ldw	r4,-24(fp)
 2015a78:	2018a640 	call	2018a64 <OSTaskStkInit>
 2015a7c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 2015a80:	e0fffd03 	ldbu	r3,-12(fp)
 2015a84:	e13ffe0b 	ldhu	r4,-8(fp)
 2015a88:	e0bfff0b 	ldhu	r2,-4(fp)
 2015a8c:	d8800215 	stw	r2,8(sp)
 2015a90:	e0800517 	ldw	r2,20(fp)
 2015a94:	d8800115 	stw	r2,4(sp)
 2015a98:	e0800417 	ldw	r2,16(fp)
 2015a9c:	d8800015 	stw	r2,0(sp)
 2015aa0:	200f883a 	mov	r7,r4
 2015aa4:	e1800317 	ldw	r6,12(fp)
 2015aa8:	e17ff517 	ldw	r5,-44(fp)
 2015aac:	1809883a 	mov	r4,r3
 2015ab0:	20109d00 	call	20109d0 <OS_TCBInit>
 2015ab4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 2015ab8:	e0bff603 	ldbu	r2,-40(fp)
 2015abc:	1000061e 	bne	r2,zero,2015ad8 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 2015ac0:	d0a72043 	ldbu	r2,-25471(gp)
 2015ac4:	10803fcc 	andi	r2,r2,255
 2015ac8:	10800058 	cmpnei	r2,r2,1
 2015acc:	1000151e 	bne	r2,zero,2015b24 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 2015ad0:	20105d00 	call	20105d0 <OS_Sched>
 2015ad4:	00001306 	br	2015b24 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015ad8:	0005303a 	rdctl	r2,status
 2015adc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015ae0:	e0fff817 	ldw	r3,-32(fp)
 2015ae4:	00bfff84 	movi	r2,-2
 2015ae8:	1884703a 	and	r2,r3,r2
 2015aec:	1001703a 	wrctl	status,r2
  
  return context;
 2015af0:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2015af4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 2015af8:	e0fffd03 	ldbu	r3,-12(fp)
 2015afc:	008080b4 	movhi	r2,514
 2015b00:	10906f04 	addi	r2,r2,16828
 2015b04:	18c7883a 	add	r3,r3,r3
 2015b08:	18c7883a 	add	r3,r3,r3
 2015b0c:	10c5883a 	add	r2,r2,r3
 2015b10:	10000015 	stw	zero,0(r2)
 2015b14:	e0bff117 	ldw	r2,-60(fp)
 2015b18:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015b1c:	e0bff417 	ldw	r2,-48(fp)
 2015b20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2015b24:	e0bff603 	ldbu	r2,-40(fp)
 2015b28:	00000506 	br	2015b40 <OSTaskCreateExt+0x1d0>
 2015b2c:	e0bff117 	ldw	r2,-60(fp)
 2015b30:	e0bff715 	stw	r2,-36(fp)
 2015b34:	e0bff717 	ldw	r2,-36(fp)
 2015b38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 2015b3c:	00800a04 	movi	r2,40
}
 2015b40:	e037883a 	mov	sp,fp
 2015b44:	dfc00117 	ldw	ra,4(sp)
 2015b48:	df000017 	ldw	fp,0(sp)
 2015b4c:	dec00204 	addi	sp,sp,8
 2015b50:	f800283a 	ret

02015b54 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 2015b54:	defff404 	addi	sp,sp,-48
 2015b58:	dfc00b15 	stw	ra,44(sp)
 2015b5c:	df000a15 	stw	fp,40(sp)
 2015b60:	df000a04 	addi	fp,sp,40
 2015b64:	2005883a 	mov	r2,r4
 2015b68:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 2015b6c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 2015b70:	d0a72e03 	ldbu	r2,-25416(gp)
 2015b74:	10803fcc 	andi	r2,r2,255
 2015b78:	10000226 	beq	r2,zero,2015b84 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 2015b7c:	00801004 	movi	r2,64
 2015b80:	0000c006 	br	2015e84 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 2015b84:	e0bfff03 	ldbu	r2,-4(fp)
 2015b88:	10800518 	cmpnei	r2,r2,20
 2015b8c:	1000021e 	bne	r2,zero,2015b98 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 2015b90:	00800f84 	movi	r2,62
 2015b94:	0000bb06 	br	2015e84 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 2015b98:	e0bfff03 	ldbu	r2,-4(fp)
 2015b9c:	10800530 	cmpltui	r2,r2,20
 2015ba0:	1000051e 	bne	r2,zero,2015bb8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 2015ba4:	e0bfff03 	ldbu	r2,-4(fp)
 2015ba8:	10803fe0 	cmpeqi	r2,r2,255
 2015bac:	1000021e 	bne	r2,zero,2015bb8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 2015bb0:	00800a84 	movi	r2,42
 2015bb4:	0000b306 	br	2015e84 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015bb8:	0005303a 	rdctl	r2,status
 2015bbc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015bc0:	e0fffe17 	ldw	r3,-8(fp)
 2015bc4:	00bfff84 	movi	r2,-2
 2015bc8:	1884703a 	and	r2,r3,r2
 2015bcc:	1001703a 	wrctl	status,r2
  
  return context;
 2015bd0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2015bd4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 2015bd8:	e0bfff03 	ldbu	r2,-4(fp)
 2015bdc:	10803fd8 	cmpnei	r2,r2,255
 2015be0:	1000031e 	bne	r2,zero,2015bf0 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 2015be4:	d0a72f17 	ldw	r2,-25412(gp)
 2015be8:	10800c83 	ldbu	r2,50(r2)
 2015bec:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2015bf0:	e0ffff03 	ldbu	r3,-4(fp)
 2015bf4:	008080b4 	movhi	r2,514
 2015bf8:	10906f04 	addi	r2,r2,16828
 2015bfc:	18c7883a 	add	r3,r3,r3
 2015c00:	18c7883a 	add	r3,r3,r3
 2015c04:	10c5883a 	add	r2,r2,r3
 2015c08:	10800017 	ldw	r2,0(r2)
 2015c0c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 2015c10:	e0bff817 	ldw	r2,-32(fp)
 2015c14:	1000061e 	bne	r2,zero,2015c30 <OSTaskDel+0xdc>
 2015c18:	e0bff617 	ldw	r2,-40(fp)
 2015c1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015c20:	e0bff717 	ldw	r2,-36(fp)
 2015c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2015c28:	008010c4 	movi	r2,67
 2015c2c:	00009506 	br	2015e84 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 2015c30:	e0bff817 	ldw	r2,-32(fp)
 2015c34:	10800058 	cmpnei	r2,r2,1
 2015c38:	1000061e 	bne	r2,zero,2015c54 <OSTaskDel+0x100>
 2015c3c:	e0bff617 	ldw	r2,-40(fp)
 2015c40:	e0bff915 	stw	r2,-28(fp)
 2015c44:	e0bff917 	ldw	r2,-28(fp)
 2015c48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2015c4c:	00800f44 	movi	r2,61
 2015c50:	00008c06 	br	2015e84 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 2015c54:	e0bff817 	ldw	r2,-32(fp)
 2015c58:	10800d03 	ldbu	r2,52(r2)
 2015c5c:	10c03fcc 	andi	r3,r2,255
 2015c60:	e0bff817 	ldw	r2,-32(fp)
 2015c64:	10800d03 	ldbu	r2,52(r2)
 2015c68:	11003fcc 	andi	r4,r2,255
 2015c6c:	d0a72c44 	addi	r2,gp,-25423
 2015c70:	2085883a 	add	r2,r4,r2
 2015c74:	10800003 	ldbu	r2,0(r2)
 2015c78:	1009883a 	mov	r4,r2
 2015c7c:	e0bff817 	ldw	r2,-32(fp)
 2015c80:	10800d43 	ldbu	r2,53(r2)
 2015c84:	0084303a 	nor	r2,zero,r2
 2015c88:	2084703a 	and	r2,r4,r2
 2015c8c:	1009883a 	mov	r4,r2
 2015c90:	d0a72c44 	addi	r2,gp,-25423
 2015c94:	1885883a 	add	r2,r3,r2
 2015c98:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 2015c9c:	e0bff817 	ldw	r2,-32(fp)
 2015ca0:	10800d03 	ldbu	r2,52(r2)
 2015ca4:	10c03fcc 	andi	r3,r2,255
 2015ca8:	d0a72c44 	addi	r2,gp,-25423
 2015cac:	1885883a 	add	r2,r3,r2
 2015cb0:	10800003 	ldbu	r2,0(r2)
 2015cb4:	10803fcc 	andi	r2,r2,255
 2015cb8:	1000071e 	bne	r2,zero,2015cd8 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 2015cbc:	e0bff817 	ldw	r2,-32(fp)
 2015cc0:	10800d83 	ldbu	r2,54(r2)
 2015cc4:	0084303a 	nor	r2,zero,r2
 2015cc8:	1007883a 	mov	r3,r2
 2015ccc:	d0a72c03 	ldbu	r2,-25424(gp)
 2015cd0:	1884703a 	and	r2,r3,r2
 2015cd4:	d0a72c05 	stb	r2,-25424(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 2015cd8:	e0bff817 	ldw	r2,-32(fp)
 2015cdc:	10800717 	ldw	r2,28(r2)
 2015ce0:	10000526 	beq	r2,zero,2015cf8 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 2015ce4:	e0bff817 	ldw	r2,-32(fp)
 2015ce8:	10800717 	ldw	r2,28(r2)
 2015cec:	100b883a 	mov	r5,r2
 2015cf0:	e13ff817 	ldw	r4,-32(fp)
 2015cf4:	200ff7c0 	call	200ff7c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 2015cf8:	e0bff817 	ldw	r2,-32(fp)
 2015cfc:	10800817 	ldw	r2,32(r2)
 2015d00:	10000526 	beq	r2,zero,2015d18 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 2015d04:	e0bff817 	ldw	r2,-32(fp)
 2015d08:	10800817 	ldw	r2,32(r2)
 2015d0c:	100b883a 	mov	r5,r2
 2015d10:	e13ff817 	ldw	r4,-32(fp)
 2015d14:	20100340 	call	2010034 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 2015d18:	e0bff817 	ldw	r2,-32(fp)
 2015d1c:	10800a17 	ldw	r2,40(r2)
 2015d20:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 2015d24:	e0bffb17 	ldw	r2,-20(fp)
 2015d28:	10000226 	beq	r2,zero,2015d34 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 2015d2c:	e13ffb17 	ldw	r4,-20(fp)
 2015d30:	20124a40 	call	20124a4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 2015d34:	e0bff817 	ldw	r2,-32(fp)
 2015d38:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 2015d3c:	e0bff817 	ldw	r2,-32(fp)
 2015d40:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2015d44:	e0bff817 	ldw	r2,-32(fp)
 2015d48:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 2015d4c:	d0a72003 	ldbu	r2,-25472(gp)
 2015d50:	10803fcc 	andi	r2,r2,255
 2015d54:	10803fe0 	cmpeqi	r2,r2,255
 2015d58:	1000031e 	bne	r2,zero,2015d68 <OSTaskDel+0x214>
        OSLockNesting++;
 2015d5c:	d0a72003 	ldbu	r2,-25472(gp)
 2015d60:	10800044 	addi	r2,r2,1
 2015d64:	d0a72005 	stb	r2,-25472(gp)
 2015d68:	e0bff617 	ldw	r2,-40(fp)
 2015d6c:	e0bffd15 	stw	r2,-12(fp)
 2015d70:	e0bffd17 	ldw	r2,-12(fp)
 2015d74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 2015d78:	200fb640 	call	200fb64 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015d7c:	0005303a 	rdctl	r2,status
 2015d80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015d84:	e0fffa17 	ldw	r3,-24(fp)
 2015d88:	00bfff84 	movi	r2,-2
 2015d8c:	1884703a 	and	r2,r3,r2
 2015d90:	1001703a 	wrctl	status,r2
  
  return context;
 2015d94:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 2015d98:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 2015d9c:	d0a72003 	ldbu	r2,-25472(gp)
 2015da0:	10803fcc 	andi	r2,r2,255
 2015da4:	10000326 	beq	r2,zero,2015db4 <OSTaskDel+0x260>
        OSLockNesting--;
 2015da8:	d0a72003 	ldbu	r2,-25472(gp)
 2015dac:	10bfffc4 	addi	r2,r2,-1
 2015db0:	d0a72005 	stb	r2,-25472(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 2015db4:	e13ff817 	ldw	r4,-32(fp)
 2015db8:	2018be40 	call	2018be4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 2015dbc:	d0a72843 	ldbu	r2,-25439(gp)
 2015dc0:	10bfffc4 	addi	r2,r2,-1
 2015dc4:	d0a72845 	stb	r2,-25439(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 2015dc8:	e0ffff03 	ldbu	r3,-4(fp)
 2015dcc:	008080b4 	movhi	r2,514
 2015dd0:	10906f04 	addi	r2,r2,16828
 2015dd4:	18c7883a 	add	r3,r3,r3
 2015dd8:	18c7883a 	add	r3,r3,r3
 2015ddc:	10c5883a 	add	r2,r2,r3
 2015de0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 2015de4:	e0bff817 	ldw	r2,-32(fp)
 2015de8:	10800617 	ldw	r2,24(r2)
 2015dec:	1000071e 	bne	r2,zero,2015e0c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 2015df0:	e0bff817 	ldw	r2,-32(fp)
 2015df4:	10800517 	ldw	r2,20(r2)
 2015df8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 2015dfc:	e0bff817 	ldw	r2,-32(fp)
 2015e00:	10800517 	ldw	r2,20(r2)
 2015e04:	d0a72315 	stw	r2,-25460(gp)
 2015e08:	00000a06 	br	2015e34 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 2015e0c:	e0bff817 	ldw	r2,-32(fp)
 2015e10:	10800617 	ldw	r2,24(r2)
 2015e14:	e0fff817 	ldw	r3,-32(fp)
 2015e18:	18c00517 	ldw	r3,20(r3)
 2015e1c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 2015e20:	e0bff817 	ldw	r2,-32(fp)
 2015e24:	10800517 	ldw	r2,20(r2)
 2015e28:	e0fff817 	ldw	r3,-32(fp)
 2015e2c:	18c00617 	ldw	r3,24(r3)
 2015e30:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 2015e34:	d0e72717 	ldw	r3,-25444(gp)
 2015e38:	e0bff817 	ldw	r2,-32(fp)
 2015e3c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 2015e40:	e0bff817 	ldw	r2,-32(fp)
 2015e44:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 2015e48:	e0bff817 	ldw	r2,-32(fp)
 2015e4c:	00c00fc4 	movi	r3,63
 2015e50:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2015e54:	e0bff817 	ldw	r2,-32(fp)
 2015e58:	10001345 	stb	zero,77(r2)
 2015e5c:	e0bff617 	ldw	r2,-40(fp)
 2015e60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015e64:	e0bffc17 	ldw	r2,-16(fp)
 2015e68:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2015e6c:	d0a72043 	ldbu	r2,-25471(gp)
 2015e70:	10803fcc 	andi	r2,r2,255
 2015e74:	10800058 	cmpnei	r2,r2,1
 2015e78:	1000011e 	bne	r2,zero,2015e80 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 2015e7c:	20105d00 	call	20105d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 2015e80:	0005883a 	mov	r2,zero
}
 2015e84:	e037883a 	mov	sp,fp
 2015e88:	dfc00117 	ldw	ra,4(sp)
 2015e8c:	df000017 	ldw	fp,0(sp)
 2015e90:	dec00204 	addi	sp,sp,8
 2015e94:	f800283a 	ret

02015e98 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 2015e98:	defff504 	addi	sp,sp,-44
 2015e9c:	df000a15 	stw	fp,40(sp)
 2015ea0:	df000a04 	addi	fp,sp,40
 2015ea4:	2005883a 	mov	r2,r4
 2015ea8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2015eac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 2015eb0:	e0bfff03 	ldbu	r2,-4(fp)
 2015eb4:	10800518 	cmpnei	r2,r2,20
 2015eb8:	1000021e 	bne	r2,zero,2015ec4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 2015ebc:	00800f84 	movi	r2,62
 2015ec0:	00004506 	br	2015fd8 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2015ec4:	e0bfff03 	ldbu	r2,-4(fp)
 2015ec8:	10800530 	cmpltui	r2,r2,20
 2015ecc:	1000051e 	bne	r2,zero,2015ee4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 2015ed0:	e0bfff03 	ldbu	r2,-4(fp)
 2015ed4:	10803fe0 	cmpeqi	r2,r2,255
 2015ed8:	1000021e 	bne	r2,zero,2015ee4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 2015edc:	00800a84 	movi	r2,42
 2015ee0:	00003d06 	br	2015fd8 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 2015ee4:	e0bfff03 	ldbu	r2,-4(fp)
 2015ee8:	10803fd8 	cmpnei	r2,r2,255
 2015eec:	1000111e 	bne	r2,zero,2015f34 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015ef0:	0005303a 	rdctl	r2,status
 2015ef4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015ef8:	e0fff917 	ldw	r3,-28(fp)
 2015efc:	00bfff84 	movi	r2,-2
 2015f00:	1884703a 	and	r2,r3,r2
 2015f04:	1001703a 	wrctl	status,r2
  
  return context;
 2015f08:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 2015f0c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 2015f10:	d0a72f17 	ldw	r2,-25412(gp)
 2015f14:	10800dc3 	ldbu	r2,55(r2)
 2015f18:	e0bff805 	stb	r2,-32(fp)
 2015f1c:	e0bff617 	ldw	r2,-40(fp)
 2015f20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f24:	e0bffe17 	ldw	r2,-8(fp)
 2015f28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 2015f2c:	e0bff803 	ldbu	r2,-32(fp)
 2015f30:	00002906 	br	2015fd8 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015f34:	0005303a 	rdctl	r2,status
 2015f38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015f3c:	e0fff717 	ldw	r3,-36(fp)
 2015f40:	00bfff84 	movi	r2,-2
 2015f44:	1884703a 	and	r2,r3,r2
 2015f48:	1001703a 	wrctl	status,r2
  
  return context;
 2015f4c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2015f50:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2015f54:	e0ffff03 	ldbu	r3,-4(fp)
 2015f58:	008080b4 	movhi	r2,514
 2015f5c:	10906f04 	addi	r2,r2,16828
 2015f60:	18c7883a 	add	r3,r3,r3
 2015f64:	18c7883a 	add	r3,r3,r3
 2015f68:	10c5883a 	add	r2,r2,r3
 2015f6c:	10800017 	ldw	r2,0(r2)
 2015f70:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 2015f74:	e0bffb17 	ldw	r2,-20(fp)
 2015f78:	1000061e 	bne	r2,zero,2015f94 <OSTaskDelReq+0xfc>
 2015f7c:	e0bff617 	ldw	r2,-40(fp)
 2015f80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f84:	e0bffa17 	ldw	r2,-24(fp)
 2015f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 2015f8c:	008010c4 	movi	r2,67
 2015f90:	00001106 	br	2015fd8 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 2015f94:	e0bffb17 	ldw	r2,-20(fp)
 2015f98:	10800058 	cmpnei	r2,r2,1
 2015f9c:	1000061e 	bne	r2,zero,2015fb8 <OSTaskDelReq+0x120>
 2015fa0:	e0bff617 	ldw	r2,-40(fp)
 2015fa4:	e0bffc15 	stw	r2,-16(fp)
 2015fa8:	e0bffc17 	ldw	r2,-16(fp)
 2015fac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2015fb0:	00800f44 	movi	r2,61
 2015fb4:	00000806 	br	2015fd8 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 2015fb8:	e0bffb17 	ldw	r2,-20(fp)
 2015fbc:	00c00fc4 	movi	r3,63
 2015fc0:	10c00dc5 	stb	r3,55(r2)
 2015fc4:	e0bff617 	ldw	r2,-40(fp)
 2015fc8:	e0bffd15 	stw	r2,-12(fp)
 2015fcc:	e0bffd17 	ldw	r2,-12(fp)
 2015fd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015fd4:	0005883a 	mov	r2,zero
}
 2015fd8:	e037883a 	mov	sp,fp
 2015fdc:	df000017 	ldw	fp,0(sp)
 2015fe0:	dec00104 	addi	sp,sp,4
 2015fe4:	f800283a 	ret

02015fe8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2015fe8:	defff404 	addi	sp,sp,-48
 2015fec:	dfc00b15 	stw	ra,44(sp)
 2015ff0:	df000a15 	stw	fp,40(sp)
 2015ff4:	df000a04 	addi	fp,sp,40
 2015ff8:	2005883a 	mov	r2,r4
 2015ffc:	e17ffe15 	stw	r5,-8(fp)
 2016000:	e1bfff15 	stw	r6,-4(fp)
 2016004:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 2016008:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 201600c:	e0bfff17 	ldw	r2,-4(fp)
 2016010:	1000021e 	bne	r2,zero,201601c <OSTaskNameGet+0x34>
        return (0);
 2016014:	0005883a 	mov	r2,zero
 2016018:	00005406 	br	201616c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201601c:	e0bffd03 	ldbu	r2,-12(fp)
 2016020:	10800570 	cmpltui	r2,r2,21
 2016024:	1000081e 	bne	r2,zero,2016048 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 2016028:	e0bffd03 	ldbu	r2,-12(fp)
 201602c:	10803fe0 	cmpeqi	r2,r2,255
 2016030:	1000051e 	bne	r2,zero,2016048 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 2016034:	e0bfff17 	ldw	r2,-4(fp)
 2016038:	00c00a84 	movi	r3,42
 201603c:	10c00005 	stb	r3,0(r2)
            return (0);
 2016040:	0005883a 	mov	r2,zero
 2016044:	00004906 	br	201616c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 2016048:	e0bffe17 	ldw	r2,-8(fp)
 201604c:	1000051e 	bne	r2,zero,2016064 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 2016050:	e0bfff17 	ldw	r2,-4(fp)
 2016054:	00c00304 	movi	r3,12
 2016058:	10c00005 	stb	r3,0(r2)
        return (0);
 201605c:	0005883a 	mov	r2,zero
 2016060:	00004206 	br	201616c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 2016064:	d0a72e03 	ldbu	r2,-25416(gp)
 2016068:	10803fcc 	andi	r2,r2,255
 201606c:	10000526 	beq	r2,zero,2016084 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 2016070:	e0bfff17 	ldw	r2,-4(fp)
 2016074:	00c00444 	movi	r3,17
 2016078:	10c00005 	stb	r3,0(r2)
        return (0);
 201607c:	0005883a 	mov	r2,zero
 2016080:	00003a06 	br	201616c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016084:	0005303a 	rdctl	r2,status
 2016088:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201608c:	e0fffc17 	ldw	r3,-16(fp)
 2016090:	00bfff84 	movi	r2,-2
 2016094:	1884703a 	and	r2,r3,r2
 2016098:	1001703a 	wrctl	status,r2
  
  return context;
 201609c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 20160a0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 20160a4:	e0bffd03 	ldbu	r2,-12(fp)
 20160a8:	10803fd8 	cmpnei	r2,r2,255
 20160ac:	1000031e 	bne	r2,zero,20160bc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 20160b0:	d0a72f17 	ldw	r2,-25412(gp)
 20160b4:	10800c83 	ldbu	r2,50(r2)
 20160b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20160bc:	e0fffd03 	ldbu	r3,-12(fp)
 20160c0:	008080b4 	movhi	r2,514
 20160c4:	10906f04 	addi	r2,r2,16828
 20160c8:	18c7883a 	add	r3,r3,r3
 20160cc:	18c7883a 	add	r3,r3,r3
 20160d0:	10c5883a 	add	r2,r2,r3
 20160d4:	10800017 	ldw	r2,0(r2)
 20160d8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 20160dc:	e0bff817 	ldw	r2,-32(fp)
 20160e0:	1000091e 	bne	r2,zero,2016108 <OSTaskNameGet+0x120>
 20160e4:	e0bff617 	ldw	r2,-40(fp)
 20160e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20160ec:	e0bff717 	ldw	r2,-36(fp)
 20160f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20160f4:	e0bfff17 	ldw	r2,-4(fp)
 20160f8:	00c010c4 	movi	r3,67
 20160fc:	10c00005 	stb	r3,0(r2)
        return (0);
 2016100:	0005883a 	mov	r2,zero
 2016104:	00001906 	br	201616c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 2016108:	e0bff817 	ldw	r2,-32(fp)
 201610c:	10800058 	cmpnei	r2,r2,1
 2016110:	1000091e 	bne	r2,zero,2016138 <OSTaskNameGet+0x150>
 2016114:	e0bff617 	ldw	r2,-40(fp)
 2016118:	e0bff915 	stw	r2,-28(fp)
 201611c:	e0bff917 	ldw	r2,-28(fp)
 2016120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2016124:	e0bfff17 	ldw	r2,-4(fp)
 2016128:	00c010c4 	movi	r3,67
 201612c:	10c00005 	stb	r3,0(r2)
        return (0);
 2016130:	0005883a 	mov	r2,zero
 2016134:	00000d06 	br	201616c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 2016138:	e0bff817 	ldw	r2,-32(fp)
 201613c:	10801304 	addi	r2,r2,76
 2016140:	100b883a 	mov	r5,r2
 2016144:	e13ffe17 	ldw	r4,-8(fp)
 2016148:	20107140 	call	2010714 <OS_StrCopy>
 201614c:	e0bffb05 	stb	r2,-20(fp)
 2016150:	e0bff617 	ldw	r2,-40(fp)
 2016154:	e0bffa15 	stw	r2,-24(fp)
 2016158:	e0bffa17 	ldw	r2,-24(fp)
 201615c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016160:	e0bfff17 	ldw	r2,-4(fp)
 2016164:	10000005 	stb	zero,0(r2)
    return (len);
 2016168:	e0bffb03 	ldbu	r2,-20(fp)
}
 201616c:	e037883a 	mov	sp,fp
 2016170:	dfc00117 	ldw	ra,4(sp)
 2016174:	df000017 	ldw	fp,0(sp)
 2016178:	dec00204 	addi	sp,sp,8
 201617c:	f800283a 	ret

02016180 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 2016180:	defff304 	addi	sp,sp,-52
 2016184:	dfc00c15 	stw	ra,48(sp)
 2016188:	df000b15 	stw	fp,44(sp)
 201618c:	df000b04 	addi	fp,sp,44
 2016190:	2005883a 	mov	r2,r4
 2016194:	e17ffe15 	stw	r5,-8(fp)
 2016198:	e1bfff15 	stw	r6,-4(fp)
 201619c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 20161a0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20161a4:	e0bfff17 	ldw	r2,-4(fp)
 20161a8:	10005c26 	beq	r2,zero,201631c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 20161ac:	e0bffd03 	ldbu	r2,-12(fp)
 20161b0:	10800570 	cmpltui	r2,r2,21
 20161b4:	1000071e 	bne	r2,zero,20161d4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 20161b8:	e0bffd03 	ldbu	r2,-12(fp)
 20161bc:	10803fe0 	cmpeqi	r2,r2,255
 20161c0:	1000041e 	bne	r2,zero,20161d4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 20161c4:	e0bfff17 	ldw	r2,-4(fp)
 20161c8:	00c00a84 	movi	r3,42
 20161cc:	10c00005 	stb	r3,0(r2)
            return;
 20161d0:	00005306 	br	2016320 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 20161d4:	e0bffe17 	ldw	r2,-8(fp)
 20161d8:	1000041e 	bne	r2,zero,20161ec <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 20161dc:	e0bfff17 	ldw	r2,-4(fp)
 20161e0:	00c00304 	movi	r3,12
 20161e4:	10c00005 	stb	r3,0(r2)
        return;
 20161e8:	00004d06 	br	2016320 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 20161ec:	d0a72e03 	ldbu	r2,-25416(gp)
 20161f0:	10803fcc 	andi	r2,r2,255
 20161f4:	10000426 	beq	r2,zero,2016208 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 20161f8:	e0bfff17 	ldw	r2,-4(fp)
 20161fc:	00c00484 	movi	r3,18
 2016200:	10c00005 	stb	r3,0(r2)
        return;
 2016204:	00004606 	br	2016320 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016208:	0005303a 	rdctl	r2,status
 201620c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016210:	e0fffc17 	ldw	r3,-16(fp)
 2016214:	00bfff84 	movi	r2,-2
 2016218:	1884703a 	and	r2,r3,r2
 201621c:	1001703a 	wrctl	status,r2
  
  return context;
 2016220:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2016224:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 2016228:	e0bffd03 	ldbu	r2,-12(fp)
 201622c:	10803fd8 	cmpnei	r2,r2,255
 2016230:	1000031e 	bne	r2,zero,2016240 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 2016234:	d0a72f17 	ldw	r2,-25412(gp)
 2016238:	10800c83 	ldbu	r2,50(r2)
 201623c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016240:	e0fffd03 	ldbu	r3,-12(fp)
 2016244:	008080b4 	movhi	r2,514
 2016248:	10906f04 	addi	r2,r2,16828
 201624c:	18c7883a 	add	r3,r3,r3
 2016250:	18c7883a 	add	r3,r3,r3
 2016254:	10c5883a 	add	r2,r2,r3
 2016258:	10800017 	ldw	r2,0(r2)
 201625c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 2016260:	e0bff717 	ldw	r2,-36(fp)
 2016264:	1000081e 	bne	r2,zero,2016288 <OSTaskNameSet+0x108>
 2016268:	e0bff517 	ldw	r2,-44(fp)
 201626c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016270:	e0bff617 	ldw	r2,-40(fp)
 2016274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2016278:	e0bfff17 	ldw	r2,-4(fp)
 201627c:	00c010c4 	movi	r3,67
 2016280:	10c00005 	stb	r3,0(r2)
        return;
 2016284:	00002606 	br	2016320 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 2016288:	e0bff717 	ldw	r2,-36(fp)
 201628c:	10800058 	cmpnei	r2,r2,1
 2016290:	1000081e 	bne	r2,zero,20162b4 <OSTaskNameSet+0x134>
 2016294:	e0bff517 	ldw	r2,-44(fp)
 2016298:	e0bff815 	stw	r2,-32(fp)
 201629c:	e0bff817 	ldw	r2,-32(fp)
 20162a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20162a4:	e0bfff17 	ldw	r2,-4(fp)
 20162a8:	00c010c4 	movi	r3,67
 20162ac:	10c00005 	stb	r3,0(r2)
        return;
 20162b0:	00001b06 	br	2016320 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 20162b4:	e13ffe17 	ldw	r4,-8(fp)
 20162b8:	20107880 	call	2010788 <OS_StrLen>
 20162bc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 20162c0:	e0bffa03 	ldbu	r2,-24(fp)
 20162c4:	10800830 	cmpltui	r2,r2,32
 20162c8:	1000081e 	bne	r2,zero,20162ec <OSTaskNameSet+0x16c>
 20162cc:	e0bff517 	ldw	r2,-44(fp)
 20162d0:	e0bff915 	stw	r2,-28(fp)
 20162d4:	e0bff917 	ldw	r2,-28(fp)
 20162d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 20162dc:	e0bfff17 	ldw	r2,-4(fp)
 20162e0:	00c01044 	movi	r3,65
 20162e4:	10c00005 	stb	r3,0(r2)
        return;
 20162e8:	00000d06 	br	2016320 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 20162ec:	e0bff717 	ldw	r2,-36(fp)
 20162f0:	10801304 	addi	r2,r2,76
 20162f4:	e17ffe17 	ldw	r5,-8(fp)
 20162f8:	1009883a 	mov	r4,r2
 20162fc:	20107140 	call	2010714 <OS_StrCopy>
 2016300:	e0bff517 	ldw	r2,-44(fp)
 2016304:	e0bffb15 	stw	r2,-20(fp)
 2016308:	e0bffb17 	ldw	r2,-20(fp)
 201630c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016310:	e0bfff17 	ldw	r2,-4(fp)
 2016314:	10000005 	stb	zero,0(r2)
 2016318:	00000106 	br	2016320 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 201631c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 2016320:	e037883a 	mov	sp,fp
 2016324:	dfc00117 	ldw	ra,4(sp)
 2016328:	df000017 	ldw	fp,0(sp)
 201632c:	dec00204 	addi	sp,sp,8
 2016330:	f800283a 	ret

02016334 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 2016334:	defff404 	addi	sp,sp,-48
 2016338:	dfc00b15 	stw	ra,44(sp)
 201633c:	df000a15 	stw	fp,40(sp)
 2016340:	df000a04 	addi	fp,sp,40
 2016344:	2005883a 	mov	r2,r4
 2016348:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 201634c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 2016350:	e0bfff03 	ldbu	r2,-4(fp)
 2016354:	10800530 	cmpltui	r2,r2,20
 2016358:	1000021e 	bne	r2,zero,2016364 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 201635c:	00800a84 	movi	r2,42
 2016360:	00006406 	br	20164f4 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016364:	0005303a 	rdctl	r2,status
 2016368:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201636c:	e0fffe17 	ldw	r3,-8(fp)
 2016370:	00bfff84 	movi	r2,-2
 2016374:	1884703a 	and	r2,r3,r2
 2016378:	1001703a 	wrctl	status,r2
  
  return context;
 201637c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016380:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 2016384:	e0ffff03 	ldbu	r3,-4(fp)
 2016388:	008080b4 	movhi	r2,514
 201638c:	10906f04 	addi	r2,r2,16828
 2016390:	18c7883a 	add	r3,r3,r3
 2016394:	18c7883a 	add	r3,r3,r3
 2016398:	10c5883a 	add	r2,r2,r3
 201639c:	10800017 	ldw	r2,0(r2)
 20163a0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 20163a4:	e0bff817 	ldw	r2,-32(fp)
 20163a8:	1000061e 	bne	r2,zero,20163c4 <OSTaskResume+0x90>
 20163ac:	e0bff617 	ldw	r2,-40(fp)
 20163b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20163b4:	e0bff717 	ldw	r2,-36(fp)
 20163b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 20163bc:	00801184 	movi	r2,70
 20163c0:	00004c06 	br	20164f4 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 20163c4:	e0bff817 	ldw	r2,-32(fp)
 20163c8:	10800058 	cmpnei	r2,r2,1
 20163cc:	1000061e 	bne	r2,zero,20163e8 <OSTaskResume+0xb4>
 20163d0:	e0bff617 	ldw	r2,-40(fp)
 20163d4:	e0bff915 	stw	r2,-28(fp)
 20163d8:	e0bff917 	ldw	r2,-28(fp)
 20163dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20163e0:	008010c4 	movi	r2,67
 20163e4:	00004306 	br	20164f4 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 20163e8:	e0bff817 	ldw	r2,-32(fp)
 20163ec:	10800c03 	ldbu	r2,48(r2)
 20163f0:	10803fcc 	andi	r2,r2,255
 20163f4:	1080020c 	andi	r2,r2,8
 20163f8:	10003926 	beq	r2,zero,20164e0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 20163fc:	e0bff817 	ldw	r2,-32(fp)
 2016400:	10c00c03 	ldbu	r3,48(r2)
 2016404:	00bffdc4 	movi	r2,-9
 2016408:	1884703a 	and	r2,r3,r2
 201640c:	1007883a 	mov	r3,r2
 2016410:	e0bff817 	ldw	r2,-32(fp)
 2016414:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 2016418:	e0bff817 	ldw	r2,-32(fp)
 201641c:	10800c03 	ldbu	r2,48(r2)
 2016420:	10803fcc 	andi	r2,r2,255
 2016424:	1000281e 	bne	r2,zero,20164c8 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 2016428:	e0bff817 	ldw	r2,-32(fp)
 201642c:	10800b8b 	ldhu	r2,46(r2)
 2016430:	10bfffcc 	andi	r2,r2,65535
 2016434:	10001f1e 	bne	r2,zero,20164b4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 2016438:	e0bff817 	ldw	r2,-32(fp)
 201643c:	10c00d83 	ldbu	r3,54(r2)
 2016440:	d0a72c03 	ldbu	r2,-25424(gp)
 2016444:	1884b03a 	or	r2,r3,r2
 2016448:	d0a72c05 	stb	r2,-25424(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201644c:	e0bff817 	ldw	r2,-32(fp)
 2016450:	10800d03 	ldbu	r2,52(r2)
 2016454:	10c03fcc 	andi	r3,r2,255
 2016458:	e0bff817 	ldw	r2,-32(fp)
 201645c:	10800d03 	ldbu	r2,52(r2)
 2016460:	11003fcc 	andi	r4,r2,255
 2016464:	d0a72c44 	addi	r2,gp,-25423
 2016468:	2085883a 	add	r2,r4,r2
 201646c:	11000003 	ldbu	r4,0(r2)
 2016470:	e0bff817 	ldw	r2,-32(fp)
 2016474:	10800d43 	ldbu	r2,53(r2)
 2016478:	2084b03a 	or	r2,r4,r2
 201647c:	1009883a 	mov	r4,r2
 2016480:	d0a72c44 	addi	r2,gp,-25423
 2016484:	1885883a 	add	r2,r3,r2
 2016488:	11000005 	stb	r4,0(r2)
 201648c:	e0bff617 	ldw	r2,-40(fp)
 2016490:	e0bffa15 	stw	r2,-24(fp)
 2016494:	e0bffa17 	ldw	r2,-24(fp)
 2016498:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 201649c:	d0a72043 	ldbu	r2,-25471(gp)
 20164a0:	10803fcc 	andi	r2,r2,255
 20164a4:	10800058 	cmpnei	r2,r2,1
 20164a8:	10000b1e 	bne	r2,zero,20164d8 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 20164ac:	20105d00 	call	20105d0 <OS_Sched>
 20164b0:	00000906 	br	20164d8 <OSTaskResume+0x1a4>
 20164b4:	e0bff617 	ldw	r2,-40(fp)
 20164b8:	e0bffb15 	stw	r2,-20(fp)
 20164bc:	e0bffb17 	ldw	r2,-20(fp)
 20164c0:	1001703a 	wrctl	status,r2
 20164c4:	00000406 	br	20164d8 <OSTaskResume+0x1a4>
 20164c8:	e0bff617 	ldw	r2,-40(fp)
 20164cc:	e0bffc15 	stw	r2,-16(fp)
 20164d0:	e0bffc17 	ldw	r2,-16(fp)
 20164d4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 20164d8:	0005883a 	mov	r2,zero
 20164dc:	00000506 	br	20164f4 <OSTaskResume+0x1c0>
 20164e0:	e0bff617 	ldw	r2,-40(fp)
 20164e4:	e0bffd15 	stw	r2,-12(fp)
 20164e8:	e0bffd17 	ldw	r2,-12(fp)
 20164ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 20164f0:	00801104 	movi	r2,68
}
 20164f4:	e037883a 	mov	sp,fp
 20164f8:	dfc00117 	ldw	ra,4(sp)
 20164fc:	df000017 	ldw	fp,0(sp)
 2016500:	dec00204 	addi	sp,sp,8
 2016504:	f800283a 	ret

02016508 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 2016508:	defff304 	addi	sp,sp,-52
 201650c:	df000c15 	stw	fp,48(sp)
 2016510:	df000c04 	addi	fp,sp,48
 2016514:	2005883a 	mov	r2,r4
 2016518:	e17fff15 	stw	r5,-4(fp)
 201651c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2016520:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 2016524:	e0bffe03 	ldbu	r2,-8(fp)
 2016528:	10800570 	cmpltui	r2,r2,21
 201652c:	1000051e 	bne	r2,zero,2016544 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 2016530:	e0bffe03 	ldbu	r2,-8(fp)
 2016534:	10803fe0 	cmpeqi	r2,r2,255
 2016538:	1000021e 	bne	r2,zero,2016544 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 201653c:	00800a84 	movi	r2,42
 2016540:	00005d06 	br	20166b8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 2016544:	e0bfff17 	ldw	r2,-4(fp)
 2016548:	1000021e 	bne	r2,zero,2016554 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 201654c:	00800244 	movi	r2,9
 2016550:	00005906 	br	20166b8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 2016554:	e0bfff17 	ldw	r2,-4(fp)
 2016558:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 201655c:	e0bfff17 	ldw	r2,-4(fp)
 2016560:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016564:	0005303a 	rdctl	r2,status
 2016568:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201656c:	e0fffd17 	ldw	r3,-12(fp)
 2016570:	00bfff84 	movi	r2,-2
 2016574:	1884703a 	and	r2,r3,r2
 2016578:	1001703a 	wrctl	status,r2
  
  return context;
 201657c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 2016580:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 2016584:	e0bffe03 	ldbu	r2,-8(fp)
 2016588:	10803fd8 	cmpnei	r2,r2,255
 201658c:	1000031e 	bne	r2,zero,201659c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 2016590:	d0a72f17 	ldw	r2,-25412(gp)
 2016594:	10800c83 	ldbu	r2,50(r2)
 2016598:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201659c:	e0fffe03 	ldbu	r3,-8(fp)
 20165a0:	008080b4 	movhi	r2,514
 20165a4:	10906f04 	addi	r2,r2,16828
 20165a8:	18c7883a 	add	r3,r3,r3
 20165ac:	18c7883a 	add	r3,r3,r3
 20165b0:	10c5883a 	add	r2,r2,r3
 20165b4:	10800017 	ldw	r2,0(r2)
 20165b8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 20165bc:	e0bff817 	ldw	r2,-32(fp)
 20165c0:	1000061e 	bne	r2,zero,20165dc <OSTaskStkChk+0xd4>
 20165c4:	e0bff617 	ldw	r2,-40(fp)
 20165c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20165cc:	e0bff717 	ldw	r2,-36(fp)
 20165d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20165d4:	008010c4 	movi	r2,67
 20165d8:	00003706 	br	20166b8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 20165dc:	e0bff817 	ldw	r2,-32(fp)
 20165e0:	10800058 	cmpnei	r2,r2,1
 20165e4:	1000061e 	bne	r2,zero,2016600 <OSTaskStkChk+0xf8>
 20165e8:	e0bff617 	ldw	r2,-40(fp)
 20165ec:	e0bff915 	stw	r2,-28(fp)
 20165f0:	e0bff917 	ldw	r2,-28(fp)
 20165f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20165f8:	008010c4 	movi	r2,67
 20165fc:	00002e06 	br	20166b8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 2016600:	e0bff817 	ldw	r2,-32(fp)
 2016604:	1080040b 	ldhu	r2,16(r2)
 2016608:	10bfffcc 	andi	r2,r2,65535
 201660c:	1080004c 	andi	r2,r2,1
 2016610:	1000061e 	bne	r2,zero,201662c <OSTaskStkChk+0x124>
 2016614:	e0bff617 	ldw	r2,-40(fp)
 2016618:	e0bffa15 	stw	r2,-24(fp)
 201661c:	e0bffa17 	ldw	r2,-24(fp)
 2016620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 2016624:	00801144 	movi	r2,69
 2016628:	00002306 	br	20166b8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 201662c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 2016630:	e0bff817 	ldw	r2,-32(fp)
 2016634:	10800317 	ldw	r2,12(r2)
 2016638:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 201663c:	e0bff817 	ldw	r2,-32(fp)
 2016640:	10800217 	ldw	r2,8(r2)
 2016644:	e0bff415 	stw	r2,-48(fp)
 2016648:	e0bff617 	ldw	r2,-40(fp)
 201664c:	e0bffb15 	stw	r2,-20(fp)
 2016650:	e0bffb17 	ldw	r2,-20(fp)
 2016654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2016658:	00000306 	br	2016668 <OSTaskStkChk+0x160>
        nfree++;
 201665c:	e0bff517 	ldw	r2,-44(fp)
 2016660:	10800044 	addi	r2,r2,1
 2016664:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2016668:	e0bff417 	ldw	r2,-48(fp)
 201666c:	10c00104 	addi	r3,r2,4
 2016670:	e0fff415 	stw	r3,-48(fp)
 2016674:	10800017 	ldw	r2,0(r2)
 2016678:	103ff826 	beq	r2,zero,201665c <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 201667c:	e0bff517 	ldw	r2,-44(fp)
 2016680:	1085883a 	add	r2,r2,r2
 2016684:	1085883a 	add	r2,r2,r2
 2016688:	1007883a 	mov	r3,r2
 201668c:	e0bfff17 	ldw	r2,-4(fp)
 2016690:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 2016694:	e0fffc17 	ldw	r3,-16(fp)
 2016698:	e0bff517 	ldw	r2,-44(fp)
 201669c:	1885c83a 	sub	r2,r3,r2
 20166a0:	1085883a 	add	r2,r2,r2
 20166a4:	1085883a 	add	r2,r2,r2
 20166a8:	1007883a 	mov	r3,r2
 20166ac:	e0bfff17 	ldw	r2,-4(fp)
 20166b0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 20166b4:	0005883a 	mov	r2,zero
}
 20166b8:	e037883a 	mov	sp,fp
 20166bc:	df000017 	ldw	fp,0(sp)
 20166c0:	dec00104 	addi	sp,sp,4
 20166c4:	f800283a 	ret

020166c8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 20166c8:	defff504 	addi	sp,sp,-44
 20166cc:	dfc00a15 	stw	ra,40(sp)
 20166d0:	df000915 	stw	fp,36(sp)
 20166d4:	df000904 	addi	fp,sp,36
 20166d8:	2005883a 	mov	r2,r4
 20166dc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20166e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 20166e4:	e0bfff03 	ldbu	r2,-4(fp)
 20166e8:	10800518 	cmpnei	r2,r2,20
 20166ec:	1000021e 	bne	r2,zero,20166f8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 20166f0:	008011c4 	movi	r2,71
 20166f4:	00006806 	br	2016898 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 20166f8:	e0bfff03 	ldbu	r2,-4(fp)
 20166fc:	10800530 	cmpltui	r2,r2,20
 2016700:	1000051e 	bne	r2,zero,2016718 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 2016704:	e0bfff03 	ldbu	r2,-4(fp)
 2016708:	10803fe0 	cmpeqi	r2,r2,255
 201670c:	1000021e 	bne	r2,zero,2016718 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 2016710:	00800a84 	movi	r2,42
 2016714:	00006006 	br	2016898 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016718:	0005303a 	rdctl	r2,status
 201671c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016720:	e0fffe17 	ldw	r3,-8(fp)
 2016724:	00bfff84 	movi	r2,-2
 2016728:	1884703a 	and	r2,r3,r2
 201672c:	1001703a 	wrctl	status,r2
  
  return context;
 2016730:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 2016734:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 2016738:	e0bfff03 	ldbu	r2,-4(fp)
 201673c:	10803fd8 	cmpnei	r2,r2,255
 2016740:	1000061e 	bne	r2,zero,201675c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 2016744:	d0a72f17 	ldw	r2,-25412(gp)
 2016748:	10800c83 	ldbu	r2,50(r2)
 201674c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 2016750:	00800044 	movi	r2,1
 2016754:	e0bff705 	stb	r2,-36(fp)
 2016758:	00000906 	br	2016780 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 201675c:	d0a72f17 	ldw	r2,-25412(gp)
 2016760:	10800c83 	ldbu	r2,50(r2)
 2016764:	10c03fcc 	andi	r3,r2,255
 2016768:	e0bfff03 	ldbu	r2,-4(fp)
 201676c:	1880031e 	bne	r3,r2,201677c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 2016770:	00800044 	movi	r2,1
 2016774:	e0bff705 	stb	r2,-36(fp)
 2016778:	00000106 	br	2016780 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 201677c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016780:	e0ffff03 	ldbu	r3,-4(fp)
 2016784:	008080b4 	movhi	r2,514
 2016788:	10906f04 	addi	r2,r2,16828
 201678c:	18c7883a 	add	r3,r3,r3
 2016790:	18c7883a 	add	r3,r3,r3
 2016794:	10c5883a 	add	r2,r2,r3
 2016798:	10800017 	ldw	r2,0(r2)
 201679c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 20167a0:	e0bffa17 	ldw	r2,-24(fp)
 20167a4:	1000061e 	bne	r2,zero,20167c0 <OSTaskSuspend+0xf8>
 20167a8:	e0bff817 	ldw	r2,-32(fp)
 20167ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20167b0:	e0bff917 	ldw	r2,-28(fp)
 20167b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 20167b8:	00801204 	movi	r2,72
 20167bc:	00003606 	br	2016898 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 20167c0:	e0bffa17 	ldw	r2,-24(fp)
 20167c4:	10800058 	cmpnei	r2,r2,1
 20167c8:	1000061e 	bne	r2,zero,20167e4 <OSTaskSuspend+0x11c>
 20167cc:	e0bff817 	ldw	r2,-32(fp)
 20167d0:	e0bffb15 	stw	r2,-20(fp)
 20167d4:	e0bffb17 	ldw	r2,-20(fp)
 20167d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20167dc:	008010c4 	movi	r2,67
 20167e0:	00002d06 	br	2016898 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 20167e4:	e0bffa17 	ldw	r2,-24(fp)
 20167e8:	10800d03 	ldbu	r2,52(r2)
 20167ec:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 20167f0:	e0fffd03 	ldbu	r3,-12(fp)
 20167f4:	e13ffd03 	ldbu	r4,-12(fp)
 20167f8:	d0a72c44 	addi	r2,gp,-25423
 20167fc:	2085883a 	add	r2,r4,r2
 2016800:	10800003 	ldbu	r2,0(r2)
 2016804:	1009883a 	mov	r4,r2
 2016808:	e0bffa17 	ldw	r2,-24(fp)
 201680c:	10800d43 	ldbu	r2,53(r2)
 2016810:	0084303a 	nor	r2,zero,r2
 2016814:	2084703a 	and	r2,r4,r2
 2016818:	1009883a 	mov	r4,r2
 201681c:	d0a72c44 	addi	r2,gp,-25423
 2016820:	1885883a 	add	r2,r3,r2
 2016824:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 2016828:	e0fffd03 	ldbu	r3,-12(fp)
 201682c:	d0a72c44 	addi	r2,gp,-25423
 2016830:	1885883a 	add	r2,r3,r2
 2016834:	10800003 	ldbu	r2,0(r2)
 2016838:	10803fcc 	andi	r2,r2,255
 201683c:	1000071e 	bne	r2,zero,201685c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 2016840:	e0bffa17 	ldw	r2,-24(fp)
 2016844:	10800d83 	ldbu	r2,54(r2)
 2016848:	0084303a 	nor	r2,zero,r2
 201684c:	1007883a 	mov	r3,r2
 2016850:	d0a72c03 	ldbu	r2,-25424(gp)
 2016854:	1884703a 	and	r2,r3,r2
 2016858:	d0a72c05 	stb	r2,-25424(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 201685c:	e0bffa17 	ldw	r2,-24(fp)
 2016860:	10800c03 	ldbu	r2,48(r2)
 2016864:	10800214 	ori	r2,r2,8
 2016868:	1007883a 	mov	r3,r2
 201686c:	e0bffa17 	ldw	r2,-24(fp)
 2016870:	10c00c05 	stb	r3,48(r2)
 2016874:	e0bff817 	ldw	r2,-32(fp)
 2016878:	e0bffc15 	stw	r2,-16(fp)
 201687c:	e0bffc17 	ldw	r2,-16(fp)
 2016880:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 2016884:	e0bff703 	ldbu	r2,-36(fp)
 2016888:	10800058 	cmpnei	r2,r2,1
 201688c:	1000011e 	bne	r2,zero,2016894 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 2016890:	20105d00 	call	20105d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 2016894:	0005883a 	mov	r2,zero
}
 2016898:	e037883a 	mov	sp,fp
 201689c:	dfc00117 	ldw	ra,4(sp)
 20168a0:	df000017 	ldw	fp,0(sp)
 20168a4:	dec00204 	addi	sp,sp,8
 20168a8:	f800283a 	ret

020168ac <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 20168ac:	defff604 	addi	sp,sp,-40
 20168b0:	dfc00915 	stw	ra,36(sp)
 20168b4:	df000815 	stw	fp,32(sp)
 20168b8:	df000804 	addi	fp,sp,32
 20168bc:	2005883a 	mov	r2,r4
 20168c0:	e17fff15 	stw	r5,-4(fp)
 20168c4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20168c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 20168cc:	e0bffe03 	ldbu	r2,-8(fp)
 20168d0:	10800570 	cmpltui	r2,r2,21
 20168d4:	1000051e 	bne	r2,zero,20168ec <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 20168d8:	e0bffe03 	ldbu	r2,-8(fp)
 20168dc:	10803fe0 	cmpeqi	r2,r2,255
 20168e0:	1000021e 	bne	r2,zero,20168ec <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 20168e4:	00800a84 	movi	r2,42
 20168e8:	00003406 	br	20169bc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 20168ec:	e0bfff17 	ldw	r2,-4(fp)
 20168f0:	1000021e 	bne	r2,zero,20168fc <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 20168f4:	00800244 	movi	r2,9
 20168f8:	00003006 	br	20169bc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20168fc:	0005303a 	rdctl	r2,status
 2016900:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016904:	e0fffd17 	ldw	r3,-12(fp)
 2016908:	00bfff84 	movi	r2,-2
 201690c:	1884703a 	and	r2,r3,r2
 2016910:	1001703a 	wrctl	status,r2
  
  return context;
 2016914:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016918:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201691c:	e0bffe03 	ldbu	r2,-8(fp)
 2016920:	10803fd8 	cmpnei	r2,r2,255
 2016924:	1000031e 	bne	r2,zero,2016934 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 2016928:	d0a72f17 	ldw	r2,-25412(gp)
 201692c:	10800c83 	ldbu	r2,50(r2)
 2016930:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016934:	e0fffe03 	ldbu	r3,-8(fp)
 2016938:	008080b4 	movhi	r2,514
 201693c:	10906f04 	addi	r2,r2,16828
 2016940:	18c7883a 	add	r3,r3,r3
 2016944:	18c7883a 	add	r3,r3,r3
 2016948:	10c5883a 	add	r2,r2,r3
 201694c:	10800017 	ldw	r2,0(r2)
 2016950:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 2016954:	e0bffa17 	ldw	r2,-24(fp)
 2016958:	1000061e 	bne	r2,zero,2016974 <OSTaskQuery+0xc8>
 201695c:	e0bff817 	ldw	r2,-32(fp)
 2016960:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016964:	e0bff917 	ldw	r2,-28(fp)
 2016968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 201696c:	00800a44 	movi	r2,41
 2016970:	00001206 	br	20169bc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 2016974:	e0bffa17 	ldw	r2,-24(fp)
 2016978:	10800058 	cmpnei	r2,r2,1
 201697c:	1000061e 	bne	r2,zero,2016998 <OSTaskQuery+0xec>
 2016980:	e0bff817 	ldw	r2,-32(fp)
 2016984:	e0bffb15 	stw	r2,-20(fp)
 2016988:	e0bffb17 	ldw	r2,-20(fp)
 201698c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016990:	008010c4 	movi	r2,67
 2016994:	00000906 	br	20169bc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 2016998:	01801b04 	movi	r6,108
 201699c:	e17ffa17 	ldw	r5,-24(fp)
 20169a0:	e13fff17 	ldw	r4,-4(fp)
 20169a4:	20105680 	call	2010568 <OS_MemCopy>
 20169a8:	e0bff817 	ldw	r2,-32(fp)
 20169ac:	e0bffc15 	stw	r2,-16(fp)
 20169b0:	e0bffc17 	ldw	r2,-16(fp)
 20169b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20169b8:	0005883a 	mov	r2,zero
}
 20169bc:	e037883a 	mov	sp,fp
 20169c0:	dfc00117 	ldw	ra,4(sp)
 20169c4:	df000017 	ldw	fp,0(sp)
 20169c8:	dec00204 	addi	sp,sp,8
 20169cc:	f800283a 	ret

020169d0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 20169d0:	defffc04 	addi	sp,sp,-16
 20169d4:	df000315 	stw	fp,12(sp)
 20169d8:	df000304 	addi	fp,sp,12
 20169dc:	e13ffd15 	stw	r4,-12(fp)
 20169e0:	e17ffe15 	stw	r5,-8(fp)
 20169e4:	3005883a 	mov	r2,r6
 20169e8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 20169ec:	e0bfff0b 	ldhu	r2,-4(fp)
 20169f0:	1080004c 	andi	r2,r2,1
 20169f4:	10000d26 	beq	r2,zero,2016a2c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 20169f8:	e0bfff0b 	ldhu	r2,-4(fp)
 20169fc:	1080008c 	andi	r2,r2,2
 2016a00:	10000a26 	beq	r2,zero,2016a2c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2016a04:	00000706 	br	2016a24 <OS_TaskStkClr+0x54>
                size--;
 2016a08:	e0bffe17 	ldw	r2,-8(fp)
 2016a0c:	10bfffc4 	addi	r2,r2,-1
 2016a10:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 2016a14:	e0bffd17 	ldw	r2,-12(fp)
 2016a18:	10c00104 	addi	r3,r2,4
 2016a1c:	e0fffd15 	stw	r3,-12(fp)
 2016a20:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2016a24:	e0bffe17 	ldw	r2,-8(fp)
 2016a28:	103ff71e 	bne	r2,zero,2016a08 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 2016a2c:	0001883a 	nop
 2016a30:	e037883a 	mov	sp,fp
 2016a34:	df000017 	ldw	fp,0(sp)
 2016a38:	dec00104 	addi	sp,sp,4
 2016a3c:	f800283a 	ret

02016a40 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 2016a40:	defff904 	addi	sp,sp,-28
 2016a44:	dfc00615 	stw	ra,24(sp)
 2016a48:	df000515 	stw	fp,20(sp)
 2016a4c:	df000504 	addi	fp,sp,20
 2016a50:	2005883a 	mov	r2,r4
 2016a54:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016a58:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016a5c:	d0a72e03 	ldbu	r2,-25416(gp)
 2016a60:	10803fcc 	andi	r2,r2,255
 2016a64:	1000311e 	bne	r2,zero,2016b2c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 2016a68:	e0bfff0b 	ldhu	r2,-4(fp)
 2016a6c:	10003026 	beq	r2,zero,2016b30 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016a70:	0005303a 	rdctl	r2,status
 2016a74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016a78:	e0fffe17 	ldw	r3,-8(fp)
 2016a7c:	00bfff84 	movi	r2,-2
 2016a80:	1884703a 	and	r2,r3,r2
 2016a84:	1001703a 	wrctl	status,r2
  
  return context;
 2016a88:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2016a8c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 2016a90:	d0a72f17 	ldw	r2,-25412(gp)
 2016a94:	10800d03 	ldbu	r2,52(r2)
 2016a98:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2016a9c:	e0fffd03 	ldbu	r3,-12(fp)
 2016aa0:	e13ffd03 	ldbu	r4,-12(fp)
 2016aa4:	d0a72c44 	addi	r2,gp,-25423
 2016aa8:	2085883a 	add	r2,r4,r2
 2016aac:	10800003 	ldbu	r2,0(r2)
 2016ab0:	1009883a 	mov	r4,r2
 2016ab4:	d0a72f17 	ldw	r2,-25412(gp)
 2016ab8:	10800d43 	ldbu	r2,53(r2)
 2016abc:	0084303a 	nor	r2,zero,r2
 2016ac0:	2084703a 	and	r2,r4,r2
 2016ac4:	1009883a 	mov	r4,r2
 2016ac8:	d0a72c44 	addi	r2,gp,-25423
 2016acc:	1885883a 	add	r2,r3,r2
 2016ad0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 2016ad4:	e0fffd03 	ldbu	r3,-12(fp)
 2016ad8:	d0a72c44 	addi	r2,gp,-25423
 2016adc:	1885883a 	add	r2,r3,r2
 2016ae0:	10800003 	ldbu	r2,0(r2)
 2016ae4:	10803fcc 	andi	r2,r2,255
 2016ae8:	1000071e 	bne	r2,zero,2016b08 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2016aec:	d0a72f17 	ldw	r2,-25412(gp)
 2016af0:	10800d83 	ldbu	r2,54(r2)
 2016af4:	0084303a 	nor	r2,zero,r2
 2016af8:	1007883a 	mov	r3,r2
 2016afc:	d0a72c03 	ldbu	r2,-25424(gp)
 2016b00:	1884703a 	and	r2,r3,r2
 2016b04:	d0a72c05 	stb	r2,-25424(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 2016b08:	d0a72f17 	ldw	r2,-25412(gp)
 2016b0c:	e0ffff0b 	ldhu	r3,-4(fp)
 2016b10:	10c00b8d 	sth	r3,46(r2)
 2016b14:	e0bffb17 	ldw	r2,-20(fp)
 2016b18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016b1c:	e0bffc17 	ldw	r2,-16(fp)
 2016b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 2016b24:	20105d00 	call	20105d0 <OS_Sched>
 2016b28:	00000106 	br	2016b30 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 2016b2c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 2016b30:	e037883a 	mov	sp,fp
 2016b34:	dfc00117 	ldw	ra,4(sp)
 2016b38:	df000017 	ldw	fp,0(sp)
 2016b3c:	dec00204 	addi	sp,sp,8
 2016b40:	f800283a 	ret

02016b44 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 2016b44:	defff704 	addi	sp,sp,-36
 2016b48:	dfc00815 	stw	ra,32(sp)
 2016b4c:	df000715 	stw	fp,28(sp)
 2016b50:	dc000615 	stw	r16,24(sp)
 2016b54:	df000704 	addi	fp,sp,28
 2016b58:	2011883a 	mov	r8,r4
 2016b5c:	2809883a 	mov	r4,r5
 2016b60:	3007883a 	mov	r3,r6
 2016b64:	3805883a 	mov	r2,r7
 2016b68:	e23ffb05 	stb	r8,-20(fp)
 2016b6c:	e13ffc05 	stb	r4,-16(fp)
 2016b70:	e0fffd05 	stb	r3,-12(fp)
 2016b74:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2016b78:	d0a72e03 	ldbu	r2,-25416(gp)
 2016b7c:	10803fcc 	andi	r2,r2,255
 2016b80:	10000226 	beq	r2,zero,2016b8c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 2016b84:	00801544 	movi	r2,85
 2016b88:	00004706 	br	2016ca8 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 2016b8c:	e0bffb03 	ldbu	r2,-20(fp)
 2016b90:	1000081e 	bne	r2,zero,2016bb4 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 2016b94:	e0bffc03 	ldbu	r2,-16(fp)
 2016b98:	1000061e 	bne	r2,zero,2016bb4 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 2016b9c:	e0bffd03 	ldbu	r2,-12(fp)
 2016ba0:	1000041e 	bne	r2,zero,2016bb4 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 2016ba4:	e0bffe0b 	ldhu	r2,-8(fp)
 2016ba8:	1000021e 	bne	r2,zero,2016bb4 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 2016bac:	00801504 	movi	r2,84
 2016bb0:	00003d06 	br	2016ca8 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
 2016bb4:	e0bffc03 	ldbu	r2,-16(fp)
 2016bb8:	10800f30 	cmpltui	r2,r2,60
 2016bbc:	1000021e 	bne	r2,zero,2016bc8 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 2016bc0:	00801444 	movi	r2,81
 2016bc4:	00003806 	br	2016ca8 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
 2016bc8:	e0bffd03 	ldbu	r2,-12(fp)
 2016bcc:	10800f30 	cmpltui	r2,r2,60
 2016bd0:	1000021e 	bne	r2,zero,2016bdc <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 2016bd4:	00801484 	movi	r2,82
 2016bd8:	00003306 	br	2016ca8 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
 2016bdc:	e0bffe0b 	ldhu	r2,-8(fp)
 2016be0:	1080fa30 	cmpltui	r2,r2,1000
 2016be4:	1000021e 	bne	r2,zero,2016bf0 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 2016be8:	008014c4 	movi	r2,83
 2016bec:	00002e06 	br	2016ca8 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2016bf0:	e0bffb03 	ldbu	r2,-20(fp)
 2016bf4:	01438404 	movi	r5,3600
 2016bf8:	1009883a 	mov	r4,r2
 2016bfc:	20011180 	call	2001118 <__mulsi3>
 2016c00:	1021883a 	mov	r16,r2
 2016c04:	e0bffc03 	ldbu	r2,-16(fp)
 2016c08:	01400f04 	movi	r5,60
 2016c0c:	1009883a 	mov	r4,r2
 2016c10:	20011180 	call	2001118 <__mulsi3>
 2016c14:	8087883a 	add	r3,r16,r2
 2016c18:	e0bffd03 	ldbu	r2,-12(fp)
 2016c1c:	1885883a 	add	r2,r3,r2
 2016c20:	0140fa04 	movi	r5,1000
 2016c24:	1009883a 	mov	r4,r2
 2016c28:	20011180 	call	2001118 <__mulsi3>
 2016c2c:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 2016c30:	e0bffe0b 	ldhu	r2,-8(fp)
 2016c34:	0140fa04 	movi	r5,1000
 2016c38:	1009883a 	mov	r4,r2
 2016c3c:	20011180 	call	2001118 <__mulsi3>
 2016c40:	0140fa04 	movi	r5,1000
 2016c44:	1009883a 	mov	r4,r2
 2016c48:	20039ac0 	call	20039ac <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 2016c4c:	8085883a 	add	r2,r16,r2
 2016c50:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 2016c54:	e0bffa17 	ldw	r2,-24(fp)
 2016c58:	1004d43a 	srli	r2,r2,16
 2016c5c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 2016c60:	e0bffa17 	ldw	r2,-24(fp)
 2016c64:	10bfffcc 	andi	r2,r2,65535
 2016c68:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 2016c6c:	e0bffa17 	ldw	r2,-24(fp)
 2016c70:	10bfffcc 	andi	r2,r2,65535
 2016c74:	1009883a 	mov	r4,r2
 2016c78:	2016a400 	call	2016a40 <OSTimeDly>
    while (loops > 0) {
 2016c7c:	00000706 	br	2016c9c <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
 2016c80:	01200014 	movui	r4,32768
 2016c84:	2016a400 	call	2016a40 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 2016c88:	01200014 	movui	r4,32768
 2016c8c:	2016a400 	call	2016a40 <OSTimeDly>
        loops--;
 2016c90:	e0bff90b 	ldhu	r2,-28(fp)
 2016c94:	10bfffc4 	addi	r2,r2,-1
 2016c98:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 2016c9c:	e0bff90b 	ldhu	r2,-28(fp)
 2016ca0:	103ff71e 	bne	r2,zero,2016c80 <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 2016ca4:	0005883a 	mov	r2,zero
}
 2016ca8:	e6ffff04 	addi	sp,fp,-4
 2016cac:	dfc00217 	ldw	ra,8(sp)
 2016cb0:	df000117 	ldw	fp,4(sp)
 2016cb4:	dc000017 	ldw	r16,0(sp)
 2016cb8:	dec00304 	addi	sp,sp,12
 2016cbc:	f800283a 	ret

02016cc0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 2016cc0:	defff504 	addi	sp,sp,-44
 2016cc4:	dfc00a15 	stw	ra,40(sp)
 2016cc8:	df000915 	stw	fp,36(sp)
 2016ccc:	df000904 	addi	fp,sp,36
 2016cd0:	2005883a 	mov	r2,r4
 2016cd4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2016cd8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 2016cdc:	e0bfff03 	ldbu	r2,-4(fp)
 2016ce0:	10800530 	cmpltui	r2,r2,20
 2016ce4:	1000021e 	bne	r2,zero,2016cf0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2016ce8:	00800a84 	movi	r2,42
 2016cec:	00006406 	br	2016e80 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016cf0:	0005303a 	rdctl	r2,status
 2016cf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016cf8:	e0fffe17 	ldw	r3,-8(fp)
 2016cfc:	00bfff84 	movi	r2,-2
 2016d00:	1884703a 	and	r2,r3,r2
 2016d04:	1001703a 	wrctl	status,r2
  
  return context;
 2016d08:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 2016d0c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 2016d10:	e0ffff03 	ldbu	r3,-4(fp)
 2016d14:	008080b4 	movhi	r2,514
 2016d18:	10906f04 	addi	r2,r2,16828
 2016d1c:	18c7883a 	add	r3,r3,r3
 2016d20:	18c7883a 	add	r3,r3,r3
 2016d24:	10c5883a 	add	r2,r2,r3
 2016d28:	10800017 	ldw	r2,0(r2)
 2016d2c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 2016d30:	e0bff917 	ldw	r2,-28(fp)
 2016d34:	1000061e 	bne	r2,zero,2016d50 <OSTimeDlyResume+0x90>
 2016d38:	e0bff717 	ldw	r2,-36(fp)
 2016d3c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016d40:	e0bff817 	ldw	r2,-32(fp)
 2016d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2016d48:	008010c4 	movi	r2,67
 2016d4c:	00004c06 	br	2016e80 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2016d50:	e0bff917 	ldw	r2,-28(fp)
 2016d54:	10800058 	cmpnei	r2,r2,1
 2016d58:	1000061e 	bne	r2,zero,2016d74 <OSTimeDlyResume+0xb4>
 2016d5c:	e0bff717 	ldw	r2,-36(fp)
 2016d60:	e0bffa15 	stw	r2,-24(fp)
 2016d64:	e0bffa17 	ldw	r2,-24(fp)
 2016d68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 2016d6c:	008010c4 	movi	r2,67
 2016d70:	00004306 	br	2016e80 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 2016d74:	e0bff917 	ldw	r2,-28(fp)
 2016d78:	10800b8b 	ldhu	r2,46(r2)
 2016d7c:	10bfffcc 	andi	r2,r2,65535
 2016d80:	1000061e 	bne	r2,zero,2016d9c <OSTimeDlyResume+0xdc>
 2016d84:	e0bff717 	ldw	r2,-36(fp)
 2016d88:	e0bffb15 	stw	r2,-20(fp)
 2016d8c:	e0bffb17 	ldw	r2,-20(fp)
 2016d90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 2016d94:	00801404 	movi	r2,80
 2016d98:	00003906 	br	2016e80 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 2016d9c:	e0bff917 	ldw	r2,-28(fp)
 2016da0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2016da4:	e0bff917 	ldw	r2,-28(fp)
 2016da8:	10800c03 	ldbu	r2,48(r2)
 2016dac:	10803fcc 	andi	r2,r2,255
 2016db0:	10800dcc 	andi	r2,r2,55
 2016db4:	10000b26 	beq	r2,zero,2016de4 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 2016db8:	e0bff917 	ldw	r2,-28(fp)
 2016dbc:	10c00c03 	ldbu	r3,48(r2)
 2016dc0:	00bff204 	movi	r2,-56
 2016dc4:	1884703a 	and	r2,r3,r2
 2016dc8:	1007883a 	mov	r3,r2
 2016dcc:	e0bff917 	ldw	r2,-28(fp)
 2016dd0:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 2016dd4:	e0bff917 	ldw	r2,-28(fp)
 2016dd8:	00c00044 	movi	r3,1
 2016ddc:	10c00c45 	stb	r3,49(r2)
 2016de0:	00000206 	br	2016dec <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 2016de4:	e0bff917 	ldw	r2,-28(fp)
 2016de8:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 2016dec:	e0bff917 	ldw	r2,-28(fp)
 2016df0:	10800c03 	ldbu	r2,48(r2)
 2016df4:	10803fcc 	andi	r2,r2,255
 2016df8:	1080020c 	andi	r2,r2,8
 2016dfc:	10001b1e 	bne	r2,zero,2016e6c <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 2016e00:	e0bff917 	ldw	r2,-28(fp)
 2016e04:	10c00d83 	ldbu	r3,54(r2)
 2016e08:	d0a72c03 	ldbu	r2,-25424(gp)
 2016e0c:	1884b03a 	or	r2,r3,r2
 2016e10:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2016e14:	e0bff917 	ldw	r2,-28(fp)
 2016e18:	10800d03 	ldbu	r2,52(r2)
 2016e1c:	10c03fcc 	andi	r3,r2,255
 2016e20:	e0bff917 	ldw	r2,-28(fp)
 2016e24:	10800d03 	ldbu	r2,52(r2)
 2016e28:	11003fcc 	andi	r4,r2,255
 2016e2c:	d0a72c44 	addi	r2,gp,-25423
 2016e30:	2085883a 	add	r2,r4,r2
 2016e34:	11000003 	ldbu	r4,0(r2)
 2016e38:	e0bff917 	ldw	r2,-28(fp)
 2016e3c:	10800d43 	ldbu	r2,53(r2)
 2016e40:	2084b03a 	or	r2,r4,r2
 2016e44:	1009883a 	mov	r4,r2
 2016e48:	d0a72c44 	addi	r2,gp,-25423
 2016e4c:	1885883a 	add	r2,r3,r2
 2016e50:	11000005 	stb	r4,0(r2)
 2016e54:	e0bff717 	ldw	r2,-36(fp)
 2016e58:	e0bffc15 	stw	r2,-16(fp)
 2016e5c:	e0bffc17 	ldw	r2,-16(fp)
 2016e60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 2016e64:	20105d00 	call	20105d0 <OS_Sched>
 2016e68:	00000406 	br	2016e7c <OSTimeDlyResume+0x1bc>
 2016e6c:	e0bff717 	ldw	r2,-36(fp)
 2016e70:	e0bffd15 	stw	r2,-12(fp)
 2016e74:	e0bffd17 	ldw	r2,-12(fp)
 2016e78:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 2016e7c:	0005883a 	mov	r2,zero
}
 2016e80:	e037883a 	mov	sp,fp
 2016e84:	dfc00117 	ldw	ra,4(sp)
 2016e88:	df000017 	ldw	fp,0(sp)
 2016e8c:	dec00204 	addi	sp,sp,8
 2016e90:	f800283a 	ret

02016e94 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 2016e94:	defffb04 	addi	sp,sp,-20
 2016e98:	df000415 	stw	fp,16(sp)
 2016e9c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016ea0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ea4:	0005303a 	rdctl	r2,status
 2016ea8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016eac:	e0fffe17 	ldw	r3,-8(fp)
 2016eb0:	00bfff84 	movi	r2,-2
 2016eb4:	1884703a 	and	r2,r3,r2
 2016eb8:	1001703a 	wrctl	status,r2
  
  return context;
 2016ebc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2016ec0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 2016ec4:	d0a73017 	ldw	r2,-25408(gp)
 2016ec8:	e0bffd15 	stw	r2,-12(fp)
 2016ecc:	e0bffc17 	ldw	r2,-16(fp)
 2016ed0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016ed4:	e0bfff17 	ldw	r2,-4(fp)
 2016ed8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 2016edc:	e0bffd17 	ldw	r2,-12(fp)
}
 2016ee0:	e037883a 	mov	sp,fp
 2016ee4:	df000017 	ldw	fp,0(sp)
 2016ee8:	dec00104 	addi	sp,sp,4
 2016eec:	f800283a 	ret

02016ef0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 2016ef0:	defffb04 	addi	sp,sp,-20
 2016ef4:	df000415 	stw	fp,16(sp)
 2016ef8:	df000404 	addi	fp,sp,16
 2016efc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016f00:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016f04:	0005303a 	rdctl	r2,status
 2016f08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016f0c:	e0fffd17 	ldw	r3,-12(fp)
 2016f10:	00bfff84 	movi	r2,-2
 2016f14:	1884703a 	and	r2,r3,r2
 2016f18:	1001703a 	wrctl	status,r2
  
  return context;
 2016f1c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 2016f20:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 2016f24:	e0bfff17 	ldw	r2,-4(fp)
 2016f28:	d0a73015 	stw	r2,-25408(gp)
 2016f2c:	e0bffc17 	ldw	r2,-16(fp)
 2016f30:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016f34:	e0bffe17 	ldw	r2,-8(fp)
 2016f38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2016f3c:	0001883a 	nop
 2016f40:	e037883a 	mov	sp,fp
 2016f44:	df000017 	ldw	fp,0(sp)
 2016f48:	dec00104 	addi	sp,sp,4
 2016f4c:	f800283a 	ret

02016f50 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2016f50:	defffd04 	addi	sp,sp,-12
 2016f54:	dfc00215 	stw	ra,8(sp)
 2016f58:	df000115 	stw	fp,4(sp)
 2016f5c:	df000104 	addi	fp,sp,4
 2016f60:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2016f64:	d1600904 	addi	r5,gp,-32732
 2016f68:	e13fff17 	ldw	r4,-4(fp)
 2016f6c:	2017fc40 	call	2017fc4 <alt_dev_llist_insert>
}
 2016f70:	e037883a 	mov	sp,fp
 2016f74:	dfc00117 	ldw	ra,4(sp)
 2016f78:	df000017 	ldw	fp,0(sp)
 2016f7c:	dec00204 	addi	sp,sp,8
 2016f80:	f800283a 	ret

02016f84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2016f84:	defffd04 	addi	sp,sp,-12
 2016f88:	dfc00215 	stw	ra,8(sp)
 2016f8c:	df000115 	stw	fp,4(sp)
 2016f90:	df000104 	addi	fp,sp,4
 2016f94:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 2016f98:	20189700 	call	2018970 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2016f9c:	00800044 	movi	r2,1
 2016fa0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2016fa4:	0001883a 	nop
 2016fa8:	e037883a 	mov	sp,fp
 2016fac:	dfc00117 	ldw	ra,4(sp)
 2016fb0:	df000017 	ldw	fp,0(sp)
 2016fb4:	dec00204 	addi	sp,sp,8
 2016fb8:	f800283a 	ret

02016fbc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2016fbc:	defffe04 	addi	sp,sp,-8
 2016fc0:	dfc00115 	stw	ra,4(sp)
 2016fc4:	df000015 	stw	fp,0(sp)
 2016fc8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 2016fcc:	01c0fa04 	movi	r7,1000
 2016fd0:	01800044 	movi	r6,1
 2016fd4:	000b883a 	mov	r5,zero
 2016fd8:	0009883a 	mov	r4,zero
 2016fdc:	2017dc00 	call	2017dc0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2016fe0:	000d883a 	mov	r6,zero
 2016fe4:	000b883a 	mov	r5,zero
 2016fe8:	010080b4 	movhi	r4,514
 2016fec:	2128a804 	addi	r4,r4,-23904
 2016ff0:	20171800 	call	2017180 <altera_avalon_jtag_uart_init>
 2016ff4:	010080b4 	movhi	r4,514
 2016ff8:	21289e04 	addi	r4,r4,-23944
 2016ffc:	2016f500 	call	2016f50 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 2017000:	0001883a 	nop
}
 2017004:	0001883a 	nop
 2017008:	e037883a 	mov	sp,fp
 201700c:	dfc00117 	ldw	ra,4(sp)
 2017010:	df000017 	ldw	fp,0(sp)
 2017014:	dec00204 	addi	sp,sp,8
 2017018:	f800283a 	ret

0201701c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 201701c:	defffa04 	addi	sp,sp,-24
 2017020:	dfc00515 	stw	ra,20(sp)
 2017024:	df000415 	stw	fp,16(sp)
 2017028:	df000404 	addi	fp,sp,16
 201702c:	e13ffd15 	stw	r4,-12(fp)
 2017030:	e17ffe15 	stw	r5,-8(fp)
 2017034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2017038:	e0bffd17 	ldw	r2,-12(fp)
 201703c:	10800017 	ldw	r2,0(r2)
 2017040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2017044:	e0bffc17 	ldw	r2,-16(fp)
 2017048:	10c00a04 	addi	r3,r2,40
 201704c:	e0bffd17 	ldw	r2,-12(fp)
 2017050:	10800217 	ldw	r2,8(r2)
 2017054:	100f883a 	mov	r7,r2
 2017058:	e1bfff17 	ldw	r6,-4(fp)
 201705c:	e17ffe17 	ldw	r5,-8(fp)
 2017060:	1809883a 	mov	r4,r3
 2017064:	20177c80 	call	20177c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2017068:	e037883a 	mov	sp,fp
 201706c:	dfc00117 	ldw	ra,4(sp)
 2017070:	df000017 	ldw	fp,0(sp)
 2017074:	dec00204 	addi	sp,sp,8
 2017078:	f800283a 	ret

0201707c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 201707c:	defffa04 	addi	sp,sp,-24
 2017080:	dfc00515 	stw	ra,20(sp)
 2017084:	df000415 	stw	fp,16(sp)
 2017088:	df000404 	addi	fp,sp,16
 201708c:	e13ffd15 	stw	r4,-12(fp)
 2017090:	e17ffe15 	stw	r5,-8(fp)
 2017094:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2017098:	e0bffd17 	ldw	r2,-12(fp)
 201709c:	10800017 	ldw	r2,0(r2)
 20170a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20170a4:	e0bffc17 	ldw	r2,-16(fp)
 20170a8:	10c00a04 	addi	r3,r2,40
 20170ac:	e0bffd17 	ldw	r2,-12(fp)
 20170b0:	10800217 	ldw	r2,8(r2)
 20170b4:	100f883a 	mov	r7,r2
 20170b8:	e1bfff17 	ldw	r6,-4(fp)
 20170bc:	e17ffe17 	ldw	r5,-8(fp)
 20170c0:	1809883a 	mov	r4,r3
 20170c4:	2017a840 	call	2017a84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20170c8:	e037883a 	mov	sp,fp
 20170cc:	dfc00117 	ldw	ra,4(sp)
 20170d0:	df000017 	ldw	fp,0(sp)
 20170d4:	dec00204 	addi	sp,sp,8
 20170d8:	f800283a 	ret

020170dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20170dc:	defffc04 	addi	sp,sp,-16
 20170e0:	dfc00315 	stw	ra,12(sp)
 20170e4:	df000215 	stw	fp,8(sp)
 20170e8:	df000204 	addi	fp,sp,8
 20170ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20170f0:	e0bfff17 	ldw	r2,-4(fp)
 20170f4:	10800017 	ldw	r2,0(r2)
 20170f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20170fc:	e0bffe17 	ldw	r2,-8(fp)
 2017100:	10c00a04 	addi	r3,r2,40
 2017104:	e0bfff17 	ldw	r2,-4(fp)
 2017108:	10800217 	ldw	r2,8(r2)
 201710c:	100b883a 	mov	r5,r2
 2017110:	1809883a 	mov	r4,r3
 2017114:	20176700 	call	2017670 <altera_avalon_jtag_uart_close>
}
 2017118:	e037883a 	mov	sp,fp
 201711c:	dfc00117 	ldw	ra,4(sp)
 2017120:	df000017 	ldw	fp,0(sp)
 2017124:	dec00204 	addi	sp,sp,8
 2017128:	f800283a 	ret

0201712c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 201712c:	defffa04 	addi	sp,sp,-24
 2017130:	dfc00515 	stw	ra,20(sp)
 2017134:	df000415 	stw	fp,16(sp)
 2017138:	df000404 	addi	fp,sp,16
 201713c:	e13ffd15 	stw	r4,-12(fp)
 2017140:	e17ffe15 	stw	r5,-8(fp)
 2017144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2017148:	e0bffd17 	ldw	r2,-12(fp)
 201714c:	10800017 	ldw	r2,0(r2)
 2017150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2017154:	e0bffc17 	ldw	r2,-16(fp)
 2017158:	10800a04 	addi	r2,r2,40
 201715c:	e1bfff17 	ldw	r6,-4(fp)
 2017160:	e17ffe17 	ldw	r5,-8(fp)
 2017164:	1009883a 	mov	r4,r2
 2017168:	20176d80 	call	20176d8 <altera_avalon_jtag_uart_ioctl>
}
 201716c:	e037883a 	mov	sp,fp
 2017170:	dfc00117 	ldw	ra,4(sp)
 2017174:	df000017 	ldw	fp,0(sp)
 2017178:	dec00204 	addi	sp,sp,8
 201717c:	f800283a 	ret

02017180 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2017180:	defff104 	addi	sp,sp,-60
 2017184:	dfc00e15 	stw	ra,56(sp)
 2017188:	df000d15 	stw	fp,52(sp)
 201718c:	df000d04 	addi	fp,sp,52
 2017190:	e13ff915 	stw	r4,-28(fp)
 2017194:	e17ffa15 	stw	r5,-24(fp)
 2017198:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 201719c:	e0bff917 	ldw	r2,-28(fp)
 20171a0:	10800c04 	addi	r2,r2,48
 20171a4:	e0bff415 	stw	r2,-48(fp)
 20171a8:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 20171ac:	e0bff80b 	ldhu	r2,-32(fp)
 20171b0:	e0fff884 	addi	r3,fp,-30
 20171b4:	180b883a 	mov	r5,r3
 20171b8:	1009883a 	mov	r4,r2
 20171bc:	201113c0 	call	201113c <OSFlagCreate>
 20171c0:	1007883a 	mov	r3,r2
 20171c4:	e0bff417 	ldw	r2,-48(fp)
 20171c8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 20171cc:	e0bff917 	ldw	r2,-28(fp)
 20171d0:	10800a04 	addi	r2,r2,40
 20171d4:	e0bff515 	stw	r2,-44(fp)
 20171d8:	00800044 	movi	r2,1
 20171dc:	e0bff78d 	sth	r2,-34(fp)
 20171e0:	e0bff78b 	ldhu	r2,-34(fp)
 20171e4:	1009883a 	mov	r4,r2
 20171e8:	20149240 	call	2014924 <OSSemCreate>
 20171ec:	1007883a 	mov	r3,r2
 20171f0:	e0bff517 	ldw	r2,-44(fp)
 20171f4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 20171f8:	e0bff917 	ldw	r2,-28(fp)
 20171fc:	10800b04 	addi	r2,r2,44
 2017200:	e0bff615 	stw	r2,-40(fp)
 2017204:	00800044 	movi	r2,1
 2017208:	e0bff70d 	sth	r2,-36(fp)
 201720c:	e0bff70b 	ldhu	r2,-36(fp)
 2017210:	1009883a 	mov	r4,r2
 2017214:	20149240 	call	2014924 <OSSemCreate>
 2017218:	1007883a 	mov	r3,r2
 201721c:	e0bff617 	ldw	r2,-40(fp)
 2017220:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2017224:	e0bff917 	ldw	r2,-28(fp)
 2017228:	00c00044 	movi	r3,1
 201722c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2017230:	e0bff917 	ldw	r2,-28(fp)
 2017234:	10800017 	ldw	r2,0(r2)
 2017238:	10800104 	addi	r2,r2,4
 201723c:	1007883a 	mov	r3,r2
 2017240:	e0bff917 	ldw	r2,-28(fp)
 2017244:	10800817 	ldw	r2,32(r2)
 2017248:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201724c:	e0bffa17 	ldw	r2,-24(fp)
 2017250:	e0fffb17 	ldw	r3,-20(fp)
 2017254:	d8000015 	stw	zero,0(sp)
 2017258:	e1fff917 	ldw	r7,-28(fp)
 201725c:	01808074 	movhi	r6,513
 2017260:	319cb204 	addi	r6,r6,29384
 2017264:	180b883a 	mov	r5,r3
 2017268:	1009883a 	mov	r4,r2
 201726c:	20181480 	call	2018148 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2017270:	e0bff917 	ldw	r2,-28(fp)
 2017274:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2017278:	e0bff917 	ldw	r2,-28(fp)
 201727c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2017280:	d0e73517 	ldw	r3,-25388(gp)
 2017284:	e1fff917 	ldw	r7,-28(fp)
 2017288:	01808074 	movhi	r6,513
 201728c:	319d5b04 	addi	r6,r6,30060
 2017290:	180b883a 	mov	r5,r3
 2017294:	1009883a 	mov	r4,r2
 2017298:	2017e3c0 	call	2017e3c <alt_alarm_start>
 201729c:	1000040e 	bge	r2,zero,20172b0 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 20172a0:	e0fff917 	ldw	r3,-28(fp)
 20172a4:	00a00034 	movhi	r2,32768
 20172a8:	10bfffc4 	addi	r2,r2,-1
 20172ac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 20172b0:	0001883a 	nop
 20172b4:	e037883a 	mov	sp,fp
 20172b8:	dfc00117 	ldw	ra,4(sp)
 20172bc:	df000017 	ldw	fp,0(sp)
 20172c0:	dec00204 	addi	sp,sp,8
 20172c4:	f800283a 	ret

020172c8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20172c8:	defff204 	addi	sp,sp,-56
 20172cc:	dfc00d15 	stw	ra,52(sp)
 20172d0:	df000c15 	stw	fp,48(sp)
 20172d4:	df000c04 	addi	fp,sp,48
 20172d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20172dc:	e0bfff17 	ldw	r2,-4(fp)
 20172e0:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 20172e4:	e0bff617 	ldw	r2,-40(fp)
 20172e8:	10800017 	ldw	r2,0(r2)
 20172ec:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20172f0:	e0bff717 	ldw	r2,-36(fp)
 20172f4:	10800104 	addi	r2,r2,4
 20172f8:	10800037 	ldwio	r2,0(r2)
 20172fc:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2017300:	e0bff817 	ldw	r2,-32(fp)
 2017304:	1080c00c 	andi	r2,r2,768
 2017308:	10009126 	beq	r2,zero,2017550 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 201730c:	e0bff817 	ldw	r2,-32(fp)
 2017310:	1080400c 	andi	r2,r2,256
 2017314:	10004726 	beq	r2,zero,2017434 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2017318:	00800074 	movhi	r2,1
 201731c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017320:	e0bff617 	ldw	r2,-40(fp)
 2017324:	10800d17 	ldw	r2,52(r2)
 2017328:	10800044 	addi	r2,r2,1
 201732c:	1081ffcc 	andi	r2,r2,2047
 2017330:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 2017334:	e0bff617 	ldw	r2,-40(fp)
 2017338:	10c00e17 	ldw	r3,56(r2)
 201733c:	e0bff917 	ldw	r2,-28(fp)
 2017340:	18802726 	beq	r3,r2,20173e0 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2017344:	e0bff717 	ldw	r2,-36(fp)
 2017348:	10800037 	ldwio	r2,0(r2)
 201734c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2017350:	e0bff417 	ldw	r2,-48(fp)
 2017354:	10a0000c 	andi	r2,r2,32768
 2017358:	10002326 	beq	r2,zero,20173e8 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 201735c:	e0bff617 	ldw	r2,-40(fp)
 2017360:	10800d17 	ldw	r2,52(r2)
 2017364:	e0fff417 	ldw	r3,-48(fp)
 2017368:	1809883a 	mov	r4,r3
 201736c:	e0fff617 	ldw	r3,-40(fp)
 2017370:	1885883a 	add	r2,r3,r2
 2017374:	10801104 	addi	r2,r2,68
 2017378:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201737c:	e0bff617 	ldw	r2,-40(fp)
 2017380:	10800d17 	ldw	r2,52(r2)
 2017384:	10800044 	addi	r2,r2,1
 2017388:	10c1ffcc 	andi	r3,r2,2047
 201738c:	e0bff617 	ldw	r2,-40(fp)
 2017390:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 2017394:	e0bff617 	ldw	r2,-40(fp)
 2017398:	10800c17 	ldw	r2,48(r2)
 201739c:	e0bffb15 	stw	r2,-20(fp)
 20173a0:	00800044 	movi	r2,1
 20173a4:	e0bffc0d 	sth	r2,-16(fp)
 20173a8:	00800044 	movi	r2,1
 20173ac:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 20173b0:	d0a72043 	ldbu	r2,-25471(gp)
 20173b4:	10803fcc 	andi	r2,r2,255
 20173b8:	103fd926 	beq	r2,zero,2017320 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
 20173bc:	e0bffc0b 	ldhu	r2,-16(fp)
 20173c0:	e0fffc83 	ldbu	r3,-14(fp)
 20173c4:	e13ffdc4 	addi	r4,fp,-9
 20173c8:	200f883a 	mov	r7,r4
 20173cc:	180d883a 	mov	r6,r3
 20173d0:	100b883a 	mov	r5,r2
 20173d4:	e13ffb17 	ldw	r4,-20(fp)
 20173d8:	2011d180 	call	2011d18 <OSFlagPost>
      }
 20173dc:	003fd006 	br	2017320 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 20173e0:	0001883a 	nop
 20173e4:	00000106 	br	20173ec <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 20173e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 20173ec:	e0bff417 	ldw	r2,-48(fp)
 20173f0:	10bfffec 	andhi	r2,r2,65535
 20173f4:	10000f26 	beq	r2,zero,2017434 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20173f8:	e0bff617 	ldw	r2,-40(fp)
 20173fc:	10c00817 	ldw	r3,32(r2)
 2017400:	00bfff84 	movi	r2,-2
 2017404:	1886703a 	and	r3,r3,r2
 2017408:	e0bff617 	ldw	r2,-40(fp)
 201740c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2017410:	e0bff717 	ldw	r2,-36(fp)
 2017414:	10800104 	addi	r2,r2,4
 2017418:	1007883a 	mov	r3,r2
 201741c:	e0bff617 	ldw	r2,-40(fp)
 2017420:	10800817 	ldw	r2,32(r2)
 2017424:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017428:	e0bff717 	ldw	r2,-36(fp)
 201742c:	10800104 	addi	r2,r2,4
 2017430:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2017434:	e0bff817 	ldw	r2,-32(fp)
 2017438:	1080800c 	andi	r2,r2,512
 201743c:	103fac26 	beq	r2,zero,20172f0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2017440:	e0bff817 	ldw	r2,-32(fp)
 2017444:	1004d43a 	srli	r2,r2,16
 2017448:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201744c:	00002606 	br	20174e8 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2017450:	e0bff717 	ldw	r2,-36(fp)
 2017454:	e0fff617 	ldw	r3,-40(fp)
 2017458:	18c01017 	ldw	r3,64(r3)
 201745c:	e13ff617 	ldw	r4,-40(fp)
 2017460:	20c7883a 	add	r3,r4,r3
 2017464:	18c21104 	addi	r3,r3,2116
 2017468:	18c00003 	ldbu	r3,0(r3)
 201746c:	18c03fcc 	andi	r3,r3,255
 2017470:	18c0201c 	xori	r3,r3,128
 2017474:	18ffe004 	addi	r3,r3,-128
 2017478:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201747c:	e0bff617 	ldw	r2,-40(fp)
 2017480:	10801017 	ldw	r2,64(r2)
 2017484:	10800044 	addi	r2,r2,1
 2017488:	10c1ffcc 	andi	r3,r2,2047
 201748c:	e0bff617 	ldw	r2,-40(fp)
 2017490:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 2017494:	e0bff617 	ldw	r2,-40(fp)
 2017498:	10800c17 	ldw	r2,48(r2)
 201749c:	e0bffa15 	stw	r2,-24(fp)
 20174a0:	00800084 	movi	r2,2
 20174a4:	e0bffd0d 	sth	r2,-12(fp)
 20174a8:	00800044 	movi	r2,1
 20174ac:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 20174b0:	d0a72043 	ldbu	r2,-25471(gp)
 20174b4:	10803fcc 	andi	r2,r2,255
 20174b8:	10000826 	beq	r2,zero,20174dc <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 20174bc:	e0bffd0b 	ldhu	r2,-12(fp)
 20174c0:	e0fffd83 	ldbu	r3,-10(fp)
 20174c4:	e13ffe04 	addi	r4,fp,-8
 20174c8:	200f883a 	mov	r7,r4
 20174cc:	180d883a 	mov	r6,r3
 20174d0:	100b883a 	mov	r5,r2
 20174d4:	e13ffa17 	ldw	r4,-24(fp)
 20174d8:	2011d180 	call	2011d18 <OSFlagPost>

        space--;
 20174dc:	e0bff517 	ldw	r2,-44(fp)
 20174e0:	10bfffc4 	addi	r2,r2,-1
 20174e4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 20174e8:	e0bff517 	ldw	r2,-44(fp)
 20174ec:	10000526 	beq	r2,zero,2017504 <altera_avalon_jtag_uart_irq+0x23c>
 20174f0:	e0bff617 	ldw	r2,-40(fp)
 20174f4:	10c01017 	ldw	r3,64(r2)
 20174f8:	e0bff617 	ldw	r2,-40(fp)
 20174fc:	10800f17 	ldw	r2,60(r2)
 2017500:	18bfd31e 	bne	r3,r2,2017450 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2017504:	e0bff517 	ldw	r2,-44(fp)
 2017508:	103f7926 	beq	r2,zero,20172f0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201750c:	e0bff617 	ldw	r2,-40(fp)
 2017510:	10c00817 	ldw	r3,32(r2)
 2017514:	00bfff44 	movi	r2,-3
 2017518:	1886703a 	and	r3,r3,r2
 201751c:	e0bff617 	ldw	r2,-40(fp)
 2017520:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017524:	e0bff617 	ldw	r2,-40(fp)
 2017528:	10800017 	ldw	r2,0(r2)
 201752c:	10800104 	addi	r2,r2,4
 2017530:	1007883a 	mov	r3,r2
 2017534:	e0bff617 	ldw	r2,-40(fp)
 2017538:	10800817 	ldw	r2,32(r2)
 201753c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017540:	e0bff717 	ldw	r2,-36(fp)
 2017544:	10800104 	addi	r2,r2,4
 2017548:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 201754c:	003f6806 	br	20172f0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2017550:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2017554:	0001883a 	nop
 2017558:	e037883a 	mov	sp,fp
 201755c:	dfc00117 	ldw	ra,4(sp)
 2017560:	df000017 	ldw	fp,0(sp)
 2017564:	dec00204 	addi	sp,sp,8
 2017568:	f800283a 	ret

0201756c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201756c:	defff904 	addi	sp,sp,-28
 2017570:	dfc00615 	stw	ra,24(sp)
 2017574:	df000515 	stw	fp,20(sp)
 2017578:	df000504 	addi	fp,sp,20
 201757c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2017580:	e0bfff17 	ldw	r2,-4(fp)
 2017584:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2017588:	e0bffb17 	ldw	r2,-20(fp)
 201758c:	10800017 	ldw	r2,0(r2)
 2017590:	10800104 	addi	r2,r2,4
 2017594:	10800037 	ldwio	r2,0(r2)
 2017598:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201759c:	e0bffc17 	ldw	r2,-16(fp)
 20175a0:	1081000c 	andi	r2,r2,1024
 20175a4:	10000b26 	beq	r2,zero,20175d4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20175a8:	e0bffb17 	ldw	r2,-20(fp)
 20175ac:	10800017 	ldw	r2,0(r2)
 20175b0:	10800104 	addi	r2,r2,4
 20175b4:	1007883a 	mov	r3,r2
 20175b8:	e0bffb17 	ldw	r2,-20(fp)
 20175bc:	10800817 	ldw	r2,32(r2)
 20175c0:	10810014 	ori	r2,r2,1024
 20175c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 20175c8:	e0bffb17 	ldw	r2,-20(fp)
 20175cc:	10000915 	stw	zero,36(r2)
 20175d0:	00002106 	br	2017658 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20175d4:	e0bffb17 	ldw	r2,-20(fp)
 20175d8:	10c00917 	ldw	r3,36(r2)
 20175dc:	00a00034 	movhi	r2,32768
 20175e0:	10bfff04 	addi	r2,r2,-4
 20175e4:	10c01c36 	bltu	r2,r3,2017658 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 20175e8:	e0bffb17 	ldw	r2,-20(fp)
 20175ec:	10800917 	ldw	r2,36(r2)
 20175f0:	10c00044 	addi	r3,r2,1
 20175f4:	e0bffb17 	ldw	r2,-20(fp)
 20175f8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 20175fc:	e0bffb17 	ldw	r2,-20(fp)
 2017600:	10c00917 	ldw	r3,36(r2)
 2017604:	e0bffb17 	ldw	r2,-20(fp)
 2017608:	10800117 	ldw	r2,4(r2)
 201760c:	18801236 	bltu	r3,r2,2017658 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 2017610:	e0bffb17 	ldw	r2,-20(fp)
 2017614:	10800c17 	ldw	r2,48(r2)
 2017618:	e0bffd15 	stw	r2,-12(fp)
 201761c:	00800104 	movi	r2,4
 2017620:	e0bffe0d 	sth	r2,-8(fp)
 2017624:	00800044 	movi	r2,1
 2017628:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 201762c:	d0a72043 	ldbu	r2,-25471(gp)
 2017630:	10803fcc 	andi	r2,r2,255
 2017634:	10000826 	beq	r2,zero,2017658 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 2017638:	e0bffe0b 	ldhu	r2,-8(fp)
 201763c:	e0fffe83 	ldbu	r3,-6(fp)
 2017640:	e13ffec4 	addi	r4,fp,-5
 2017644:	200f883a 	mov	r7,r4
 2017648:	180d883a 	mov	r6,r3
 201764c:	100b883a 	mov	r5,r2
 2017650:	e13ffd17 	ldw	r4,-12(fp)
 2017654:	2011d180 	call	2011d18 <OSFlagPost>
 2017658:	d0a73517 	ldw	r2,-25388(gp)
    }
  }

  return alt_ticks_per_second();
}
 201765c:	e037883a 	mov	sp,fp
 2017660:	dfc00117 	ldw	ra,4(sp)
 2017664:	df000017 	ldw	fp,0(sp)
 2017668:	dec00204 	addi	sp,sp,8
 201766c:	f800283a 	ret

02017670 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2017670:	defffd04 	addi	sp,sp,-12
 2017674:	df000215 	stw	fp,8(sp)
 2017678:	df000204 	addi	fp,sp,8
 201767c:	e13ffe15 	stw	r4,-8(fp)
 2017680:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2017684:	00000506 	br	201769c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2017688:	e0bfff17 	ldw	r2,-4(fp)
 201768c:	1090000c 	andi	r2,r2,16384
 2017690:	10000226 	beq	r2,zero,201769c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2017694:	00bffd44 	movi	r2,-11
 2017698:	00000b06 	br	20176c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 201769c:	e0bffe17 	ldw	r2,-8(fp)
 20176a0:	10c01017 	ldw	r3,64(r2)
 20176a4:	e0bffe17 	ldw	r2,-8(fp)
 20176a8:	10800f17 	ldw	r2,60(r2)
 20176ac:	18800526 	beq	r3,r2,20176c4 <altera_avalon_jtag_uart_close+0x54>
 20176b0:	e0bffe17 	ldw	r2,-8(fp)
 20176b4:	10c00917 	ldw	r3,36(r2)
 20176b8:	e0bffe17 	ldw	r2,-8(fp)
 20176bc:	10800117 	ldw	r2,4(r2)
 20176c0:	18bff136 	bltu	r3,r2,2017688 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20176c4:	0005883a 	mov	r2,zero
}
 20176c8:	e037883a 	mov	sp,fp
 20176cc:	df000017 	ldw	fp,0(sp)
 20176d0:	dec00104 	addi	sp,sp,4
 20176d4:	f800283a 	ret

020176d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20176d8:	defffa04 	addi	sp,sp,-24
 20176dc:	df000515 	stw	fp,20(sp)
 20176e0:	df000504 	addi	fp,sp,20
 20176e4:	e13ffd15 	stw	r4,-12(fp)
 20176e8:	e17ffe15 	stw	r5,-8(fp)
 20176ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20176f0:	00bff9c4 	movi	r2,-25
 20176f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20176f8:	e0bffe17 	ldw	r2,-8(fp)
 20176fc:	10da8060 	cmpeqi	r3,r2,27137
 2017700:	1800031e 	bne	r3,zero,2017710 <altera_avalon_jtag_uart_ioctl+0x38>
 2017704:	109a80a0 	cmpeqi	r2,r2,27138
 2017708:	1000181e 	bne	r2,zero,201776c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 201770c:	00002906 	br	20177b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2017710:	e0bffd17 	ldw	r2,-12(fp)
 2017714:	10c00117 	ldw	r3,4(r2)
 2017718:	00a00034 	movhi	r2,32768
 201771c:	10bfffc4 	addi	r2,r2,-1
 2017720:	18802126 	beq	r3,r2,20177a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2017724:	e0bfff17 	ldw	r2,-4(fp)
 2017728:	10800017 	ldw	r2,0(r2)
 201772c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2017730:	e0bffc17 	ldw	r2,-16(fp)
 2017734:	10800090 	cmplti	r2,r2,2
 2017738:	1000061e 	bne	r2,zero,2017754 <altera_avalon_jtag_uart_ioctl+0x7c>
 201773c:	e0fffc17 	ldw	r3,-16(fp)
 2017740:	00a00034 	movhi	r2,32768
 2017744:	10bfffc4 	addi	r2,r2,-1
 2017748:	18800226 	beq	r3,r2,2017754 <altera_avalon_jtag_uart_ioctl+0x7c>
 201774c:	e0bffc17 	ldw	r2,-16(fp)
 2017750:	00000206 	br	201775c <altera_avalon_jtag_uart_ioctl+0x84>
 2017754:	00a00034 	movhi	r2,32768
 2017758:	10bfff84 	addi	r2,r2,-2
 201775c:	e0fffd17 	ldw	r3,-12(fp)
 2017760:	18800115 	stw	r2,4(r3)
      rc = 0;
 2017764:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2017768:	00000f06 	br	20177a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 201776c:	e0bffd17 	ldw	r2,-12(fp)
 2017770:	10c00117 	ldw	r3,4(r2)
 2017774:	00a00034 	movhi	r2,32768
 2017778:	10bfffc4 	addi	r2,r2,-1
 201777c:	18800c26 	beq	r3,r2,20177b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2017780:	e0bffd17 	ldw	r2,-12(fp)
 2017784:	10c00917 	ldw	r3,36(r2)
 2017788:	e0bffd17 	ldw	r2,-12(fp)
 201778c:	10800117 	ldw	r2,4(r2)
 2017790:	1885803a 	cmpltu	r2,r3,r2
 2017794:	10c03fcc 	andi	r3,r2,255
 2017798:	e0bfff17 	ldw	r2,-4(fp)
 201779c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 20177a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 20177a4:	00000206 	br	20177b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 20177a8:	0001883a 	nop
 20177ac:	00000106 	br	20177b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 20177b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 20177b4:	e0bffb17 	ldw	r2,-20(fp)
}
 20177b8:	e037883a 	mov	sp,fp
 20177bc:	df000017 	ldw	fp,0(sp)
 20177c0:	dec00104 	addi	sp,sp,4
 20177c4:	f800283a 	ret

020177c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20177c8:	deffed04 	addi	sp,sp,-76
 20177cc:	dfc01215 	stw	ra,72(sp)
 20177d0:	df001115 	stw	fp,68(sp)
 20177d4:	df001104 	addi	fp,sp,68
 20177d8:	e13ffc15 	stw	r4,-16(fp)
 20177dc:	e17ffd15 	stw	r5,-12(fp)
 20177e0:	e1bffe15 	stw	r6,-8(fp)
 20177e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20177e8:	e0bffd17 	ldw	r2,-12(fp)
 20177ec:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 20177f0:	e0bffc17 	ldw	r2,-16(fp)
 20177f4:	10800a17 	ldw	r2,40(r2)
 20177f8:	e0bff815 	stw	r2,-32(fp)
 20177fc:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 2017800:	e0bff90b 	ldhu	r2,-28(fp)
 2017804:	e0fffb04 	addi	r3,fp,-20
 2017808:	180d883a 	mov	r6,r3
 201780c:	100b883a 	mov	r5,r2
 2017810:	e13ff817 	ldw	r4,-32(fp)
 2017814:	2014c3c0 	call	2014c3c <OSSemPend>

  while (space > 0)
 2017818:	00006106 	br	20179a0 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201781c:	e0bffc17 	ldw	r2,-16(fp)
 2017820:	10800d17 	ldw	r2,52(r2)
 2017824:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 2017828:	e0bffc17 	ldw	r2,-16(fp)
 201782c:	10800e17 	ldw	r2,56(r2)
 2017830:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 2017834:	e0fff317 	ldw	r3,-52(fp)
 2017838:	e0bff417 	ldw	r2,-48(fp)
 201783c:	18800536 	bltu	r3,r2,2017854 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 2017840:	e0fff317 	ldw	r3,-52(fp)
 2017844:	e0bff417 	ldw	r2,-48(fp)
 2017848:	1885c83a 	sub	r2,r3,r2
 201784c:	e0bff115 	stw	r2,-60(fp)
 2017850:	00000406 	br	2017864 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2017854:	00c20004 	movi	r3,2048
 2017858:	e0bff417 	ldw	r2,-48(fp)
 201785c:	1885c83a 	sub	r2,r3,r2
 2017860:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 2017864:	e0bff117 	ldw	r2,-60(fp)
 2017868:	10001e26 	beq	r2,zero,20178e4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201786c:	e0fffe17 	ldw	r3,-8(fp)
 2017870:	e0bff117 	ldw	r2,-60(fp)
 2017874:	1880022e 	bgeu	r3,r2,2017880 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 2017878:	e0bffe17 	ldw	r2,-8(fp)
 201787c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2017880:	e0bffc17 	ldw	r2,-16(fp)
 2017884:	10c01104 	addi	r3,r2,68
 2017888:	e0bff417 	ldw	r2,-48(fp)
 201788c:	1885883a 	add	r2,r3,r2
 2017890:	e1bff117 	ldw	r6,-60(fp)
 2017894:	100b883a 	mov	r5,r2
 2017898:	e13ff017 	ldw	r4,-64(fp)
 201789c:	200966c0 	call	200966c <memcpy>
      ptr   += n;
 20178a0:	e0fff017 	ldw	r3,-64(fp)
 20178a4:	e0bff117 	ldw	r2,-60(fp)
 20178a8:	1885883a 	add	r2,r3,r2
 20178ac:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 20178b0:	e0fffe17 	ldw	r3,-8(fp)
 20178b4:	e0bff117 	ldw	r2,-60(fp)
 20178b8:	1885c83a 	sub	r2,r3,r2
 20178bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20178c0:	e0fff417 	ldw	r3,-48(fp)
 20178c4:	e0bff117 	ldw	r2,-60(fp)
 20178c8:	1885883a 	add	r2,r3,r2
 20178cc:	10c1ffcc 	andi	r3,r2,2047
 20178d0:	e0bffc17 	ldw	r2,-16(fp)
 20178d4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 20178d8:	e0bffe17 	ldw	r2,-8(fp)
 20178dc:	00bfcf16 	blt	zero,r2,201781c <altera_avalon_jtag_uart_read+0x54>
 20178e0:	00000106 	br	20178e8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 20178e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 20178e8:	e0fff017 	ldw	r3,-64(fp)
 20178ec:	e0bffd17 	ldw	r2,-12(fp)
 20178f0:	18802e1e 	bne	r3,r2,20179ac <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20178f4:	e0bfff17 	ldw	r2,-4(fp)
 20178f8:	1090000c 	andi	r2,r2,16384
 20178fc:	10002d1e 	bne	r2,zero,20179b4 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 2017900:	d0a72043 	ldbu	r2,-25471(gp)
 2017904:	10803fcc 	andi	r2,r2,255
 2017908:	10800058 	cmpnei	r2,r2,1
 201790c:	1000161e 	bne	r2,zero,2017968 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 2017910:	e0bffc17 	ldw	r2,-16(fp)
 2017914:	10800c17 	ldw	r2,48(r2)
 2017918:	e0bff215 	stw	r2,-56(fp)
 201791c:	00800144 	movi	r2,5
 2017920:	e0bff98d 	sth	r2,-26(fp)
 2017924:	00bfe0c4 	movi	r2,-125
 2017928:	e0bffa05 	stb	r2,-24(fp)
 201792c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2017930:	d0a72043 	ldbu	r2,-25471(gp)
 2017934:	10803fcc 	andi	r2,r2,255
 2017938:	10001526 	beq	r2,zero,2017990 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 201793c:	e0fff98b 	ldhu	r3,-26(fp)
 2017940:	e13ffa03 	ldbu	r4,-24(fp)
 2017944:	e17ffa8b 	ldhu	r5,-22(fp)
 2017948:	e0bffb44 	addi	r2,fp,-19
 201794c:	d8800015 	stw	r2,0(sp)
 2017950:	280f883a 	mov	r7,r5
 2017954:	200d883a 	mov	r6,r4
 2017958:	180b883a 	mov	r5,r3
 201795c:	e13ff217 	ldw	r4,-56(fp)
 2017960:	20117000 	call	2011700 <OSFlagPend>
 2017964:	00000a06 	br	2017990 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2017968:	0001883a 	nop
 201796c:	e0bffc17 	ldw	r2,-16(fp)
 2017970:	10c00d17 	ldw	r3,52(r2)
 2017974:	e0bff317 	ldw	r2,-52(fp)
 2017978:	1880051e 	bne	r3,r2,2017990 <altera_avalon_jtag_uart_read+0x1c8>
 201797c:	e0bffc17 	ldw	r2,-16(fp)
 2017980:	10c00917 	ldw	r3,36(r2)
 2017984:	e0bffc17 	ldw	r2,-16(fp)
 2017988:	10800117 	ldw	r2,4(r2)
 201798c:	18bff736 	bltu	r3,r2,201796c <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2017990:	e0bffc17 	ldw	r2,-16(fp)
 2017994:	10c00d17 	ldw	r3,52(r2)
 2017998:	e0bff317 	ldw	r2,-52(fp)
 201799c:	18800726 	beq	r3,r2,20179bc <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20179a0:	e0bffe17 	ldw	r2,-8(fp)
 20179a4:	00bf9d16 	blt	zero,r2,201781c <altera_avalon_jtag_uart_read+0x54>
 20179a8:	00000506 	br	20179c0 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 20179ac:	0001883a 	nop
 20179b0:	00000306 	br	20179c0 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 20179b4:	0001883a 	nop
 20179b8:	00000106 	br	20179c0 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 20179bc:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 20179c0:	e0bffc17 	ldw	r2,-16(fp)
 20179c4:	10800a17 	ldw	r2,40(r2)
 20179c8:	1009883a 	mov	r4,r2
 20179cc:	2014fb40 	call	2014fb4 <OSSemPost>

  if (ptr != buffer)
 20179d0:	e0fff017 	ldw	r3,-64(fp)
 20179d4:	e0bffd17 	ldw	r2,-12(fp)
 20179d8:	18801826 	beq	r3,r2,2017a3c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20179dc:	0005303a 	rdctl	r2,status
 20179e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20179e4:	e0fff717 	ldw	r3,-36(fp)
 20179e8:	00bfff84 	movi	r2,-2
 20179ec:	1884703a 	and	r2,r3,r2
 20179f0:	1001703a 	wrctl	status,r2
  
  return context;
 20179f4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20179f8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20179fc:	e0bffc17 	ldw	r2,-16(fp)
 2017a00:	10800817 	ldw	r2,32(r2)
 2017a04:	10c00054 	ori	r3,r2,1
 2017a08:	e0bffc17 	ldw	r2,-16(fp)
 2017a0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017a10:	e0bffc17 	ldw	r2,-16(fp)
 2017a14:	10800017 	ldw	r2,0(r2)
 2017a18:	10800104 	addi	r2,r2,4
 2017a1c:	1007883a 	mov	r3,r2
 2017a20:	e0bffc17 	ldw	r2,-16(fp)
 2017a24:	10800817 	ldw	r2,32(r2)
 2017a28:	18800035 	stwio	r2,0(r3)
 2017a2c:	e0bff617 	ldw	r2,-40(fp)
 2017a30:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017a34:	e0bff517 	ldw	r2,-44(fp)
 2017a38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2017a3c:	e0fff017 	ldw	r3,-64(fp)
 2017a40:	e0bffd17 	ldw	r2,-12(fp)
 2017a44:	18800426 	beq	r3,r2,2017a58 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 2017a48:	e0fff017 	ldw	r3,-64(fp)
 2017a4c:	e0bffd17 	ldw	r2,-12(fp)
 2017a50:	1885c83a 	sub	r2,r3,r2
 2017a54:	00000606 	br	2017a70 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 2017a58:	e0bfff17 	ldw	r2,-4(fp)
 2017a5c:	1090000c 	andi	r2,r2,16384
 2017a60:	10000226 	beq	r2,zero,2017a6c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 2017a64:	00bffd44 	movi	r2,-11
 2017a68:	00000106 	br	2017a70 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 2017a6c:	00bffec4 	movi	r2,-5
}
 2017a70:	e037883a 	mov	sp,fp
 2017a74:	dfc00117 	ldw	ra,4(sp)
 2017a78:	df000017 	ldw	fp,0(sp)
 2017a7c:	dec00204 	addi	sp,sp,8
 2017a80:	f800283a 	ret

02017a84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2017a84:	deffed04 	addi	sp,sp,-76
 2017a88:	dfc01215 	stw	ra,72(sp)
 2017a8c:	df001115 	stw	fp,68(sp)
 2017a90:	df001104 	addi	fp,sp,68
 2017a94:	e13ffc15 	stw	r4,-16(fp)
 2017a98:	e17ffd15 	stw	r5,-12(fp)
 2017a9c:	e1bffe15 	stw	r6,-8(fp)
 2017aa0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2017aa4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2017aa8:	e0bffd17 	ldw	r2,-12(fp)
 2017aac:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 2017ab0:	e0bffc17 	ldw	r2,-16(fp)
 2017ab4:	10800b17 	ldw	r2,44(r2)
 2017ab8:	e0bff815 	stw	r2,-32(fp)
 2017abc:	e03ff90d 	sth	zero,-28(fp)
 2017ac0:	e0bff90b 	ldhu	r2,-28(fp)
 2017ac4:	e0fffb44 	addi	r3,fp,-19
 2017ac8:	180d883a 	mov	r6,r3
 2017acc:	100b883a 	mov	r5,r2
 2017ad0:	e13ff817 	ldw	r4,-32(fp)
 2017ad4:	2014c3c0 	call	2014c3c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2017ad8:	00003706 	br	2017bb8 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2017adc:	e0bffc17 	ldw	r2,-16(fp)
 2017ae0:	10800f17 	ldw	r2,60(r2)
 2017ae4:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 2017ae8:	e0bffc17 	ldw	r2,-16(fp)
 2017aec:	10801017 	ldw	r2,64(r2)
 2017af0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 2017af4:	e0fff417 	ldw	r3,-48(fp)
 2017af8:	e0bff017 	ldw	r2,-64(fp)
 2017afc:	1880062e 	bgeu	r3,r2,2017b18 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 2017b00:	e0fff017 	ldw	r3,-64(fp)
 2017b04:	e0bff417 	ldw	r2,-48(fp)
 2017b08:	1885c83a 	sub	r2,r3,r2
 2017b0c:	10bfffc4 	addi	r2,r2,-1
 2017b10:	e0bff115 	stw	r2,-60(fp)
 2017b14:	00000b06 	br	2017b44 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 2017b18:	e0bff017 	ldw	r2,-64(fp)
 2017b1c:	10000526 	beq	r2,zero,2017b34 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2017b20:	00c20004 	movi	r3,2048
 2017b24:	e0bff417 	ldw	r2,-48(fp)
 2017b28:	1885c83a 	sub	r2,r3,r2
 2017b2c:	e0bff115 	stw	r2,-60(fp)
 2017b30:	00000406 	br	2017b44 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2017b34:	00c1ffc4 	movi	r3,2047
 2017b38:	e0bff417 	ldw	r2,-48(fp)
 2017b3c:	1885c83a 	sub	r2,r3,r2
 2017b40:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 2017b44:	e0bff117 	ldw	r2,-60(fp)
 2017b48:	10001e26 	beq	r2,zero,2017bc4 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 2017b4c:	e0fffe17 	ldw	r3,-8(fp)
 2017b50:	e0bff117 	ldw	r2,-60(fp)
 2017b54:	1880022e 	bgeu	r3,r2,2017b60 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 2017b58:	e0bffe17 	ldw	r2,-8(fp)
 2017b5c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2017b60:	e0bffc17 	ldw	r2,-16(fp)
 2017b64:	10c21104 	addi	r3,r2,2116
 2017b68:	e0bff417 	ldw	r2,-48(fp)
 2017b6c:	1885883a 	add	r2,r3,r2
 2017b70:	e1bff117 	ldw	r6,-60(fp)
 2017b74:	e17ffd17 	ldw	r5,-12(fp)
 2017b78:	1009883a 	mov	r4,r2
 2017b7c:	200966c0 	call	200966c <memcpy>
      ptr   += n;
 2017b80:	e0fffd17 	ldw	r3,-12(fp)
 2017b84:	e0bff117 	ldw	r2,-60(fp)
 2017b88:	1885883a 	add	r2,r3,r2
 2017b8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2017b90:	e0fffe17 	ldw	r3,-8(fp)
 2017b94:	e0bff117 	ldw	r2,-60(fp)
 2017b98:	1885c83a 	sub	r2,r3,r2
 2017b9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017ba0:	e0fff417 	ldw	r3,-48(fp)
 2017ba4:	e0bff117 	ldw	r2,-60(fp)
 2017ba8:	1885883a 	add	r2,r3,r2
 2017bac:	10c1ffcc 	andi	r3,r2,2047
 2017bb0:	e0bffc17 	ldw	r2,-16(fp)
 2017bb4:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2017bb8:	e0bffe17 	ldw	r2,-8(fp)
 2017bbc:	00bfc716 	blt	zero,r2,2017adc <altera_avalon_jtag_uart_write+0x58>
 2017bc0:	00000106 	br	2017bc8 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2017bc4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017bc8:	0005303a 	rdctl	r2,status
 2017bcc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017bd0:	e0fff717 	ldw	r3,-36(fp)
 2017bd4:	00bfff84 	movi	r2,-2
 2017bd8:	1884703a 	and	r2,r3,r2
 2017bdc:	1001703a 	wrctl	status,r2
  
  return context;
 2017be0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2017be4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2017be8:	e0bffc17 	ldw	r2,-16(fp)
 2017bec:	10800817 	ldw	r2,32(r2)
 2017bf0:	10c00094 	ori	r3,r2,2
 2017bf4:	e0bffc17 	ldw	r2,-16(fp)
 2017bf8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017bfc:	e0bffc17 	ldw	r2,-16(fp)
 2017c00:	10800017 	ldw	r2,0(r2)
 2017c04:	10800104 	addi	r2,r2,4
 2017c08:	1007883a 	mov	r3,r2
 2017c0c:	e0bffc17 	ldw	r2,-16(fp)
 2017c10:	10800817 	ldw	r2,32(r2)
 2017c14:	18800035 	stwio	r2,0(r3)
 2017c18:	e0bff617 	ldw	r2,-40(fp)
 2017c1c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017c20:	e0bff317 	ldw	r2,-52(fp)
 2017c24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2017c28:	e0bffe17 	ldw	r2,-8(fp)
 2017c2c:	00802a0e 	bge	zero,r2,2017cd8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 2017c30:	e0bfff17 	ldw	r2,-4(fp)
 2017c34:	1090000c 	andi	r2,r2,16384
 2017c38:	10002a1e 	bne	r2,zero,2017ce4 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 2017c3c:	d0a72043 	ldbu	r2,-25471(gp)
 2017c40:	10803fcc 	andi	r2,r2,255
 2017c44:	10800058 	cmpnei	r2,r2,1
 2017c48:	1000161e 	bne	r2,zero,2017ca4 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 2017c4c:	e0bffc17 	ldw	r2,-16(fp)
 2017c50:	10800c17 	ldw	r2,48(r2)
 2017c54:	e0bff515 	stw	r2,-44(fp)
 2017c58:	00800184 	movi	r2,6
 2017c5c:	e0bff98d 	sth	r2,-26(fp)
 2017c60:	00bfe0c4 	movi	r2,-125
 2017c64:	e0bffa05 	stb	r2,-24(fp)
 2017c68:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2017c6c:	d0a72043 	ldbu	r2,-25471(gp)
 2017c70:	10803fcc 	andi	r2,r2,255
 2017c74:	10001526 	beq	r2,zero,2017ccc <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2017c78:	e0fff98b 	ldhu	r3,-26(fp)
 2017c7c:	e13ffa03 	ldbu	r4,-24(fp)
 2017c80:	e17ffa8b 	ldhu	r5,-22(fp)
 2017c84:	e0bffb04 	addi	r2,fp,-20
 2017c88:	d8800015 	stw	r2,0(sp)
 2017c8c:	280f883a 	mov	r7,r5
 2017c90:	200d883a 	mov	r6,r4
 2017c94:	180b883a 	mov	r5,r3
 2017c98:	e13ff517 	ldw	r4,-44(fp)
 2017c9c:	20117000 	call	2011700 <OSFlagPend>
 2017ca0:	00000a06 	br	2017ccc <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2017ca4:	0001883a 	nop
 2017ca8:	e0bffc17 	ldw	r2,-16(fp)
 2017cac:	10c01017 	ldw	r3,64(r2)
 2017cb0:	e0bff017 	ldw	r2,-64(fp)
 2017cb4:	1880051e 	bne	r3,r2,2017ccc <altera_avalon_jtag_uart_write+0x248>
 2017cb8:	e0bffc17 	ldw	r2,-16(fp)
 2017cbc:	10c00917 	ldw	r3,36(r2)
 2017cc0:	e0bffc17 	ldw	r2,-16(fp)
 2017cc4:	10800117 	ldw	r2,4(r2)
 2017cc8:	18bff736 	bltu	r3,r2,2017ca8 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2017ccc:	e0bffc17 	ldw	r2,-16(fp)
 2017cd0:	10800917 	ldw	r2,36(r2)
 2017cd4:	1000051e 	bne	r2,zero,2017cec <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 2017cd8:	e0bffe17 	ldw	r2,-8(fp)
 2017cdc:	00bfb616 	blt	zero,r2,2017bb8 <altera_avalon_jtag_uart_write+0x134>
 2017ce0:	00000306 	br	2017cf0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2017ce4:	0001883a 	nop
 2017ce8:	00000106 	br	2017cf0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 2017cec:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 2017cf0:	e0bffc17 	ldw	r2,-16(fp)
 2017cf4:	10800b17 	ldw	r2,44(r2)
 2017cf8:	1009883a 	mov	r4,r2
 2017cfc:	2014fb40 	call	2014fb4 <OSSemPost>

  if (ptr != start)
 2017d00:	e0fffd17 	ldw	r3,-12(fp)
 2017d04:	e0bff217 	ldw	r2,-56(fp)
 2017d08:	18800426 	beq	r3,r2,2017d1c <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 2017d0c:	e0fffd17 	ldw	r3,-12(fp)
 2017d10:	e0bff217 	ldw	r2,-56(fp)
 2017d14:	1885c83a 	sub	r2,r3,r2
 2017d18:	00000606 	br	2017d34 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 2017d1c:	e0bfff17 	ldw	r2,-4(fp)
 2017d20:	1090000c 	andi	r2,r2,16384
 2017d24:	10000226 	beq	r2,zero,2017d30 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 2017d28:	00bffd44 	movi	r2,-11
 2017d2c:	00000106 	br	2017d34 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2017d30:	00bffec4 	movi	r2,-5
}
 2017d34:	e037883a 	mov	sp,fp
 2017d38:	dfc00117 	ldw	ra,4(sp)
 2017d3c:	df000017 	ldw	fp,0(sp)
 2017d40:	dec00204 	addi	sp,sp,8
 2017d44:	f800283a 	ret

02017d48 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2017d48:	defffa04 	addi	sp,sp,-24
 2017d4c:	dfc00515 	stw	ra,20(sp)
 2017d50:	df000415 	stw	fp,16(sp)
 2017d54:	df000404 	addi	fp,sp,16
 2017d58:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2017d5c:	0007883a 	mov	r3,zero
 2017d60:	e0bfff17 	ldw	r2,-4(fp)
 2017d64:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2017d68:	e0bfff17 	ldw	r2,-4(fp)
 2017d6c:	10800104 	addi	r2,r2,4
 2017d70:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017d74:	0005303a 	rdctl	r2,status
 2017d78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017d7c:	e0fffd17 	ldw	r3,-12(fp)
 2017d80:	00bfff84 	movi	r2,-2
 2017d84:	1884703a 	and	r2,r3,r2
 2017d88:	1001703a 	wrctl	status,r2
  
  return context;
 2017d8c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2017d90:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2017d94:	20188680 	call	2018868 <alt_tick>
 2017d98:	e0bffc17 	ldw	r2,-16(fp)
 2017d9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017da0:	e0bffe17 	ldw	r2,-8(fp)
 2017da4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2017da8:	0001883a 	nop
 2017dac:	e037883a 	mov	sp,fp
 2017db0:	dfc00117 	ldw	ra,4(sp)
 2017db4:	df000017 	ldw	fp,0(sp)
 2017db8:	dec00204 	addi	sp,sp,8
 2017dbc:	f800283a 	ret

02017dc0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2017dc0:	defff804 	addi	sp,sp,-32
 2017dc4:	dfc00715 	stw	ra,28(sp)
 2017dc8:	df000615 	stw	fp,24(sp)
 2017dcc:	df000604 	addi	fp,sp,24
 2017dd0:	e13ffc15 	stw	r4,-16(fp)
 2017dd4:	e17ffd15 	stw	r5,-12(fp)
 2017dd8:	e1bffe15 	stw	r6,-8(fp)
 2017ddc:	e1ffff15 	stw	r7,-4(fp)
 2017de0:	e0bfff17 	ldw	r2,-4(fp)
 2017de4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2017de8:	d0a73517 	ldw	r2,-25388(gp)
 2017dec:	1000021e 	bne	r2,zero,2017df8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2017df0:	e0bffb17 	ldw	r2,-20(fp)
 2017df4:	d0a73515 	stw	r2,-25388(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2017df8:	e0bffc17 	ldw	r2,-16(fp)
 2017dfc:	10800104 	addi	r2,r2,4
 2017e00:	00c001c4 	movi	r3,7
 2017e04:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2017e08:	d8000015 	stw	zero,0(sp)
 2017e0c:	e1fffc17 	ldw	r7,-16(fp)
 2017e10:	01808074 	movhi	r6,513
 2017e14:	319f5204 	addi	r6,r6,32072
 2017e18:	e17ffe17 	ldw	r5,-8(fp)
 2017e1c:	e13ffd17 	ldw	r4,-12(fp)
 2017e20:	20181480 	call	2018148 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2017e24:	0001883a 	nop
 2017e28:	e037883a 	mov	sp,fp
 2017e2c:	dfc00117 	ldw	ra,4(sp)
 2017e30:	df000017 	ldw	fp,0(sp)
 2017e34:	dec00204 	addi	sp,sp,8
 2017e38:	f800283a 	ret

02017e3c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2017e3c:	defff504 	addi	sp,sp,-44
 2017e40:	df000a15 	stw	fp,40(sp)
 2017e44:	df000a04 	addi	fp,sp,40
 2017e48:	e13ffc15 	stw	r4,-16(fp)
 2017e4c:	e17ffd15 	stw	r5,-12(fp)
 2017e50:	e1bffe15 	stw	r6,-8(fp)
 2017e54:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2017e58:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2017e5c:	d0a73517 	ldw	r2,-25388(gp)
  
  if (alt_ticks_per_second ())
 2017e60:	10003c26 	beq	r2,zero,2017f54 <alt_alarm_start+0x118>
  {
    if (alarm)
 2017e64:	e0bffc17 	ldw	r2,-16(fp)
 2017e68:	10003826 	beq	r2,zero,2017f4c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 2017e6c:	e0bffc17 	ldw	r2,-16(fp)
 2017e70:	e0fffe17 	ldw	r3,-8(fp)
 2017e74:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2017e78:	e0bffc17 	ldw	r2,-16(fp)
 2017e7c:	e0ffff17 	ldw	r3,-4(fp)
 2017e80:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017e84:	0005303a 	rdctl	r2,status
 2017e88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017e8c:	e0fff917 	ldw	r3,-28(fp)
 2017e90:	00bfff84 	movi	r2,-2
 2017e94:	1884703a 	and	r2,r3,r2
 2017e98:	1001703a 	wrctl	status,r2
  
  return context;
 2017e9c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2017ea0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2017ea4:	d0a73617 	ldw	r2,-25384(gp)
      
      current_nticks = alt_nticks();
 2017ea8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2017eac:	e0fffd17 	ldw	r3,-12(fp)
 2017eb0:	e0bff617 	ldw	r2,-40(fp)
 2017eb4:	1885883a 	add	r2,r3,r2
 2017eb8:	10c00044 	addi	r3,r2,1
 2017ebc:	e0bffc17 	ldw	r2,-16(fp)
 2017ec0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2017ec4:	e0bffc17 	ldw	r2,-16(fp)
 2017ec8:	10c00217 	ldw	r3,8(r2)
 2017ecc:	e0bff617 	ldw	r2,-40(fp)
 2017ed0:	1880042e 	bgeu	r3,r2,2017ee4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2017ed4:	e0bffc17 	ldw	r2,-16(fp)
 2017ed8:	00c00044 	movi	r3,1
 2017edc:	10c00405 	stb	r3,16(r2)
 2017ee0:	00000206 	br	2017eec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2017ee4:	e0bffc17 	ldw	r2,-16(fp)
 2017ee8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2017eec:	e0bffc17 	ldw	r2,-16(fp)
 2017ef0:	d0e02e04 	addi	r3,gp,-32584
 2017ef4:	e0fffa15 	stw	r3,-24(fp)
 2017ef8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2017efc:	e0bffb17 	ldw	r2,-20(fp)
 2017f00:	e0fffa17 	ldw	r3,-24(fp)
 2017f04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2017f08:	e0bffa17 	ldw	r2,-24(fp)
 2017f0c:	10c00017 	ldw	r3,0(r2)
 2017f10:	e0bffb17 	ldw	r2,-20(fp)
 2017f14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2017f18:	e0bffa17 	ldw	r2,-24(fp)
 2017f1c:	10800017 	ldw	r2,0(r2)
 2017f20:	e0fffb17 	ldw	r3,-20(fp)
 2017f24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2017f28:	e0bffa17 	ldw	r2,-24(fp)
 2017f2c:	e0fffb17 	ldw	r3,-20(fp)
 2017f30:	10c00015 	stw	r3,0(r2)
 2017f34:	e0bff817 	ldw	r2,-32(fp)
 2017f38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f3c:	e0bff717 	ldw	r2,-36(fp)
 2017f40:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2017f44:	0005883a 	mov	r2,zero
 2017f48:	00000306 	br	2017f58 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2017f4c:	00bffa84 	movi	r2,-22
 2017f50:	00000106 	br	2017f58 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2017f54:	00bfde84 	movi	r2,-134
  }
}
 2017f58:	e037883a 	mov	sp,fp
 2017f5c:	df000017 	ldw	fp,0(sp)
 2017f60:	dec00104 	addi	sp,sp,4
 2017f64:	f800283a 	ret

02017f68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2017f68:	deffff04 	addi	sp,sp,-4
 2017f6c:	df000015 	stw	fp,0(sp)
 2017f70:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2017f74:	0001883a 	nop
 2017f78:	e037883a 	mov	sp,fp
 2017f7c:	df000017 	ldw	fp,0(sp)
 2017f80:	dec00104 	addi	sp,sp,4
 2017f84:	f800283a 	ret

02017f88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017f88:	defffe04 	addi	sp,sp,-8
 2017f8c:	dfc00115 	stw	ra,4(sp)
 2017f90:	df000015 	stw	fp,0(sp)
 2017f94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2017f98:	d0a00c17 	ldw	r2,-32720(gp)
 2017f9c:	10000326 	beq	r2,zero,2017fac <alt_get_errno+0x24>
 2017fa0:	d0a00c17 	ldw	r2,-32720(gp)
 2017fa4:	103ee83a 	callr	r2
 2017fa8:	00000106 	br	2017fb0 <alt_get_errno+0x28>
 2017fac:	d0a71704 	addi	r2,gp,-25508
}
 2017fb0:	e037883a 	mov	sp,fp
 2017fb4:	dfc00117 	ldw	ra,4(sp)
 2017fb8:	df000017 	ldw	fp,0(sp)
 2017fbc:	dec00204 	addi	sp,sp,8
 2017fc0:	f800283a 	ret

02017fc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2017fc4:	defffa04 	addi	sp,sp,-24
 2017fc8:	dfc00515 	stw	ra,20(sp)
 2017fcc:	df000415 	stw	fp,16(sp)
 2017fd0:	df000404 	addi	fp,sp,16
 2017fd4:	e13ffe15 	stw	r4,-8(fp)
 2017fd8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2017fdc:	e0bffe17 	ldw	r2,-8(fp)
 2017fe0:	10000326 	beq	r2,zero,2017ff0 <alt_dev_llist_insert+0x2c>
 2017fe4:	e0bffe17 	ldw	r2,-8(fp)
 2017fe8:	10800217 	ldw	r2,8(r2)
 2017fec:	1000061e 	bne	r2,zero,2018008 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 2017ff0:	2017f880 	call	2017f88 <alt_get_errno>
 2017ff4:	1007883a 	mov	r3,r2
 2017ff8:	00800584 	movi	r2,22
 2017ffc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2018000:	00bffa84 	movi	r2,-22
 2018004:	00001306 	br	2018054 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2018008:	e0bffe17 	ldw	r2,-8(fp)
 201800c:	e0ffff17 	ldw	r3,-4(fp)
 2018010:	e0fffc15 	stw	r3,-16(fp)
 2018014:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2018018:	e0bffd17 	ldw	r2,-12(fp)
 201801c:	e0fffc17 	ldw	r3,-16(fp)
 2018020:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2018024:	e0bffc17 	ldw	r2,-16(fp)
 2018028:	10c00017 	ldw	r3,0(r2)
 201802c:	e0bffd17 	ldw	r2,-12(fp)
 2018030:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2018034:	e0bffc17 	ldw	r2,-16(fp)
 2018038:	10800017 	ldw	r2,0(r2)
 201803c:	e0fffd17 	ldw	r3,-12(fp)
 2018040:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2018044:	e0bffc17 	ldw	r2,-16(fp)
 2018048:	e0fffd17 	ldw	r3,-12(fp)
 201804c:	10c00015 	stw	r3,0(r2)

  return 0;  
 2018050:	0005883a 	mov	r2,zero
}
 2018054:	e037883a 	mov	sp,fp
 2018058:	dfc00117 	ldw	ra,4(sp)
 201805c:	df000017 	ldw	fp,0(sp)
 2018060:	dec00204 	addi	sp,sp,8
 2018064:	f800283a 	ret

02018068 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2018068:	defffd04 	addi	sp,sp,-12
 201806c:	dfc00215 	stw	ra,8(sp)
 2018070:	df000115 	stw	fp,4(sp)
 2018074:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2018078:	008080b4 	movhi	r2,514
 201807c:	10a4e904 	addi	r2,r2,-27740
 2018080:	e0bfff15 	stw	r2,-4(fp)
 2018084:	00000606 	br	20180a0 <_do_ctors+0x38>
        (*ctor) (); 
 2018088:	e0bfff17 	ldw	r2,-4(fp)
 201808c:	10800017 	ldw	r2,0(r2)
 2018090:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2018094:	e0bfff17 	ldw	r2,-4(fp)
 2018098:	10bfff04 	addi	r2,r2,-4
 201809c:	e0bfff15 	stw	r2,-4(fp)
 20180a0:	e0ffff17 	ldw	r3,-4(fp)
 20180a4:	008080b4 	movhi	r2,514
 20180a8:	10a4ea04 	addi	r2,r2,-27736
 20180ac:	18bff62e 	bgeu	r3,r2,2018088 <_do_ctors+0x20>
        (*ctor) (); 
}
 20180b0:	0001883a 	nop
 20180b4:	e037883a 	mov	sp,fp
 20180b8:	dfc00117 	ldw	ra,4(sp)
 20180bc:	df000017 	ldw	fp,0(sp)
 20180c0:	dec00204 	addi	sp,sp,8
 20180c4:	f800283a 	ret

020180c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20180c8:	defffd04 	addi	sp,sp,-12
 20180cc:	dfc00215 	stw	ra,8(sp)
 20180d0:	df000115 	stw	fp,4(sp)
 20180d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20180d8:	008080b4 	movhi	r2,514
 20180dc:	10a4e904 	addi	r2,r2,-27740
 20180e0:	e0bfff15 	stw	r2,-4(fp)
 20180e4:	00000606 	br	2018100 <_do_dtors+0x38>
        (*dtor) (); 
 20180e8:	e0bfff17 	ldw	r2,-4(fp)
 20180ec:	10800017 	ldw	r2,0(r2)
 20180f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20180f4:	e0bfff17 	ldw	r2,-4(fp)
 20180f8:	10bfff04 	addi	r2,r2,-4
 20180fc:	e0bfff15 	stw	r2,-4(fp)
 2018100:	e0ffff17 	ldw	r3,-4(fp)
 2018104:	008080b4 	movhi	r2,514
 2018108:	10a4ea04 	addi	r2,r2,-27736
 201810c:	18bff62e 	bgeu	r3,r2,20180e8 <_do_dtors+0x20>
        (*dtor) (); 
}
 2018110:	0001883a 	nop
 2018114:	e037883a 	mov	sp,fp
 2018118:	dfc00117 	ldw	ra,4(sp)
 201811c:	df000017 	ldw	fp,0(sp)
 2018120:	dec00204 	addi	sp,sp,8
 2018124:	f800283a 	ret

02018128 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2018128:	deffff04 	addi	sp,sp,-4
 201812c:	df000015 	stw	fp,0(sp)
 2018130:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2018134:	0001883a 	nop
 2018138:	e037883a 	mov	sp,fp
 201813c:	df000017 	ldw	fp,0(sp)
 2018140:	dec00104 	addi	sp,sp,4
 2018144:	f800283a 	ret

02018148 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2018148:	defff904 	addi	sp,sp,-28
 201814c:	dfc00615 	stw	ra,24(sp)
 2018150:	df000515 	stw	fp,20(sp)
 2018154:	df000504 	addi	fp,sp,20
 2018158:	e13ffc15 	stw	r4,-16(fp)
 201815c:	e17ffd15 	stw	r5,-12(fp)
 2018160:	e1bffe15 	stw	r6,-8(fp)
 2018164:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2018168:	e0800217 	ldw	r2,8(fp)
 201816c:	d8800015 	stw	r2,0(sp)
 2018170:	e1ffff17 	ldw	r7,-4(fp)
 2018174:	e1bffe17 	ldw	r6,-8(fp)
 2018178:	e17ffd17 	ldw	r5,-12(fp)
 201817c:	e13ffc17 	ldw	r4,-16(fp)
 2018180:	20182f80 	call	20182f8 <alt_iic_isr_register>
}  
 2018184:	e037883a 	mov	sp,fp
 2018188:	dfc00117 	ldw	ra,4(sp)
 201818c:	df000017 	ldw	fp,0(sp)
 2018190:	dec00204 	addi	sp,sp,8
 2018194:	f800283a 	ret

02018198 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2018198:	defff904 	addi	sp,sp,-28
 201819c:	df000615 	stw	fp,24(sp)
 20181a0:	df000604 	addi	fp,sp,24
 20181a4:	e13ffe15 	stw	r4,-8(fp)
 20181a8:	e17fff15 	stw	r5,-4(fp)
 20181ac:	e0bfff17 	ldw	r2,-4(fp)
 20181b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20181b4:	0005303a 	rdctl	r2,status
 20181b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20181bc:	e0fffb17 	ldw	r3,-20(fp)
 20181c0:	00bfff84 	movi	r2,-2
 20181c4:	1884703a 	and	r2,r3,r2
 20181c8:	1001703a 	wrctl	status,r2
  
  return context;
 20181cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20181d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 20181d4:	00c00044 	movi	r3,1
 20181d8:	e0bffa17 	ldw	r2,-24(fp)
 20181dc:	1884983a 	sll	r2,r3,r2
 20181e0:	1007883a 	mov	r3,r2
 20181e4:	d0a73417 	ldw	r2,-25392(gp)
 20181e8:	1884b03a 	or	r2,r3,r2
 20181ec:	d0a73415 	stw	r2,-25392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20181f0:	d0a73417 	ldw	r2,-25392(gp)
 20181f4:	100170fa 	wrctl	ienable,r2
 20181f8:	e0bffc17 	ldw	r2,-16(fp)
 20181fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018200:	e0bffd17 	ldw	r2,-12(fp)
 2018204:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2018208:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 201820c:	0001883a 	nop
}
 2018210:	e037883a 	mov	sp,fp
 2018214:	df000017 	ldw	fp,0(sp)
 2018218:	dec00104 	addi	sp,sp,4
 201821c:	f800283a 	ret

02018220 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2018220:	defff904 	addi	sp,sp,-28
 2018224:	df000615 	stw	fp,24(sp)
 2018228:	df000604 	addi	fp,sp,24
 201822c:	e13ffe15 	stw	r4,-8(fp)
 2018230:	e17fff15 	stw	r5,-4(fp)
 2018234:	e0bfff17 	ldw	r2,-4(fp)
 2018238:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201823c:	0005303a 	rdctl	r2,status
 2018240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2018244:	e0fffb17 	ldw	r3,-20(fp)
 2018248:	00bfff84 	movi	r2,-2
 201824c:	1884703a 	and	r2,r3,r2
 2018250:	1001703a 	wrctl	status,r2
  
  return context;
 2018254:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2018258:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201825c:	00c00044 	movi	r3,1
 2018260:	e0bffa17 	ldw	r2,-24(fp)
 2018264:	1884983a 	sll	r2,r3,r2
 2018268:	0084303a 	nor	r2,zero,r2
 201826c:	1007883a 	mov	r3,r2
 2018270:	d0a73417 	ldw	r2,-25392(gp)
 2018274:	1884703a 	and	r2,r3,r2
 2018278:	d0a73415 	stw	r2,-25392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201827c:	d0a73417 	ldw	r2,-25392(gp)
 2018280:	100170fa 	wrctl	ienable,r2
 2018284:	e0bffc17 	ldw	r2,-16(fp)
 2018288:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201828c:	e0bffd17 	ldw	r2,-12(fp)
 2018290:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2018294:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2018298:	0001883a 	nop
}
 201829c:	e037883a 	mov	sp,fp
 20182a0:	df000017 	ldw	fp,0(sp)
 20182a4:	dec00104 	addi	sp,sp,4
 20182a8:	f800283a 	ret

020182ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20182ac:	defffc04 	addi	sp,sp,-16
 20182b0:	df000315 	stw	fp,12(sp)
 20182b4:	df000304 	addi	fp,sp,12
 20182b8:	e13ffe15 	stw	r4,-8(fp)
 20182bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20182c0:	000530fa 	rdctl	r2,ienable
 20182c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20182c8:	00c00044 	movi	r3,1
 20182cc:	e0bfff17 	ldw	r2,-4(fp)
 20182d0:	1884983a 	sll	r2,r3,r2
 20182d4:	1007883a 	mov	r3,r2
 20182d8:	e0bffd17 	ldw	r2,-12(fp)
 20182dc:	1884703a 	and	r2,r3,r2
 20182e0:	1004c03a 	cmpne	r2,r2,zero
 20182e4:	10803fcc 	andi	r2,r2,255
}
 20182e8:	e037883a 	mov	sp,fp
 20182ec:	df000017 	ldw	fp,0(sp)
 20182f0:	dec00104 	addi	sp,sp,4
 20182f4:	f800283a 	ret

020182f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20182f8:	defff504 	addi	sp,sp,-44
 20182fc:	dfc00a15 	stw	ra,40(sp)
 2018300:	df000915 	stw	fp,36(sp)
 2018304:	df000904 	addi	fp,sp,36
 2018308:	e13ffc15 	stw	r4,-16(fp)
 201830c:	e17ffd15 	stw	r5,-12(fp)
 2018310:	e1bffe15 	stw	r6,-8(fp)
 2018314:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2018318:	00bffa84 	movi	r2,-22
 201831c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2018320:	e0bffd17 	ldw	r2,-12(fp)
 2018324:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2018328:	e0bff817 	ldw	r2,-32(fp)
 201832c:	10800808 	cmpgei	r2,r2,32
 2018330:	1000271e 	bne	r2,zero,20183d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2018334:	0005303a 	rdctl	r2,status
 2018338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201833c:	e0fffb17 	ldw	r3,-20(fp)
 2018340:	00bfff84 	movi	r2,-2
 2018344:	1884703a 	and	r2,r3,r2
 2018348:	1001703a 	wrctl	status,r2
  
  return context;
 201834c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2018350:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2018354:	008080b4 	movhi	r2,514
 2018358:	10908404 	addi	r2,r2,16912
 201835c:	e0fff817 	ldw	r3,-32(fp)
 2018360:	180690fa 	slli	r3,r3,3
 2018364:	10c5883a 	add	r2,r2,r3
 2018368:	e0fffe17 	ldw	r3,-8(fp)
 201836c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2018370:	008080b4 	movhi	r2,514
 2018374:	10908404 	addi	r2,r2,16912
 2018378:	e0fff817 	ldw	r3,-32(fp)
 201837c:	180690fa 	slli	r3,r3,3
 2018380:	10c5883a 	add	r2,r2,r3
 2018384:	10800104 	addi	r2,r2,4
 2018388:	e0ffff17 	ldw	r3,-4(fp)
 201838c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2018390:	e0bffe17 	ldw	r2,-8(fp)
 2018394:	10000526 	beq	r2,zero,20183ac <alt_iic_isr_register+0xb4>
 2018398:	e0bff817 	ldw	r2,-32(fp)
 201839c:	100b883a 	mov	r5,r2
 20183a0:	e13ffc17 	ldw	r4,-16(fp)
 20183a4:	20181980 	call	2018198 <alt_ic_irq_enable>
 20183a8:	00000406 	br	20183bc <alt_iic_isr_register+0xc4>
 20183ac:	e0bff817 	ldw	r2,-32(fp)
 20183b0:	100b883a 	mov	r5,r2
 20183b4:	e13ffc17 	ldw	r4,-16(fp)
 20183b8:	20182200 	call	2018220 <alt_ic_irq_disable>
 20183bc:	e0bff715 	stw	r2,-36(fp)
 20183c0:	e0bffa17 	ldw	r2,-24(fp)
 20183c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20183c8:	e0bff917 	ldw	r2,-28(fp)
 20183cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20183d0:	e0bff717 	ldw	r2,-36(fp)
}
 20183d4:	e037883a 	mov	sp,fp
 20183d8:	dfc00117 	ldw	ra,4(sp)
 20183dc:	df000017 	ldw	fp,0(sp)
 20183e0:	dec00204 	addi	sp,sp,8
 20183e4:	f800283a 	ret

020183e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 20183e8:	defff804 	addi	sp,sp,-32
 20183ec:	dfc00715 	stw	ra,28(sp)
 20183f0:	df000615 	stw	fp,24(sp)
 20183f4:	dc000515 	stw	r16,20(sp)
 20183f8:	df000604 	addi	fp,sp,24
 20183fc:	e13ffb15 	stw	r4,-20(fp)
 2018400:	e17ffc15 	stw	r5,-16(fp)
 2018404:	e1bffd15 	stw	r6,-12(fp)
 2018408:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 201840c:	e1bffe17 	ldw	r6,-8(fp)
 2018410:	e17ffd17 	ldw	r5,-12(fp)
 2018414:	e13ffc17 	ldw	r4,-16(fp)
 2018418:	20186700 	call	2018670 <open>
 201841c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2018420:	e0bffa17 	ldw	r2,-24(fp)
 2018424:	10002216 	blt	r2,zero,20184b0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2018428:	040080b4 	movhi	r16,514
 201842c:	84283e04 	addi	r16,r16,-24328
 2018430:	e0bffa17 	ldw	r2,-24(fp)
 2018434:	01400304 	movi	r5,12
 2018438:	1009883a 	mov	r4,r2
 201843c:	20011180 	call	2001118 <__mulsi3>
 2018440:	8085883a 	add	r2,r16,r2
 2018444:	10c00017 	ldw	r3,0(r2)
 2018448:	e0bffb17 	ldw	r2,-20(fp)
 201844c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2018450:	040080b4 	movhi	r16,514
 2018454:	84283e04 	addi	r16,r16,-24328
 2018458:	e0bffa17 	ldw	r2,-24(fp)
 201845c:	01400304 	movi	r5,12
 2018460:	1009883a 	mov	r4,r2
 2018464:	20011180 	call	2001118 <__mulsi3>
 2018468:	8085883a 	add	r2,r16,r2
 201846c:	10800104 	addi	r2,r2,4
 2018470:	10c00017 	ldw	r3,0(r2)
 2018474:	e0bffb17 	ldw	r2,-20(fp)
 2018478:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201847c:	040080b4 	movhi	r16,514
 2018480:	84283e04 	addi	r16,r16,-24328
 2018484:	e0bffa17 	ldw	r2,-24(fp)
 2018488:	01400304 	movi	r5,12
 201848c:	1009883a 	mov	r4,r2
 2018490:	20011180 	call	2001118 <__mulsi3>
 2018494:	8085883a 	add	r2,r16,r2
 2018498:	10800204 	addi	r2,r2,8
 201849c:	10c00017 	ldw	r3,0(r2)
 20184a0:	e0bffb17 	ldw	r2,-20(fp)
 20184a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20184a8:	e13ffa17 	ldw	r4,-24(fp)
 20184ac:	200e7100 	call	200e710 <alt_release_fd>
  }
} 
 20184b0:	0001883a 	nop
 20184b4:	e6ffff04 	addi	sp,fp,-4
 20184b8:	dfc00217 	ldw	ra,8(sp)
 20184bc:	df000117 	ldw	fp,4(sp)
 20184c0:	dc000017 	ldw	r16,0(sp)
 20184c4:	dec00304 	addi	sp,sp,12
 20184c8:	f800283a 	ret

020184cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20184cc:	defffb04 	addi	sp,sp,-20
 20184d0:	dfc00415 	stw	ra,16(sp)
 20184d4:	df000315 	stw	fp,12(sp)
 20184d8:	df000304 	addi	fp,sp,12
 20184dc:	e13ffd15 	stw	r4,-12(fp)
 20184e0:	e17ffe15 	stw	r5,-8(fp)
 20184e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 20184e8:	01c07fc4 	movi	r7,511
 20184ec:	01800044 	movi	r6,1
 20184f0:	e17ffd17 	ldw	r5,-12(fp)
 20184f4:	010080b4 	movhi	r4,514
 20184f8:	21284104 	addi	r4,r4,-24316
 20184fc:	20183e80 	call	20183e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2018500:	01c07fc4 	movi	r7,511
 2018504:	000d883a 	mov	r6,zero
 2018508:	e17ffe17 	ldw	r5,-8(fp)
 201850c:	010080b4 	movhi	r4,514
 2018510:	21283e04 	addi	r4,r4,-24328
 2018514:	20183e80 	call	20183e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2018518:	01c07fc4 	movi	r7,511
 201851c:	01800044 	movi	r6,1
 2018520:	e17fff17 	ldw	r5,-4(fp)
 2018524:	010080b4 	movhi	r4,514
 2018528:	21284404 	addi	r4,r4,-24304
 201852c:	20183e80 	call	20183e8 <alt_open_fd>
}  
 2018530:	0001883a 	nop
 2018534:	e037883a 	mov	sp,fp
 2018538:	dfc00117 	ldw	ra,4(sp)
 201853c:	df000017 	ldw	fp,0(sp)
 2018540:	dec00204 	addi	sp,sp,8
 2018544:	f800283a 	ret

02018548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2018548:	defffe04 	addi	sp,sp,-8
 201854c:	dfc00115 	stw	ra,4(sp)
 2018550:	df000015 	stw	fp,0(sp)
 2018554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2018558:	d0a00c17 	ldw	r2,-32720(gp)
 201855c:	10000326 	beq	r2,zero,201856c <alt_get_errno+0x24>
 2018560:	d0a00c17 	ldw	r2,-32720(gp)
 2018564:	103ee83a 	callr	r2
 2018568:	00000106 	br	2018570 <alt_get_errno+0x28>
 201856c:	d0a71704 	addi	r2,gp,-25508
}
 2018570:	e037883a 	mov	sp,fp
 2018574:	dfc00117 	ldw	ra,4(sp)
 2018578:	df000017 	ldw	fp,0(sp)
 201857c:	dec00204 	addi	sp,sp,8
 2018580:	f800283a 	ret

02018584 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2018584:	defffb04 	addi	sp,sp,-20
 2018588:	dfc00415 	stw	ra,16(sp)
 201858c:	df000315 	stw	fp,12(sp)
 2018590:	dc000215 	stw	r16,8(sp)
 2018594:	df000304 	addi	fp,sp,12
 2018598:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201859c:	e0bffe17 	ldw	r2,-8(fp)
 20185a0:	10800217 	ldw	r2,8(r2)
 20185a4:	10d00034 	orhi	r3,r2,16384
 20185a8:	e0bffe17 	ldw	r2,-8(fp)
 20185ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20185b0:	e03ffd15 	stw	zero,-12(fp)
 20185b4:	00002306 	br	2018644 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20185b8:	040080b4 	movhi	r16,514
 20185bc:	84283e04 	addi	r16,r16,-24328
 20185c0:	e0bffd17 	ldw	r2,-12(fp)
 20185c4:	01400304 	movi	r5,12
 20185c8:	1009883a 	mov	r4,r2
 20185cc:	20011180 	call	2001118 <__mulsi3>
 20185d0:	8085883a 	add	r2,r16,r2
 20185d4:	10c00017 	ldw	r3,0(r2)
 20185d8:	e0bffe17 	ldw	r2,-8(fp)
 20185dc:	10800017 	ldw	r2,0(r2)
 20185e0:	1880151e 	bne	r3,r2,2018638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 20185e4:	040080b4 	movhi	r16,514
 20185e8:	84283e04 	addi	r16,r16,-24328
 20185ec:	e0bffd17 	ldw	r2,-12(fp)
 20185f0:	01400304 	movi	r5,12
 20185f4:	1009883a 	mov	r4,r2
 20185f8:	20011180 	call	2001118 <__mulsi3>
 20185fc:	8085883a 	add	r2,r16,r2
 2018600:	10800204 	addi	r2,r2,8
 2018604:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2018608:	10000b0e 	bge	r2,zero,2018638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201860c:	01400304 	movi	r5,12
 2018610:	e13ffd17 	ldw	r4,-12(fp)
 2018614:	20011180 	call	2001118 <__mulsi3>
 2018618:	1007883a 	mov	r3,r2
 201861c:	008080b4 	movhi	r2,514
 2018620:	10a83e04 	addi	r2,r2,-24328
 2018624:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2018628:	e0bffe17 	ldw	r2,-8(fp)
 201862c:	18800226 	beq	r3,r2,2018638 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2018630:	00bffcc4 	movi	r2,-13
 2018634:	00000806 	br	2018658 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2018638:	e0bffd17 	ldw	r2,-12(fp)
 201863c:	10800044 	addi	r2,r2,1
 2018640:	e0bffd15 	stw	r2,-12(fp)
 2018644:	d0a00b17 	ldw	r2,-32724(gp)
 2018648:	1007883a 	mov	r3,r2
 201864c:	e0bffd17 	ldw	r2,-12(fp)
 2018650:	18bfd92e 	bgeu	r3,r2,20185b8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2018654:	0005883a 	mov	r2,zero
}
 2018658:	e6ffff04 	addi	sp,fp,-4
 201865c:	dfc00217 	ldw	ra,8(sp)
 2018660:	df000117 	ldw	fp,4(sp)
 2018664:	dc000017 	ldw	r16,0(sp)
 2018668:	dec00304 	addi	sp,sp,12
 201866c:	f800283a 	ret

02018670 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2018670:	defff604 	addi	sp,sp,-40
 2018674:	dfc00915 	stw	ra,36(sp)
 2018678:	df000815 	stw	fp,32(sp)
 201867c:	df000804 	addi	fp,sp,32
 2018680:	e13ffd15 	stw	r4,-12(fp)
 2018684:	e17ffe15 	stw	r5,-8(fp)
 2018688:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201868c:	00bfffc4 	movi	r2,-1
 2018690:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2018694:	00bffb44 	movi	r2,-19
 2018698:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 201869c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20186a0:	d1600904 	addi	r5,gp,-32732
 20186a4:	e13ffd17 	ldw	r4,-12(fp)
 20186a8:	2018cec0 	call	2018cec <alt_find_dev>
 20186ac:	e0bff815 	stw	r2,-32(fp)
 20186b0:	e0bff817 	ldw	r2,-32(fp)
 20186b4:	1000051e 	bne	r2,zero,20186cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 20186b8:	e13ffd17 	ldw	r4,-12(fp)
 20186bc:	2018d7c0 	call	2018d7c <alt_find_file>
 20186c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 20186c4:	00800044 	movi	r2,1
 20186c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 20186cc:	e0bff817 	ldw	r2,-32(fp)
 20186d0:	10002b26 	beq	r2,zero,2018780 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 20186d4:	e13ff817 	ldw	r4,-32(fp)
 20186d8:	2018e840 	call	2018e84 <alt_get_fd>
 20186dc:	e0bff915 	stw	r2,-28(fp)
 20186e0:	e0bff917 	ldw	r2,-28(fp)
 20186e4:	1000030e 	bge	r2,zero,20186f4 <open+0x84>
    {
      status = index;
 20186e8:	e0bff917 	ldw	r2,-28(fp)
 20186ec:	e0bffa15 	stw	r2,-24(fp)
 20186f0:	00002506 	br	2018788 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 20186f4:	01400304 	movi	r5,12
 20186f8:	e13ff917 	ldw	r4,-28(fp)
 20186fc:	20011180 	call	2001118 <__mulsi3>
 2018700:	1007883a 	mov	r3,r2
 2018704:	008080b4 	movhi	r2,514
 2018708:	10a83e04 	addi	r2,r2,-24328
 201870c:	1885883a 	add	r2,r3,r2
 2018710:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2018714:	e0fffe17 	ldw	r3,-8(fp)
 2018718:	00900034 	movhi	r2,16384
 201871c:	10bfffc4 	addi	r2,r2,-1
 2018720:	1886703a 	and	r3,r3,r2
 2018724:	e0bffc17 	ldw	r2,-16(fp)
 2018728:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201872c:	e0bffb17 	ldw	r2,-20(fp)
 2018730:	1000051e 	bne	r2,zero,2018748 <open+0xd8>
 2018734:	e13ffc17 	ldw	r4,-16(fp)
 2018738:	20185840 	call	2018584 <alt_file_locked>
 201873c:	e0bffa15 	stw	r2,-24(fp)
 2018740:	e0bffa17 	ldw	r2,-24(fp)
 2018744:	10001016 	blt	r2,zero,2018788 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2018748:	e0bff817 	ldw	r2,-32(fp)
 201874c:	10800317 	ldw	r2,12(r2)
 2018750:	10000826 	beq	r2,zero,2018774 <open+0x104>
 2018754:	e0bff817 	ldw	r2,-32(fp)
 2018758:	10800317 	ldw	r2,12(r2)
 201875c:	e1ffff17 	ldw	r7,-4(fp)
 2018760:	e1bffe17 	ldw	r6,-8(fp)
 2018764:	e17ffd17 	ldw	r5,-12(fp)
 2018768:	e13ffc17 	ldw	r4,-16(fp)
 201876c:	103ee83a 	callr	r2
 2018770:	00000106 	br	2018778 <open+0x108>
 2018774:	0005883a 	mov	r2,zero
 2018778:	e0bffa15 	stw	r2,-24(fp)
 201877c:	00000206 	br	2018788 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2018780:	00bffb44 	movi	r2,-19
 2018784:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2018788:	e0bffa17 	ldw	r2,-24(fp)
 201878c:	1000090e 	bge	r2,zero,20187b4 <open+0x144>
  {
    alt_release_fd (index);  
 2018790:	e13ff917 	ldw	r4,-28(fp)
 2018794:	200e7100 	call	200e710 <alt_release_fd>
    ALT_ERRNO = -status;
 2018798:	20185480 	call	2018548 <alt_get_errno>
 201879c:	1007883a 	mov	r3,r2
 20187a0:	e0bffa17 	ldw	r2,-24(fp)
 20187a4:	0085c83a 	sub	r2,zero,r2
 20187a8:	18800015 	stw	r2,0(r3)
    return -1;
 20187ac:	00bfffc4 	movi	r2,-1
 20187b0:	00000106 	br	20187b8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 20187b4:	e0bff917 	ldw	r2,-28(fp)
}
 20187b8:	e037883a 	mov	sp,fp
 20187bc:	dfc00117 	ldw	ra,4(sp)
 20187c0:	df000017 	ldw	fp,0(sp)
 20187c4:	dec00204 	addi	sp,sp,8
 20187c8:	f800283a 	ret

020187cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20187cc:	defffa04 	addi	sp,sp,-24
 20187d0:	df000515 	stw	fp,20(sp)
 20187d4:	df000504 	addi	fp,sp,20
 20187d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20187dc:	0005303a 	rdctl	r2,status
 20187e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20187e4:	e0fffc17 	ldw	r3,-16(fp)
 20187e8:	00bfff84 	movi	r2,-2
 20187ec:	1884703a 	and	r2,r3,r2
 20187f0:	1001703a 	wrctl	status,r2
  
  return context;
 20187f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20187f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20187fc:	e0bfff17 	ldw	r2,-4(fp)
 2018800:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2018804:	e0bffd17 	ldw	r2,-12(fp)
 2018808:	10800017 	ldw	r2,0(r2)
 201880c:	e0fffd17 	ldw	r3,-12(fp)
 2018810:	18c00117 	ldw	r3,4(r3)
 2018814:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2018818:	e0bffd17 	ldw	r2,-12(fp)
 201881c:	10800117 	ldw	r2,4(r2)
 2018820:	e0fffd17 	ldw	r3,-12(fp)
 2018824:	18c00017 	ldw	r3,0(r3)
 2018828:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201882c:	e0bffd17 	ldw	r2,-12(fp)
 2018830:	e0fffd17 	ldw	r3,-12(fp)
 2018834:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2018838:	e0bffd17 	ldw	r2,-12(fp)
 201883c:	e0fffd17 	ldw	r3,-12(fp)
 2018840:	10c00015 	stw	r3,0(r2)
 2018844:	e0bffb17 	ldw	r2,-20(fp)
 2018848:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201884c:	e0bffe17 	ldw	r2,-8(fp)
 2018850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2018854:	0001883a 	nop
 2018858:	e037883a 	mov	sp,fp
 201885c:	df000017 	ldw	fp,0(sp)
 2018860:	dec00104 	addi	sp,sp,4
 2018864:	f800283a 	ret

02018868 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2018868:	defffb04 	addi	sp,sp,-20
 201886c:	dfc00415 	stw	ra,16(sp)
 2018870:	df000315 	stw	fp,12(sp)
 2018874:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2018878:	d0a02e17 	ldw	r2,-32584(gp)
 201887c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2018880:	d0a73617 	ldw	r2,-25384(gp)
 2018884:	10800044 	addi	r2,r2,1
 2018888:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201888c:	00002e06 	br	2018948 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2018890:	e0bffd17 	ldw	r2,-12(fp)
 2018894:	10800017 	ldw	r2,0(r2)
 2018898:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 201889c:	e0bffd17 	ldw	r2,-12(fp)
 20188a0:	10800403 	ldbu	r2,16(r2)
 20188a4:	10803fcc 	andi	r2,r2,255
 20188a8:	10000426 	beq	r2,zero,20188bc <alt_tick+0x54>
 20188ac:	d0a73617 	ldw	r2,-25384(gp)
 20188b0:	1000021e 	bne	r2,zero,20188bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 20188b4:	e0bffd17 	ldw	r2,-12(fp)
 20188b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20188bc:	e0bffd17 	ldw	r2,-12(fp)
 20188c0:	10800217 	ldw	r2,8(r2)
 20188c4:	d0e73617 	ldw	r3,-25384(gp)
 20188c8:	18801d36 	bltu	r3,r2,2018940 <alt_tick+0xd8>
 20188cc:	e0bffd17 	ldw	r2,-12(fp)
 20188d0:	10800403 	ldbu	r2,16(r2)
 20188d4:	10803fcc 	andi	r2,r2,255
 20188d8:	1000191e 	bne	r2,zero,2018940 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 20188dc:	e0bffd17 	ldw	r2,-12(fp)
 20188e0:	10800317 	ldw	r2,12(r2)
 20188e4:	e0fffd17 	ldw	r3,-12(fp)
 20188e8:	18c00517 	ldw	r3,20(r3)
 20188ec:	1809883a 	mov	r4,r3
 20188f0:	103ee83a 	callr	r2
 20188f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20188f8:	e0bfff17 	ldw	r2,-4(fp)
 20188fc:	1000031e 	bne	r2,zero,201890c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2018900:	e13ffd17 	ldw	r4,-12(fp)
 2018904:	20187cc0 	call	20187cc <alt_alarm_stop>
 2018908:	00000d06 	br	2018940 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 201890c:	e0bffd17 	ldw	r2,-12(fp)
 2018910:	10c00217 	ldw	r3,8(r2)
 2018914:	e0bfff17 	ldw	r2,-4(fp)
 2018918:	1887883a 	add	r3,r3,r2
 201891c:	e0bffd17 	ldw	r2,-12(fp)
 2018920:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2018924:	e0bffd17 	ldw	r2,-12(fp)
 2018928:	10c00217 	ldw	r3,8(r2)
 201892c:	d0a73617 	ldw	r2,-25384(gp)
 2018930:	1880032e 	bgeu	r3,r2,2018940 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2018934:	e0bffd17 	ldw	r2,-12(fp)
 2018938:	00c00044 	movi	r3,1
 201893c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2018940:	e0bffe17 	ldw	r2,-8(fp)
 2018944:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2018948:	e0fffd17 	ldw	r3,-12(fp)
 201894c:	d0a02e04 	addi	r2,gp,-32584
 2018950:	18bfcf1e 	bne	r3,r2,2018890 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2018954:	200f9240 	call	200f924 <OSTimeTick>
}
 2018958:	0001883a 	nop
 201895c:	e037883a 	mov	sp,fp
 2018960:	dfc00117 	ldw	ra,4(sp)
 2018964:	df000017 	ldw	fp,0(sp)
 2018968:	dec00204 	addi	sp,sp,8
 201896c:	f800283a 	ret

02018970 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2018970:	deffff04 	addi	sp,sp,-4
 2018974:	df000015 	stw	fp,0(sp)
 2018978:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201897c:	000170fa 	wrctl	ienable,zero
}
 2018980:	0001883a 	nop
 2018984:	e037883a 	mov	sp,fp
 2018988:	df000017 	ldw	fp,0(sp)
 201898c:	dec00104 	addi	sp,sp,4
 2018990:	f800283a 	ret

02018994 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 2018994:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 2018998:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 201899c:	d1272f17 	ldw	r4,-25412(gp)

      stw ra,  0(sp)
 20189a0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 20189a4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 20189a8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 20189ac:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 20189b0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 20189b4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 20189b8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 20189bc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 20189c0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 20189c4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 20189c8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 20189cc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 20189d0:	2018c080 	call	2018c08 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 20189d4:	d1272a17 	ldw	r4,-25432(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 20189d8:	d1672207 	ldb	r5,-25464(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 20189dc:	d1272f15 	stw	r4,-25412(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 20189e0:	d1672245 	stb	r5,-25463(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 20189e4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 20189e8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 20189ec:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 20189f0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 20189f4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 20189f8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 20189fc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 2018a00:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 2018a04:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 2018a08:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 2018a0c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 2018a10:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 2018a14:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 2018a18:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 2018a1c:	f800283a 	ret

02018a20 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 2018a20:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 2018a24:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 2018a28:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 2018a2c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2018a30:	2018c080 	call	2018c08 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 2018a34:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 2018a38:	d4a72045 	stb	r18,-25471(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 2018a3c:	003fe506 	br	20189d4 <OSCtxSw+0x40>

02018a40 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 2018a40:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 2018a44:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 2018a48:	10800054 	ori	r2,r2,1
      wrctl status, r2
 2018a4c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 2018a50:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 2018a54:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 2018a58:	dec00204 	addi	sp,sp,8

      callr r2
 2018a5c:	103ee83a 	callr	r2

      nop
 2018a60:	0001883a 	nop

02018a64 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 2018a64:	defff704 	addi	sp,sp,-36
 2018a68:	dfc00815 	stw	ra,32(sp)
 2018a6c:	df000715 	stw	fp,28(sp)
 2018a70:	df000704 	addi	fp,sp,28
 2018a74:	e13ffc15 	stw	r4,-16(fp)
 2018a78:	e17ffd15 	stw	r5,-12(fp)
 2018a7c:	e1bffe15 	stw	r6,-8(fp)
 2018a80:	3805883a 	mov	r2,r7
 2018a84:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 2018a88:	e0fffe17 	ldw	r3,-8(fp)
 2018a8c:	00bfff04 	movi	r2,-4
 2018a90:	1884703a 	and	r2,r3,r2
 2018a94:	10bef704 	addi	r2,r2,-1060
 2018a98:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 2018a9c:	01810904 	movi	r6,1060
 2018aa0:	000b883a 	mov	r5,zero
 2018aa4:	e13ff917 	ldw	r4,-28(fp)
 2018aa8:	20099100 	call	2009910 <memset>
 2018aac:	e0bff917 	ldw	r2,-28(fp)
 2018ab0:	10c0bb04 	addi	r3,r2,748
 2018ab4:	e0bff917 	ldw	r2,-28(fp)
 2018ab8:	10c00115 	stw	r3,4(r2)
 2018abc:	e0bff917 	ldw	r2,-28(fp)
 2018ac0:	10c0d504 	addi	r3,r2,852
 2018ac4:	e0bff917 	ldw	r2,-28(fp)
 2018ac8:	10c00215 	stw	r3,8(r2)
 2018acc:	e0bff917 	ldw	r2,-28(fp)
 2018ad0:	10c0ef04 	addi	r3,r2,956
 2018ad4:	e0bff917 	ldw	r2,-28(fp)
 2018ad8:	10c00315 	stw	r3,12(r2)
 2018adc:	e0fff917 	ldw	r3,-28(fp)
 2018ae0:	008080b4 	movhi	r2,514
 2018ae4:	10a60a04 	addi	r2,r2,-26584
 2018ae8:	18800d15 	stw	r2,52(r3)
 2018aec:	e0bff917 	ldw	r2,-28(fp)
 2018af0:	00c00044 	movi	r3,1
 2018af4:	10c02915 	stw	r3,164(r2)
 2018af8:	10002a15 	stw	zero,168(r2)
 2018afc:	e0bff917 	ldw	r2,-28(fp)
 2018b00:	00ccc384 	movi	r3,13070
 2018b04:	10c02b0d 	sth	r3,172(r2)
 2018b08:	e0bff917 	ldw	r2,-28(fp)
 2018b0c:	00eaf344 	movi	r3,-21555
 2018b10:	10c02b8d 	sth	r3,174(r2)
 2018b14:	e0bff917 	ldw	r2,-28(fp)
 2018b18:	00c48d04 	movi	r3,4660
 2018b1c:	10c02c0d 	sth	r3,176(r2)
 2018b20:	e0bff917 	ldw	r2,-28(fp)
 2018b24:	00f99b44 	movi	r3,-6547
 2018b28:	10c02c8d 	sth	r3,178(r2)
 2018b2c:	e0bff917 	ldw	r2,-28(fp)
 2018b30:	00f7bb04 	movi	r3,-8468
 2018b34:	10c02d0d 	sth	r3,180(r2)
 2018b38:	e0bff917 	ldw	r2,-28(fp)
 2018b3c:	00c00144 	movi	r3,5
 2018b40:	10c02d8d 	sth	r3,182(r2)
 2018b44:	e0bff917 	ldw	r2,-28(fp)
 2018b48:	00c002c4 	movi	r3,11
 2018b4c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 2018b50:	e0bff917 	ldw	r2,-28(fp)
 2018b54:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 2018b58:	e0bffa17 	ldw	r2,-24(fp)
 2018b5c:	10bff304 	addi	r2,r2,-52
 2018b60:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 2018b64:	e0bffb17 	ldw	r2,-20(fp)
 2018b68:	10800c04 	addi	r2,r2,48
 2018b6c:	e0fffc17 	ldw	r3,-16(fp)
 2018b70:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2018b74:	e0bffb17 	ldw	r2,-20(fp)
 2018b78:	10800b04 	addi	r2,r2,44
 2018b7c:	e0fffd17 	ldw	r3,-12(fp)
 2018b80:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2018b84:	e0bffb17 	ldw	r2,-20(fp)
 2018b88:	10800a04 	addi	r2,r2,40
 2018b8c:	e0fff917 	ldw	r3,-28(fp)
 2018b90:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2018b94:	008080b4 	movhi	r2,514
 2018b98:	10a29004 	addi	r2,r2,-30144
 2018b9c:	10c00104 	addi	r3,r2,4
 2018ba0:	e0bffb17 	ldw	r2,-20(fp)
 2018ba4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 2018ba8:	e0bffb17 	ldw	r2,-20(fp)
}
 2018bac:	e037883a 	mov	sp,fp
 2018bb0:	dfc00117 	ldw	ra,4(sp)
 2018bb4:	df000017 	ldw	fp,0(sp)
 2018bb8:	dec00204 	addi	sp,sp,8
 2018bbc:	f800283a 	ret

02018bc0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 2018bc0:	defffe04 	addi	sp,sp,-8
 2018bc4:	df000115 	stw	fp,4(sp)
 2018bc8:	df000104 	addi	fp,sp,4
 2018bcc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 2018bd0:	0001883a 	nop
 2018bd4:	e037883a 	mov	sp,fp
 2018bd8:	df000017 	ldw	fp,0(sp)
 2018bdc:	dec00104 	addi	sp,sp,4
 2018be0:	f800283a 	ret

02018be4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 2018be4:	defffe04 	addi	sp,sp,-8
 2018be8:	df000115 	stw	fp,4(sp)
 2018bec:	df000104 	addi	fp,sp,4
 2018bf0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 2018bf4:	0001883a 	nop
 2018bf8:	e037883a 	mov	sp,fp
 2018bfc:	df000017 	ldw	fp,0(sp)
 2018c00:	dec00104 	addi	sp,sp,4
 2018c04:	f800283a 	ret

02018c08 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 2018c08:	deffff04 	addi	sp,sp,-4
 2018c0c:	df000015 	stw	fp,0(sp)
 2018c10:	d839883a 	mov	fp,sp
}
 2018c14:	0001883a 	nop
 2018c18:	e037883a 	mov	sp,fp
 2018c1c:	df000017 	ldw	fp,0(sp)
 2018c20:	dec00104 	addi	sp,sp,4
 2018c24:	f800283a 	ret

02018c28 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 2018c28:	deffff04 	addi	sp,sp,-4
 2018c2c:	df000015 	stw	fp,0(sp)
 2018c30:	d839883a 	mov	fp,sp
}
 2018c34:	0001883a 	nop
 2018c38:	e037883a 	mov	sp,fp
 2018c3c:	df000017 	ldw	fp,0(sp)
 2018c40:	dec00104 	addi	sp,sp,4
 2018c44:	f800283a 	ret

02018c48 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 2018c48:	deffff04 	addi	sp,sp,-4
 2018c4c:	df000015 	stw	fp,0(sp)
 2018c50:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 2018c54:	0001883a 	nop
 2018c58:	e037883a 	mov	sp,fp
 2018c5c:	df000017 	ldw	fp,0(sp)
 2018c60:	dec00104 	addi	sp,sp,4
 2018c64:	f800283a 	ret

02018c68 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 2018c68:	deffff04 	addi	sp,sp,-4
 2018c6c:	df000015 	stw	fp,0(sp)
 2018c70:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2018c74:	0001883a 	nop
 2018c78:	e037883a 	mov	sp,fp
 2018c7c:	df000017 	ldw	fp,0(sp)
 2018c80:	dec00104 	addi	sp,sp,4
 2018c84:	f800283a 	ret

02018c88 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 2018c88:	deffff04 	addi	sp,sp,-4
 2018c8c:	df000015 	stw	fp,0(sp)
 2018c90:	d839883a 	mov	fp,sp
}
 2018c94:	0001883a 	nop
 2018c98:	e037883a 	mov	sp,fp
 2018c9c:	df000017 	ldw	fp,0(sp)
 2018ca0:	dec00104 	addi	sp,sp,4
 2018ca4:	f800283a 	ret

02018ca8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 2018ca8:	deffff04 	addi	sp,sp,-4
 2018cac:	df000015 	stw	fp,0(sp)
 2018cb0:	d839883a 	mov	fp,sp
}
 2018cb4:	0001883a 	nop
 2018cb8:	e037883a 	mov	sp,fp
 2018cbc:	df000017 	ldw	fp,0(sp)
 2018cc0:	dec00104 	addi	sp,sp,4
 2018cc4:	f800283a 	ret

02018cc8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 2018cc8:	defffe04 	addi	sp,sp,-8
 2018ccc:	df000115 	stw	fp,4(sp)
 2018cd0:	df000104 	addi	fp,sp,4
 2018cd4:	e13fff15 	stw	r4,-4(fp)
}
 2018cd8:	0001883a 	nop
 2018cdc:	e037883a 	mov	sp,fp
 2018ce0:	df000017 	ldw	fp,0(sp)
 2018ce4:	dec00104 	addi	sp,sp,4
 2018ce8:	f800283a 	ret

02018cec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2018cec:	defffa04 	addi	sp,sp,-24
 2018cf0:	dfc00515 	stw	ra,20(sp)
 2018cf4:	df000415 	stw	fp,16(sp)
 2018cf8:	df000404 	addi	fp,sp,16
 2018cfc:	e13ffe15 	stw	r4,-8(fp)
 2018d00:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2018d04:	e0bfff17 	ldw	r2,-4(fp)
 2018d08:	10800017 	ldw	r2,0(r2)
 2018d0c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2018d10:	e13ffe17 	ldw	r4,-8(fp)
 2018d14:	2003bb80 	call	2003bb8 <strlen>
 2018d18:	10800044 	addi	r2,r2,1
 2018d1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2018d20:	00000d06 	br	2018d58 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2018d24:	e0bffc17 	ldw	r2,-16(fp)
 2018d28:	10800217 	ldw	r2,8(r2)
 2018d2c:	e0fffd17 	ldw	r3,-12(fp)
 2018d30:	180d883a 	mov	r6,r3
 2018d34:	e17ffe17 	ldw	r5,-8(fp)
 2018d38:	1009883a 	mov	r4,r2
 2018d3c:	20190600 	call	2019060 <memcmp>
 2018d40:	1000021e 	bne	r2,zero,2018d4c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2018d44:	e0bffc17 	ldw	r2,-16(fp)
 2018d48:	00000706 	br	2018d68 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2018d4c:	e0bffc17 	ldw	r2,-16(fp)
 2018d50:	10800017 	ldw	r2,0(r2)
 2018d54:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2018d58:	e0fffc17 	ldw	r3,-16(fp)
 2018d5c:	e0bfff17 	ldw	r2,-4(fp)
 2018d60:	18bff01e 	bne	r3,r2,2018d24 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2018d64:	0005883a 	mov	r2,zero
}
 2018d68:	e037883a 	mov	sp,fp
 2018d6c:	dfc00117 	ldw	ra,4(sp)
 2018d70:	df000017 	ldw	fp,0(sp)
 2018d74:	dec00204 	addi	sp,sp,8
 2018d78:	f800283a 	ret

02018d7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2018d7c:	defffb04 	addi	sp,sp,-20
 2018d80:	dfc00415 	stw	ra,16(sp)
 2018d84:	df000315 	stw	fp,12(sp)
 2018d88:	df000304 	addi	fp,sp,12
 2018d8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2018d90:	d0a00717 	ldw	r2,-32740(gp)
 2018d94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2018d98:	00003106 	br	2018e60 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2018d9c:	e0bffd17 	ldw	r2,-12(fp)
 2018da0:	10800217 	ldw	r2,8(r2)
 2018da4:	1009883a 	mov	r4,r2
 2018da8:	2003bb80 	call	2003bb8 <strlen>
 2018dac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2018db0:	e0bffd17 	ldw	r2,-12(fp)
 2018db4:	10c00217 	ldw	r3,8(r2)
 2018db8:	e0bffe17 	ldw	r2,-8(fp)
 2018dbc:	10bfffc4 	addi	r2,r2,-1
 2018dc0:	1885883a 	add	r2,r3,r2
 2018dc4:	10800003 	ldbu	r2,0(r2)
 2018dc8:	10803fcc 	andi	r2,r2,255
 2018dcc:	1080201c 	xori	r2,r2,128
 2018dd0:	10bfe004 	addi	r2,r2,-128
 2018dd4:	10800bd8 	cmpnei	r2,r2,47
 2018dd8:	1000031e 	bne	r2,zero,2018de8 <alt_find_file+0x6c>
    {
      len -= 1;
 2018ddc:	e0bffe17 	ldw	r2,-8(fp)
 2018de0:	10bfffc4 	addi	r2,r2,-1
 2018de4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2018de8:	e0bffe17 	ldw	r2,-8(fp)
 2018dec:	e0ffff17 	ldw	r3,-4(fp)
 2018df0:	1885883a 	add	r2,r3,r2
 2018df4:	10800003 	ldbu	r2,0(r2)
 2018df8:	10803fcc 	andi	r2,r2,255
 2018dfc:	1080201c 	xori	r2,r2,128
 2018e00:	10bfe004 	addi	r2,r2,-128
 2018e04:	10800be0 	cmpeqi	r2,r2,47
 2018e08:	1000081e 	bne	r2,zero,2018e2c <alt_find_file+0xb0>
 2018e0c:	e0bffe17 	ldw	r2,-8(fp)
 2018e10:	e0ffff17 	ldw	r3,-4(fp)
 2018e14:	1885883a 	add	r2,r3,r2
 2018e18:	10800003 	ldbu	r2,0(r2)
 2018e1c:	10803fcc 	andi	r2,r2,255
 2018e20:	1080201c 	xori	r2,r2,128
 2018e24:	10bfe004 	addi	r2,r2,-128
 2018e28:	10000a1e 	bne	r2,zero,2018e54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2018e2c:	e0bffd17 	ldw	r2,-12(fp)
 2018e30:	10800217 	ldw	r2,8(r2)
 2018e34:	e0fffe17 	ldw	r3,-8(fp)
 2018e38:	180d883a 	mov	r6,r3
 2018e3c:	e17fff17 	ldw	r5,-4(fp)
 2018e40:	1009883a 	mov	r4,r2
 2018e44:	20190600 	call	2019060 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2018e48:	1000021e 	bne	r2,zero,2018e54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2018e4c:	e0bffd17 	ldw	r2,-12(fp)
 2018e50:	00000706 	br	2018e70 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2018e54:	e0bffd17 	ldw	r2,-12(fp)
 2018e58:	10800017 	ldw	r2,0(r2)
 2018e5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2018e60:	e0fffd17 	ldw	r3,-12(fp)
 2018e64:	d0a00704 	addi	r2,gp,-32740
 2018e68:	18bfcc1e 	bne	r3,r2,2018d9c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2018e6c:	0005883a 	mov	r2,zero
}
 2018e70:	e037883a 	mov	sp,fp
 2018e74:	dfc00117 	ldw	ra,4(sp)
 2018e78:	df000017 	ldw	fp,0(sp)
 2018e7c:	dec00204 	addi	sp,sp,8
 2018e80:	f800283a 	ret

02018e84 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2018e84:	defff804 	addi	sp,sp,-32
 2018e88:	dfc00715 	stw	ra,28(sp)
 2018e8c:	df000615 	stw	fp,24(sp)
 2018e90:	dc000515 	stw	r16,20(sp)
 2018e94:	df000604 	addi	fp,sp,24
 2018e98:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2018e9c:	00bffa04 	movi	r2,-24
 2018ea0:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 2018ea4:	d0a71817 	ldw	r2,-25504(gp)
 2018ea8:	e0bffc15 	stw	r2,-16(fp)
 2018eac:	e03ffd0d 	sth	zero,-12(fp)
 2018eb0:	e0bffd0b 	ldhu	r2,-12(fp)
 2018eb4:	e0fffd84 	addi	r3,fp,-10
 2018eb8:	180d883a 	mov	r6,r3
 2018ebc:	100b883a 	mov	r5,r2
 2018ec0:	e13ffc17 	ldw	r4,-16(fp)
 2018ec4:	2014c3c0 	call	2014c3c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2018ec8:	e03ffa15 	stw	zero,-24(fp)
 2018ecc:	00001d06 	br	2018f44 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
 2018ed0:	040080b4 	movhi	r16,514
 2018ed4:	84283e04 	addi	r16,r16,-24328
 2018ed8:	e0bffa17 	ldw	r2,-24(fp)
 2018edc:	01400304 	movi	r5,12
 2018ee0:	1009883a 	mov	r4,r2
 2018ee4:	20011180 	call	2001118 <__mulsi3>
 2018ee8:	8085883a 	add	r2,r16,r2
 2018eec:	10800017 	ldw	r2,0(r2)
 2018ef0:	1000111e 	bne	r2,zero,2018f38 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
 2018ef4:	040080b4 	movhi	r16,514
 2018ef8:	84283e04 	addi	r16,r16,-24328
 2018efc:	e0bffa17 	ldw	r2,-24(fp)
 2018f00:	01400304 	movi	r5,12
 2018f04:	1009883a 	mov	r4,r2
 2018f08:	20011180 	call	2001118 <__mulsi3>
 2018f0c:	8085883a 	add	r2,r16,r2
 2018f10:	e0fffe17 	ldw	r3,-8(fp)
 2018f14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2018f18:	d0e00b17 	ldw	r3,-32724(gp)
 2018f1c:	e0bffa17 	ldw	r2,-24(fp)
 2018f20:	1880020e 	bge	r3,r2,2018f2c <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
 2018f24:	e0bffa17 	ldw	r2,-24(fp)
 2018f28:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 2018f2c:	e0bffa17 	ldw	r2,-24(fp)
 2018f30:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 2018f34:	00000606 	br	2018f50 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2018f38:	e0bffa17 	ldw	r2,-24(fp)
 2018f3c:	10800044 	addi	r2,r2,1
 2018f40:	e0bffa15 	stw	r2,-24(fp)
 2018f44:	e0bffa17 	ldw	r2,-24(fp)
 2018f48:	10800810 	cmplti	r2,r2,32
 2018f4c:	103fe01e 	bne	r2,zero,2018ed0 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 2018f50:	d0a71817 	ldw	r2,-25504(gp)
 2018f54:	1009883a 	mov	r4,r2
 2018f58:	2014fb40 	call	2014fb4 <OSSemPost>

  return rc;
 2018f5c:	e0bffb17 	ldw	r2,-20(fp)
}
 2018f60:	e6ffff04 	addi	sp,fp,-4
 2018f64:	dfc00217 	ldw	ra,8(sp)
 2018f68:	df000117 	ldw	fp,4(sp)
 2018f6c:	dc000017 	ldw	r16,0(sp)
 2018f70:	dec00304 	addi	sp,sp,12
 2018f74:	f800283a 	ret

02018f78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2018f78:	defffe04 	addi	sp,sp,-8
 2018f7c:	df000115 	stw	fp,4(sp)
 2018f80:	df000104 	addi	fp,sp,4
 2018f84:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2018f88:	e0bfff17 	ldw	r2,-4(fp)
 2018f8c:	10bffe84 	addi	r2,r2,-6
 2018f90:	10c00428 	cmpgeui	r3,r2,16
 2018f94:	18001a1e 	bne	r3,zero,2019000 <alt_exception_cause_generated_bad_addr+0x88>
 2018f98:	100690ba 	slli	r3,r2,2
 2018f9c:	008080b4 	movhi	r2,514
 2018fa0:	10a3ec04 	addi	r2,r2,-28752
 2018fa4:	1885883a 	add	r2,r3,r2
 2018fa8:	10800017 	ldw	r2,0(r2)
 2018fac:	1000683a 	jmp	r2
 2018fb0:	02018ff0 	cmpltui	r8,zero,1599
 2018fb4:	02018ff0 	cmpltui	r8,zero,1599
 2018fb8:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fbc:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fc0:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fc4:	02018ff0 	cmpltui	r8,zero,1599
 2018fc8:	02018ff8 	rdprs	r8,zero,1599
 2018fcc:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fd0:	02018ff0 	cmpltui	r8,zero,1599
 2018fd4:	02018ff0 	cmpltui	r8,zero,1599
 2018fd8:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fdc:	02018ff0 	cmpltui	r8,zero,1599
 2018fe0:	02018ff8 	rdprs	r8,zero,1599
 2018fe4:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fe8:	02019000 	call	201900 <__alt_mem_mem_Nios_PI+0x1900>
 2018fec:	02018ff0 	cmpltui	r8,zero,1599
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2018ff0:	00800044 	movi	r2,1
 2018ff4:	00000306 	br	2019004 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 2018ff8:	0005883a 	mov	r2,zero
 2018ffc:	00000106 	br	2019004 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2019000:	0005883a 	mov	r2,zero
  }
}
 2019004:	e037883a 	mov	sp,fp
 2019008:	df000017 	ldw	fp,0(sp)
 201900c:	dec00104 	addi	sp,sp,4
 2019010:	f800283a 	ret

02019014 <atexit>:
 2019014:	200b883a 	mov	r5,r4
 2019018:	000f883a 	mov	r7,zero
 201901c:	000d883a 	mov	r6,zero
 2019020:	0009883a 	mov	r4,zero
 2019024:	20190dc1 	jmpi	20190dc <__register_exitproc>

02019028 <exit>:
 2019028:	defffe04 	addi	sp,sp,-8
 201902c:	000b883a 	mov	r5,zero
 2019030:	dc000015 	stw	r16,0(sp)
 2019034:	dfc00115 	stw	ra,4(sp)
 2019038:	2021883a 	mov	r16,r4
 201903c:	20191f40 	call	20191f4 <__call_exitprocs>
 2019040:	008080b4 	movhi	r2,514
 2019044:	10acba04 	addi	r2,r2,-19736
 2019048:	11000017 	ldw	r4,0(r2)
 201904c:	20800f17 	ldw	r2,60(r4)
 2019050:	10000126 	beq	r2,zero,2019058 <exit+0x30>
 2019054:	103ee83a 	callr	r2
 2019058:	8009883a 	mov	r4,r16
 201905c:	20193740 	call	2019374 <_exit>

02019060 <memcmp>:
 2019060:	01c000c4 	movi	r7,3
 2019064:	3980192e 	bgeu	r7,r6,20190cc <memcmp+0x6c>
 2019068:	2144b03a 	or	r2,r4,r5
 201906c:	11c4703a 	and	r2,r2,r7
 2019070:	10000f26 	beq	r2,zero,20190b0 <memcmp+0x50>
 2019074:	20800003 	ldbu	r2,0(r4)
 2019078:	28c00003 	ldbu	r3,0(r5)
 201907c:	10c0151e 	bne	r2,r3,20190d4 <memcmp+0x74>
 2019080:	31bfff84 	addi	r6,r6,-2
 2019084:	01ffffc4 	movi	r7,-1
 2019088:	00000406 	br	201909c <memcmp+0x3c>
 201908c:	20800003 	ldbu	r2,0(r4)
 2019090:	28c00003 	ldbu	r3,0(r5)
 2019094:	31bfffc4 	addi	r6,r6,-1
 2019098:	10c00e1e 	bne	r2,r3,20190d4 <memcmp+0x74>
 201909c:	21000044 	addi	r4,r4,1
 20190a0:	29400044 	addi	r5,r5,1
 20190a4:	31fff91e 	bne	r6,r7,201908c <memcmp+0x2c>
 20190a8:	0005883a 	mov	r2,zero
 20190ac:	f800283a 	ret
 20190b0:	20c00017 	ldw	r3,0(r4)
 20190b4:	28800017 	ldw	r2,0(r5)
 20190b8:	18bfee1e 	bne	r3,r2,2019074 <memcmp+0x14>
 20190bc:	31bfff04 	addi	r6,r6,-4
 20190c0:	21000104 	addi	r4,r4,4
 20190c4:	29400104 	addi	r5,r5,4
 20190c8:	39bff936 	bltu	r7,r6,20190b0 <memcmp+0x50>
 20190cc:	303fe91e 	bne	r6,zero,2019074 <memcmp+0x14>
 20190d0:	003ff506 	br	20190a8 <memcmp+0x48>
 20190d4:	10c5c83a 	sub	r2,r2,r3
 20190d8:	f800283a 	ret

020190dc <__register_exitproc>:
 20190dc:	defffa04 	addi	sp,sp,-24
 20190e0:	dc000315 	stw	r16,12(sp)
 20190e4:	040080b4 	movhi	r16,514
 20190e8:	842cba04 	addi	r16,r16,-19736
 20190ec:	80c00017 	ldw	r3,0(r16)
 20190f0:	dc400415 	stw	r17,16(sp)
 20190f4:	dfc00515 	stw	ra,20(sp)
 20190f8:	18805217 	ldw	r2,328(r3)
 20190fc:	2023883a 	mov	r17,r4
 2019100:	10003726 	beq	r2,zero,20191e0 <__register_exitproc+0x104>
 2019104:	10c00117 	ldw	r3,4(r2)
 2019108:	010007c4 	movi	r4,31
 201910c:	20c00e16 	blt	r4,r3,2019148 <__register_exitproc+0x6c>
 2019110:	1a000044 	addi	r8,r3,1
 2019114:	8800221e 	bne	r17,zero,20191a0 <__register_exitproc+0xc4>
 2019118:	18c00084 	addi	r3,r3,2
 201911c:	18c7883a 	add	r3,r3,r3
 2019120:	18c7883a 	add	r3,r3,r3
 2019124:	12000115 	stw	r8,4(r2)
 2019128:	10c7883a 	add	r3,r2,r3
 201912c:	19400015 	stw	r5,0(r3)
 2019130:	0005883a 	mov	r2,zero
 2019134:	dfc00517 	ldw	ra,20(sp)
 2019138:	dc400417 	ldw	r17,16(sp)
 201913c:	dc000317 	ldw	r16,12(sp)
 2019140:	dec00604 	addi	sp,sp,24
 2019144:	f800283a 	ret
 2019148:	00800034 	movhi	r2,0
 201914c:	10800004 	addi	r2,r2,0
 2019150:	10002626 	beq	r2,zero,20191ec <__register_exitproc+0x110>
 2019154:	01006404 	movi	r4,400
 2019158:	d9400015 	stw	r5,0(sp)
 201915c:	d9800115 	stw	r6,4(sp)
 2019160:	d9c00215 	stw	r7,8(sp)
 2019164:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 2019168:	d9400017 	ldw	r5,0(sp)
 201916c:	d9800117 	ldw	r6,4(sp)
 2019170:	d9c00217 	ldw	r7,8(sp)
 2019174:	10001d26 	beq	r2,zero,20191ec <__register_exitproc+0x110>
 2019178:	81000017 	ldw	r4,0(r16)
 201917c:	10000115 	stw	zero,4(r2)
 2019180:	02000044 	movi	r8,1
 2019184:	22405217 	ldw	r9,328(r4)
 2019188:	0007883a 	mov	r3,zero
 201918c:	12400015 	stw	r9,0(r2)
 2019190:	20805215 	stw	r2,328(r4)
 2019194:	10006215 	stw	zero,392(r2)
 2019198:	10006315 	stw	zero,396(r2)
 201919c:	883fde26 	beq	r17,zero,2019118 <__register_exitproc+0x3c>
 20191a0:	18c9883a 	add	r4,r3,r3
 20191a4:	2109883a 	add	r4,r4,r4
 20191a8:	1109883a 	add	r4,r2,r4
 20191ac:	21802215 	stw	r6,136(r4)
 20191b0:	01800044 	movi	r6,1
 20191b4:	12406217 	ldw	r9,392(r2)
 20191b8:	30cc983a 	sll	r6,r6,r3
 20191bc:	4992b03a 	or	r9,r9,r6
 20191c0:	12406215 	stw	r9,392(r2)
 20191c4:	21c04215 	stw	r7,264(r4)
 20191c8:	01000084 	movi	r4,2
 20191cc:	893fd21e 	bne	r17,r4,2019118 <__register_exitproc+0x3c>
 20191d0:	11006317 	ldw	r4,396(r2)
 20191d4:	218cb03a 	or	r6,r4,r6
 20191d8:	11806315 	stw	r6,396(r2)
 20191dc:	003fce06 	br	2019118 <__register_exitproc+0x3c>
 20191e0:	18805304 	addi	r2,r3,332
 20191e4:	18805215 	stw	r2,328(r3)
 20191e8:	003fc606 	br	2019104 <__register_exitproc+0x28>
 20191ec:	00bfffc4 	movi	r2,-1
 20191f0:	003fd006 	br	2019134 <__register_exitproc+0x58>

020191f4 <__call_exitprocs>:
 20191f4:	defff504 	addi	sp,sp,-44
 20191f8:	df000915 	stw	fp,36(sp)
 20191fc:	dd400615 	stw	r21,24(sp)
 2019200:	dc800315 	stw	r18,12(sp)
 2019204:	dfc00a15 	stw	ra,40(sp)
 2019208:	ddc00815 	stw	r23,32(sp)
 201920c:	dd800715 	stw	r22,28(sp)
 2019210:	dd000515 	stw	r20,20(sp)
 2019214:	dcc00415 	stw	r19,16(sp)
 2019218:	dc400215 	stw	r17,8(sp)
 201921c:	dc000115 	stw	r16,4(sp)
 2019220:	d9000015 	stw	r4,0(sp)
 2019224:	2839883a 	mov	fp,r5
 2019228:	04800044 	movi	r18,1
 201922c:	057fffc4 	movi	r21,-1
 2019230:	008080b4 	movhi	r2,514
 2019234:	10acba04 	addi	r2,r2,-19736
 2019238:	12000017 	ldw	r8,0(r2)
 201923c:	45005217 	ldw	r20,328(r8)
 2019240:	44c05204 	addi	r19,r8,328
 2019244:	a0001c26 	beq	r20,zero,20192b8 <__call_exitprocs+0xc4>
 2019248:	a0800117 	ldw	r2,4(r20)
 201924c:	15ffffc4 	addi	r23,r2,-1
 2019250:	b8000d16 	blt	r23,zero,2019288 <__call_exitprocs+0x94>
 2019254:	14000044 	addi	r16,r2,1
 2019258:	8421883a 	add	r16,r16,r16
 201925c:	8421883a 	add	r16,r16,r16
 2019260:	84402004 	addi	r17,r16,128
 2019264:	a463883a 	add	r17,r20,r17
 2019268:	a421883a 	add	r16,r20,r16
 201926c:	e0001e26 	beq	fp,zero,20192e8 <__call_exitprocs+0xf4>
 2019270:	80804017 	ldw	r2,256(r16)
 2019274:	e0801c26 	beq	fp,r2,20192e8 <__call_exitprocs+0xf4>
 2019278:	bdffffc4 	addi	r23,r23,-1
 201927c:	843fff04 	addi	r16,r16,-4
 2019280:	8c7fff04 	addi	r17,r17,-4
 2019284:	bd7ff91e 	bne	r23,r21,201926c <__call_exitprocs+0x78>
 2019288:	00800034 	movhi	r2,0
 201928c:	10800004 	addi	r2,r2,0
 2019290:	10000926 	beq	r2,zero,20192b8 <__call_exitprocs+0xc4>
 2019294:	a0800117 	ldw	r2,4(r20)
 2019298:	1000301e 	bne	r2,zero,201935c <__call_exitprocs+0x168>
 201929c:	a0800017 	ldw	r2,0(r20)
 20192a0:	10003226 	beq	r2,zero,201936c <__call_exitprocs+0x178>
 20192a4:	a009883a 	mov	r4,r20
 20192a8:	98800015 	stw	r2,0(r19)
 20192ac:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 20192b0:	9d000017 	ldw	r20,0(r19)
 20192b4:	a03fe41e 	bne	r20,zero,2019248 <__call_exitprocs+0x54>
 20192b8:	dfc00a17 	ldw	ra,40(sp)
 20192bc:	df000917 	ldw	fp,36(sp)
 20192c0:	ddc00817 	ldw	r23,32(sp)
 20192c4:	dd800717 	ldw	r22,28(sp)
 20192c8:	dd400617 	ldw	r21,24(sp)
 20192cc:	dd000517 	ldw	r20,20(sp)
 20192d0:	dcc00417 	ldw	r19,16(sp)
 20192d4:	dc800317 	ldw	r18,12(sp)
 20192d8:	dc400217 	ldw	r17,8(sp)
 20192dc:	dc000117 	ldw	r16,4(sp)
 20192e0:	dec00b04 	addi	sp,sp,44
 20192e4:	f800283a 	ret
 20192e8:	a0800117 	ldw	r2,4(r20)
 20192ec:	80c00017 	ldw	r3,0(r16)
 20192f0:	10bfffc4 	addi	r2,r2,-1
 20192f4:	15c01426 	beq	r2,r23,2019348 <__call_exitprocs+0x154>
 20192f8:	80000015 	stw	zero,0(r16)
 20192fc:	183fde26 	beq	r3,zero,2019278 <__call_exitprocs+0x84>
 2019300:	95c8983a 	sll	r4,r18,r23
 2019304:	a0806217 	ldw	r2,392(r20)
 2019308:	a5800117 	ldw	r22,4(r20)
 201930c:	2084703a 	and	r2,r4,r2
 2019310:	10000b26 	beq	r2,zero,2019340 <__call_exitprocs+0x14c>
 2019314:	a0806317 	ldw	r2,396(r20)
 2019318:	2088703a 	and	r4,r4,r2
 201931c:	20000c1e 	bne	r4,zero,2019350 <__call_exitprocs+0x15c>
 2019320:	89400017 	ldw	r5,0(r17)
 2019324:	d9000017 	ldw	r4,0(sp)
 2019328:	183ee83a 	callr	r3
 201932c:	a0800117 	ldw	r2,4(r20)
 2019330:	15bfbf1e 	bne	r2,r22,2019230 <__call_exitprocs+0x3c>
 2019334:	98800017 	ldw	r2,0(r19)
 2019338:	153fcf26 	beq	r2,r20,2019278 <__call_exitprocs+0x84>
 201933c:	003fbc06 	br	2019230 <__call_exitprocs+0x3c>
 2019340:	183ee83a 	callr	r3
 2019344:	003ff906 	br	201932c <__call_exitprocs+0x138>
 2019348:	a5c00115 	stw	r23,4(r20)
 201934c:	003feb06 	br	20192fc <__call_exitprocs+0x108>
 2019350:	89000017 	ldw	r4,0(r17)
 2019354:	183ee83a 	callr	r3
 2019358:	003ff406 	br	201932c <__call_exitprocs+0x138>
 201935c:	a0800017 	ldw	r2,0(r20)
 2019360:	a027883a 	mov	r19,r20
 2019364:	1029883a 	mov	r20,r2
 2019368:	003fb606 	br	2019244 <__call_exitprocs+0x50>
 201936c:	0005883a 	mov	r2,zero
 2019370:	003ffb06 	br	2019360 <__call_exitprocs+0x16c>

02019374 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2019374:	defffd04 	addi	sp,sp,-12
 2019378:	df000215 	stw	fp,8(sp)
 201937c:	df000204 	addi	fp,sp,8
 2019380:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2019384:	d0272045 	stb	zero,-25471(gp)
 2019388:	e0bfff17 	ldw	r2,-4(fp)
 201938c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2019390:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2019394:	10000226 	beq	r2,zero,20193a0 <_exit+0x2c>
    ALT_SIM_FAIL();
 2019398:	002af070 	cmpltui	zero,zero,43969
 201939c:	00000106 	br	20193a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 20193a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20193a4:	003fff06 	br	20193a4 <_exit+0x30>
